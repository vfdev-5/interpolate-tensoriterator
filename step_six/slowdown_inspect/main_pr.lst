   1              		.file	"main_pr.cpp"
   2              	# GNU C++14 (Ubuntu 9.3.0-17ubuntu1~20.04) version 9.3.0 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   4              	
   5              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   6              	# options passed:  -I /workspace/pth-linear-interp/torch/include
   7              	# -I /pytorch/torch/include/torch/csrc/api/include
   8              	# -imultiarch x86_64-linux-gnu -D_GNU_SOURCE main_pr.cpp -mavx -mfma -mavx2
   9              	# -mtune=generic -march=x86-64 -auxbase-strip main_pr.s -g -O3
  10              	# -fverbose-asm -fasynchronous-unwind-tables -fstack-protector-strong
  11              	# -Wformat -Wformat-security -fstack-clash-protection -fcf-protection
  12              	# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
  13              	# -falign-functions -falign-jumps -falign-labels -falign-loops
  14              	# -fassume-phsa -fasynchronous-unwind-tables -fauto-inc-dec
  15              	# -fbranch-count-reg -fcaller-saves -fcode-hoisting
  16              	# -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  17              	# -fcrossjumping -fcse-follow-jumps -fdefer-pop
  18              	# -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  19              	# -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  20              	# -fexceptions -fexpensive-optimizations -fforward-propagate
  21              	# -ffp-int-builtin-inexact -ffunction-cse -fgcse -fgcse-after-reload
  22              	# -fgcse-lm -fgnu-runtime -fgnu-unique -fguess-branch-probability
  23              	# -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
  24              	# -findirect-inlining -finline -finline-atomics -finline-functions
  25              	# -finline-functions-called-once -finline-small-functions -fipa-bit-cp
  26              	# -fipa-cp -fipa-cp-clone -fipa-icf -fipa-icf-functions -fipa-icf-variables
  27              	# -fipa-profile -fipa-pure-const -fipa-ra -fipa-reference
  28              	# -fipa-reference-addressable -fipa-sra -fipa-stack-alignment -fipa-vrp
  29              	# -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  30              	# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  31              	# -fleading-underscore -flifetime-dse -floop-interchange
  32              	# -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  33              	# -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  34              	# -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  35              	# -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  36              	# -fpredictive-commoning -fprefetch-loop-arrays -free -freg-struct-return
  37              	# -freorder-blocks -freorder-blocks-and-partition -freorder-functions
  38              	# -frerun-cse-after-loop -fsched-critical-path-heuristic
  39              	# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  40              	# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  41              	# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-fusion
  42              	# -fschedule-insns2 -fsemantic-interposition -fshow-column -fshrink-wrap
  43              	# -fshrink-wrap-separate -fsigned-zeros -fsplit-ivs-in-unroller
  44              	# -fsplit-loops -fsplit-paths -fsplit-wide-types -fssa-backprop
  45              	# -fssa-phiopt -fstack-clash-protection -fstack-protector-strong
  46              	# -fstdarg-opt -fstore-merging -fstrict-aliasing
  47              	# -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  48              	# -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
  49              	# -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop -ftree-cselim
  50              	# -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  51              	# -ftree-loop-distribute-patterns -ftree-loop-distribution
  52              	# -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  53              	# -ftree-loop-optimize -ftree-loop-vectorize -ftree-parallelize-loops=
  54              	# -ftree-partial-pre -ftree-phiprop -ftree-pre -ftree-pta -ftree-reassoc
  55              	# -ftree-scev-cprop -ftree-sink -ftree-slp-vectorize -ftree-slsr -ftree-sra
  56              	# -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  57              	# -funit-at-a-time -funswitch-loops -funwind-tables -fvar-tracking
  58              	# -fvar-tracking-assignments -fverbose-asm -fversion-loops-for-strides
  59              	# -fzero-initialized-in-bss -m128bit-long-double -m64 -m80387
  60              	# -malign-stringops -mavx -mavx2 -mavx256-split-unaligned-load
  61              	# -mavx256-split-unaligned-store -mfancy-math-387 -mfma -mfp-ret-in-387
  62              	# -mfxsr -mglibc -mieee-fp -mlong-double-80 -mmmx -mpopcnt -mpush-args
  63              	# -mred-zone -msse -msse2 -msse3 -msse4 -msse4.1 -msse4.2 -mssse3 -mstv
  64              	# -mtls-direct-seg-refs -mvzeroupper -mxsave
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.section	.text._ZNK3c105Error4whatEv,"axG",@progbits,_ZNK3c105Error4whatEv,comdat
  69              		.align 2
  70              		.p2align 4
  71              		.weak	_ZNK3c105Error4whatEv
  73              	_ZNK3c105Error4whatEv:
  74              	.LVL0:
  75              	.LFB2953:
  76              		.file 1 "/workspace/pth-linear-interp/torch/include/c10/util/Exception.h"
   1:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #ifndef C10_UTIL_EXCEPTION_H_
   2:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #define C10_UTIL_EXCEPTION_H_
   3:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
   4:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <c10/macros/Macros.h>
   5:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <c10/util/StringUtil.h>
   6:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <c10/util/Deprecated.h>
   7:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
   8:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <cstddef>
   9:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <exception>
  10:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <ostream>
  11:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <sstream>
  12:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <string>
  13:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #include <vector>
  14:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  15:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #if defined(_MSC_VER) && _MSC_VER <= 1900
  16:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #define __func__ __FUNCTION__
  17:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** #endif
  18:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  19:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** namespace c10 {
  20:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  21:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// The primary ATen error class.
  22:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// Provides a complete error message with source location information via
  23:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// `what()`, and a more concise message via `what_without_backtrace()`.
  24:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// Don't throw this directly; use TORCH_CHECK/TORCH_INTERNAL_ASSERT instead.
  25:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** ///
  26:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// NB: c10::Error is handled specially by the default torch to suppress the
  27:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// backtrace, see torch/csrc/Exceptions.h
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** class C10_API Error : public std::exception {
  29:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
  30:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   std::string msg_;
  31:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  32:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // Context for the message (in order of decreasing specificity).  Context will
  33:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // be automatically formatted appropriately, so it is not necessary to add
  34:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // extra leading/trailing newlines to strings inside this vector
  35:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   std::vector<std::string> context_;
  36:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  37:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The C++ backtrace at the point when this exception was raised.  This
  38:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // may be empty if there is no valid backtrace.  (We don't use optional
  39:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // here to reduce the dependencies this file has.)
  40:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   std::string backtrace_;
  41:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  42:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // These two are derived fields from msg_stack_ and backtrace_, but we need
  43:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // fields for the strings so that we can return a const char* (as the
  44:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // signature of std::exception requires).  Currently, the invariant
  45:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // is that these fields are ALWAYS populated consistently with respect
  46:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // to msg_stack_ and backtrace_.
  47:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   std::string what_;
  48:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   std::string what_without_backtrace_;
  49:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  50:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // This is a little debugging trick: you can stash a relevant pointer
  51:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // in caller, and then when you catch the exception, you can compare
  52:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // against pointers you have on hand to get more information about
  53:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // where the exception came from.  In Caffe2, this is used to figure
  54:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // out which operator raised an exception.
  55:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   const void* caller_;
  56:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  57:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****  public:
  58:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // PyTorch-style Error constructor.  NB: the implementation of this
  59:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // is actually in Logging.cpp
  60:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   Error(SourceLocation source_location, std::string msg);
  61:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  62:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // Caffe2-style error message
  63:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   Error(
  64:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const char* file,
  65:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const uint32_t line,
  66:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const char* condition,
  67:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const std::string& msg,
  68:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const std::string& backtrace,
  69:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const void* caller = nullptr);
  70:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  71:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // Base constructor
  72:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   Error(
  73:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       std::string msg,
  74:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       std::string backtrace,
  75:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const void* caller = nullptr);
  76:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  77:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // Add some new context to the message stack.  The last added context
  78:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // will be formatted at the end of the context list upon printing.
  79:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // WARNING: This method is O(n) in the size of the stack, so don't go
  80:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // wild adding a ridiculous amount of context to error messages.
  81:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   void add_context(std::string msg);
  82:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  83:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   const std::string& msg() const {
  84:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return msg_;
  85:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   }
  86:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  87:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   const std::vector<std::string>& context() const {
  88:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return context_;
  89:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   }
  90:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  91:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   const std::string& backtrace() const {
  92:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return backtrace_;
  93:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   }
  94:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
  95:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   /// Returns the complete error message, including the source location.
  96:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   /// The returned pointer is invalidated if you call add_context() on
  97:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   /// this object.
  98:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   const char* what() const noexcept override {
  77              		.loc 1 98 15 view -0
  78              		.cfi_startproc
  79              		.loc 1 98 15 is_stmt 0 view .LVU1
  80 0000 F30F1EFA 		endbr64	
  99:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return what_.c_str();
  81              		.loc 1 99 5 is_stmt 1 view .LVU2
  82              	.LVL1:
  83              	.LBB3770:
  84              	.LBI3770:
  85              		.file 2 "/usr/include/c++/9/bits/basic_string.h"
   1:/usr/include/c++/9/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/9/bits/basic_string.h **** 
   3:/usr/include/c++/9/bits/basic_string.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/basic_string.h **** //
   5:/usr/include/c++/9/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/9/bits/basic_string.h **** 
  11:/usr/include/c++/9/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/basic_string.h **** 
  16:/usr/include/c++/9/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/basic_string.h **** 
  20:/usr/include/c++/9/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/basic_string.h **** 
  25:/usr/include/c++/9/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/9/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/9/bits/basic_string.h ****  */
  29:/usr/include/c++/9/bits/basic_string.h **** 
  30:/usr/include/c++/9/bits/basic_string.h **** //
  31:/usr/include/c++/9/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/9/bits/basic_string.h **** //
  33:/usr/include/c++/9/bits/basic_string.h **** 
  34:/usr/include/c++/9/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/9/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/9/bits/basic_string.h **** 
  37:/usr/include/c++/9/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/9/bits/basic_string.h **** 
  39:/usr/include/c++/9/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/9/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/9/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/9/bits/basic_string.h **** 
  43:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/c++/9/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/c++/9/bits/basic_string.h **** #endif
  46:/usr/include/c++/9/bits/basic_string.h **** 
  47:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/usr/include/c++/9/bits/basic_string.h **** # include <string_view>
  49:/usr/include/c++/9/bits/basic_string.h **** #endif
  50:/usr/include/c++/9/bits/basic_string.h **** 
  51:/usr/include/c++/9/bits/basic_string.h **** 
  52:/usr/include/c++/9/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/9/bits/basic_string.h **** {
  54:/usr/include/c++/9/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/9/bits/basic_string.h **** 
  56:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  57:/usr/include/c++/9/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  58:/usr/include/c++/9/bits/basic_string.h ****   /**
  59:/usr/include/c++/9/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  60:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  61:/usr/include/c++/9/bits/basic_string.h ****    *
  62:/usr/include/c++/9/bits/basic_string.h ****    *  @ingroup strings
  63:/usr/include/c++/9/bits/basic_string.h ****    *  @ingroup sequences
  64:/usr/include/c++/9/bits/basic_string.h ****    *
  65:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  66:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  67:/usr/include/c++/9/bits/basic_string.h ****    *                   char_traits<_CharT>.
  68:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  69:/usr/include/c++/9/bits/basic_string.h ****    *
  70:/usr/include/c++/9/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  71:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  72:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  73:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  74:/usr/include/c++/9/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  75:/usr/include/c++/9/bits/basic_string.h ****    */
  76:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  77:/usr/include/c++/9/bits/basic_string.h ****     class basic_string
  78:/usr/include/c++/9/bits/basic_string.h ****     {
  79:/usr/include/c++/9/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  80:/usr/include/c++/9/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  81:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  82:/usr/include/c++/9/bits/basic_string.h **** 
  83:/usr/include/c++/9/bits/basic_string.h ****       // Types:
  84:/usr/include/c++/9/bits/basic_string.h ****     public:
  85:/usr/include/c++/9/bits/basic_string.h ****       typedef _Traits					traits_type;
  86:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  87:/usr/include/c++/9/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  88:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  89:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  90:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  91:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  92:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  93:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  94:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  95:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  96:/usr/include/c++/9/bits/basic_string.h **** 							const_iterator;
  97:/usr/include/c++/9/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  98:/usr/include/c++/9/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  99:/usr/include/c++/9/bits/basic_string.h **** 
 100:/usr/include/c++/9/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 101:/usr/include/c++/9/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 102:/usr/include/c++/9/bits/basic_string.h **** 
 103:/usr/include/c++/9/bits/basic_string.h ****     protected:
 104:/usr/include/c++/9/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 105:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus < 201103L
 106:/usr/include/c++/9/bits/basic_string.h ****       typedef iterator __const_iterator;
 107:/usr/include/c++/9/bits/basic_string.h **** #else
 108:/usr/include/c++/9/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 109:/usr/include/c++/9/bits/basic_string.h **** #endif
 110:/usr/include/c++/9/bits/basic_string.h **** 
 111:/usr/include/c++/9/bits/basic_string.h ****     private:
 112:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
 113:/usr/include/c++/9/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 114:/usr/include/c++/9/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 115:/usr/include/c++/9/bits/basic_string.h **** 
 116:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 117:/usr/include/c++/9/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 118:/usr/include/c++/9/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 119:/usr/include/c++/9/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 120:/usr/include/c++/9/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 121:/usr/include/c++/9/bits/basic_string.h **** 	  _Res>;
 122:/usr/include/c++/9/bits/basic_string.h **** 
 123:/usr/include/c++/9/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 124:/usr/include/c++/9/bits/basic_string.h ****       static __sv_type
 125:/usr/include/c++/9/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 126:/usr/include/c++/9/bits/basic_string.h ****       { return __svt; }
 127:/usr/include/c++/9/bits/basic_string.h **** 
 128:/usr/include/c++/9/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 129:/usr/include/c++/9/bits/basic_string.h ****       // allows to add an internal constructor that does not
 130:/usr/include/c++/9/bits/basic_string.h ****       // participate in overload resolution when a string_view
 131:/usr/include/c++/9/bits/basic_string.h ****       // is provided.
 132:/usr/include/c++/9/bits/basic_string.h ****       struct __sv_wrapper
 133:/usr/include/c++/9/bits/basic_string.h ****       {
 134:/usr/include/c++/9/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 135:/usr/include/c++/9/bits/basic_string.h **** 	__sv_type _M_sv;
 136:/usr/include/c++/9/bits/basic_string.h ****       };
 137:/usr/include/c++/9/bits/basic_string.h **** 
 138:/usr/include/c++/9/bits/basic_string.h ****       /**
 139:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 140:/usr/include/c++/9/bits/basic_string.h ****        *          wrapper.
 141:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 142:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 143:/usr/include/c++/9/bits/basic_string.h ****        */
 144:/usr/include/c++/9/bits/basic_string.h ****       explicit
 145:/usr/include/c++/9/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 146:/usr/include/c++/9/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 147:/usr/include/c++/9/bits/basic_string.h **** #endif
 148:/usr/include/c++/9/bits/basic_string.h **** 
 149:/usr/include/c++/9/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 150:/usr/include/c++/9/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 151:/usr/include/c++/9/bits/basic_string.h ****       {
 152:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus < 201103L
 153:/usr/include/c++/9/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 154:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 155:/usr/include/c++/9/bits/basic_string.h **** #else
 156:/usr/include/c++/9/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 157:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 158:/usr/include/c++/9/bits/basic_string.h **** 
 159:/usr/include/c++/9/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 160:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 161:/usr/include/c++/9/bits/basic_string.h **** #endif
 162:/usr/include/c++/9/bits/basic_string.h **** 
 163:/usr/include/c++/9/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 164:/usr/include/c++/9/bits/basic_string.h ****       };
 165:/usr/include/c++/9/bits/basic_string.h **** 
 166:/usr/include/c++/9/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 167:/usr/include/c++/9/bits/basic_string.h ****       size_type		_M_string_length;
 168:/usr/include/c++/9/bits/basic_string.h **** 
 169:/usr/include/c++/9/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 170:/usr/include/c++/9/bits/basic_string.h **** 
 171:/usr/include/c++/9/bits/basic_string.h ****       union
 172:/usr/include/c++/9/bits/basic_string.h ****       {
 173:/usr/include/c++/9/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 174:/usr/include/c++/9/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 175:/usr/include/c++/9/bits/basic_string.h ****       };
 176:/usr/include/c++/9/bits/basic_string.h **** 
 177:/usr/include/c++/9/bits/basic_string.h ****       void
 178:/usr/include/c++/9/bits/basic_string.h ****       _M_data(pointer __p)
 179:/usr/include/c++/9/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 180:/usr/include/c++/9/bits/basic_string.h **** 
 181:/usr/include/c++/9/bits/basic_string.h ****       void
 182:/usr/include/c++/9/bits/basic_string.h ****       _M_length(size_type __length)
 183:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 184:/usr/include/c++/9/bits/basic_string.h **** 
 185:/usr/include/c++/9/bits/basic_string.h ****       pointer
 186:/usr/include/c++/9/bits/basic_string.h ****       _M_data() const
 187:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 188:/usr/include/c++/9/bits/basic_string.h **** 
 189:/usr/include/c++/9/bits/basic_string.h ****       pointer
 190:/usr/include/c++/9/bits/basic_string.h ****       _M_local_data()
 191:/usr/include/c++/9/bits/basic_string.h ****       {
 192:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 193:/usr/include/c++/9/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 194:/usr/include/c++/9/bits/basic_string.h **** #else
 195:/usr/include/c++/9/bits/basic_string.h **** 	return pointer(_M_local_buf);
 196:/usr/include/c++/9/bits/basic_string.h **** #endif
 197:/usr/include/c++/9/bits/basic_string.h ****       }
 198:/usr/include/c++/9/bits/basic_string.h **** 
 199:/usr/include/c++/9/bits/basic_string.h ****       const_pointer
 200:/usr/include/c++/9/bits/basic_string.h ****       _M_local_data() const
 201:/usr/include/c++/9/bits/basic_string.h ****       {
 202:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 203:/usr/include/c++/9/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 204:/usr/include/c++/9/bits/basic_string.h **** #else
 205:/usr/include/c++/9/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 206:/usr/include/c++/9/bits/basic_string.h **** #endif
 207:/usr/include/c++/9/bits/basic_string.h ****       }
 208:/usr/include/c++/9/bits/basic_string.h **** 
 209:/usr/include/c++/9/bits/basic_string.h ****       void
 210:/usr/include/c++/9/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 211:/usr/include/c++/9/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 212:/usr/include/c++/9/bits/basic_string.h **** 
 213:/usr/include/c++/9/bits/basic_string.h ****       void
 214:/usr/include/c++/9/bits/basic_string.h ****       _M_set_length(size_type __n)
 215:/usr/include/c++/9/bits/basic_string.h ****       {
 216:/usr/include/c++/9/bits/basic_string.h **** 	_M_length(__n);
 217:/usr/include/c++/9/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 218:/usr/include/c++/9/bits/basic_string.h ****       }
 219:/usr/include/c++/9/bits/basic_string.h **** 
 220:/usr/include/c++/9/bits/basic_string.h ****       bool
 221:/usr/include/c++/9/bits/basic_string.h ****       _M_is_local() const
 222:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 223:/usr/include/c++/9/bits/basic_string.h **** 
 224:/usr/include/c++/9/bits/basic_string.h ****       // Create & Destroy
 225:/usr/include/c++/9/bits/basic_string.h ****       pointer
 226:/usr/include/c++/9/bits/basic_string.h ****       _M_create(size_type&, size_type);
 227:/usr/include/c++/9/bits/basic_string.h **** 
 228:/usr/include/c++/9/bits/basic_string.h ****       void
 229:/usr/include/c++/9/bits/basic_string.h ****       _M_dispose()
 230:/usr/include/c++/9/bits/basic_string.h ****       {
 231:/usr/include/c++/9/bits/basic_string.h **** 	if (!_M_is_local())
 232:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 233:/usr/include/c++/9/bits/basic_string.h ****       }
 234:/usr/include/c++/9/bits/basic_string.h **** 
 235:/usr/include/c++/9/bits/basic_string.h ****       void
 236:/usr/include/c++/9/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 237:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 238:/usr/include/c++/9/bits/basic_string.h **** 
 239:/usr/include/c++/9/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 240:/usr/include/c++/9/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 241:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InIterator>
 242:/usr/include/c++/9/bits/basic_string.h ****         void
 243:/usr/include/c++/9/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 244:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 245:/usr/include/c++/9/bits/basic_string.h **** 	{
 246:/usr/include/c++/9/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 247:/usr/include/c++/9/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 248:/usr/include/c++/9/bits/basic_string.h **** 	}
 249:/usr/include/c++/9/bits/basic_string.h **** 
 250:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 251:/usr/include/c++/9/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 252:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Integer>
 253:/usr/include/c++/9/bits/basic_string.h ****         void
 254:/usr/include/c++/9/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 255:/usr/include/c++/9/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 256:/usr/include/c++/9/bits/basic_string.h **** 
 257:/usr/include/c++/9/bits/basic_string.h ****       void
 258:/usr/include/c++/9/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 259:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__req, __c); }
 260:/usr/include/c++/9/bits/basic_string.h **** 
 261:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InIterator>
 262:/usr/include/c++/9/bits/basic_string.h ****         void
 263:/usr/include/c++/9/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 264:/usr/include/c++/9/bits/basic_string.h **** 	{
 265:/usr/include/c++/9/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 266:/usr/include/c++/9/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 267:/usr/include/c++/9/bits/basic_string.h ****         }
 268:/usr/include/c++/9/bits/basic_string.h **** 
 269:/usr/include/c++/9/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 270:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InIterator>
 271:/usr/include/c++/9/bits/basic_string.h ****         void
 272:/usr/include/c++/9/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 273:/usr/include/c++/9/bits/basic_string.h **** 		     std::input_iterator_tag);
 274:/usr/include/c++/9/bits/basic_string.h **** 
 275:/usr/include/c++/9/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 276:/usr/include/c++/9/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 277:/usr/include/c++/9/bits/basic_string.h ****       template<typename _FwdIterator>
 278:/usr/include/c++/9/bits/basic_string.h ****         void
 279:/usr/include/c++/9/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 280:/usr/include/c++/9/bits/basic_string.h **** 		     std::forward_iterator_tag);
 281:/usr/include/c++/9/bits/basic_string.h **** 
 282:/usr/include/c++/9/bits/basic_string.h ****       void
 283:/usr/include/c++/9/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 284:/usr/include/c++/9/bits/basic_string.h **** 
 285:/usr/include/c++/9/bits/basic_string.h ****       allocator_type&
 286:/usr/include/c++/9/bits/basic_string.h ****       _M_get_allocator()
 287:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 288:/usr/include/c++/9/bits/basic_string.h **** 
 289:/usr/include/c++/9/bits/basic_string.h ****       const allocator_type&
 290:/usr/include/c++/9/bits/basic_string.h ****       _M_get_allocator() const
 291:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 292:/usr/include/c++/9/bits/basic_string.h **** 
 293:/usr/include/c++/9/bits/basic_string.h ****     private:
 294:/usr/include/c++/9/bits/basic_string.h **** 
 295:/usr/include/c++/9/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 296:/usr/include/c++/9/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 297:/usr/include/c++/9/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 298:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 299:/usr/include/c++/9/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 300:/usr/include/c++/9/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 301:/usr/include/c++/9/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 302:/usr/include/c++/9/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 303:/usr/include/c++/9/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 304:/usr/include/c++/9/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 305:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
 306:/usr/include/c++/9/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 307:/usr/include/c++/9/bits/basic_string.h **** #endif
 308:/usr/include/c++/9/bits/basic_string.h **** 
 309:/usr/include/c++/9/bits/basic_string.h ****       size_type
 310:/usr/include/c++/9/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 311:/usr/include/c++/9/bits/basic_string.h ****       {
 312:/usr/include/c++/9/bits/basic_string.h **** 	if (__pos > this->size())
 313:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 314:/usr/include/c++/9/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 315:/usr/include/c++/9/bits/basic_string.h **** 				   __s, __pos, this->size());
 316:/usr/include/c++/9/bits/basic_string.h **** 	return __pos;
 317:/usr/include/c++/9/bits/basic_string.h ****       }
 318:/usr/include/c++/9/bits/basic_string.h **** 
 319:/usr/include/c++/9/bits/basic_string.h ****       void
 320:/usr/include/c++/9/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 321:/usr/include/c++/9/bits/basic_string.h ****       {
 322:/usr/include/c++/9/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 323:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 324:/usr/include/c++/9/bits/basic_string.h ****       }
 325:/usr/include/c++/9/bits/basic_string.h **** 
 326:/usr/include/c++/9/bits/basic_string.h **** 
 327:/usr/include/c++/9/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 328:/usr/include/c++/9/bits/basic_string.h ****       size_type
 329:/usr/include/c++/9/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 330:/usr/include/c++/9/bits/basic_string.h ****       {
 331:/usr/include/c++/9/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 332:/usr/include/c++/9/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 333:/usr/include/c++/9/bits/basic_string.h ****       }
 334:/usr/include/c++/9/bits/basic_string.h **** 
 335:/usr/include/c++/9/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 336:/usr/include/c++/9/bits/basic_string.h ****       bool
 337:/usr/include/c++/9/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 338:/usr/include/c++/9/bits/basic_string.h ****       {
 339:/usr/include/c++/9/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 340:/usr/include/c++/9/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 341:/usr/include/c++/9/bits/basic_string.h ****       }
 342:/usr/include/c++/9/bits/basic_string.h **** 
 343:/usr/include/c++/9/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 344:/usr/include/c++/9/bits/basic_string.h ****       // traits_type::copy/move/assign.
 345:/usr/include/c++/9/bits/basic_string.h ****       static void
 346:/usr/include/c++/9/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 347:/usr/include/c++/9/bits/basic_string.h ****       {
 348:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
 349:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 350:/usr/include/c++/9/bits/basic_string.h **** 	else
 351:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 352:/usr/include/c++/9/bits/basic_string.h ****       }
 353:/usr/include/c++/9/bits/basic_string.h **** 
 354:/usr/include/c++/9/bits/basic_string.h ****       static void
 355:/usr/include/c++/9/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 356:/usr/include/c++/9/bits/basic_string.h ****       {
 357:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
 358:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 359:/usr/include/c++/9/bits/basic_string.h **** 	else
 360:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 361:/usr/include/c++/9/bits/basic_string.h ****       }
 362:/usr/include/c++/9/bits/basic_string.h **** 
 363:/usr/include/c++/9/bits/basic_string.h ****       static void
 364:/usr/include/c++/9/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 365:/usr/include/c++/9/bits/basic_string.h ****       {
 366:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
 367:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 368:/usr/include/c++/9/bits/basic_string.h **** 	else
 369:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 370:/usr/include/c++/9/bits/basic_string.h ****       }
 371:/usr/include/c++/9/bits/basic_string.h **** 
 372:/usr/include/c++/9/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 373:/usr/include/c++/9/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 374:/usr/include/c++/9/bits/basic_string.h ****       template<class _Iterator>
 375:/usr/include/c++/9/bits/basic_string.h ****         static void
 376:/usr/include/c++/9/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 377:/usr/include/c++/9/bits/basic_string.h ****         {
 378:/usr/include/c++/9/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 379:/usr/include/c++/9/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 380:/usr/include/c++/9/bits/basic_string.h **** 	}
 381:/usr/include/c++/9/bits/basic_string.h **** 
 382:/usr/include/c++/9/bits/basic_string.h ****       static void
 383:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 384:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 385:/usr/include/c++/9/bits/basic_string.h **** 
 386:/usr/include/c++/9/bits/basic_string.h ****       static void
 387:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 388:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 389:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 390:/usr/include/c++/9/bits/basic_string.h **** 
 391:/usr/include/c++/9/bits/basic_string.h ****       static void
 392:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 393:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 394:/usr/include/c++/9/bits/basic_string.h **** 
 395:/usr/include/c++/9/bits/basic_string.h ****       static void
 396:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 397:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 398:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 399:/usr/include/c++/9/bits/basic_string.h **** 
 400:/usr/include/c++/9/bits/basic_string.h ****       static int
 401:/usr/include/c++/9/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 402:/usr/include/c++/9/bits/basic_string.h ****       {
 403:/usr/include/c++/9/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 404:/usr/include/c++/9/bits/basic_string.h **** 
 405:/usr/include/c++/9/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 406:/usr/include/c++/9/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 407:/usr/include/c++/9/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 408:/usr/include/c++/9/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 409:/usr/include/c++/9/bits/basic_string.h **** 	else
 410:/usr/include/c++/9/bits/basic_string.h **** 	  return int(__d);
 411:/usr/include/c++/9/bits/basic_string.h ****       }
 412:/usr/include/c++/9/bits/basic_string.h **** 
 413:/usr/include/c++/9/bits/basic_string.h ****       void
 414:/usr/include/c++/9/bits/basic_string.h ****       _M_assign(const basic_string&);
 415:/usr/include/c++/9/bits/basic_string.h **** 
 416:/usr/include/c++/9/bits/basic_string.h ****       void
 417:/usr/include/c++/9/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 418:/usr/include/c++/9/bits/basic_string.h **** 		size_type __len2);
 419:/usr/include/c++/9/bits/basic_string.h **** 
 420:/usr/include/c++/9/bits/basic_string.h ****       void
 421:/usr/include/c++/9/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 422:/usr/include/c++/9/bits/basic_string.h **** 
 423:/usr/include/c++/9/bits/basic_string.h ****     public:
 424:/usr/include/c++/9/bits/basic_string.h ****       // Construct/copy/destroy:
 425:/usr/include/c++/9/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 426:/usr/include/c++/9/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 427:/usr/include/c++/9/bits/basic_string.h **** 
 428:/usr/include/c++/9/bits/basic_string.h ****       /**
 429:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 430:/usr/include/c++/9/bits/basic_string.h ****        */
 431:/usr/include/c++/9/bits/basic_string.h ****       basic_string()
 432:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 433:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 434:/usr/include/c++/9/bits/basic_string.h ****       { _M_set_length(0); }
 435:/usr/include/c++/9/bits/basic_string.h **** 
 436:/usr/include/c++/9/bits/basic_string.h ****       /**
 437:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 438:/usr/include/c++/9/bits/basic_string.h ****        */
 439:/usr/include/c++/9/bits/basic_string.h ****       explicit
 440:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 441:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 442:/usr/include/c++/9/bits/basic_string.h ****       { _M_set_length(0); }
 443:/usr/include/c++/9/bits/basic_string.h **** 
 444:/usr/include/c++/9/bits/basic_string.h ****       /**
 445:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 446:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 447:/usr/include/c++/9/bits/basic_string.h ****        */
 448:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str)
 449:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 450:/usr/include/c++/9/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 451:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 452:/usr/include/c++/9/bits/basic_string.h **** 
 453:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 454:/usr/include/c++/9/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 455:/usr/include/c++/9/bits/basic_string.h ****       /**
 456:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 457:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 458:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 459:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 460:/usr/include/c++/9/bits/basic_string.h ****        */
 461:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 462:/usr/include/c++/9/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 463:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 464:/usr/include/c++/9/bits/basic_string.h ****       {
 465:/usr/include/c++/9/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 466:/usr/include/c++/9/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 467:/usr/include/c++/9/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 468:/usr/include/c++/9/bits/basic_string.h ****       }
 469:/usr/include/c++/9/bits/basic_string.h **** 
 470:/usr/include/c++/9/bits/basic_string.h ****       /**
 471:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 472:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 473:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 474:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 475:/usr/include/c++/9/bits/basic_string.h ****        */
 476:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 477:/usr/include/c++/9/bits/basic_string.h **** 		   size_type __n)
 478:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 479:/usr/include/c++/9/bits/basic_string.h ****       {
 480:/usr/include/c++/9/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 481:/usr/include/c++/9/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 482:/usr/include/c++/9/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 483:/usr/include/c++/9/bits/basic_string.h ****       }
 484:/usr/include/c++/9/bits/basic_string.h **** 
 485:/usr/include/c++/9/bits/basic_string.h ****       /**
 486:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 487:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 488:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 489:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 490:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 491:/usr/include/c++/9/bits/basic_string.h ****        */
 492:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 493:/usr/include/c++/9/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 494:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 495:/usr/include/c++/9/bits/basic_string.h ****       {
 496:/usr/include/c++/9/bits/basic_string.h **** 	const _CharT* __start
 497:/usr/include/c++/9/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 498:/usr/include/c++/9/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 499:/usr/include/c++/9/bits/basic_string.h ****       }
 500:/usr/include/c++/9/bits/basic_string.h **** 
 501:/usr/include/c++/9/bits/basic_string.h ****       /**
 502:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 503:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source character %array.
 504:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 505:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 506:/usr/include/c++/9/bits/basic_string.h ****        *
 507:/usr/include/c++/9/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 508:/usr/include/c++/9/bits/basic_string.h ****        *  has no special meaning.
 509:/usr/include/c++/9/bits/basic_string.h ****        */
 510:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 511:/usr/include/c++/9/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 512:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 513:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 514:/usr/include/c++/9/bits/basic_string.h **** 
 515:/usr/include/c++/9/bits/basic_string.h ****       /**
 516:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 517:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source C string.
 518:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 519:/usr/include/c++/9/bits/basic_string.h ****        */
 520:/usr/include/c++/9/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 521:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:/usr/include/c++/9/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 523:/usr/include/c++/9/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 524:/usr/include/c++/9/bits/basic_string.h **** #endif
 525:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 526:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 527:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 528:/usr/include/c++/9/bits/basic_string.h **** 
 529:/usr/include/c++/9/bits/basic_string.h ****       /**
 530:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 531:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters.
 532:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __c  Character to use.
 533:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 534:/usr/include/c++/9/bits/basic_string.h ****        */
 535:/usr/include/c++/9/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 536:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 537:/usr/include/c++/9/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 538:/usr/include/c++/9/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 539:/usr/include/c++/9/bits/basic_string.h **** #endif
 540:/usr/include/c++/9/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 541:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 542:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__n, __c); }
 543:/usr/include/c++/9/bits/basic_string.h **** 
 544:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 545:/usr/include/c++/9/bits/basic_string.h ****       /**
 546:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Move construct string.
 547:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 548:/usr/include/c++/9/bits/basic_string.h ****        *
 549:/usr/include/c++/9/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 550:/usr/include/c++/9/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 551:/usr/include/c++/9/bits/basic_string.h ****        **/
 552:/usr/include/c++/9/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 553:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 554:/usr/include/c++/9/bits/basic_string.h ****       {
 555:/usr/include/c++/9/bits/basic_string.h **** 	if (__str._M_is_local())
 556:/usr/include/c++/9/bits/basic_string.h **** 	  {
 557:/usr/include/c++/9/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 558:/usr/include/c++/9/bits/basic_string.h **** 			      _S_local_capacity + 1);
 559:/usr/include/c++/9/bits/basic_string.h **** 	  }
 560:/usr/include/c++/9/bits/basic_string.h **** 	else
 561:/usr/include/c++/9/bits/basic_string.h **** 	  {
 562:/usr/include/c++/9/bits/basic_string.h **** 	    _M_data(__str._M_data());
 563:/usr/include/c++/9/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 564:/usr/include/c++/9/bits/basic_string.h **** 	  }
 565:/usr/include/c++/9/bits/basic_string.h **** 
 566:/usr/include/c++/9/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 567:/usr/include/c++/9/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 568:/usr/include/c++/9/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 569:/usr/include/c++/9/bits/basic_string.h **** 	_M_length(__str.length());
 570:/usr/include/c++/9/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 571:/usr/include/c++/9/bits/basic_string.h **** 	__str._M_set_length(0);
 572:/usr/include/c++/9/bits/basic_string.h ****       }
 573:/usr/include/c++/9/bits/basic_string.h **** 
 574:/usr/include/c++/9/bits/basic_string.h ****       /**
 575:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 576:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 577:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 578:/usr/include/c++/9/bits/basic_string.h ****        */
 579:/usr/include/c++/9/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 580:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 581:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 582:/usr/include/c++/9/bits/basic_string.h **** 
 583:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 584:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 585:/usr/include/c++/9/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 586:/usr/include/c++/9/bits/basic_string.h **** 
 587:/usr/include/c++/9/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 588:/usr/include/c++/9/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 589:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 590:/usr/include/c++/9/bits/basic_string.h ****       {
 591:/usr/include/c++/9/bits/basic_string.h **** 	if (__str._M_is_local())
 592:/usr/include/c++/9/bits/basic_string.h **** 	  {
 593:/usr/include/c++/9/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 594:/usr/include/c++/9/bits/basic_string.h **** 			      _S_local_capacity + 1);
 595:/usr/include/c++/9/bits/basic_string.h **** 	    _M_length(__str.length());
 596:/usr/include/c++/9/bits/basic_string.h **** 	    __str._M_set_length(0);
 597:/usr/include/c++/9/bits/basic_string.h **** 	  }
 598:/usr/include/c++/9/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 599:/usr/include/c++/9/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 600:/usr/include/c++/9/bits/basic_string.h **** 	  {
 601:/usr/include/c++/9/bits/basic_string.h **** 	    _M_data(__str._M_data());
 602:/usr/include/c++/9/bits/basic_string.h **** 	    _M_length(__str.length());
 603:/usr/include/c++/9/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 604:/usr/include/c++/9/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 605:/usr/include/c++/9/bits/basic_string.h **** 	    __str._M_set_length(0);
 606:/usr/include/c++/9/bits/basic_string.h **** 	  }
 607:/usr/include/c++/9/bits/basic_string.h **** 	else
 608:/usr/include/c++/9/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 609:/usr/include/c++/9/bits/basic_string.h ****       }
 610:/usr/include/c++/9/bits/basic_string.h **** 
 611:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
 612:/usr/include/c++/9/bits/basic_string.h **** 
 613:/usr/include/c++/9/bits/basic_string.h ****       /**
 614:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 615:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __beg  Start of range.
 616:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __end  End of range.
 617:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 618:/usr/include/c++/9/bits/basic_string.h ****        */
 619:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 620:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InputIterator,
 621:/usr/include/c++/9/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 622:/usr/include/c++/9/bits/basic_string.h **** #else
 623:/usr/include/c++/9/bits/basic_string.h ****       template<typename _InputIterator>
 624:/usr/include/c++/9/bits/basic_string.h **** #endif
 625:/usr/include/c++/9/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 626:/usr/include/c++/9/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 627:/usr/include/c++/9/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 628:/usr/include/c++/9/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 629:/usr/include/c++/9/bits/basic_string.h **** 
 630:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
 631:/usr/include/c++/9/bits/basic_string.h ****       /**
 632:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 633:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 634:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 635:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 636:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 637:/usr/include/c++/9/bits/basic_string.h ****        */
 638:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 639:/usr/include/c++/9/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 640:/usr/include/c++/9/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 641:/usr/include/c++/9/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 642:/usr/include/c++/9/bits/basic_string.h **** 
 643:/usr/include/c++/9/bits/basic_string.h ****       /**
 644:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 645:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 646:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 647:/usr/include/c++/9/bits/basic_string.h ****        */
 648:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 649:/usr/include/c++/9/bits/basic_string.h **** 	explicit
 650:/usr/include/c++/9/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 651:/usr/include/c++/9/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 652:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
 653:/usr/include/c++/9/bits/basic_string.h **** 
 654:/usr/include/c++/9/bits/basic_string.h ****       /**
 655:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 656:/usr/include/c++/9/bits/basic_string.h ****        */
 657:/usr/include/c++/9/bits/basic_string.h ****       ~basic_string()
 658:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 659:/usr/include/c++/9/bits/basic_string.h **** 
 660:/usr/include/c++/9/bits/basic_string.h ****       /**
 661:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 662:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 663:/usr/include/c++/9/bits/basic_string.h ****        */
 664:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
 665:/usr/include/c++/9/bits/basic_string.h ****       operator=(const basic_string& __str)
 666:/usr/include/c++/9/bits/basic_string.h ****       {
 667:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 668:/usr/include/c++/9/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
 669:/usr/include/c++/9/bits/basic_string.h **** 	  {
 670:/usr/include/c++/9/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 671:/usr/include/c++/9/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
 672:/usr/include/c++/9/bits/basic_string.h **** 	      {
 673:/usr/include/c++/9/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
 674:/usr/include/c++/9/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
 675:/usr/include/c++/9/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
 676:/usr/include/c++/9/bits/basic_string.h **** 		  {
 677:/usr/include/c++/9/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 678:/usr/include/c++/9/bits/basic_string.h **** 		    _M_data(_M_local_data());
 679:/usr/include/c++/9/bits/basic_string.h **** 		    _M_set_length(0);
 680:/usr/include/c++/9/bits/basic_string.h **** 		  }
 681:/usr/include/c++/9/bits/basic_string.h **** 		else
 682:/usr/include/c++/9/bits/basic_string.h **** 		  {
 683:/usr/include/c++/9/bits/basic_string.h **** 		    const auto __len = __str.size();
 684:/usr/include/c++/9/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
 685:/usr/include/c++/9/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
 686:/usr/include/c++/9/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
 687:/usr/include/c++/9/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 688:/usr/include/c++/9/bits/basic_string.h **** 		    _M_data(__ptr);
 689:/usr/include/c++/9/bits/basic_string.h **** 		    _M_capacity(__len);
 690:/usr/include/c++/9/bits/basic_string.h **** 		    _M_set_length(__len);
 691:/usr/include/c++/9/bits/basic_string.h **** 		  }
 692:/usr/include/c++/9/bits/basic_string.h **** 	      }
 693:/usr/include/c++/9/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
 694:/usr/include/c++/9/bits/basic_string.h **** 	  }
 695:/usr/include/c++/9/bits/basic_string.h **** #endif
 696:/usr/include/c++/9/bits/basic_string.h **** 	return this->assign(__str);
 697:/usr/include/c++/9/bits/basic_string.h ****       }
 698:/usr/include/c++/9/bits/basic_string.h **** 
 699:/usr/include/c++/9/bits/basic_string.h ****       /**
 700:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 701:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 702:/usr/include/c++/9/bits/basic_string.h ****        */
 703:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
 704:/usr/include/c++/9/bits/basic_string.h ****       operator=(const _CharT* __s)
 705:/usr/include/c++/9/bits/basic_string.h ****       { return this->assign(__s); }
 706:/usr/include/c++/9/bits/basic_string.h **** 
 707:/usr/include/c++/9/bits/basic_string.h ****       /**
 708:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 709:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __c  Source character.
 710:/usr/include/c++/9/bits/basic_string.h ****        *
 711:/usr/include/c++/9/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 712:/usr/include/c++/9/bits/basic_string.h ****        *  (*this)[0] == @a c.
 713:/usr/include/c++/9/bits/basic_string.h ****        */
 714:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
 715:/usr/include/c++/9/bits/basic_string.h ****       operator=(_CharT __c)
 716:/usr/include/c++/9/bits/basic_string.h ****       {
 717:/usr/include/c++/9/bits/basic_string.h **** 	this->assign(1, __c);
 718:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 719:/usr/include/c++/9/bits/basic_string.h ****       }
 720:/usr/include/c++/9/bits/basic_string.h **** 
 721:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 722:/usr/include/c++/9/bits/basic_string.h ****       /**
 723:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 724:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
 725:/usr/include/c++/9/bits/basic_string.h ****        *
 726:/usr/include/c++/9/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 727:/usr/include/c++/9/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 728:/usr/include/c++/9/bits/basic_string.h ****        **/
 729:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 730:/usr/include/c++/9/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 731:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
 732:/usr/include/c++/9/bits/basic_string.h ****       operator=(basic_string&& __str)
 733:/usr/include/c++/9/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 734:/usr/include/c++/9/bits/basic_string.h ****       {
 735:/usr/include/c++/9/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 736:/usr/include/c++/9/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 737:/usr/include/c++/9/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 738:/usr/include/c++/9/bits/basic_string.h **** 	  {
 739:/usr/include/c++/9/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 740:/usr/include/c++/9/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 741:/usr/include/c++/9/bits/basic_string.h **** 	    _M_data(_M_local_data());
 742:/usr/include/c++/9/bits/basic_string.h **** 	    _M_set_length(0);
 743:/usr/include/c++/9/bits/basic_string.h **** 	  }
 744:/usr/include/c++/9/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 745:/usr/include/c++/9/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 746:/usr/include/c++/9/bits/basic_string.h **** 
 747:/usr/include/c++/9/bits/basic_string.h **** 	if (__str._M_is_local())
 748:/usr/include/c++/9/bits/basic_string.h **** 	  {
 749:/usr/include/c++/9/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it.
 750:/usr/include/c++/9/bits/basic_string.h **** 	    if (__str.size())
 751:/usr/include/c++/9/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 752:/usr/include/c++/9/bits/basic_string.h **** 	    _M_set_length(__str.size());
 753:/usr/include/c++/9/bits/basic_string.h **** 	  }
 754:/usr/include/c++/9/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 755:/usr/include/c++/9/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 756:/usr/include/c++/9/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 757:/usr/include/c++/9/bits/basic_string.h **** 	  {
 758:/usr/include/c++/9/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 759:/usr/include/c++/9/bits/basic_string.h **** 	    pointer __data = nullptr;
 760:/usr/include/c++/9/bits/basic_string.h **** 	    size_type __capacity;
 761:/usr/include/c++/9/bits/basic_string.h **** 	    if (!_M_is_local())
 762:/usr/include/c++/9/bits/basic_string.h **** 	      {
 763:/usr/include/c++/9/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 764:/usr/include/c++/9/bits/basic_string.h **** 		  {
 765:/usr/include/c++/9/bits/basic_string.h **** 		    // __str can reuse our existing storage.
 766:/usr/include/c++/9/bits/basic_string.h **** 		    __data = _M_data();
 767:/usr/include/c++/9/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 768:/usr/include/c++/9/bits/basic_string.h **** 		  }
 769:/usr/include/c++/9/bits/basic_string.h **** 		else // __str can't use it, so free it.
 770:/usr/include/c++/9/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 771:/usr/include/c++/9/bits/basic_string.h **** 	      }
 772:/usr/include/c++/9/bits/basic_string.h **** 
 773:/usr/include/c++/9/bits/basic_string.h **** 	    _M_data(__str._M_data());
 774:/usr/include/c++/9/bits/basic_string.h **** 	    _M_length(__str.length());
 775:/usr/include/c++/9/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 776:/usr/include/c++/9/bits/basic_string.h **** 	    if (__data)
 777:/usr/include/c++/9/bits/basic_string.h **** 	      {
 778:/usr/include/c++/9/bits/basic_string.h **** 		__str._M_data(__data);
 779:/usr/include/c++/9/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 780:/usr/include/c++/9/bits/basic_string.h **** 	      }
 781:/usr/include/c++/9/bits/basic_string.h **** 	    else
 782:/usr/include/c++/9/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 783:/usr/include/c++/9/bits/basic_string.h **** 	  }
 784:/usr/include/c++/9/bits/basic_string.h **** 	else // Need to do a deep copy
 785:/usr/include/c++/9/bits/basic_string.h **** 	  assign(__str);
 786:/usr/include/c++/9/bits/basic_string.h **** 	__str.clear();
 787:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 788:/usr/include/c++/9/bits/basic_string.h ****       }
 789:/usr/include/c++/9/bits/basic_string.h **** 
 790:/usr/include/c++/9/bits/basic_string.h ****       /**
 791:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 792:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 793:/usr/include/c++/9/bits/basic_string.h ****        */
 794:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
 795:/usr/include/c++/9/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 796:/usr/include/c++/9/bits/basic_string.h ****       {
 797:/usr/include/c++/9/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 798:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 799:/usr/include/c++/9/bits/basic_string.h ****       }
 800:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
 801:/usr/include/c++/9/bits/basic_string.h **** 
 802:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
 803:/usr/include/c++/9/bits/basic_string.h ****       /**
 804:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 805:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 806:/usr/include/c++/9/bits/basic_string.h ****        */
 807:/usr/include/c++/9/bits/basic_string.h ****      template<typename _Tp>
 808:/usr/include/c++/9/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 809:/usr/include/c++/9/bits/basic_string.h ****        operator=(const _Tp& __svt)
 810:/usr/include/c++/9/bits/basic_string.h ****        { return this->assign(__svt); }
 811:/usr/include/c++/9/bits/basic_string.h **** 
 812:/usr/include/c++/9/bits/basic_string.h ****       /**
 813:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 814:/usr/include/c++/9/bits/basic_string.h ****        *  @return A string_view.
 815:/usr/include/c++/9/bits/basic_string.h ****        */
 816:/usr/include/c++/9/bits/basic_string.h ****       operator __sv_type() const noexcept
 817:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 818:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
 819:/usr/include/c++/9/bits/basic_string.h **** 
 820:/usr/include/c++/9/bits/basic_string.h ****       // Iterators:
 821:/usr/include/c++/9/bits/basic_string.h ****       /**
 822:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 823:/usr/include/c++/9/bits/basic_string.h ****        *  the %string.
 824:/usr/include/c++/9/bits/basic_string.h ****        */
 825:/usr/include/c++/9/bits/basic_string.h ****       iterator
 826:/usr/include/c++/9/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 827:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 828:/usr/include/c++/9/bits/basic_string.h **** 
 829:/usr/include/c++/9/bits/basic_string.h ****       /**
 830:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 831:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.
 832:/usr/include/c++/9/bits/basic_string.h ****        */
 833:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
 834:/usr/include/c++/9/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 835:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 836:/usr/include/c++/9/bits/basic_string.h **** 
 837:/usr/include/c++/9/bits/basic_string.h ****       /**
 838:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 839:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.
 840:/usr/include/c++/9/bits/basic_string.h ****        */
 841:/usr/include/c++/9/bits/basic_string.h ****       iterator
 842:/usr/include/c++/9/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 843:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 844:/usr/include/c++/9/bits/basic_string.h **** 
 845:/usr/include/c++/9/bits/basic_string.h ****       /**
 846:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 847:/usr/include/c++/9/bits/basic_string.h ****        *  last character in the %string.
 848:/usr/include/c++/9/bits/basic_string.h ****        */
 849:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
 850:/usr/include/c++/9/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 851:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 852:/usr/include/c++/9/bits/basic_string.h **** 
 853:/usr/include/c++/9/bits/basic_string.h ****       /**
 854:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 855:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 856:/usr/include/c++/9/bits/basic_string.h ****        *  order.
 857:/usr/include/c++/9/bits/basic_string.h ****        */
 858:/usr/include/c++/9/bits/basic_string.h ****       reverse_iterator
 859:/usr/include/c++/9/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 860:/usr/include/c++/9/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 861:/usr/include/c++/9/bits/basic_string.h **** 
 862:/usr/include/c++/9/bits/basic_string.h ****       /**
 863:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 864:/usr/include/c++/9/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 865:/usr/include/c++/9/bits/basic_string.h ****        *  reverse element order.
 866:/usr/include/c++/9/bits/basic_string.h ****        */
 867:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
 868:/usr/include/c++/9/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 869:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 870:/usr/include/c++/9/bits/basic_string.h **** 
 871:/usr/include/c++/9/bits/basic_string.h ****       /**
 872:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 873:/usr/include/c++/9/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 874:/usr/include/c++/9/bits/basic_string.h ****        *  element order.
 875:/usr/include/c++/9/bits/basic_string.h ****        */
 876:/usr/include/c++/9/bits/basic_string.h ****       reverse_iterator
 877:/usr/include/c++/9/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 878:/usr/include/c++/9/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 879:/usr/include/c++/9/bits/basic_string.h **** 
 880:/usr/include/c++/9/bits/basic_string.h ****       /**
 881:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 882:/usr/include/c++/9/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 883:/usr/include/c++/9/bits/basic_string.h ****        *  is done in reverse element order.
 884:/usr/include/c++/9/bits/basic_string.h ****        */
 885:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
 886:/usr/include/c++/9/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 887:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 888:/usr/include/c++/9/bits/basic_string.h **** 
 889:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 890:/usr/include/c++/9/bits/basic_string.h ****       /**
 891:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 892:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.
 893:/usr/include/c++/9/bits/basic_string.h ****        */
 894:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
 895:/usr/include/c++/9/bits/basic_string.h ****       cbegin() const noexcept
 896:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 897:/usr/include/c++/9/bits/basic_string.h **** 
 898:/usr/include/c++/9/bits/basic_string.h ****       /**
 899:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 900:/usr/include/c++/9/bits/basic_string.h ****        *  last character in the %string.
 901:/usr/include/c++/9/bits/basic_string.h ****        */
 902:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
 903:/usr/include/c++/9/bits/basic_string.h ****       cend() const noexcept
 904:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 905:/usr/include/c++/9/bits/basic_string.h **** 
 906:/usr/include/c++/9/bits/basic_string.h ****       /**
 907:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 908:/usr/include/c++/9/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 909:/usr/include/c++/9/bits/basic_string.h ****        *  reverse element order.
 910:/usr/include/c++/9/bits/basic_string.h ****        */
 911:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
 912:/usr/include/c++/9/bits/basic_string.h ****       crbegin() const noexcept
 913:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 914:/usr/include/c++/9/bits/basic_string.h **** 
 915:/usr/include/c++/9/bits/basic_string.h ****       /**
 916:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 917:/usr/include/c++/9/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 918:/usr/include/c++/9/bits/basic_string.h ****        *  is done in reverse element order.
 919:/usr/include/c++/9/bits/basic_string.h ****        */
 920:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
 921:/usr/include/c++/9/bits/basic_string.h ****       crend() const noexcept
 922:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 923:/usr/include/c++/9/bits/basic_string.h **** #endif
 924:/usr/include/c++/9/bits/basic_string.h **** 
 925:/usr/include/c++/9/bits/basic_string.h ****     public:
 926:/usr/include/c++/9/bits/basic_string.h ****       // Capacity:
 927:/usr/include/c++/9/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 928:/usr/include/c++/9/bits/basic_string.h ****       ///  null-termination.
 929:/usr/include/c++/9/bits/basic_string.h ****       size_type
 930:/usr/include/c++/9/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 931:/usr/include/c++/9/bits/basic_string.h ****       { return _M_string_length; }
 932:/usr/include/c++/9/bits/basic_string.h **** 
 933:/usr/include/c++/9/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 934:/usr/include/c++/9/bits/basic_string.h ****       ///  null-termination.
 935:/usr/include/c++/9/bits/basic_string.h ****       size_type
 936:/usr/include/c++/9/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 937:/usr/include/c++/9/bits/basic_string.h ****       { return _M_string_length; }
 938:/usr/include/c++/9/bits/basic_string.h **** 
 939:/usr/include/c++/9/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 940:/usr/include/c++/9/bits/basic_string.h ****       size_type
 941:/usr/include/c++/9/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 942:/usr/include/c++/9/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 943:/usr/include/c++/9/bits/basic_string.h **** 
 944:/usr/include/c++/9/bits/basic_string.h ****       /**
 945:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 946:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 947:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 948:/usr/include/c++/9/bits/basic_string.h ****        *
 949:/usr/include/c++/9/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 950:/usr/include/c++/9/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 951:/usr/include/c++/9/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 952:/usr/include/c++/9/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 953:/usr/include/c++/9/bits/basic_string.h ****        */
 954:/usr/include/c++/9/bits/basic_string.h ****       void
 955:/usr/include/c++/9/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 956:/usr/include/c++/9/bits/basic_string.h **** 
 957:/usr/include/c++/9/bits/basic_string.h ****       /**
 958:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 959:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 960:/usr/include/c++/9/bits/basic_string.h ****        *
 961:/usr/include/c++/9/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 962:/usr/include/c++/9/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 963:/usr/include/c++/9/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 964:/usr/include/c++/9/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 965:/usr/include/c++/9/bits/basic_string.h ****        *  setting them to 0.
 966:/usr/include/c++/9/bits/basic_string.h ****        */
 967:/usr/include/c++/9/bits/basic_string.h ****       void
 968:/usr/include/c++/9/bits/basic_string.h ****       resize(size_type __n)
 969:/usr/include/c++/9/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 970:/usr/include/c++/9/bits/basic_string.h **** 
 971:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
 972:/usr/include/c++/9/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 973:/usr/include/c++/9/bits/basic_string.h ****       void
 974:/usr/include/c++/9/bits/basic_string.h ****       shrink_to_fit() noexcept
 975:/usr/include/c++/9/bits/basic_string.h ****       {
 976:/usr/include/c++/9/bits/basic_string.h **** #if __cpp_exceptions
 977:/usr/include/c++/9/bits/basic_string.h **** 	if (capacity() > size())
 978:/usr/include/c++/9/bits/basic_string.h **** 	  {
 979:/usr/include/c++/9/bits/basic_string.h **** 	    try
 980:/usr/include/c++/9/bits/basic_string.h **** 	      { reserve(0); }
 981:/usr/include/c++/9/bits/basic_string.h **** 	    catch(...)
 982:/usr/include/c++/9/bits/basic_string.h **** 	      { }
 983:/usr/include/c++/9/bits/basic_string.h **** 	  }
 984:/usr/include/c++/9/bits/basic_string.h **** #endif
 985:/usr/include/c++/9/bits/basic_string.h ****       }
 986:/usr/include/c++/9/bits/basic_string.h **** #endif
 987:/usr/include/c++/9/bits/basic_string.h **** 
 988:/usr/include/c++/9/bits/basic_string.h ****       /**
 989:/usr/include/c++/9/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 990:/usr/include/c++/9/bits/basic_string.h ****        *  before needing to allocate more memory.
 991:/usr/include/c++/9/bits/basic_string.h ****        */
 992:/usr/include/c++/9/bits/basic_string.h ****       size_type
 993:/usr/include/c++/9/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 994:/usr/include/c++/9/bits/basic_string.h ****       {
 995:/usr/include/c++/9/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 996:/usr/include/c++/9/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 997:/usr/include/c++/9/bits/basic_string.h ****       }
 998:/usr/include/c++/9/bits/basic_string.h **** 
 999:/usr/include/c++/9/bits/basic_string.h ****       /**
1000:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1001:/usr/include/c++/9/bits/basic_string.h ****        *          characters.
1002:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
1003:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
1004:/usr/include/c++/9/bits/basic_string.h ****        *
1005:/usr/include/c++/9/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
1006:/usr/include/c++/9/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
1007:/usr/include/c++/9/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
1008:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
1009:/usr/include/c++/9/bits/basic_string.h ****        *
1010:/usr/include/c++/9/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
1011:/usr/include/c++/9/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
1012:/usr/include/c++/9/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
1013:/usr/include/c++/9/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
1014:/usr/include/c++/9/bits/basic_string.h ****        *  data.
1015:/usr/include/c++/9/bits/basic_string.h ****        */
1016:/usr/include/c++/9/bits/basic_string.h ****       void
1017:/usr/include/c++/9/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
1018:/usr/include/c++/9/bits/basic_string.h **** 
1019:/usr/include/c++/9/bits/basic_string.h ****       /**
1020:/usr/include/c++/9/bits/basic_string.h ****        *  Erases the string, making it empty.
1021:/usr/include/c++/9/bits/basic_string.h ****        */
1022:/usr/include/c++/9/bits/basic_string.h ****       void
1023:/usr/include/c++/9/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1024:/usr/include/c++/9/bits/basic_string.h ****       { _M_set_length(0); }
1025:/usr/include/c++/9/bits/basic_string.h **** 
1026:/usr/include/c++/9/bits/basic_string.h ****       /**
1027:/usr/include/c++/9/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1028:/usr/include/c++/9/bits/basic_string.h ****        *  <code>*this == ""</code>.
1029:/usr/include/c++/9/bits/basic_string.h ****        */
1030:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
1031:/usr/include/c++/9/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1032:/usr/include/c++/9/bits/basic_string.h ****       { return this->size() == 0; }
1033:/usr/include/c++/9/bits/basic_string.h **** 
1034:/usr/include/c++/9/bits/basic_string.h ****       // Element access:
1035:/usr/include/c++/9/bits/basic_string.h ****       /**
1036:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1037:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1038:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1039:/usr/include/c++/9/bits/basic_string.h ****        *
1040:/usr/include/c++/9/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1041:/usr/include/c++/9/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1042:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1043:/usr/include/c++/9/bits/basic_string.h ****        *  see at().)
1044:/usr/include/c++/9/bits/basic_string.h ****        */
1045:/usr/include/c++/9/bits/basic_string.h ****       const_reference
1046:/usr/include/c++/9/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1047:/usr/include/c++/9/bits/basic_string.h ****       {
1048:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1049:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__pos];
1050:/usr/include/c++/9/bits/basic_string.h ****       }
1051:/usr/include/c++/9/bits/basic_string.h **** 
1052:/usr/include/c++/9/bits/basic_string.h ****       /**
1053:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1054:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1055:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1056:/usr/include/c++/9/bits/basic_string.h ****        *
1057:/usr/include/c++/9/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1058:/usr/include/c++/9/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1059:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1060:/usr/include/c++/9/bits/basic_string.h ****        *  see at().)
1061:/usr/include/c++/9/bits/basic_string.h ****        */
1062:/usr/include/c++/9/bits/basic_string.h ****       reference
1063:/usr/include/c++/9/bits/basic_string.h ****       operator[](size_type __pos)
1064:/usr/include/c++/9/bits/basic_string.h ****       {
1065:/usr/include/c++/9/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1066:/usr/include/c++/9/bits/basic_string.h **** 	// and in C++11 mode.
1067:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1068:/usr/include/c++/9/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1069:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1070:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__pos];
1071:/usr/include/c++/9/bits/basic_string.h ****       }
1072:/usr/include/c++/9/bits/basic_string.h **** 
1073:/usr/include/c++/9/bits/basic_string.h ****       /**
1074:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1075:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n The index of the character to access.
1076:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1077:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1078:/usr/include/c++/9/bits/basic_string.h ****        *
1079:/usr/include/c++/9/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1080:/usr/include/c++/9/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1081:/usr/include/c++/9/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1082:/usr/include/c++/9/bits/basic_string.h ****        */
1083:/usr/include/c++/9/bits/basic_string.h ****       const_reference
1084:/usr/include/c++/9/bits/basic_string.h ****       at(size_type __n) const
1085:/usr/include/c++/9/bits/basic_string.h ****       {
1086:/usr/include/c++/9/bits/basic_string.h **** 	if (__n >= this->size())
1087:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1088:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1089:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu)"),
1090:/usr/include/c++/9/bits/basic_string.h **** 				   __n, this->size());
1091:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__n];
1092:/usr/include/c++/9/bits/basic_string.h ****       }
1093:/usr/include/c++/9/bits/basic_string.h **** 
1094:/usr/include/c++/9/bits/basic_string.h ****       /**
1095:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1096:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n The index of the character to access.
1097:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1098:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1099:/usr/include/c++/9/bits/basic_string.h ****        *
1100:/usr/include/c++/9/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1101:/usr/include/c++/9/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1102:/usr/include/c++/9/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1103:/usr/include/c++/9/bits/basic_string.h ****        */
1104:/usr/include/c++/9/bits/basic_string.h ****       reference
1105:/usr/include/c++/9/bits/basic_string.h ****       at(size_type __n)
1106:/usr/include/c++/9/bits/basic_string.h ****       {
1107:/usr/include/c++/9/bits/basic_string.h **** 	if (__n >= size())
1108:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1109:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1110:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu)"),
1111:/usr/include/c++/9/bits/basic_string.h **** 				   __n, this->size());
1112:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__n];
1113:/usr/include/c++/9/bits/basic_string.h ****       }
1114:/usr/include/c++/9/bits/basic_string.h **** 
1115:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1116:/usr/include/c++/9/bits/basic_string.h ****       /**
1117:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/c++/9/bits/basic_string.h ****        *  element of the %string.
1119:/usr/include/c++/9/bits/basic_string.h ****        */
1120:/usr/include/c++/9/bits/basic_string.h ****       reference
1121:/usr/include/c++/9/bits/basic_string.h ****       front() noexcept
1122:/usr/include/c++/9/bits/basic_string.h ****       {
1123:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1124:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](0);
1125:/usr/include/c++/9/bits/basic_string.h ****       }
1126:/usr/include/c++/9/bits/basic_string.h **** 
1127:/usr/include/c++/9/bits/basic_string.h ****       /**
1128:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/c++/9/bits/basic_string.h ****        *  element of the %string.
1130:/usr/include/c++/9/bits/basic_string.h ****        */
1131:/usr/include/c++/9/bits/basic_string.h ****       const_reference
1132:/usr/include/c++/9/bits/basic_string.h ****       front() const noexcept
1133:/usr/include/c++/9/bits/basic_string.h ****       {
1134:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1135:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](0);
1136:/usr/include/c++/9/bits/basic_string.h ****       }
1137:/usr/include/c++/9/bits/basic_string.h **** 
1138:/usr/include/c++/9/bits/basic_string.h ****       /**
1139:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1140:/usr/include/c++/9/bits/basic_string.h ****        *  element of the %string.
1141:/usr/include/c++/9/bits/basic_string.h ****        */
1142:/usr/include/c++/9/bits/basic_string.h ****       reference
1143:/usr/include/c++/9/bits/basic_string.h ****       back() noexcept
1144:/usr/include/c++/9/bits/basic_string.h ****       {
1145:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1146:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](this->size() - 1);
1147:/usr/include/c++/9/bits/basic_string.h ****       }
1148:/usr/include/c++/9/bits/basic_string.h **** 
1149:/usr/include/c++/9/bits/basic_string.h ****       /**
1150:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/c++/9/bits/basic_string.h ****        *  last element of the %string.
1152:/usr/include/c++/9/bits/basic_string.h ****        */
1153:/usr/include/c++/9/bits/basic_string.h ****       const_reference
1154:/usr/include/c++/9/bits/basic_string.h ****       back() const noexcept
1155:/usr/include/c++/9/bits/basic_string.h ****       {
1156:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1157:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](this->size() - 1);
1158:/usr/include/c++/9/bits/basic_string.h ****       }
1159:/usr/include/c++/9/bits/basic_string.h **** #endif
1160:/usr/include/c++/9/bits/basic_string.h **** 
1161:/usr/include/c++/9/bits/basic_string.h ****       // Modifiers:
1162:/usr/include/c++/9/bits/basic_string.h ****       /**
1163:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string to this string.
1164:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to append.
1165:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1166:/usr/include/c++/9/bits/basic_string.h ****        */
1167:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1168:/usr/include/c++/9/bits/basic_string.h ****       operator+=(const basic_string& __str)
1169:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__str); }
1170:/usr/include/c++/9/bits/basic_string.h **** 
1171:/usr/include/c++/9/bits/basic_string.h ****       /**
1172:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a C string.
1173:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to append.
1174:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1175:/usr/include/c++/9/bits/basic_string.h ****        */
1176:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1177:/usr/include/c++/9/bits/basic_string.h ****       operator+=(const _CharT* __s)
1178:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__s); }
1179:/usr/include/c++/9/bits/basic_string.h **** 
1180:/usr/include/c++/9/bits/basic_string.h ****       /**
1181:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a character.
1182:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to append.
1183:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1184:/usr/include/c++/9/bits/basic_string.h ****        */
1185:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1186:/usr/include/c++/9/bits/basic_string.h ****       operator+=(_CharT __c)
1187:/usr/include/c++/9/bits/basic_string.h ****       {
1188:/usr/include/c++/9/bits/basic_string.h **** 	this->push_back(__c);
1189:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
1190:/usr/include/c++/9/bits/basic_string.h ****       }
1191:/usr/include/c++/9/bits/basic_string.h **** 
1192:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1193:/usr/include/c++/9/bits/basic_string.h ****       /**
1194:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1195:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1196:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1197:/usr/include/c++/9/bits/basic_string.h ****        */
1198:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1199:/usr/include/c++/9/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1200:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1201:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
1202:/usr/include/c++/9/bits/basic_string.h **** 
1203:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
1204:/usr/include/c++/9/bits/basic_string.h ****       /**
1205:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string_view.
1206:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1207:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1208:/usr/include/c++/9/bits/basic_string.h ****        */
1209:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
1210:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1211:/usr/include/c++/9/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1212:/usr/include/c++/9/bits/basic_string.h **** 	{ return this->append(__svt); }
1213:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
1214:/usr/include/c++/9/bits/basic_string.h **** 
1215:/usr/include/c++/9/bits/basic_string.h ****       /**
1216:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string to this string.
1217:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to append.
1218:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1219:/usr/include/c++/9/bits/basic_string.h ****        */
1220:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1221:/usr/include/c++/9/bits/basic_string.h ****       append(const basic_string& __str)
1222:/usr/include/c++/9/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1223:/usr/include/c++/9/bits/basic_string.h **** 
1224:/usr/include/c++/9/bits/basic_string.h ****       /**
1225:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a substring.
1226:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to append.
1227:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1228:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1229:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1230:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1231:/usr/include/c++/9/bits/basic_string.h ****        *
1232:/usr/include/c++/9/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1233:/usr/include/c++/9/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1234:/usr/include/c++/9/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1235:/usr/include/c++/9/bits/basic_string.h ****        *  remainder of @a __str is appended.
1236:/usr/include/c++/9/bits/basic_string.h ****        */
1237:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1238:/usr/include/c++/9/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1239:/usr/include/c++/9/bits/basic_string.h ****       { return _M_append(__str._M_data()
1240:/usr/include/c++/9/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1241:/usr/include/c++/9/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1242:/usr/include/c++/9/bits/basic_string.h **** 
1243:/usr/include/c++/9/bits/basic_string.h ****       /**
1244:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a C substring.
1245:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to append.
1246:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1247:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1248:/usr/include/c++/9/bits/basic_string.h ****        */
1249:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1250:/usr/include/c++/9/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1251:/usr/include/c++/9/bits/basic_string.h ****       {
1252:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1253:/usr/include/c++/9/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1254:/usr/include/c++/9/bits/basic_string.h **** 	return _M_append(__s, __n);
1255:/usr/include/c++/9/bits/basic_string.h ****       }
1256:/usr/include/c++/9/bits/basic_string.h **** 
1257:/usr/include/c++/9/bits/basic_string.h ****       /**
1258:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a C string.
1259:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to append.
1260:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1261:/usr/include/c++/9/bits/basic_string.h ****        */
1262:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1263:/usr/include/c++/9/bits/basic_string.h ****       append(const _CharT* __s)
1264:/usr/include/c++/9/bits/basic_string.h ****       {
1265:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1266:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1267:/usr/include/c++/9/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1268:/usr/include/c++/9/bits/basic_string.h **** 	return _M_append(__s, __n);
1269:/usr/include/c++/9/bits/basic_string.h ****       }
1270:/usr/include/c++/9/bits/basic_string.h **** 
1271:/usr/include/c++/9/bits/basic_string.h ****       /**
1272:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append multiple characters.
1273:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1274:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to use.
1275:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1276:/usr/include/c++/9/bits/basic_string.h ****        *
1277:/usr/include/c++/9/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1278:/usr/include/c++/9/bits/basic_string.h ****        */
1279:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1280:/usr/include/c++/9/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1281:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1282:/usr/include/c++/9/bits/basic_string.h **** 
1283:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1284:/usr/include/c++/9/bits/basic_string.h ****       /**
1285:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1286:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1287:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1288:/usr/include/c++/9/bits/basic_string.h ****        */
1289:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1290:/usr/include/c++/9/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1291:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1292:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
1293:/usr/include/c++/9/bits/basic_string.h **** 
1294:/usr/include/c++/9/bits/basic_string.h ****       /**
1295:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a range of characters.
1296:/usr/include/c++/9/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1297:/usr/include/c++/9/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1298:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1299:/usr/include/c++/9/bits/basic_string.h ****        *
1300:/usr/include/c++/9/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1301:/usr/include/c++/9/bits/basic_string.h ****        */
1302:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1303:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator,
1304:/usr/include/c++/9/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1305:/usr/include/c++/9/bits/basic_string.h **** #else
1306:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
1307:/usr/include/c++/9/bits/basic_string.h **** #endif
1308:/usr/include/c++/9/bits/basic_string.h ****         basic_string&
1309:/usr/include/c++/9/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1310:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1311:/usr/include/c++/9/bits/basic_string.h **** 
1312:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
1313:/usr/include/c++/9/bits/basic_string.h ****       /**
1314:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string_view.
1315:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1316:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1317:/usr/include/c++/9/bits/basic_string.h ****        */
1318:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
1319:/usr/include/c++/9/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1320:/usr/include/c++/9/bits/basic_string.h ****         append(const _Tp& __svt)
1321:/usr/include/c++/9/bits/basic_string.h ****         {
1322:/usr/include/c++/9/bits/basic_string.h ****           __sv_type __sv = __svt;
1323:/usr/include/c++/9/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1324:/usr/include/c++/9/bits/basic_string.h ****         }
1325:/usr/include/c++/9/bits/basic_string.h **** 
1326:/usr/include/c++/9/bits/basic_string.h ****       /**
1327:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1328:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1329:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1330:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1331:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1332:/usr/include/c++/9/bits/basic_string.h ****        */
1333:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
1334:/usr/include/c++/9/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1335:/usr/include/c++/9/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1336:/usr/include/c++/9/bits/basic_string.h **** 	{
1337:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1338:/usr/include/c++/9/bits/basic_string.h **** 	  return _M_append(__sv.data()
1339:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1340:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1341:/usr/include/c++/9/bits/basic_string.h **** 	}
1342:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
1343:/usr/include/c++/9/bits/basic_string.h **** 
1344:/usr/include/c++/9/bits/basic_string.h ****       /**
1345:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a single character.
1346:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to append.
1347:/usr/include/c++/9/bits/basic_string.h ****        */
1348:/usr/include/c++/9/bits/basic_string.h ****       void
1349:/usr/include/c++/9/bits/basic_string.h ****       push_back(_CharT __c)
1350:/usr/include/c++/9/bits/basic_string.h ****       {
1351:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __size = this->size();
1352:/usr/include/c++/9/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1353:/usr/include/c++/9/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1354:/usr/include/c++/9/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1355:/usr/include/c++/9/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1356:/usr/include/c++/9/bits/basic_string.h ****       }
1357:/usr/include/c++/9/bits/basic_string.h **** 
1358:/usr/include/c++/9/bits/basic_string.h ****       /**
1359:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1360:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string to use.
1361:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1362:/usr/include/c++/9/bits/basic_string.h ****        */
1363:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1364:/usr/include/c++/9/bits/basic_string.h ****       assign(const basic_string& __str)
1365:/usr/include/c++/9/bits/basic_string.h ****       {
1366:/usr/include/c++/9/bits/basic_string.h **** 	this->_M_assign(__str);
1367:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
1368:/usr/include/c++/9/bits/basic_string.h ****       }
1369:/usr/include/c++/9/bits/basic_string.h **** 
1370:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1371:/usr/include/c++/9/bits/basic_string.h ****       /**
1372:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1373:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string to use.
1374:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1375:/usr/include/c++/9/bits/basic_string.h ****        *
1376:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1377:/usr/include/c++/9/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1378:/usr/include/c++/9/bits/basic_string.h ****        */
1379:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1380:/usr/include/c++/9/bits/basic_string.h ****       assign(basic_string&& __str)
1381:/usr/include/c++/9/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1382:/usr/include/c++/9/bits/basic_string.h ****       {
1383:/usr/include/c++/9/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1384:/usr/include/c++/9/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1385:/usr/include/c++/9/bits/basic_string.h **** 	return *this = std::move(__str);
1386:/usr/include/c++/9/bits/basic_string.h ****       }
1387:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
1388:/usr/include/c++/9/bits/basic_string.h **** 
1389:/usr/include/c++/9/bits/basic_string.h ****       /**
1390:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1391:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to use.
1392:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1393:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1394:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1395:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1396:/usr/include/c++/9/bits/basic_string.h ****        *
1397:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1398:/usr/include/c++/9/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1399:/usr/include/c++/9/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1400:/usr/include/c++/9/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1401:/usr/include/c++/9/bits/basic_string.h ****        */
1402:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1403:/usr/include/c++/9/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1404:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1405:/usr/include/c++/9/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1406:/usr/include/c++/9/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1407:/usr/include/c++/9/bits/basic_string.h **** 
1408:/usr/include/c++/9/bits/basic_string.h ****       /**
1409:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1410:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to use.
1411:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1412:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1413:/usr/include/c++/9/bits/basic_string.h ****        *
1414:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1415:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1416:/usr/include/c++/9/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1417:/usr/include/c++/9/bits/basic_string.h ****        */
1418:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1419:/usr/include/c++/9/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1420:/usr/include/c++/9/bits/basic_string.h ****       {
1421:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1422:/usr/include/c++/9/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1423:/usr/include/c++/9/bits/basic_string.h ****       }
1424:/usr/include/c++/9/bits/basic_string.h **** 
1425:/usr/include/c++/9/bits/basic_string.h ****       /**
1426:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1427:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to use.
1428:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1429:/usr/include/c++/9/bits/basic_string.h ****        *
1430:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1431:/usr/include/c++/9/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1432:/usr/include/c++/9/bits/basic_string.h ****        *  function returns.
1433:/usr/include/c++/9/bits/basic_string.h ****        */
1434:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1435:/usr/include/c++/9/bits/basic_string.h ****       assign(const _CharT* __s)
1436:/usr/include/c++/9/bits/basic_string.h ****       {
1437:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1438:/usr/include/c++/9/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1439:/usr/include/c++/9/bits/basic_string.h **** 			  traits_type::length(__s));
1440:/usr/include/c++/9/bits/basic_string.h ****       }
1441:/usr/include/c++/9/bits/basic_string.h **** 
1442:/usr/include/c++/9/bits/basic_string.h ****       /**
1443:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1444:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1445:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to use.
1446:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1447:/usr/include/c++/9/bits/basic_string.h ****        *
1448:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1449:/usr/include/c++/9/bits/basic_string.h ****        *  character @a __c.
1450:/usr/include/c++/9/bits/basic_string.h ****        */
1451:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1452:/usr/include/c++/9/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1453:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1454:/usr/include/c++/9/bits/basic_string.h **** 
1455:/usr/include/c++/9/bits/basic_string.h ****       /**
1456:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1457:/usr/include/c++/9/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1458:/usr/include/c++/9/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1459:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1460:/usr/include/c++/9/bits/basic_string.h ****        *
1461:/usr/include/c++/9/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1462:/usr/include/c++/9/bits/basic_string.h ****       */
1463:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1464:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator,
1465:/usr/include/c++/9/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1466:/usr/include/c++/9/bits/basic_string.h **** #else
1467:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
1468:/usr/include/c++/9/bits/basic_string.h **** #endif
1469:/usr/include/c++/9/bits/basic_string.h ****         basic_string&
1470:/usr/include/c++/9/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1471:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1472:/usr/include/c++/9/bits/basic_string.h **** 
1473:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1474:/usr/include/c++/9/bits/basic_string.h ****       /**
1475:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1476:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1477:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1478:/usr/include/c++/9/bits/basic_string.h ****        */
1479:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1480:/usr/include/c++/9/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1481:/usr/include/c++/9/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1482:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
1483:/usr/include/c++/9/bits/basic_string.h **** 
1484:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
1485:/usr/include/c++/9/bits/basic_string.h ****       /**
1486:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1487:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1488:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1489:/usr/include/c++/9/bits/basic_string.h ****        */
1490:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
1491:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1492:/usr/include/c++/9/bits/basic_string.h **** 	assign(const _Tp& __svt)
1493:/usr/include/c++/9/bits/basic_string.h **** 	{
1494:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1495:/usr/include/c++/9/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1496:/usr/include/c++/9/bits/basic_string.h **** 	}
1497:/usr/include/c++/9/bits/basic_string.h **** 
1498:/usr/include/c++/9/bits/basic_string.h ****       /**
1499:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1500:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1502:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1503:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1504:/usr/include/c++/9/bits/basic_string.h ****        */
1505:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
1506:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1507:/usr/include/c++/9/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1508:/usr/include/c++/9/bits/basic_string.h **** 	{
1509:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1510:/usr/include/c++/9/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1511:/usr/include/c++/9/bits/basic_string.h **** 	      __sv.data()
1512:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1513:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1514:/usr/include/c++/9/bits/basic_string.h **** 	}
1515:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
1516:/usr/include/c++/9/bits/basic_string.h **** 
1517:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1518:/usr/include/c++/9/bits/basic_string.h ****       /**
1519:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1520:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1521:/usr/include/c++/9/bits/basic_string.h ****        *              insert at.
1522:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1523:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to insert.
1524:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1525:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1526:/usr/include/c++/9/bits/basic_string.h ****        *
1527:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1528:/usr/include/c++/9/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1529:/usr/include/c++/9/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1530:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1531:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1532:/usr/include/c++/9/bits/basic_string.h ****       */
1533:/usr/include/c++/9/bits/basic_string.h ****       iterator
1534:/usr/include/c++/9/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1535:/usr/include/c++/9/bits/basic_string.h ****       {
1536:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1537:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1538:/usr/include/c++/9/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1539:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1540:/usr/include/c++/9/bits/basic_string.h ****       }
1541:/usr/include/c++/9/bits/basic_string.h **** #else
1542:/usr/include/c++/9/bits/basic_string.h ****       /**
1543:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1544:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1545:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1546:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to insert.
1547:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1548:/usr/include/c++/9/bits/basic_string.h ****        *
1549:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1550:/usr/include/c++/9/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1551:/usr/include/c++/9/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1552:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1553:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1554:/usr/include/c++/9/bits/basic_string.h ****       */
1555:/usr/include/c++/9/bits/basic_string.h ****       void
1556:/usr/include/c++/9/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1557:/usr/include/c++/9/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1558:/usr/include/c++/9/bits/basic_string.h **** #endif
1559:/usr/include/c++/9/bits/basic_string.h **** 
1560:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1561:/usr/include/c++/9/bits/basic_string.h ****       /**
1562:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1563:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1564:/usr/include/c++/9/bits/basic_string.h ****        *              insert at.
1565:/usr/include/c++/9/bits/basic_string.h ****        *  @param __beg  Start of range.
1566:/usr/include/c++/9/bits/basic_string.h ****        *  @param __end  End of range.
1567:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1568:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1569:/usr/include/c++/9/bits/basic_string.h ****        *
1570:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1571:/usr/include/c++/9/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1572:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1573:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.
1574:/usr/include/c++/9/bits/basic_string.h ****       */
1575:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator,
1576:/usr/include/c++/9/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1577:/usr/include/c++/9/bits/basic_string.h **** 	iterator
1578:/usr/include/c++/9/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1579:/usr/include/c++/9/bits/basic_string.h ****         {
1580:/usr/include/c++/9/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1581:/usr/include/c++/9/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1582:/usr/include/c++/9/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1583:/usr/include/c++/9/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1584:/usr/include/c++/9/bits/basic_string.h **** 	}
1585:/usr/include/c++/9/bits/basic_string.h **** #else
1586:/usr/include/c++/9/bits/basic_string.h ****       /**
1587:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1588:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1589:/usr/include/c++/9/bits/basic_string.h ****        *  @param __beg  Start of range.
1590:/usr/include/c++/9/bits/basic_string.h ****        *  @param __end  End of range.
1591:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1592:/usr/include/c++/9/bits/basic_string.h ****        *
1593:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1594:/usr/include/c++/9/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1595:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1596:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1597:/usr/include/c++/9/bits/basic_string.h ****       */
1598:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
1599:/usr/include/c++/9/bits/basic_string.h ****         void
1600:/usr/include/c++/9/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1601:/usr/include/c++/9/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1602:/usr/include/c++/9/bits/basic_string.h **** #endif
1603:/usr/include/c++/9/bits/basic_string.h **** 
1604:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1605:/usr/include/c++/9/bits/basic_string.h ****       /**
1606:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1607:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1608:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1609:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1610:/usr/include/c++/9/bits/basic_string.h ****        */
1611:/usr/include/c++/9/bits/basic_string.h ****       iterator
1612:/usr/include/c++/9/bits/basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
1613:/usr/include/c++/9/bits/basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1614:/usr/include/c++/9/bits/basic_string.h **** 
1615:/usr/include/c++/9/bits/basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1616:/usr/include/c++/9/bits/basic_string.h ****       // See PR libstdc++/83328
1617:/usr/include/c++/9/bits/basic_string.h ****       void
1618:/usr/include/c++/9/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1619:/usr/include/c++/9/bits/basic_string.h ****       {
1620:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1621:/usr/include/c++/9/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1622:/usr/include/c++/9/bits/basic_string.h ****       }
1623:/usr/include/c++/9/bits/basic_string.h **** #endif
1624:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
1625:/usr/include/c++/9/bits/basic_string.h **** 
1626:/usr/include/c++/9/bits/basic_string.h ****       /**
1627:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert value of a string.
1628:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1629:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to insert.
1630:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1631:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1632:/usr/include/c++/9/bits/basic_string.h ****        *
1633:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1634:/usr/include/c++/9/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1635:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1636:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1637:/usr/include/c++/9/bits/basic_string.h ****       */
1638:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1639:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1640:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1641:/usr/include/c++/9/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1642:/usr/include/c++/9/bits/basic_string.h **** 
1643:/usr/include/c++/9/bits/basic_string.h ****       /**
1644:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a substring.
1645:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1646:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to insert.
1647:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1648:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1649:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1650:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1651:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1652:/usr/include/c++/9/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1653:/usr/include/c++/9/bits/basic_string.h ****        *
1654:/usr/include/c++/9/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1655:/usr/include/c++/9/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1656:/usr/include/c++/9/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1657:/usr/include/c++/9/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1658:/usr/include/c++/9/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1659:/usr/include/c++/9/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1660:/usr/include/c++/9/bits/basic_string.h ****       */
1661:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1662:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1663:/usr/include/c++/9/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1664:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1665:/usr/include/c++/9/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1666:/usr/include/c++/9/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1667:/usr/include/c++/9/bits/basic_string.h **** 
1668:/usr/include/c++/9/bits/basic_string.h ****       /**
1669:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a C substring.
1670:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1671:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to insert.
1672:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1673:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1674:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1675:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1676:/usr/include/c++/9/bits/basic_string.h ****        *  string.
1677:/usr/include/c++/9/bits/basic_string.h ****        *
1678:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1679:/usr/include/c++/9/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1680:/usr/include/c++/9/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1681:/usr/include/c++/9/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1682:/usr/include/c++/9/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1683:/usr/include/c++/9/bits/basic_string.h ****       */
1684:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1685:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1686:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1687:/usr/include/c++/9/bits/basic_string.h **** 
1688:/usr/include/c++/9/bits/basic_string.h ****       /**
1689:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a C string.
1690:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1691:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to insert.
1692:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1693:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1694:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1695:/usr/include/c++/9/bits/basic_string.h ****        *  string.
1696:/usr/include/c++/9/bits/basic_string.h ****        *
1697:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1698:/usr/include/c++/9/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1699:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1700:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1701:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
1702:/usr/include/c++/9/bits/basic_string.h ****       */
1703:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1704:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1705:/usr/include/c++/9/bits/basic_string.h ****       {
1706:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1707:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1708:/usr/include/c++/9/bits/basic_string.h **** 			     traits_type::length(__s));
1709:/usr/include/c++/9/bits/basic_string.h ****       }
1710:/usr/include/c++/9/bits/basic_string.h **** 
1711:/usr/include/c++/9/bits/basic_string.h ****       /**
1712:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1713:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1714:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1715:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to insert.
1716:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1717:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1718:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1719:/usr/include/c++/9/bits/basic_string.h ****        *  string.
1720:/usr/include/c++/9/bits/basic_string.h ****        *
1721:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1722:/usr/include/c++/9/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1723:/usr/include/c++/9/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1724:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1725:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1726:/usr/include/c++/9/bits/basic_string.h ****       */
1727:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1728:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1729:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1730:/usr/include/c++/9/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1731:/usr/include/c++/9/bits/basic_string.h **** 
1732:/usr/include/c++/9/bits/basic_string.h ****       /**
1733:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert one character.
1734:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1735:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to insert.
1736:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1737:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1738:/usr/include/c++/9/bits/basic_string.h ****        *
1739:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1740:/usr/include/c++/9/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1741:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1742:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1743:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1744:/usr/include/c++/9/bits/basic_string.h ****       */
1745:/usr/include/c++/9/bits/basic_string.h ****       iterator
1746:/usr/include/c++/9/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1747:/usr/include/c++/9/bits/basic_string.h ****       {
1748:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1749:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1750:/usr/include/c++/9/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1751:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1752:/usr/include/c++/9/bits/basic_string.h ****       }
1753:/usr/include/c++/9/bits/basic_string.h **** 
1754:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
1755:/usr/include/c++/9/bits/basic_string.h ****       /**
1756:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a string_view.
1757:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1758:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1759:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1760:/usr/include/c++/9/bits/basic_string.h ****       */
1761:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
1762:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1763:/usr/include/c++/9/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1764:/usr/include/c++/9/bits/basic_string.h **** 	{
1765:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1766:/usr/include/c++/9/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1767:/usr/include/c++/9/bits/basic_string.h **** 	}
1768:/usr/include/c++/9/bits/basic_string.h **** 
1769:/usr/include/c++/9/bits/basic_string.h ****       /**
1770:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a string_view.
1771:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1772:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
1773:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
1774:/usr/include/c++/9/bits/basic_string.h ****        *  from.
1775:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1776:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1777:/usr/include/c++/9/bits/basic_string.h ****       */
1778:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
1779:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1780:/usr/include/c++/9/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1781:/usr/include/c++/9/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1782:/usr/include/c++/9/bits/basic_string.h **** 	{
1783:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1784:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0),
1785:/usr/include/c++/9/bits/basic_string.h **** 	      __sv.data()
1786:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1787:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1788:/usr/include/c++/9/bits/basic_string.h **** 	}
1789:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
1790:/usr/include/c++/9/bits/basic_string.h **** 
1791:/usr/include/c++/9/bits/basic_string.h ****       /**
1792:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove characters.
1793:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1794:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1795:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1796:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1797:/usr/include/c++/9/bits/basic_string.h ****        *  string.
1798:/usr/include/c++/9/bits/basic_string.h ****        *
1799:/usr/include/c++/9/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1800:/usr/include/c++/9/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1801:/usr/include/c++/9/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1802:/usr/include/c++/9/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1803:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1804:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1805:/usr/include/c++/9/bits/basic_string.h ****       */
1806:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1807:/usr/include/c++/9/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1808:/usr/include/c++/9/bits/basic_string.h ****       {
1809:/usr/include/c++/9/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1810:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == npos)
1811:/usr/include/c++/9/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1812:/usr/include/c++/9/bits/basic_string.h **** 	else if (__n != 0)
1813:/usr/include/c++/9/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1814:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
1815:/usr/include/c++/9/bits/basic_string.h ****       }
1816:/usr/include/c++/9/bits/basic_string.h **** 
1817:/usr/include/c++/9/bits/basic_string.h ****       /**
1818:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove one character.
1819:/usr/include/c++/9/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1820:/usr/include/c++/9/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1821:/usr/include/c++/9/bits/basic_string.h ****        *
1822:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1823:/usr/include/c++/9/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1824:/usr/include/c++/9/bits/basic_string.h ****       */
1825:/usr/include/c++/9/bits/basic_string.h ****       iterator
1826:/usr/include/c++/9/bits/basic_string.h ****       erase(__const_iterator __position)
1827:/usr/include/c++/9/bits/basic_string.h ****       {
1828:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1829:/usr/include/c++/9/bits/basic_string.h **** 				 && __position < end());
1830:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1831:/usr/include/c++/9/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1832:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1833:/usr/include/c++/9/bits/basic_string.h ****       }
1834:/usr/include/c++/9/bits/basic_string.h **** 
1835:/usr/include/c++/9/bits/basic_string.h ****       /**
1836:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1837:/usr/include/c++/9/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1838:/usr/include/c++/9/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1839:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1840:/usr/include/c++/9/bits/basic_string.h ****        *
1841:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1842:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1843:/usr/include/c++/9/bits/basic_string.h ****       */
1844:/usr/include/c++/9/bits/basic_string.h ****       iterator
1845:/usr/include/c++/9/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1846:/usr/include/c++/9/bits/basic_string.h ****       {
1847:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1848:/usr/include/c++/9/bits/basic_string.h **** 				 && __last <= end());
1849:/usr/include/c++/9/bits/basic_string.h ****         const size_type __pos = __first - begin();
1850:/usr/include/c++/9/bits/basic_string.h **** 	if (__last == end())
1851:/usr/include/c++/9/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1852:/usr/include/c++/9/bits/basic_string.h **** 	else
1853:/usr/include/c++/9/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1854:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1855:/usr/include/c++/9/bits/basic_string.h ****       }
1856:/usr/include/c++/9/bits/basic_string.h **** 
1857:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
1858:/usr/include/c++/9/bits/basic_string.h ****       /**
1859:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove the last character.
1860:/usr/include/c++/9/bits/basic_string.h ****        *
1861:/usr/include/c++/9/bits/basic_string.h ****        *  The string must be non-empty.
1862:/usr/include/c++/9/bits/basic_string.h ****        */
1863:/usr/include/c++/9/bits/basic_string.h ****       void
1864:/usr/include/c++/9/bits/basic_string.h ****       pop_back() noexcept
1865:/usr/include/c++/9/bits/basic_string.h ****       {
1866:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1867:/usr/include/c++/9/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1868:/usr/include/c++/9/bits/basic_string.h ****       }
1869:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
1870:/usr/include/c++/9/bits/basic_string.h **** 
1871:/usr/include/c++/9/bits/basic_string.h ****       /**
1872:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1873:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1874:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1875:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to insert.
1876:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1877:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1878:/usr/include/c++/9/bits/basic_string.h ****        *  string.
1879:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1880:/usr/include/c++/9/bits/basic_string.h ****        *
1881:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1882:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1883:/usr/include/c++/9/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1884:/usr/include/c++/9/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1885:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1886:/usr/include/c++/9/bits/basic_string.h ****        *  error is thrown.
1887:/usr/include/c++/9/bits/basic_string.h ****       */
1888:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1889:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1890:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1891:/usr/include/c++/9/bits/basic_string.h **** 
1892:/usr/include/c++/9/bits/basic_string.h ****       /**
1893:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1894:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1895:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1896:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to insert.
1897:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1898:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1899:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1900:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1901:/usr/include/c++/9/bits/basic_string.h ****        *  __str.size().
1902:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1903:/usr/include/c++/9/bits/basic_string.h ****        *
1904:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1905:/usr/include/c++/9/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1906:/usr/include/c++/9/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1907:/usr/include/c++/9/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1908:/usr/include/c++/9/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1909:/usr/include/c++/9/bits/basic_string.h ****       */
1910:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1911:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1912:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1913:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1914:/usr/include/c++/9/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1915:/usr/include/c++/9/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1916:/usr/include/c++/9/bits/basic_string.h **** 
1917:/usr/include/c++/9/bits/basic_string.h ****       /**
1918:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1919:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1920:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1921:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to insert.
1922:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1923:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1924:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1925:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1926:/usr/include/c++/9/bits/basic_string.h ****        *
1927:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1928:/usr/include/c++/9/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1929:/usr/include/c++/9/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1930:/usr/include/c++/9/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1931:/usr/include/c++/9/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1932:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1933:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.
1934:/usr/include/c++/9/bits/basic_string.h ****       */
1935:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1936:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1937:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
1938:/usr/include/c++/9/bits/basic_string.h ****       {
1939:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1940:/usr/include/c++/9/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1941:/usr/include/c++/9/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1942:/usr/include/c++/9/bits/basic_string.h ****       }
1943:/usr/include/c++/9/bits/basic_string.h **** 
1944:/usr/include/c++/9/bits/basic_string.h ****       /**
1945:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1946:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1947:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1948:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to insert.
1949:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1950:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1951:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1952:/usr/include/c++/9/bits/basic_string.h ****        *
1953:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1954:/usr/include/c++/9/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1955:/usr/include/c++/9/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1956:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1957:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1958:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
1959:/usr/include/c++/9/bits/basic_string.h ****       */
1960:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1961:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1962:/usr/include/c++/9/bits/basic_string.h ****       {
1963:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1964:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1965:/usr/include/c++/9/bits/basic_string.h ****       }
1966:/usr/include/c++/9/bits/basic_string.h **** 
1967:/usr/include/c++/9/bits/basic_string.h ****       /**
1968:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1969:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1970:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1971:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1972:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to insert.
1973:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1974:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1975:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1976:/usr/include/c++/9/bits/basic_string.h ****        *
1977:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1978:/usr/include/c++/9/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1979:/usr/include/c++/9/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1980:/usr/include/c++/9/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1981:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1982:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.
1983:/usr/include/c++/9/bits/basic_string.h ****       */
1984:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
1985:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1986:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1987:/usr/include/c++/9/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1988:/usr/include/c++/9/bits/basic_string.h **** 
1989:/usr/include/c++/9/bits/basic_string.h ****       /**
1990:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1991:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1992:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1993:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String value to insert.
1994:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
1995:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1996:/usr/include/c++/9/bits/basic_string.h ****        *
1997:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1998:/usr/include/c++/9/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1999:/usr/include/c++/9/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
2000:/usr/include/c++/9/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
2001:/usr/include/c++/9/bits/basic_string.h ****       */
2002:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2003:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2004:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string& __str)
2005:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2006:/usr/include/c++/9/bits/basic_string.h **** 
2007:/usr/include/c++/9/bits/basic_string.h ****       /**
2008:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2009:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2010:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2011:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string value to insert.
2012:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
2013:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2014:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2015:/usr/include/c++/9/bits/basic_string.h ****        *
2016:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2017:/usr/include/c++/9/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2018:/usr/include/c++/9/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2019:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2020:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
2021:/usr/include/c++/9/bits/basic_string.h ****       */
2022:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2023:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2024:/usr/include/c++/9/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2025:/usr/include/c++/9/bits/basic_string.h ****       {
2026:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2027:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= end());
2028:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2029:/usr/include/c++/9/bits/basic_string.h ****       }
2030:/usr/include/c++/9/bits/basic_string.h **** 
2031:/usr/include/c++/9/bits/basic_string.h ****       /**
2032:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2033:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2034:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2035:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string value to insert.
2036:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2037:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2038:/usr/include/c++/9/bits/basic_string.h ****        *
2039:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2040:/usr/include/c++/9/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2041:/usr/include/c++/9/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2042:/usr/include/c++/9/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2043:/usr/include/c++/9/bits/basic_string.h ****       */
2044:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2045:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2046:/usr/include/c++/9/bits/basic_string.h ****       {
2047:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2048:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2049:/usr/include/c++/9/bits/basic_string.h ****       }
2050:/usr/include/c++/9/bits/basic_string.h **** 
2051:/usr/include/c++/9/bits/basic_string.h ****       /**
2052:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2053:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2054:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2055:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2056:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to insert.
2057:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2058:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2059:/usr/include/c++/9/bits/basic_string.h ****        *
2060:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2061:/usr/include/c++/9/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2062:/usr/include/c++/9/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2063:/usr/include/c++/9/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2064:/usr/include/c++/9/bits/basic_string.h ****       */
2065:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2066:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2067:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT __c)
2068:/usr/include/c++/9/bits/basic_string.h ****       {
2069:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2070:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= end());
2071:/usr/include/c++/9/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2072:/usr/include/c++/9/bits/basic_string.h ****       }
2073:/usr/include/c++/9/bits/basic_string.h **** 
2074:/usr/include/c++/9/bits/basic_string.h ****       /**
2075:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2076:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2077:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2078:/usr/include/c++/9/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2079:/usr/include/c++/9/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2080:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2081:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2082:/usr/include/c++/9/bits/basic_string.h ****        *
2083:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2084:/usr/include/c++/9/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2085:/usr/include/c++/9/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2086:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2087:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
2088:/usr/include/c++/9/bits/basic_string.h ****       */
2089:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
2090:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator,
2091:/usr/include/c++/9/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2092:/usr/include/c++/9/bits/basic_string.h ****         basic_string&
2093:/usr/include/c++/9/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2094:/usr/include/c++/9/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2095:/usr/include/c++/9/bits/basic_string.h ****         {
2096:/usr/include/c++/9/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2097:/usr/include/c++/9/bits/basic_string.h **** 				   && __i2 <= end());
2098:/usr/include/c++/9/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2099:/usr/include/c++/9/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2100:/usr/include/c++/9/bits/basic_string.h **** 					   std::__false_type());
2101:/usr/include/c++/9/bits/basic_string.h **** 	}
2102:/usr/include/c++/9/bits/basic_string.h **** #else
2103:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
2104:/usr/include/c++/9/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2105:/usr/include/c++/9/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2106:/usr/include/c++/9/bits/basic_string.h **** #else
2107:/usr/include/c++/9/bits/basic_string.h ****         basic_string&
2108:/usr/include/c++/9/bits/basic_string.h **** #endif
2109:/usr/include/c++/9/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2110:/usr/include/c++/9/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2111:/usr/include/c++/9/bits/basic_string.h ****         {
2112:/usr/include/c++/9/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2113:/usr/include/c++/9/bits/basic_string.h **** 				   && __i2 <= end());
2114:/usr/include/c++/9/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2115:/usr/include/c++/9/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2116:/usr/include/c++/9/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2117:/usr/include/c++/9/bits/basic_string.h **** 	}
2118:/usr/include/c++/9/bits/basic_string.h **** #endif
2119:/usr/include/c++/9/bits/basic_string.h **** 
2120:/usr/include/c++/9/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2121:/usr/include/c++/9/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2122:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2123:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2124:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2125:/usr/include/c++/9/bits/basic_string.h ****       {
2126:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2127:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= end());
2128:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2129:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2130:/usr/include/c++/9/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2131:/usr/include/c++/9/bits/basic_string.h ****       }
2132:/usr/include/c++/9/bits/basic_string.h **** 
2133:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2134:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2135:/usr/include/c++/9/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2136:/usr/include/c++/9/bits/basic_string.h ****       {
2137:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2138:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= end());
2139:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2140:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2141:/usr/include/c++/9/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2142:/usr/include/c++/9/bits/basic_string.h ****       }
2143:/usr/include/c++/9/bits/basic_string.h **** 
2144:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2145:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2146:/usr/include/c++/9/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2147:/usr/include/c++/9/bits/basic_string.h ****       {
2148:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2149:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= end());
2150:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2151:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2152:/usr/include/c++/9/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2153:/usr/include/c++/9/bits/basic_string.h ****       }
2154:/usr/include/c++/9/bits/basic_string.h **** 
2155:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2156:/usr/include/c++/9/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2157:/usr/include/c++/9/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2158:/usr/include/c++/9/bits/basic_string.h ****       {
2159:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2160:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= end());
2161:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2162:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2163:/usr/include/c++/9/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2164:/usr/include/c++/9/bits/basic_string.h ****       }
2165:/usr/include/c++/9/bits/basic_string.h **** 
2166:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
2167:/usr/include/c++/9/bits/basic_string.h ****       /**
2168:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2169:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2170:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2171:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2172:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2173:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2174:/usr/include/c++/9/bits/basic_string.h ****        *
2175:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2176:/usr/include/c++/9/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2177:/usr/include/c++/9/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2178:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2179:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
2180:/usr/include/c++/9/bits/basic_string.h ****       */
2181:/usr/include/c++/9/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2182:/usr/include/c++/9/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2183:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2184:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
2185:/usr/include/c++/9/bits/basic_string.h **** 
2186:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2187:/usr/include/c++/9/bits/basic_string.h ****       /**
2188:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2189:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2190:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2191:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2192:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2193:/usr/include/c++/9/bits/basic_string.h ****       */
2194:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2195:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2196:/usr/include/c++/9/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2197:/usr/include/c++/9/bits/basic_string.h **** 	{
2198:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2199:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2200:/usr/include/c++/9/bits/basic_string.h **** 	}
2201:/usr/include/c++/9/bits/basic_string.h **** 
2202:/usr/include/c++/9/bits/basic_string.h ****       /**
2203:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2204:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2205:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2206:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2207:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2208:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2209:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2210:/usr/include/c++/9/bits/basic_string.h ****       */
2211:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2212:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2213:/usr/include/c++/9/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2214:/usr/include/c++/9/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2215:/usr/include/c++/9/bits/basic_string.h **** 	{
2216:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2217:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
2218:/usr/include/c++/9/bits/basic_string.h **** 	      __sv.data()
2219:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2220:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2221:/usr/include/c++/9/bits/basic_string.h **** 	}
2222:/usr/include/c++/9/bits/basic_string.h **** 
2223:/usr/include/c++/9/bits/basic_string.h ****       /**
2224:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2225:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2226:/usr/include/c++/9/bits/basic_string.h ****           to replace at.
2227:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2228:/usr/include/c++/9/bits/basic_string.h ****           for the replace.
2229:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2230:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
2231:/usr/include/c++/9/bits/basic_string.h ****       */
2232:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2233:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2234:/usr/include/c++/9/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2235:/usr/include/c++/9/bits/basic_string.h **** 	{
2236:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2237:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2238:/usr/include/c++/9/bits/basic_string.h **** 	}
2239:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2240:/usr/include/c++/9/bits/basic_string.h **** 
2241:/usr/include/c++/9/bits/basic_string.h ****     private:
2242:/usr/include/c++/9/bits/basic_string.h ****       template<class _Integer>
2243:/usr/include/c++/9/bits/basic_string.h **** 	basic_string&
2244:/usr/include/c++/9/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2245:/usr/include/c++/9/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2246:/usr/include/c++/9/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2247:/usr/include/c++/9/bits/basic_string.h **** 
2248:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
2249:/usr/include/c++/9/bits/basic_string.h **** 	basic_string&
2250:/usr/include/c++/9/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2251:/usr/include/c++/9/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2252:/usr/include/c++/9/bits/basic_string.h **** 			    __false_type);
2253:/usr/include/c++/9/bits/basic_string.h **** 
2254:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2255:/usr/include/c++/9/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2256:/usr/include/c++/9/bits/basic_string.h **** 		     _CharT __c);
2257:/usr/include/c++/9/bits/basic_string.h **** 
2258:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2259:/usr/include/c++/9/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2260:/usr/include/c++/9/bits/basic_string.h **** 		 const size_type __len2);
2261:/usr/include/c++/9/bits/basic_string.h **** 
2262:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
2263:/usr/include/c++/9/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2264:/usr/include/c++/9/bits/basic_string.h **** 
2265:/usr/include/c++/9/bits/basic_string.h ****     public:
2266:/usr/include/c++/9/bits/basic_string.h **** 
2267:/usr/include/c++/9/bits/basic_string.h ****       /**
2268:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2269:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2270:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2271:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2272:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Number of characters actually copied
2273:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2274:/usr/include/c++/9/bits/basic_string.h ****        *
2275:/usr/include/c++/9/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2276:/usr/include/c++/9/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2277:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.
2278:/usr/include/c++/9/bits/basic_string.h ****       */
2279:/usr/include/c++/9/bits/basic_string.h ****       size_type
2280:/usr/include/c++/9/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2281:/usr/include/c++/9/bits/basic_string.h **** 
2282:/usr/include/c++/9/bits/basic_string.h ****       /**
2283:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2284:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  String to swap with.
2285:/usr/include/c++/9/bits/basic_string.h ****        *
2286:/usr/include/c++/9/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2287:/usr/include/c++/9/bits/basic_string.h ****        *  time.
2288:/usr/include/c++/9/bits/basic_string.h ****       */
2289:/usr/include/c++/9/bits/basic_string.h ****       void
2290:/usr/include/c++/9/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2291:/usr/include/c++/9/bits/basic_string.h **** 
2292:/usr/include/c++/9/bits/basic_string.h ****       // String operations:
2293:/usr/include/c++/9/bits/basic_string.h ****       /**
2294:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2295:/usr/include/c++/9/bits/basic_string.h ****        *
2296:/usr/include/c++/9/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2297:/usr/include/c++/9/bits/basic_string.h ****        *  happen.
2298:/usr/include/c++/9/bits/basic_string.h ****       */
2299:/usr/include/c++/9/bits/basic_string.h ****       const _CharT*
2300:/usr/include/c++/9/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
  86              		.loc 2 2300 7 view .LVU3
  87              		.loc 2 2300 7 is_stmt 0 view .LVU4
  88              	.LBE3770:
  89              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:99:     return what_.c_str();
  90              		.loc 1 99 24 view .LVU5
  91 0004 488B4760 		movq	96(%rdi), %rax	# MEM[(char * *)this_1(D) + 96B], MEM[(char * *)this_1(D) + 96B]
  92              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:100:   }
 100:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   }
  93              		.loc 1 100 3 view .LVU6
  94 0008 C3       		ret	
  95              		.cfi_endproc
  96              	.LFE2953:
  98              		.section	.text._ZN3c105ErrorD2Ev,"axG",@progbits,_ZN3c105ErrorD5Ev,comdat
  99              		.align 2
 100              		.p2align 4
 101              		.weak	_ZN3c105ErrorD2Ev
 103              	_ZN3c105ErrorD2Ev:
 104              	.LVL2:
 105              	.LFB7893:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 106              		.loc 1 28 15 is_stmt 1 view -0
 107              		.cfi_startproc
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 108              		.loc 1 28 15 is_stmt 0 view .LVU8
 109 0000 F30F1EFA 		endbr64	
 110              	.LBB3938:
 111 0004 488D0500 		leaq	16+_ZTVN3c105ErrorE(%rip), %rax	#, tmp109
 111      000000
 112              	.LBE3938:
 113 000b 4154     		pushq	%r12	#
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 12, -16
 116 000d 55       		pushq	%rbp	#
 117              		.cfi_def_cfa_offset 24
 118              		.cfi_offset 6, -24
 119 000e 4889FD   		movq	%rdi, %rbp	# tmp108, this
 120 0011 53       		pushq	%rbx	#
 121              		.cfi_def_cfa_offset 32
 122              		.cfi_offset 3, -32
 123              	.LBB4042:
 124              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 125              		.loc 1 28 15 view .LVU9
 126 0012 488907   		movq	%rax, (%rdi)	# tmp109, this_4(D)->D.55460._vptr.exception
 127              	.LVL3:
 128              	.LBB3939:
 129              	.LBI3939:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 130              		.loc 2 657 7 is_stmt 1 view .LVU10
 131              	.LBB3940:
 132              	.LBI3940:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 133              		.loc 2 229 7 view .LVU11
 134              	.LBB3941:
 135              	.LBB3942:
 136              	.LBI3942:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 137              		.loc 2 221 7 view .LVU12
 138              	.LBB3943:
 139              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 140              		.loc 2 222 26 is_stmt 0 view .LVU13
 141 0015 488BBF80 		movq	128(%rdi), %rdi	# MEM[(char * *)this_4(D) + 128B], _15
 141      000000
 142              	.LVL4:
 143              	.LBB3944:
 144              	.LBI3944:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 145              		.loc 2 200 7 is_stmt 1 view .LVU14
 146              	.LBB3945:
 147              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 148              		.loc 2 203 57 is_stmt 0 view .LVU15
 149 001c 488D8590 		leaq	144(%rbp), %rax	#, tmp100
 149      000000
 150              	.LBE3945:
 151              	.LBE3944:
 152              	.LBE3943:
 153              	.LBE3942:
 154              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 155              		.loc 2 231 2 view .LVU16
 156 0023 4839C7   		cmpq	%rax, %rdi	# tmp100, _15
 157 0026 7405     		je	.L4	#,
 158              	.LVL5:
 159              	.LBB3946:
 160              	.LBI3946:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 161              		.loc 2 236 7 is_stmt 1 view .LVU17
 162              	.LBB3947:
 163              	.LBB3948:
 164              	.LBI3948:
 165              		.file 3 "/usr/include/c++/9/bits/alloc_traits.h"
   1:/usr/include/c++/9/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/9/bits/alloc_traits.h **** 
   3:/usr/include/c++/9/bits/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/alloc_traits.h **** //
   5:/usr/include/c++/9/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/9/bits/alloc_traits.h **** 
  11:/usr/include/c++/9/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/alloc_traits.h **** 
  16:/usr/include/c++/9/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/alloc_traits.h **** 
  20:/usr/include/c++/9/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/alloc_traits.h **** 
  25:/usr/include/c++/9/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/9/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/9/bits/alloc_traits.h ****  */
  29:/usr/include/c++/9/bits/alloc_traits.h **** 
  30:/usr/include/c++/9/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/9/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/9/bits/alloc_traits.h **** 
  33:/usr/include/c++/9/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  34:/usr/include/c++/9/bits/alloc_traits.h **** 
  35:/usr/include/c++/9/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  36:/usr/include/c++/9/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/usr/include/c++/9/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/usr/include/c++/9/bits/alloc_traits.h **** 
  39:/usr/include/c++/9/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  40:/usr/include/c++/9/bits/alloc_traits.h **** 
  41:/usr/include/c++/9/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/9/bits/alloc_traits.h **** {
  43:/usr/include/c++/9/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/9/bits/alloc_traits.h **** 
  45:/usr/include/c++/9/bits/alloc_traits.h ****   struct __allocator_traits_base
  46:/usr/include/c++/9/bits/alloc_traits.h ****   {
  47:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  48:/usr/include/c++/9/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  49:/usr/include/c++/9/bits/alloc_traits.h **** 
  50:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  51:/usr/include/c++/9/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  52:/usr/include/c++/9/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  53:/usr/include/c++/9/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  54:/usr/include/c++/9/bits/alloc_traits.h **** 
  55:/usr/include/c++/9/bits/alloc_traits.h ****   protected:
  56:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  57:/usr/include/c++/9/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  58:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  59:/usr/include/c++/9/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  60:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  61:/usr/include/c++/9/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  62:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  63:/usr/include/c++/9/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  64:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  65:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  66:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  67:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  68:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  69:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  70:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  71:/usr/include/c++/9/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  72:/usr/include/c++/9/bits/alloc_traits.h ****   };
  73:/usr/include/c++/9/bits/alloc_traits.h **** 
  74:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  75:/usr/include/c++/9/bits/alloc_traits.h ****     using __alloc_rebind
  76:/usr/include/c++/9/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  77:/usr/include/c++/9/bits/alloc_traits.h **** 
  78:/usr/include/c++/9/bits/alloc_traits.h ****   /**
  79:/usr/include/c++/9/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/usr/include/c++/9/bits/alloc_traits.h ****    * @ingroup allocators
  81:/usr/include/c++/9/bits/alloc_traits.h ****   */
  82:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/usr/include/c++/9/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  84:/usr/include/c++/9/bits/alloc_traits.h ****     {
  85:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator type
  86:/usr/include/c++/9/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocated type
  88:/usr/include/c++/9/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/usr/include/c++/9/bits/alloc_traits.h **** 
  90:/usr/include/c++/9/bits/alloc_traits.h ****       /**
  91:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  92:/usr/include/c++/9/bits/alloc_traits.h ****        *
  93:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  94:/usr/include/c++/9/bits/alloc_traits.h ****       */
  95:/usr/include/c++/9/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  96:/usr/include/c++/9/bits/alloc_traits.h **** 
  97:/usr/include/c++/9/bits/alloc_traits.h ****     private:
  98:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
  99:/usr/include/c++/9/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 100:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Ptr
 101:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 102:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 103:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 104:/usr/include/c++/9/bits/alloc_traits.h **** 
 105:/usr/include/c++/9/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 106:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 107:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 108:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 109:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 110:/usr/include/c++/9/bits/alloc_traits.h **** 
 111:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 112:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 113:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Diff
 114:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 115:/usr/include/c++/9/bits/alloc_traits.h **** 
 116:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 117:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 118:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 119:/usr/include/c++/9/bits/alloc_traits.h **** 
 120:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 121:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 122:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 123:/usr/include/c++/9/bits/alloc_traits.h **** 
 124:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 125:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 126:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 127:/usr/include/c++/9/bits/alloc_traits.h **** 
 128:/usr/include/c++/9/bits/alloc_traits.h ****     public:
 129:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 130:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 131:/usr/include/c++/9/bits/alloc_traits.h ****        *
 132:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 133:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 134:/usr/include/c++/9/bits/alloc_traits.h ****       */
 135:/usr/include/c++/9/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 136:/usr/include/c++/9/bits/alloc_traits.h **** 
 137:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 138:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 139:/usr/include/c++/9/bits/alloc_traits.h ****        *
 140:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 141:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 142:/usr/include/c++/9/bits/alloc_traits.h ****       */
 143:/usr/include/c++/9/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 144:/usr/include/c++/9/bits/alloc_traits.h **** 
 145:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 146:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 147:/usr/include/c++/9/bits/alloc_traits.h ****        *
 148:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 149:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 150:/usr/include/c++/9/bits/alloc_traits.h ****       */
 151:/usr/include/c++/9/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 152:/usr/include/c++/9/bits/alloc_traits.h **** 
 153:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 154:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 155:/usr/include/c++/9/bits/alloc_traits.h ****        *
 156:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 157:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 158:/usr/include/c++/9/bits/alloc_traits.h ****       */
 159:/usr/include/c++/9/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 160:/usr/include/c++/9/bits/alloc_traits.h **** 
 161:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 162:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's size type
 163:/usr/include/c++/9/bits/alloc_traits.h ****        *
 164:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 165:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 166:/usr/include/c++/9/bits/alloc_traits.h ****       */
 167:/usr/include/c++/9/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 168:/usr/include/c++/9/bits/alloc_traits.h **** 
 169:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 170:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 171:/usr/include/c++/9/bits/alloc_traits.h ****        *
 172:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 173:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 174:/usr/include/c++/9/bits/alloc_traits.h ****       */
 175:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 176:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 177:/usr/include/c++/9/bits/alloc_traits.h **** 
 178:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 179:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 180:/usr/include/c++/9/bits/alloc_traits.h ****        *
 181:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 182:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 183:/usr/include/c++/9/bits/alloc_traits.h ****       */
 184:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 185:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 186:/usr/include/c++/9/bits/alloc_traits.h **** 
 187:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 188:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 189:/usr/include/c++/9/bits/alloc_traits.h ****        *
 190:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 191:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 192:/usr/include/c++/9/bits/alloc_traits.h ****       */
 193:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_swap
 194:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 195:/usr/include/c++/9/bits/alloc_traits.h **** 
 196:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 197:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 198:/usr/include/c++/9/bits/alloc_traits.h ****        *
 199:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 200:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 201:/usr/include/c++/9/bits/alloc_traits.h ****       */
 202:/usr/include/c++/9/bits/alloc_traits.h ****       using is_always_equal
 203:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 204:/usr/include/c++/9/bits/alloc_traits.h **** 
 205:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 206:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 207:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 208:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 209:/usr/include/c++/9/bits/alloc_traits.h **** 
 210:/usr/include/c++/9/bits/alloc_traits.h ****     private:
 211:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 212:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 213:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 214:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 215:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 216:/usr/include/c++/9/bits/alloc_traits.h **** 
 217:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 218:/usr/include/c++/9/bits/alloc_traits.h **** 	static pointer
 219:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 220:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 221:/usr/include/c++/9/bits/alloc_traits.h **** 
 222:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 223:/usr/include/c++/9/bits/alloc_traits.h **** 	struct __construct_helper
 224:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 225:/usr/include/c++/9/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 226:/usr/include/c++/9/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 227:/usr/include/c++/9/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 228:/usr/include/c++/9/bits/alloc_traits.h **** 	    static true_type __test(int);
 229:/usr/include/c++/9/bits/alloc_traits.h **** 
 230:/usr/include/c++/9/bits/alloc_traits.h **** 	  template<typename>
 231:/usr/include/c++/9/bits/alloc_traits.h **** 	    static false_type __test(...);
 232:/usr/include/c++/9/bits/alloc_traits.h **** 
 233:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 234:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 235:/usr/include/c++/9/bits/alloc_traits.h **** 
 236:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 237:/usr/include/c++/9/bits/alloc_traits.h **** 	using __has_construct
 238:/usr/include/c++/9/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 239:/usr/include/c++/9/bits/alloc_traits.h **** 
 240:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 241:/usr/include/c++/9/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 242:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 243:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 244:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 245:/usr/include/c++/9/bits/alloc_traits.h **** 
 246:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 247:/usr/include/c++/9/bits/alloc_traits.h **** 	static
 248:/usr/include/c++/9/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 249:/usr/include/c++/9/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 250:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 251:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(::new((void*)__p)
 252:/usr/include/c++/9/bits/alloc_traits.h **** 			  _Tp(std::forward<_Args>(__args)...)))
 253:/usr/include/c++/9/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 254:/usr/include/c++/9/bits/alloc_traits.h **** 
 255:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 256:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 257:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 258:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 259:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 260:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 261:/usr/include/c++/9/bits/alloc_traits.h **** 
 262:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 263:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 264:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 265:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__p->~_Tp()))
 266:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 267:/usr/include/c++/9/bits/alloc_traits.h **** 
 268:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 269:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 270:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 271:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 272:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 273:/usr/include/c++/9/bits/alloc_traits.h **** 
 274:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 275:/usr/include/c++/9/bits/alloc_traits.h **** 	static size_type
 276:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 277:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 278:/usr/include/c++/9/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 279:/usr/include/c++/9/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 280:/usr/include/c++/9/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 281:/usr/include/c++/9/bits/alloc_traits.h **** 	    / sizeof(value_type);
 282:/usr/include/c++/9/bits/alloc_traits.h **** 	}
 283:/usr/include/c++/9/bits/alloc_traits.h **** 
 284:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 285:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 286:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 287:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 288:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 289:/usr/include/c++/9/bits/alloc_traits.h **** 
 290:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 291:/usr/include/c++/9/bits/alloc_traits.h **** 	static _Alloc2
 292:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 293:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a; }
 294:/usr/include/c++/9/bits/alloc_traits.h **** 
 295:/usr/include/c++/9/bits/alloc_traits.h ****     public:
 296:/usr/include/c++/9/bits/alloc_traits.h **** 
 297:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 298:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 299:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 300:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 301:/usr/include/c++/9/bits/alloc_traits.h ****        *
 302:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 303:/usr/include/c++/9/bits/alloc_traits.h ****       */
 304:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 305:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 306:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 307:/usr/include/c++/9/bits/alloc_traits.h **** 
 308:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 309:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 310:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 311:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 312:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 313:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 314:/usr/include/c++/9/bits/alloc_traits.h ****        *          of type @c value_type
 315:/usr/include/c++/9/bits/alloc_traits.h ****        *
 316:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 317:/usr/include/c++/9/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 318:/usr/include/c++/9/bits/alloc_traits.h ****       */
 319:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 320:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 321:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 322:/usr/include/c++/9/bits/alloc_traits.h **** 
 323:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 324:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 325:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 326:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 327:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 328:/usr/include/c++/9/bits/alloc_traits.h ****        *
 329:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 330:/usr/include/c++/9/bits/alloc_traits.h ****       */
 331:/usr/include/c++/9/bits/alloc_traits.h ****       static void
 332:/usr/include/c++/9/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 333:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 334:/usr/include/c++/9/bits/alloc_traits.h **** 
 335:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 336:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 337:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 338:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 339:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 340:/usr/include/c++/9/bits/alloc_traits.h ****        *
 341:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 342:/usr/include/c++/9/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 343:/usr/include/c++/9/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 344:/usr/include/c++/9/bits/alloc_traits.h ****        *  arguments @a __args...
 345:/usr/include/c++/9/bits/alloc_traits.h ****       */
 346:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 347:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 348:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 349:/usr/include/c++/9/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 350:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 351:/usr/include/c++/9/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 352:/usr/include/c++/9/bits/alloc_traits.h **** 
 353:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 354:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 355:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 356:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 357:/usr/include/c++/9/bits/alloc_traits.h ****        *
 358:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 359:/usr/include/c++/9/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 360:/usr/include/c++/9/bits/alloc_traits.h ****       */
 361:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 362:/usr/include/c++/9/bits/alloc_traits.h **** 	static void destroy(_Alloc& __a, _Tp* __p)
 363:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 364:/usr/include/c++/9/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 365:/usr/include/c++/9/bits/alloc_traits.h **** 
 366:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 367:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 368:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 369:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 370:/usr/include/c++/9/bits/alloc_traits.h ****        *
 371:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 372:/usr/include/c++/9/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 373:/usr/include/c++/9/bits/alloc_traits.h ****       */
 374:/usr/include/c++/9/bits/alloc_traits.h ****       static size_type max_size(const _Alloc& __a) noexcept
 375:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 376:/usr/include/c++/9/bits/alloc_traits.h **** 
 377:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 378:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 379:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 380:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 381:/usr/include/c++/9/bits/alloc_traits.h ****        *
 382:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 383:/usr/include/c++/9/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 384:/usr/include/c++/9/bits/alloc_traits.h ****       */
 385:/usr/include/c++/9/bits/alloc_traits.h ****       static _Alloc
 386:/usr/include/c++/9/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 387:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 388:/usr/include/c++/9/bits/alloc_traits.h ****     };
 389:/usr/include/c++/9/bits/alloc_traits.h **** 
 390:/usr/include/c++/9/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 391:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Tp>
 392:/usr/include/c++/9/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 393:/usr/include/c++/9/bits/alloc_traits.h ****     {
 394:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator type
 395:/usr/include/c++/9/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 396:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocated type
 397:/usr/include/c++/9/bits/alloc_traits.h ****       using value_type = _Tp;
 398:/usr/include/c++/9/bits/alloc_traits.h **** 
 399:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's pointer type.
 400:/usr/include/c++/9/bits/alloc_traits.h ****       using pointer = _Tp*;
 401:/usr/include/c++/9/bits/alloc_traits.h **** 
 402:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 403:/usr/include/c++/9/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 404:/usr/include/c++/9/bits/alloc_traits.h **** 
 405:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 406:/usr/include/c++/9/bits/alloc_traits.h ****       using void_pointer = void*;
 407:/usr/include/c++/9/bits/alloc_traits.h **** 
 408:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 409:/usr/include/c++/9/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 410:/usr/include/c++/9/bits/alloc_traits.h **** 
 411:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's difference type
 412:/usr/include/c++/9/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 413:/usr/include/c++/9/bits/alloc_traits.h **** 
 414:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's size type
 415:/usr/include/c++/9/bits/alloc_traits.h ****       using size_type = std::size_t;
 416:/usr/include/c++/9/bits/alloc_traits.h **** 
 417:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 418:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 419:/usr/include/c++/9/bits/alloc_traits.h **** 
 420:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 421:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 422:/usr/include/c++/9/bits/alloc_traits.h **** 
 423:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 424:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 425:/usr/include/c++/9/bits/alloc_traits.h **** 
 426:/usr/include/c++/9/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 427:/usr/include/c++/9/bits/alloc_traits.h ****       using is_always_equal = true_type;
 428:/usr/include/c++/9/bits/alloc_traits.h **** 
 429:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 430:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 431:/usr/include/c++/9/bits/alloc_traits.h **** 
 432:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 433:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 434:/usr/include/c++/9/bits/alloc_traits.h **** 
 435:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 436:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 437:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 438:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 439:/usr/include/c++/9/bits/alloc_traits.h ****        *
 440:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 441:/usr/include/c++/9/bits/alloc_traits.h ****       */
 442:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 443:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 444:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 445:/usr/include/c++/9/bits/alloc_traits.h **** 
 446:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 447:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 448:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 449:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 450:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 451:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 452:/usr/include/c++/9/bits/alloc_traits.h ****        *          of type @c value_type
 453:/usr/include/c++/9/bits/alloc_traits.h ****        *
 454:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 455:/usr/include/c++/9/bits/alloc_traits.h ****       */
 456:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 457:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 458:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 459:/usr/include/c++/9/bits/alloc_traits.h **** 
 460:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 461:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 462:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 463:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 464:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 465:/usr/include/c++/9/bits/alloc_traits.h ****        *
 466:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 467:/usr/include/c++/9/bits/alloc_traits.h ****       */
 468:/usr/include/c++/9/bits/alloc_traits.h ****       static void
 469:/usr/include/c++/9/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 166              		.loc 3 469 7 view .LVU18
 167              	.LBB3949:
 168              	.LBI3949:
 169              		.file 4 "/usr/include/c++/9/ext/new_allocator.h"
   1:/usr/include/c++/9/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/9/ext/new_allocator.h **** 
   3:/usr/include/c++/9/ext/new_allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ext/new_allocator.h **** //
   5:/usr/include/c++/9/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/9/ext/new_allocator.h **** 
  11:/usr/include/c++/9/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/ext/new_allocator.h **** 
  16:/usr/include/c++/9/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ext/new_allocator.h **** 
  20:/usr/include/c++/9/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ext/new_allocator.h **** 
  25:/usr/include/c++/9/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/9/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/9/ext/new_allocator.h ****  */
  28:/usr/include/c++/9/ext/new_allocator.h **** 
  29:/usr/include/c++/9/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/9/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/9/ext/new_allocator.h **** 
  32:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/9/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/9/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/9/ext/new_allocator.h **** #endif
  39:/usr/include/c++/9/ext/new_allocator.h **** 
  40:/usr/include/c++/9/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/9/ext/new_allocator.h **** {
  42:/usr/include/c++/9/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/9/ext/new_allocator.h **** 
  44:/usr/include/c++/9/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/9/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/9/ext/new_allocator.h **** 
  47:/usr/include/c++/9/ext/new_allocator.h ****   /**
  48:/usr/include/c++/9/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/9/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/9/ext/new_allocator.h ****    *
  51:/usr/include/c++/9/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/usr/include/c++/9/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/9/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/9/ext/new_allocator.h ****    *
  55:/usr/include/c++/9/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/9/ext/new_allocator.h ****    */
  57:/usr/include/c++/9/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/9/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/9/ext/new_allocator.h ****     {
  60:/usr/include/c++/9/ext/new_allocator.h ****     public:
  61:/usr/include/c++/9/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/9/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/9/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/9/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/9/ext/new_allocator.h **** 
  69:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/9/ext/new_allocator.h **** 	struct rebind
  71:/usr/include/c++/9/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/9/ext/new_allocator.h **** 
  73:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/9/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/9/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/9/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/9/ext/new_allocator.h **** #endif
  78:/usr/include/c++/9/ext/new_allocator.h **** 
  79:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  80:/usr/include/c++/9/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  81:/usr/include/c++/9/ext/new_allocator.h **** 
  82:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  83:/usr/include/c++/9/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  84:/usr/include/c++/9/ext/new_allocator.h **** 
  85:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Tp1>
  86:/usr/include/c++/9/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  87:/usr/include/c++/9/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  88:/usr/include/c++/9/ext/new_allocator.h **** 
  89:/usr/include/c++/9/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:/usr/include/c++/9/ext/new_allocator.h **** 
  91:/usr/include/c++/9/ext/new_allocator.h ****       pointer
  92:/usr/include/c++/9/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/c++/9/ext/new_allocator.h **** 
  95:/usr/include/c++/9/ext/new_allocator.h ****       const_pointer
  96:/usr/include/c++/9/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/c++/9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/c++/9/ext/new_allocator.h **** 
  99:/usr/include/c++/9/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 100:/usr/include/c++/9/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 101:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX_NODISCARD pointer
 102:/usr/include/c++/9/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 103:/usr/include/c++/9/ext/new_allocator.h ****       {
 104:/usr/include/c++/9/ext/new_allocator.h **** 	if (__n > this->max_size())
 105:/usr/include/c++/9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 106:/usr/include/c++/9/ext/new_allocator.h **** 
 107:/usr/include/c++/9/ext/new_allocator.h **** #if __cpp_aligned_new
 108:/usr/include/c++/9/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 109:/usr/include/c++/9/ext/new_allocator.h **** 	  {
 110:/usr/include/c++/9/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 111:/usr/include/c++/9/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 112:/usr/include/c++/9/ext/new_allocator.h **** 	  }
 113:/usr/include/c++/9/ext/new_allocator.h **** #endif
 114:/usr/include/c++/9/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 115:/usr/include/c++/9/ext/new_allocator.h ****       }
 116:/usr/include/c++/9/ext/new_allocator.h **** 
 117:/usr/include/c++/9/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 118:/usr/include/c++/9/ext/new_allocator.h ****       void
 119:/usr/include/c++/9/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 170              		.loc 4 119 7 view .LVU19
 171              	.LBB3950:
 172              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 120:/usr/include/c++/9/ext/new_allocator.h ****       {
 121:/usr/include/c++/9/ext/new_allocator.h **** #if __cpp_aligned_new
 122:/usr/include/c++/9/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 123:/usr/include/c++/9/ext/new_allocator.h **** 	  {
 124:/usr/include/c++/9/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 125:/usr/include/c++/9/ext/new_allocator.h **** 	    return;
 126:/usr/include/c++/9/ext/new_allocator.h **** 	  }
 127:/usr/include/c++/9/ext/new_allocator.h **** #endif
 128:/usr/include/c++/9/ext/new_allocator.h **** 	::operator delete(__p);
 173              		.loc 4 128 19 is_stmt 0 view .LVU20
 174 0028 E8000000 		call	_ZdlPv@PLT	#
 174      00
 175              	.LVL6:
 176              	.L4:
 177              		.loc 4 128 19 view .LVU21
 178              	.LBE3950:
 179              	.LBE3949:
 180              	.LBE3948:
 181              	.LBE3947:
 182              	.LBE3946:
 183              	.LBE3941:
 184              	.LBE3940:
 185              	.LBB3951:
 186              	.LBI3951:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 187              		.loc 2 150 14 is_stmt 1 view .LVU22
 188              	.LBB3952:
 189              	.LBI3952:
 190              		.file 5 "/usr/include/c++/9/bits/allocator.h"
   1:/usr/include/c++/9/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/9/bits/allocator.h **** 
   3:/usr/include/c++/9/bits/allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/allocator.h **** //
   5:/usr/include/c++/9/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/allocator.h **** // any later version.
  10:/usr/include/c++/9/bits/allocator.h **** 
  11:/usr/include/c++/9/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/allocator.h **** 
  16:/usr/include/c++/9/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/allocator.h **** 
  20:/usr/include/c++/9/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/allocator.h **** 
  25:/usr/include/c++/9/bits/allocator.h **** /*
  26:/usr/include/c++/9/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/9/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/9/bits/allocator.h ****  *
  29:/usr/include/c++/9/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/9/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/9/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/9/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/9/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/9/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/9/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/9/bits/allocator.h ****  */
  37:/usr/include/c++/9/bits/allocator.h **** 
  38:/usr/include/c++/9/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/9/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/9/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/9/bits/allocator.h ****  */
  42:/usr/include/c++/9/bits/allocator.h **** 
  43:/usr/include/c++/9/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/9/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/9/bits/allocator.h **** 
  46:/usr/include/c++/9/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/9/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/9/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/9/bits/allocator.h **** #endif
  51:/usr/include/c++/9/bits/allocator.h **** 
  52:/usr/include/c++/9/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/usr/include/c++/9/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/usr/include/c++/9/bits/allocator.h **** #endif
  56:/usr/include/c++/9/bits/allocator.h **** 
  57:/usr/include/c++/9/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/9/bits/allocator.h **** {
  59:/usr/include/c++/9/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/9/bits/allocator.h **** 
  61:/usr/include/c++/9/bits/allocator.h ****   /**
  62:/usr/include/c++/9/bits/allocator.h ****    *  @addtogroup allocators
  63:/usr/include/c++/9/bits/allocator.h ****    *  @{
  64:/usr/include/c++/9/bits/allocator.h ****    */
  65:/usr/include/c++/9/bits/allocator.h **** 
  66:/usr/include/c++/9/bits/allocator.h ****   /// allocator<void> specialization.
  67:/usr/include/c++/9/bits/allocator.h ****   template<>
  68:/usr/include/c++/9/bits/allocator.h ****     class allocator<void>
  69:/usr/include/c++/9/bits/allocator.h ****     {
  70:/usr/include/c++/9/bits/allocator.h ****     public:
  71:/usr/include/c++/9/bits/allocator.h ****       typedef size_t      size_type;
  72:/usr/include/c++/9/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/usr/include/c++/9/bits/allocator.h ****       typedef void*       pointer;
  74:/usr/include/c++/9/bits/allocator.h ****       typedef const void* const_pointer;
  75:/usr/include/c++/9/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/9/bits/allocator.h **** 
  77:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
  78:/usr/include/c++/9/bits/allocator.h **** 	struct rebind
  79:/usr/include/c++/9/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/usr/include/c++/9/bits/allocator.h **** 
  81:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/usr/include/c++/9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/usr/include/c++/9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/usr/include/c++/9/bits/allocator.h **** 
  86:/usr/include/c++/9/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/usr/include/c++/9/bits/allocator.h **** 
  88:/usr/include/c++/9/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/usr/include/c++/9/bits/allocator.h **** 	void
  90:/usr/include/c++/9/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/usr/include/c++/9/bits/allocator.h **** 	noexcept(noexcept(::new((void *)__p)
  92:/usr/include/c++/9/bits/allocator.h **** 			    _Up(std::forward<_Args>(__args)...)))
  93:/usr/include/c++/9/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  94:/usr/include/c++/9/bits/allocator.h **** 
  95:/usr/include/c++/9/bits/allocator.h ****       template<typename _Up>
  96:/usr/include/c++/9/bits/allocator.h **** 	void
  97:/usr/include/c++/9/bits/allocator.h **** 	destroy(_Up* __p)
  98:/usr/include/c++/9/bits/allocator.h **** 	noexcept(noexcept(__p->~_Up()))
  99:/usr/include/c++/9/bits/allocator.h **** 	{ __p->~_Up(); }
 100:/usr/include/c++/9/bits/allocator.h **** #endif
 101:/usr/include/c++/9/bits/allocator.h ****     };
 102:/usr/include/c++/9/bits/allocator.h **** 
 103:/usr/include/c++/9/bits/allocator.h ****   /**
 104:/usr/include/c++/9/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 105:/usr/include/c++/9/bits/allocator.h ****    *
 106:/usr/include/c++/9/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 107:/usr/include/c++/9/bits/allocator.h ****    *  for further details.
 108:/usr/include/c++/9/bits/allocator.h ****    *
 109:/usr/include/c++/9/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 110:/usr/include/c++/9/bits/allocator.h ****    */
 111:/usr/include/c++/9/bits/allocator.h ****   template<typename _Tp>
 112:/usr/include/c++/9/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 113:/usr/include/c++/9/bits/allocator.h ****     {
 114:/usr/include/c++/9/bits/allocator.h ****    public:
 115:/usr/include/c++/9/bits/allocator.h ****       typedef size_t     size_type;
 116:/usr/include/c++/9/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 117:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp*       pointer;
 118:/usr/include/c++/9/bits/allocator.h ****       typedef const _Tp* const_pointer;
 119:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp&       reference;
 120:/usr/include/c++/9/bits/allocator.h ****       typedef const _Tp& const_reference;
 121:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp        value_type;
 122:/usr/include/c++/9/bits/allocator.h **** 
 123:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
 124:/usr/include/c++/9/bits/allocator.h **** 	struct rebind
 125:/usr/include/c++/9/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 126:/usr/include/c++/9/bits/allocator.h **** 
 127:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
 128:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 129:/usr/include/c++/9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 130:/usr/include/c++/9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 131:/usr/include/c++/9/bits/allocator.h **** 
 132:/usr/include/c++/9/bits/allocator.h ****       typedef true_type is_always_equal;
 133:/usr/include/c++/9/bits/allocator.h **** #endif
 134:/usr/include/c++/9/bits/allocator.h **** 
 135:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/c++/9/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 137:/usr/include/c++/9/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 138:/usr/include/c++/9/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 139:/usr/include/c++/9/bits/allocator.h **** 
 140:/usr/include/c++/9/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 141:/usr/include/c++/9/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 142:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 143:/usr/include/c++/9/bits/allocator.h **** 
 144:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
 145:/usr/include/c++/9/bits/allocator.h ****       // Avoid implicit deprecation.
 146:/usr/include/c++/9/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 147:/usr/include/c++/9/bits/allocator.h **** #endif
 148:/usr/include/c++/9/bits/allocator.h **** 
 149:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
 150:/usr/include/c++/9/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 151:/usr/include/c++/9/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 152:/usr/include/c++/9/bits/allocator.h **** 
 153:/usr/include/c++/9/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 191              		.loc 5 153 7 view .LVU23
 192              	.LBB3953:
 193              	.LBI3953:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 194              		.loc 4 89 7 view .LVU24
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 195              		.loc 4 89 7 is_stmt 0 view .LVU25
 196              	.LBE3953:
 197              	.LBE3952:
 198              	.LBE3951:
 199              	.LBE3939:
 200              	.LBB3954:
 201              	.LBI3954:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 202              		.loc 2 657 7 is_stmt 1 view .LVU26
 203              	.LBB3955:
 204              	.LBI3955:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 205              		.loc 2 229 7 view .LVU27
 206              	.LBB3956:
 207              	.LBB3957:
 208              	.LBI3957:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 209              		.loc 2 221 7 view .LVU28
 210              	.LBB3958:
 211              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 212              		.loc 2 222 26 is_stmt 0 view .LVU29
 213 002d 488B7D60 		movq	96(%rbp), %rdi	# MEM[(char * *)this_4(D) + 96B], _13
 214              	.LVL7:
 215              	.LBB3959:
 216              	.LBI3959:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 217              		.loc 2 200 7 is_stmt 1 view .LVU30
 218              	.LBB3960:
 219              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 220              		.loc 2 203 57 is_stmt 0 view .LVU31
 221 0031 488D4570 		leaq	112(%rbp), %rax	#, tmp102
 222              	.LBE3960:
 223              	.LBE3959:
 224              	.LBE3958:
 225              	.LBE3957:
 226              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 227              		.loc 2 231 2 view .LVU32
 228 0035 4839C7   		cmpq	%rax, %rdi	# tmp102, _13
 229 0038 7405     		je	.L5	#,
 230              	.LVL8:
 231              	.LBB3961:
 232              	.LBI3961:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 233              		.loc 2 236 7 is_stmt 1 view .LVU33
 234              	.LBB3962:
 235              	.LBB3963:
 236              	.LBI3963:
 237              		.loc 3 469 7 view .LVU34
 238              	.LBB3964:
 239              	.LBI3964:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 240              		.loc 4 119 7 view .LVU35
 241              	.LBB3965:
 242              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 243              		.loc 4 128 19 is_stmt 0 view .LVU36
 244 003a E8000000 		call	_ZdlPv@PLT	#
 244      00
 245              	.LVL9:
 246              	.L5:
 247              		.loc 4 128 19 view .LVU37
 248              	.LBE3965:
 249              	.LBE3964:
 250              	.LBE3963:
 251              	.LBE3962:
 252              	.LBE3961:
 253              	.LBE3956:
 254              	.LBE3955:
 255              	.LBB3966:
 256              	.LBI3966:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 257              		.loc 2 150 14 is_stmt 1 view .LVU38
 258              	.LBB3967:
 259              	.LBI3967:
 260              		.loc 5 153 7 view .LVU39
 261              	.LBB3968:
 262              	.LBI3968:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 263              		.loc 4 89 7 view .LVU40
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 264              		.loc 4 89 7 is_stmt 0 view .LVU41
 265              	.LBE3968:
 266              	.LBE3967:
 267              	.LBE3966:
 268              	.LBE3954:
 269              	.LBB3969:
 270              	.LBI3969:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 271              		.loc 2 657 7 is_stmt 1 view .LVU42
 272              	.LBB3970:
 273              	.LBI3970:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 274              		.loc 2 229 7 view .LVU43
 275              	.LBB3971:
 276              	.LBB3972:
 277              	.LBI3972:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 278              		.loc 2 221 7 view .LVU44
 279              	.LBB3973:
 280              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 281              		.loc 2 222 26 is_stmt 0 view .LVU45
 282 003f 488B7D40 		movq	64(%rbp), %rdi	# MEM[(char * *)this_4(D) + 64B], _11
 283              	.LVL10:
 284              	.LBB3974:
 285              	.LBI3974:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 286              		.loc 2 200 7 is_stmt 1 view .LVU46
 287              	.LBB3975:
 288              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 289              		.loc 2 203 57 is_stmt 0 view .LVU47
 290 0043 488D4550 		leaq	80(%rbp), %rax	#, tmp104
 291              	.LBE3975:
 292              	.LBE3974:
 293              	.LBE3973:
 294              	.LBE3972:
 295              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 296              		.loc 2 231 2 view .LVU48
 297 0047 4839C7   		cmpq	%rax, %rdi	# tmp104, _11
 298 004a 7405     		je	.L6	#,
 299              	.LVL11:
 300              	.LBB3976:
 301              	.LBI3976:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 302              		.loc 2 236 7 is_stmt 1 view .LVU49
 303              	.LBB3977:
 304              	.LBB3978:
 305              	.LBI3978:
 306              		.loc 3 469 7 view .LVU50
 307              	.LBB3979:
 308              	.LBI3979:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 309              		.loc 4 119 7 view .LVU51
 310              	.LBB3980:
 311              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 312              		.loc 4 128 19 is_stmt 0 view .LVU52
 313 004c E8000000 		call	_ZdlPv@PLT	#
 313      00
 314              	.LVL12:
 315              	.L6:
 316              		.loc 4 128 19 view .LVU53
 317              	.LBE3980:
 318              	.LBE3979:
 319              	.LBE3978:
 320              	.LBE3977:
 321              	.LBE3976:
 322              	.LBE3971:
 323              	.LBE3970:
 324              	.LBB3981:
 325              	.LBI3981:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 326              		.loc 2 150 14 is_stmt 1 view .LVU54
 327              	.LBB3982:
 328              	.LBI3982:
 329              		.loc 5 153 7 view .LVU55
 330              	.LBB3983:
 331              	.LBI3983:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 332              		.loc 4 89 7 view .LVU56
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 333              		.loc 4 89 7 is_stmt 0 view .LVU57
 334              	.LBE3983:
 335              	.LBE3982:
 336              	.LBE3981:
 337              	.LBE3969:
 338              	.LBB3984:
 339              	.LBI3984:
 340              		.file 6 "/usr/include/c++/9/bits/stl_vector.h"
   1:/usr/include/c++/9/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_vector.h **** 
   3:/usr/include/c++/9/bits/stl_vector.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_vector.h **** //
   5:/usr/include/c++/9/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_vector.h **** 
  11:/usr/include/c++/9/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_vector.h **** 
  16:/usr/include/c++/9/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_vector.h **** 
  20:/usr/include/c++/9/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_vector.h **** 
  25:/usr/include/c++/9/bits/stl_vector.h **** /*
  26:/usr/include/c++/9/bits/stl_vector.h ****  *
  27:/usr/include/c++/9/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_vector.h ****  *
  30:/usr/include/c++/9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_vector.h ****  *
  38:/usr/include/c++/9/bits/stl_vector.h ****  *
  39:/usr/include/c++/9/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/9/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_vector.h ****  *
  42:/usr/include/c++/9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_vector.h ****  */
  50:/usr/include/c++/9/bits/stl_vector.h **** 
  51:/usr/include/c++/9/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/9/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/9/bits/stl_vector.h ****  */
  55:/usr/include/c++/9/bits/stl_vector.h **** 
  56:/usr/include/c++/9/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/9/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/9/bits/stl_vector.h **** 
  59:/usr/include/c++/9/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/9/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/9/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/9/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/9/bits/stl_vector.h **** #endif
  65:/usr/include/c++/9/bits/stl_vector.h **** 
  66:/usr/include/c++/9/bits/stl_vector.h **** #include <debug/assertions.h>
  67:/usr/include/c++/9/bits/stl_vector.h **** 
  68:/usr/include/c++/9/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  69:/usr/include/c++/9/bits/stl_vector.h **** extern "C" void
  70:/usr/include/c++/9/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  71:/usr/include/c++/9/bits/stl_vector.h **** 					  const void*, const void*);
  72:/usr/include/c++/9/bits/stl_vector.h **** #endif
  73:/usr/include/c++/9/bits/stl_vector.h **** 
  74:/usr/include/c++/9/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  75:/usr/include/c++/9/bits/stl_vector.h **** {
  76:/usr/include/c++/9/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  77:/usr/include/c++/9/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  78:/usr/include/c++/9/bits/stl_vector.h **** 
  79:/usr/include/c++/9/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  80:/usr/include/c++/9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  81:/usr/include/c++/9/bits/stl_vector.h ****     struct _Vector_base
  82:/usr/include/c++/9/bits/stl_vector.h ****     {
  83:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  84:/usr/include/c++/9/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  85:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  86:/usr/include/c++/9/bits/stl_vector.h ****        	pointer;
  87:/usr/include/c++/9/bits/stl_vector.h **** 
  88:/usr/include/c++/9/bits/stl_vector.h ****       struct _Vector_impl_data
  89:/usr/include/c++/9/bits/stl_vector.h ****       {
  90:/usr/include/c++/9/bits/stl_vector.h **** 	pointer _M_start;
  91:/usr/include/c++/9/bits/stl_vector.h **** 	pointer _M_finish;
  92:/usr/include/c++/9/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  93:/usr/include/c++/9/bits/stl_vector.h **** 
  94:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  95:/usr/include/c++/9/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  96:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
  97:/usr/include/c++/9/bits/stl_vector.h **** 
  98:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  99:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 100:/usr/include/c++/9/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 101:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 102:/usr/include/c++/9/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 103:/usr/include/c++/9/bits/stl_vector.h **** #endif
 104:/usr/include/c++/9/bits/stl_vector.h **** 
 105:/usr/include/c++/9/bits/stl_vector.h **** 	void
 106:/usr/include/c++/9/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 107:/usr/include/c++/9/bits/stl_vector.h **** 	{
 108:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 109:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 110:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 111:/usr/include/c++/9/bits/stl_vector.h **** 	}
 112:/usr/include/c++/9/bits/stl_vector.h **** 
 113:/usr/include/c++/9/bits/stl_vector.h **** 	void
 114:/usr/include/c++/9/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 115:/usr/include/c++/9/bits/stl_vector.h **** 	{
 116:/usr/include/c++/9/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 117:/usr/include/c++/9/bits/stl_vector.h **** 	  // information used by TBAA.
 118:/usr/include/c++/9/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 119:/usr/include/c++/9/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 120:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_copy_data(__x);
 121:/usr/include/c++/9/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 122:/usr/include/c++/9/bits/stl_vector.h **** 	}
 123:/usr/include/c++/9/bits/stl_vector.h ****       };
 124:/usr/include/c++/9/bits/stl_vector.h **** 
 125:/usr/include/c++/9/bits/stl_vector.h ****       struct _Vector_impl
 126:/usr/include/c++/9/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 127:/usr/include/c++/9/bits/stl_vector.h ****       {
 128:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 129:/usr/include/c++/9/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 130:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type()
 131:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 132:/usr/include/c++/9/bits/stl_vector.h **** 
 133:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 134:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 135:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 136:/usr/include/c++/9/bits/stl_vector.h **** 
 137:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 138:/usr/include/c++/9/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 139:/usr/include/c++/9/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 140:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 141:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 142:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 143:/usr/include/c++/9/bits/stl_vector.h **** 
 144:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 145:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 146:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 147:/usr/include/c++/9/bits/stl_vector.h **** 
 148:/usr/include/c++/9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 149:/usr/include/c++/9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 150:/usr/include/c++/9/bits/stl_vector.h **** 	{ }
 151:/usr/include/c++/9/bits/stl_vector.h **** #endif
 152:/usr/include/c++/9/bits/stl_vector.h **** 
 153:/usr/include/c++/9/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 154:/usr/include/c++/9/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 155:/usr/include/c++/9/bits/stl_vector.h **** 	  struct _Asan
 156:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 157:/usr/include/c++/9/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 158:/usr/include/c++/9/bits/stl_vector.h **** 	      ::size_type size_type;
 159:/usr/include/c++/9/bits/stl_vector.h **** 
 160:/usr/include/c++/9/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 161:/usr/include/c++/9/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 162:/usr/include/c++/9/bits/stl_vector.h **** 
 163:/usr/include/c++/9/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 164:/usr/include/c++/9/bits/stl_vector.h **** 
 165:/usr/include/c++/9/bits/stl_vector.h **** 	    struct _Grow
 166:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 167:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 168:/usr/include/c++/9/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 169:/usr/include/c++/9/bits/stl_vector.h **** 	    };
 170:/usr/include/c++/9/bits/stl_vector.h **** 	  };
 171:/usr/include/c++/9/bits/stl_vector.h **** 
 172:/usr/include/c++/9/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 173:/usr/include/c++/9/bits/stl_vector.h **** 	template<typename _Up>
 174:/usr/include/c++/9/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 175:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 176:/usr/include/c++/9/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 177:/usr/include/c++/9/bits/stl_vector.h **** 	      ::size_type size_type;
 178:/usr/include/c++/9/bits/stl_vector.h **** 
 179:/usr/include/c++/9/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 180:/usr/include/c++/9/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 181:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 182:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 183:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 184:/usr/include/c++/9/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 185:/usr/include/c++/9/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 186:/usr/include/c++/9/bits/stl_vector.h **** 	    }
 187:/usr/include/c++/9/bits/stl_vector.h **** 
 188:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 189:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 190:/usr/include/c++/9/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 191:/usr/include/c++/9/bits/stl_vector.h **** 
 192:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 193:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 194:/usr/include/c++/9/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 195:/usr/include/c++/9/bits/stl_vector.h **** 
 196:/usr/include/c++/9/bits/stl_vector.h **** 	    static void
 197:/usr/include/c++/9/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 198:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 199:/usr/include/c++/9/bits/stl_vector.h **** 	      if (__impl._M_start)
 200:/usr/include/c++/9/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 201:/usr/include/c++/9/bits/stl_vector.h **** 	    }
 202:/usr/include/c++/9/bits/stl_vector.h **** 
 203:/usr/include/c++/9/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 204:/usr/include/c++/9/bits/stl_vector.h **** 	    struct _Reinit
 205:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 206:/usr/include/c++/9/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 207:/usr/include/c++/9/bits/stl_vector.h **** 	      {
 208:/usr/include/c++/9/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 209:/usr/include/c++/9/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 210:/usr/include/c++/9/bits/stl_vector.h **** 	      }
 211:/usr/include/c++/9/bits/stl_vector.h **** 
 212:/usr/include/c++/9/bits/stl_vector.h **** 	      ~_Reinit()
 213:/usr/include/c++/9/bits/stl_vector.h **** 	      {
 214:/usr/include/c++/9/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 215:/usr/include/c++/9/bits/stl_vector.h **** 		if (_M_impl._M_start)
 216:/usr/include/c++/9/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 217:/usr/include/c++/9/bits/stl_vector.h **** 			    _M_impl._M_finish);
 218:/usr/include/c++/9/bits/stl_vector.h **** 	      }
 219:/usr/include/c++/9/bits/stl_vector.h **** 
 220:/usr/include/c++/9/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 221:/usr/include/c++/9/bits/stl_vector.h **** 
 222:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 223:/usr/include/c++/9/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 224:/usr/include/c++/9/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 225:/usr/include/c++/9/bits/stl_vector.h **** #endif
 226:/usr/include/c++/9/bits/stl_vector.h **** 	    };
 227:/usr/include/c++/9/bits/stl_vector.h **** 
 228:/usr/include/c++/9/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 229:/usr/include/c++/9/bits/stl_vector.h **** 	    struct _Grow
 230:/usr/include/c++/9/bits/stl_vector.h **** 	    {
 231:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 232:/usr/include/c++/9/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 233:/usr/include/c++/9/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 234:/usr/include/c++/9/bits/stl_vector.h **** 
 235:/usr/include/c++/9/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 236:/usr/include/c++/9/bits/stl_vector.h **** 
 237:/usr/include/c++/9/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 238:/usr/include/c++/9/bits/stl_vector.h **** 
 239:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 240:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 241:/usr/include/c++/9/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 242:/usr/include/c++/9/bits/stl_vector.h **** #endif
 243:/usr/include/c++/9/bits/stl_vector.h **** 	    private:
 244:/usr/include/c++/9/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 245:/usr/include/c++/9/bits/stl_vector.h **** 	      size_type _M_n;
 246:/usr/include/c++/9/bits/stl_vector.h **** 	    };
 247:/usr/include/c++/9/bits/stl_vector.h **** 	  };
 248:/usr/include/c++/9/bits/stl_vector.h **** 
 249:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 250:/usr/include/c++/9/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 251:/usr/include/c++/9/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 252:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 253:/usr/include/c++/9/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 254:/usr/include/c++/9/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 255:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 256:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 257:/usr/include/c++/9/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 258:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 259:/usr/include/c++/9/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 260:/usr/include/c++/9/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 261:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 262:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 263:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 264:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 265:/usr/include/c++/9/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 266:/usr/include/c++/9/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 267:/usr/include/c++/9/bits/stl_vector.h ****       };
 268:/usr/include/c++/9/bits/stl_vector.h **** 
 269:/usr/include/c++/9/bits/stl_vector.h ****     public:
 270:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 271:/usr/include/c++/9/bits/stl_vector.h **** 
 272:/usr/include/c++/9/bits/stl_vector.h ****       _Tp_alloc_type&
 273:/usr/include/c++/9/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 274:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 275:/usr/include/c++/9/bits/stl_vector.h **** 
 276:/usr/include/c++/9/bits/stl_vector.h ****       const _Tp_alloc_type&
 277:/usr/include/c++/9/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 278:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 279:/usr/include/c++/9/bits/stl_vector.h **** 
 280:/usr/include/c++/9/bits/stl_vector.h ****       allocator_type
 281:/usr/include/c++/9/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 282:/usr/include/c++/9/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 283:/usr/include/c++/9/bits/stl_vector.h **** 
 284:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 285:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base() = default;
 286:/usr/include/c++/9/bits/stl_vector.h **** #else
 287:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base() { }
 288:/usr/include/c++/9/bits/stl_vector.h **** #endif
 289:/usr/include/c++/9/bits/stl_vector.h **** 
 290:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 291:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a) { }
 292:/usr/include/c++/9/bits/stl_vector.h **** 
 293:/usr/include/c++/9/bits/stl_vector.h ****       // Kept for ABI compatibility.
 294:/usr/include/c++/9/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 295:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(size_t __n)
 296:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl()
 297:/usr/include/c++/9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 298:/usr/include/c++/9/bits/stl_vector.h **** #endif
 299:/usr/include/c++/9/bits/stl_vector.h **** 
 300:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 301:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a)
 302:/usr/include/c++/9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 303:/usr/include/c++/9/bits/stl_vector.h **** 
 304:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 305:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 306:/usr/include/c++/9/bits/stl_vector.h **** 
 307:/usr/include/c++/9/bits/stl_vector.h ****       // Kept for ABI compatibility.
 308:/usr/include/c++/9/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 309:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 310:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 311:/usr/include/c++/9/bits/stl_vector.h **** 
 312:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 313:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(__a)
 314:/usr/include/c++/9/bits/stl_vector.h ****       {
 315:/usr/include/c++/9/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 316:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 317:/usr/include/c++/9/bits/stl_vector.h **** 	else
 318:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 319:/usr/include/c++/9/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 320:/usr/include/c++/9/bits/stl_vector.h **** 	    _M_create_storage(__n);
 321:/usr/include/c++/9/bits/stl_vector.h **** 	  }
 322:/usr/include/c++/9/bits/stl_vector.h ****       }
 323:/usr/include/c++/9/bits/stl_vector.h **** # endif
 324:/usr/include/c++/9/bits/stl_vector.h **** 
 325:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 326:/usr/include/c++/9/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 327:/usr/include/c++/9/bits/stl_vector.h ****       { }
 328:/usr/include/c++/9/bits/stl_vector.h **** #endif
 329:/usr/include/c++/9/bits/stl_vector.h **** 
 330:/usr/include/c++/9/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 331:/usr/include/c++/9/bits/stl_vector.h ****       {
 332:/usr/include/c++/9/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 333:/usr/include/c++/9/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 334:/usr/include/c++/9/bits/stl_vector.h ****       }
 335:/usr/include/c++/9/bits/stl_vector.h **** 
 336:/usr/include/c++/9/bits/stl_vector.h ****     public:
 337:/usr/include/c++/9/bits/stl_vector.h ****       _Vector_impl _M_impl;
 338:/usr/include/c++/9/bits/stl_vector.h **** 
 339:/usr/include/c++/9/bits/stl_vector.h ****       pointer
 340:/usr/include/c++/9/bits/stl_vector.h ****       _M_allocate(size_t __n)
 341:/usr/include/c++/9/bits/stl_vector.h ****       {
 342:/usr/include/c++/9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 343:/usr/include/c++/9/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 344:/usr/include/c++/9/bits/stl_vector.h ****       }
 345:/usr/include/c++/9/bits/stl_vector.h **** 
 346:/usr/include/c++/9/bits/stl_vector.h ****       void
 347:/usr/include/c++/9/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 348:/usr/include/c++/9/bits/stl_vector.h ****       {
 349:/usr/include/c++/9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 350:/usr/include/c++/9/bits/stl_vector.h **** 	if (__p)
 351:/usr/include/c++/9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 352:/usr/include/c++/9/bits/stl_vector.h ****       }
 353:/usr/include/c++/9/bits/stl_vector.h **** 
 354:/usr/include/c++/9/bits/stl_vector.h ****     protected:
 355:/usr/include/c++/9/bits/stl_vector.h ****       void
 356:/usr/include/c++/9/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 357:/usr/include/c++/9/bits/stl_vector.h ****       {
 358:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 359:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 360:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 361:/usr/include/c++/9/bits/stl_vector.h ****       }
 362:/usr/include/c++/9/bits/stl_vector.h ****     };
 363:/usr/include/c++/9/bits/stl_vector.h **** 
 364:/usr/include/c++/9/bits/stl_vector.h ****   /**
 365:/usr/include/c++/9/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 366:/usr/include/c++/9/bits/stl_vector.h ****    *  individual elements in any order.
 367:/usr/include/c++/9/bits/stl_vector.h ****    *
 368:/usr/include/c++/9/bits/stl_vector.h ****    *  @ingroup sequences
 369:/usr/include/c++/9/bits/stl_vector.h ****    *
 370:/usr/include/c++/9/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 371:/usr/include/c++/9/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 372:/usr/include/c++/9/bits/stl_vector.h ****    *
 373:/usr/include/c++/9/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 374:/usr/include/c++/9/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 375:/usr/include/c++/9/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 376:/usr/include/c++/9/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 377:/usr/include/c++/9/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 378:/usr/include/c++/9/bits/stl_vector.h ****    *
 379:/usr/include/c++/9/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 380:/usr/include/c++/9/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 381:/usr/include/c++/9/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 382:/usr/include/c++/9/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 383:/usr/include/c++/9/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 384:/usr/include/c++/9/bits/stl_vector.h ****   */
 385:/usr/include/c++/9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 386:/usr/include/c++/9/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 387:/usr/include/c++/9/bits/stl_vector.h ****     {
 388:/usr/include/c++/9/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 389:/usr/include/c++/9/bits/stl_vector.h ****       // Concept requirements.
 390:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 391:/usr/include/c++/9/bits/stl_vector.h **** # if __cplusplus < 201103L
 392:/usr/include/c++/9/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 393:/usr/include/c++/9/bits/stl_vector.h **** # endif
 394:/usr/include/c++/9/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 395:/usr/include/c++/9/bits/stl_vector.h **** #endif
 396:/usr/include/c++/9/bits/stl_vector.h **** 
 397:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 398:/usr/include/c++/9/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 399:/usr/include/c++/9/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 400:/usr/include/c++/9/bits/stl_vector.h **** # ifdef __STRICT_ANSI__
 401:/usr/include/c++/9/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 402:/usr/include/c++/9/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 403:/usr/include/c++/9/bits/stl_vector.h **** # endif
 404:/usr/include/c++/9/bits/stl_vector.h **** #endif
 405:/usr/include/c++/9/bits/stl_vector.h **** 
 406:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 407:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 408:/usr/include/c++/9/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 409:/usr/include/c++/9/bits/stl_vector.h **** 
 410:/usr/include/c++/9/bits/stl_vector.h ****     public:
 411:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Tp					value_type;
 412:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 413:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 414:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 415:/usr/include/c++/9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 416:/usr/include/c++/9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 417:/usr/include/c++/9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 418:/usr/include/c++/9/bits/stl_vector.h ****       const_iterator;
 419:/usr/include/c++/9/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 420:/usr/include/c++/9/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 421:/usr/include/c++/9/bits/stl_vector.h ****       typedef size_t					size_type;
 422:/usr/include/c++/9/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 423:/usr/include/c++/9/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 424:/usr/include/c++/9/bits/stl_vector.h **** 
 425:/usr/include/c++/9/bits/stl_vector.h ****     private:
 426:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 427:/usr/include/c++/9/bits/stl_vector.h ****       static constexpr bool
 428:/usr/include/c++/9/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 429:/usr/include/c++/9/bits/stl_vector.h ****       {
 430:/usr/include/c++/9/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 431:/usr/include/c++/9/bits/stl_vector.h **** 					  std::declval<pointer>(),
 432:/usr/include/c++/9/bits/stl_vector.h **** 					  std::declval<pointer>(),
 433:/usr/include/c++/9/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 434:/usr/include/c++/9/bits/stl_vector.h ****       }
 435:/usr/include/c++/9/bits/stl_vector.h **** 
 436:/usr/include/c++/9/bits/stl_vector.h ****       static constexpr bool
 437:/usr/include/c++/9/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 438:/usr/include/c++/9/bits/stl_vector.h ****       { return false; }
 439:/usr/include/c++/9/bits/stl_vector.h **** 
 440:/usr/include/c++/9/bits/stl_vector.h ****       static constexpr bool
 441:/usr/include/c++/9/bits/stl_vector.h ****       _S_use_relocate()
 442:/usr/include/c++/9/bits/stl_vector.h ****       {
 443:/usr/include/c++/9/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 444:/usr/include/c++/9/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 445:/usr/include/c++/9/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 446:/usr/include/c++/9/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 447:/usr/include/c++/9/bits/stl_vector.h ****       }
 448:/usr/include/c++/9/bits/stl_vector.h **** 
 449:/usr/include/c++/9/bits/stl_vector.h ****       static pointer
 450:/usr/include/c++/9/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 451:/usr/include/c++/9/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 452:/usr/include/c++/9/bits/stl_vector.h ****       {
 453:/usr/include/c++/9/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 454:/usr/include/c++/9/bits/stl_vector.h ****       }
 455:/usr/include/c++/9/bits/stl_vector.h **** 
 456:/usr/include/c++/9/bits/stl_vector.h ****       static pointer
 457:/usr/include/c++/9/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 458:/usr/include/c++/9/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 459:/usr/include/c++/9/bits/stl_vector.h ****       { return __result; }
 460:/usr/include/c++/9/bits/stl_vector.h **** 
 461:/usr/include/c++/9/bits/stl_vector.h ****       static pointer
 462:/usr/include/c++/9/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 463:/usr/include/c++/9/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 464:/usr/include/c++/9/bits/stl_vector.h ****       {
 465:/usr/include/c++/9/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 466:/usr/include/c++/9/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 467:/usr/include/c++/9/bits/stl_vector.h ****       }
 468:/usr/include/c++/9/bits/stl_vector.h **** #endif // C++11
 469:/usr/include/c++/9/bits/stl_vector.h **** 
 470:/usr/include/c++/9/bits/stl_vector.h ****     protected:
 471:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_allocate;
 472:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_deallocate;
 473:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_impl;
 474:/usr/include/c++/9/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 475:/usr/include/c++/9/bits/stl_vector.h **** 
 476:/usr/include/c++/9/bits/stl_vector.h ****     public:
 477:/usr/include/c++/9/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 478:/usr/include/c++/9/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 479:/usr/include/c++/9/bits/stl_vector.h **** 
 480:/usr/include/c++/9/bits/stl_vector.h ****       /**
 481:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 482:/usr/include/c++/9/bits/stl_vector.h ****        */
 483:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 484:/usr/include/c++/9/bits/stl_vector.h ****       vector() = default;
 485:/usr/include/c++/9/bits/stl_vector.h **** #else
 486:/usr/include/c++/9/bits/stl_vector.h ****       vector() { }
 487:/usr/include/c++/9/bits/stl_vector.h **** #endif
 488:/usr/include/c++/9/bits/stl_vector.h **** 
 489:/usr/include/c++/9/bits/stl_vector.h ****       /**
 490:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 491:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 492:/usr/include/c++/9/bits/stl_vector.h ****        */
 493:/usr/include/c++/9/bits/stl_vector.h ****       explicit
 494:/usr/include/c++/9/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 495:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__a) { }
 496:/usr/include/c++/9/bits/stl_vector.h **** 
 497:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 498:/usr/include/c++/9/bits/stl_vector.h ****       /**
 499:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 500:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 501:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 502:/usr/include/c++/9/bits/stl_vector.h ****        *
 503:/usr/include/c++/9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 504:/usr/include/c++/9/bits/stl_vector.h ****        *  constructed elements.
 505:/usr/include/c++/9/bits/stl_vector.h ****        */
 506:/usr/include/c++/9/bits/stl_vector.h ****       explicit
 507:/usr/include/c++/9/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 508:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 509:/usr/include/c++/9/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 510:/usr/include/c++/9/bits/stl_vector.h **** 
 511:/usr/include/c++/9/bits/stl_vector.h ****       /**
 512:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 513:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 514:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 515:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 516:/usr/include/c++/9/bits/stl_vector.h ****        *
 517:/usr/include/c++/9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 518:/usr/include/c++/9/bits/stl_vector.h ****        */
 519:/usr/include/c++/9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 520:/usr/include/c++/9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 521:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 522:/usr/include/c++/9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 523:/usr/include/c++/9/bits/stl_vector.h **** #else
 524:/usr/include/c++/9/bits/stl_vector.h ****       /**
 525:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 526:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 527:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 528:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 529:/usr/include/c++/9/bits/stl_vector.h ****        *
 530:/usr/include/c++/9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 531:/usr/include/c++/9/bits/stl_vector.h ****        */
 532:/usr/include/c++/9/bits/stl_vector.h ****       explicit
 533:/usr/include/c++/9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 534:/usr/include/c++/9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 535:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 536:/usr/include/c++/9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 537:/usr/include/c++/9/bits/stl_vector.h **** #endif
 538:/usr/include/c++/9/bits/stl_vector.h **** 
 539:/usr/include/c++/9/bits/stl_vector.h ****       /**
 540:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 541:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 542:/usr/include/c++/9/bits/stl_vector.h ****        *
 543:/usr/include/c++/9/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 544:/usr/include/c++/9/bits/stl_vector.h ****        *  @a __x  will not be copied
 545:/usr/include/c++/9/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 546:/usr/include/c++/9/bits/stl_vector.h ****        *
 547:/usr/include/c++/9/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 548:/usr/include/c++/9/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 549:/usr/include/c++/9/bits/stl_vector.h ****        */
 550:/usr/include/c++/9/bits/stl_vector.h ****       vector(const vector& __x)
 551:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__x.size(),
 552:/usr/include/c++/9/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 553:/usr/include/c++/9/bits/stl_vector.h ****       {
 554:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 555:/usr/include/c++/9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 556:/usr/include/c++/9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 557:/usr/include/c++/9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 558:/usr/include/c++/9/bits/stl_vector.h ****       }
 559:/usr/include/c++/9/bits/stl_vector.h **** 
 560:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 561:/usr/include/c++/9/bits/stl_vector.h ****       /**
 562:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 563:/usr/include/c++/9/bits/stl_vector.h ****        *
 564:/usr/include/c++/9/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 565:/usr/include/c++/9/bits/stl_vector.h ****        *  moved instance.
 566:/usr/include/c++/9/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 567:/usr/include/c++/9/bits/stl_vector.h ****        *  %vector.
 568:/usr/include/c++/9/bits/stl_vector.h ****        */
 569:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 570:/usr/include/c++/9/bits/stl_vector.h **** 
 571:/usr/include/c++/9/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 572:/usr/include/c++/9/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 573:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 574:/usr/include/c++/9/bits/stl_vector.h ****       {
 575:/usr/include/c++/9/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 576:/usr/include/c++/9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 577:/usr/include/c++/9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 578:/usr/include/c++/9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 579:/usr/include/c++/9/bits/stl_vector.h ****       }
 580:/usr/include/c++/9/bits/stl_vector.h **** 
 581:/usr/include/c++/9/bits/stl_vector.h ****     private:
 582:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 583:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 584:/usr/include/c++/9/bits/stl_vector.h ****       { }
 585:/usr/include/c++/9/bits/stl_vector.h **** 
 586:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 587:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__m)
 588:/usr/include/c++/9/bits/stl_vector.h ****       {
 589:/usr/include/c++/9/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 590:/usr/include/c++/9/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 591:/usr/include/c++/9/bits/stl_vector.h **** 	else if (!__rv.empty())
 592:/usr/include/c++/9/bits/stl_vector.h **** 	  {
 593:/usr/include/c++/9/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 594:/usr/include/c++/9/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 595:/usr/include/c++/9/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 596:/usr/include/c++/9/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 597:/usr/include/c++/9/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 598:/usr/include/c++/9/bits/stl_vector.h **** 	    __rv.clear();
 599:/usr/include/c++/9/bits/stl_vector.h **** 	  }
 600:/usr/include/c++/9/bits/stl_vector.h ****       }
 601:/usr/include/c++/9/bits/stl_vector.h **** 
 602:/usr/include/c++/9/bits/stl_vector.h ****     public:
 603:/usr/include/c++/9/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 604:/usr/include/c++/9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 605:/usr/include/c++/9/bits/stl_vector.h ****       noexcept( noexcept(
 606:/usr/include/c++/9/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 607:/usr/include/c++/9/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 608:/usr/include/c++/9/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 609:/usr/include/c++/9/bits/stl_vector.h ****       { }
 610:/usr/include/c++/9/bits/stl_vector.h **** 
 611:/usr/include/c++/9/bits/stl_vector.h ****       /**
 612:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 613:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 614:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 615:/usr/include/c++/9/bits/stl_vector.h ****        *
 616:/usr/include/c++/9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 617:/usr/include/c++/9/bits/stl_vector.h ****        *  initializer_list @a __l.
 618:/usr/include/c++/9/bits/stl_vector.h ****        *
 619:/usr/include/c++/9/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 620:/usr/include/c++/9/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 621:/usr/include/c++/9/bits/stl_vector.h ****        */
 622:/usr/include/c++/9/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 623:/usr/include/c++/9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 624:/usr/include/c++/9/bits/stl_vector.h ****       : _Base(__a)
 625:/usr/include/c++/9/bits/stl_vector.h ****       {
 626:/usr/include/c++/9/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 627:/usr/include/c++/9/bits/stl_vector.h **** 			    random_access_iterator_tag());
 628:/usr/include/c++/9/bits/stl_vector.h ****       }
 629:/usr/include/c++/9/bits/stl_vector.h **** #endif
 630:/usr/include/c++/9/bits/stl_vector.h **** 
 631:/usr/include/c++/9/bits/stl_vector.h ****       /**
 632:/usr/include/c++/9/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 633:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 634:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 635:/usr/include/c++/9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 636:/usr/include/c++/9/bits/stl_vector.h ****        *
 637:/usr/include/c++/9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 638:/usr/include/c++/9/bits/stl_vector.h ****        *  [first,last).
 639:/usr/include/c++/9/bits/stl_vector.h ****        *
 640:/usr/include/c++/9/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 641:/usr/include/c++/9/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 642:/usr/include/c++/9/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 643:/usr/include/c++/9/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 644:/usr/include/c++/9/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 645:/usr/include/c++/9/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 646:/usr/include/c++/9/bits/stl_vector.h ****        */
 647:/usr/include/c++/9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 648:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator,
 649:/usr/include/c++/9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 650:/usr/include/c++/9/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 651:/usr/include/c++/9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 652:/usr/include/c++/9/bits/stl_vector.h **** 	: _Base(__a)
 653:/usr/include/c++/9/bits/stl_vector.h **** 	{
 654:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 655:/usr/include/c++/9/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 656:/usr/include/c++/9/bits/stl_vector.h **** 	}
 657:/usr/include/c++/9/bits/stl_vector.h **** #else
 658:/usr/include/c++/9/bits/stl_vector.h ****       template<typename _InputIterator>
 659:/usr/include/c++/9/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 660:/usr/include/c++/9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 661:/usr/include/c++/9/bits/stl_vector.h **** 	: _Base(__a)
 662:/usr/include/c++/9/bits/stl_vector.h **** 	{
 663:/usr/include/c++/9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 664:/usr/include/c++/9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 665:/usr/include/c++/9/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 666:/usr/include/c++/9/bits/stl_vector.h **** 	}
 667:/usr/include/c++/9/bits/stl_vector.h **** #endif
 668:/usr/include/c++/9/bits/stl_vector.h **** 
 669:/usr/include/c++/9/bits/stl_vector.h ****       /**
 670:/usr/include/c++/9/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 671:/usr/include/c++/9/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 672:/usr/include/c++/9/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 673:/usr/include/c++/9/bits/stl_vector.h ****        *  responsibility.
 674:/usr/include/c++/9/bits/stl_vector.h ****        */
 675:/usr/include/c++/9/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 341              		.loc 6 675 7 is_stmt 1 view .LVU58
 342              	.LBB3985:
 343              	.LBB3986:
 344              	.LBI3986:
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 345              		.loc 6 273 7 view .LVU59
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 346              		.loc 6 273 7 is_stmt 0 view .LVU60
 347              	.LBE3986:
 348              	# /usr/include/c++/9/bits/stl_vector.h:677: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M
 676:/usr/include/c++/9/bits/stl_vector.h ****       {
 677:/usr/include/c++/9/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 349              		.loc 6 677 15 view .LVU61
 350 0051 488B5D30 		movq	48(%rbp), %rbx	# MEM[(struct vector *)this_4(D) + 40B].D.55370._M_impl.D.54673._M_finish, _29
 351 0055 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct vector *)this_4(D) + 40B].D.55370._M_impl.D.54673._M_start, __fi
 352              	.LVL13:
 353              	.LBB3987:
 354              	.LBI3987:
 355              		.file 7 "/usr/include/c++/9/bits/stl_construct.h"
   1:/usr/include/c++/9/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_construct.h **** 
   3:/usr/include/c++/9/bits/stl_construct.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_construct.h **** //
   5:/usr/include/c++/9/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_construct.h **** 
  11:/usr/include/c++/9/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_construct.h **** 
  16:/usr/include/c++/9/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_construct.h **** 
  20:/usr/include/c++/9/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_construct.h **** 
  25:/usr/include/c++/9/bits/stl_construct.h **** /*
  26:/usr/include/c++/9/bits/stl_construct.h ****  *
  27:/usr/include/c++/9/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_construct.h ****  *
  30:/usr/include/c++/9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_construct.h ****  *
  38:/usr/include/c++/9/bits/stl_construct.h ****  *
  39:/usr/include/c++/9/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/9/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_construct.h ****  *
  42:/usr/include/c++/9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_construct.h ****  */
  50:/usr/include/c++/9/bits/stl_construct.h **** 
  51:/usr/include/c++/9/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/9/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/9/bits/stl_construct.h ****  */
  55:/usr/include/c++/9/bits/stl_construct.h **** 
  56:/usr/include/c++/9/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/9/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/9/bits/stl_construct.h **** 
  59:/usr/include/c++/9/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/9/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/9/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/9/bits/stl_construct.h **** 
  63:/usr/include/c++/9/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/9/bits/stl_construct.h **** {
  65:/usr/include/c++/9/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/9/bits/stl_construct.h **** 
  67:/usr/include/c++/9/bits/stl_construct.h ****   /**
  68:/usr/include/c++/9/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/9/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/9/bits/stl_construct.h ****    */
  71:/usr/include/c++/9/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/9/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/9/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/9/bits/stl_construct.h **** #else
  77:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/9/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/9/bits/stl_construct.h ****     {
  81:/usr/include/c++/9/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/9/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/9/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/9/bits/stl_construct.h ****     }
  85:/usr/include/c++/9/bits/stl_construct.h **** #endif
  86:/usr/include/c++/9/bits/stl_construct.h **** 
  87:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _T1>
  88:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  89:/usr/include/c++/9/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
  90:/usr/include/c++/9/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
  91:/usr/include/c++/9/bits/stl_construct.h **** 
  92:/usr/include/c++/9/bits/stl_construct.h ****   /**
  93:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  94:/usr/include/c++/9/bits/stl_construct.h ****    */
  95:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _Tp>
  96:/usr/include/c++/9/bits/stl_construct.h ****     inline void
  97:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  98:/usr/include/c++/9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  99:/usr/include/c++/9/bits/stl_construct.h **** 
 100:/usr/include/c++/9/bits/stl_construct.h ****   template<bool>
 101:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_aux
 102:/usr/include/c++/9/bits/stl_construct.h ****     {
 103:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator>
 104:/usr/include/c++/9/bits/stl_construct.h ****         static void
 105:/usr/include/c++/9/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 106:/usr/include/c++/9/bits/stl_construct.h **** 	{
 107:/usr/include/c++/9/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 108:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 109:/usr/include/c++/9/bits/stl_construct.h **** 	}
 110:/usr/include/c++/9/bits/stl_construct.h ****     };
 111:/usr/include/c++/9/bits/stl_construct.h **** 
 112:/usr/include/c++/9/bits/stl_construct.h ****   template<>
 113:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_aux<true>
 114:/usr/include/c++/9/bits/stl_construct.h ****     {
 115:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator>
 116:/usr/include/c++/9/bits/stl_construct.h ****         static void
 117:/usr/include/c++/9/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 118:/usr/include/c++/9/bits/stl_construct.h ****     };
 119:/usr/include/c++/9/bits/stl_construct.h **** 
 120:/usr/include/c++/9/bits/stl_construct.h ****   /**
 121:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 122:/usr/include/c++/9/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 123:/usr/include/c++/9/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 124:/usr/include/c++/9/bits/stl_construct.h ****    */
 125:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator>
 126:/usr/include/c++/9/bits/stl_construct.h ****     inline void
 127:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 128:/usr/include/c++/9/bits/stl_construct.h ****     {
 129:/usr/include/c++/9/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 130:/usr/include/c++/9/bits/stl_construct.h ****                        _Value_type;
 131:/usr/include/c++/9/bits/stl_construct.h **** #if __cplusplus >= 201103L
 132:/usr/include/c++/9/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 133:/usr/include/c++/9/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 134:/usr/include/c++/9/bits/stl_construct.h **** 		    "value type is destructible");
 135:/usr/include/c++/9/bits/stl_construct.h **** #endif
 136:/usr/include/c++/9/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 137:/usr/include/c++/9/bits/stl_construct.h **** 	__destroy(__first, __last);
 138:/usr/include/c++/9/bits/stl_construct.h ****     }
 139:/usr/include/c++/9/bits/stl_construct.h **** 
 140:/usr/include/c++/9/bits/stl_construct.h ****   template<bool>
 141:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_n_aux
 142:/usr/include/c++/9/bits/stl_construct.h ****     {
 143:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 144:/usr/include/c++/9/bits/stl_construct.h ****         static _ForwardIterator
 145:/usr/include/c++/9/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 146:/usr/include/c++/9/bits/stl_construct.h **** 	{
 147:/usr/include/c++/9/bits/stl_construct.h **** 	  for (; __count > 0; (void)++__first, --__count)
 148:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 149:/usr/include/c++/9/bits/stl_construct.h **** 	  return __first;
 150:/usr/include/c++/9/bits/stl_construct.h **** 	}
 151:/usr/include/c++/9/bits/stl_construct.h ****     };
 152:/usr/include/c++/9/bits/stl_construct.h **** 
 153:/usr/include/c++/9/bits/stl_construct.h ****   template<>
 154:/usr/include/c++/9/bits/stl_construct.h ****     struct _Destroy_n_aux<true>
 155:/usr/include/c++/9/bits/stl_construct.h ****     {
 156:/usr/include/c++/9/bits/stl_construct.h ****       template<typename _ForwardIterator, typename _Size>
 157:/usr/include/c++/9/bits/stl_construct.h ****         static _ForwardIterator
 158:/usr/include/c++/9/bits/stl_construct.h ****         __destroy_n(_ForwardIterator __first, _Size __count)
 159:/usr/include/c++/9/bits/stl_construct.h **** 	{
 160:/usr/include/c++/9/bits/stl_construct.h **** 	  std::advance(__first, __count);
 161:/usr/include/c++/9/bits/stl_construct.h **** 	  return __first;
 162:/usr/include/c++/9/bits/stl_construct.h **** 	}
 163:/usr/include/c++/9/bits/stl_construct.h ****     };
 164:/usr/include/c++/9/bits/stl_construct.h **** 
 165:/usr/include/c++/9/bits/stl_construct.h ****   /**
 166:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 167:/usr/include/c++/9/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 168:/usr/include/c++/9/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 169:/usr/include/c++/9/bits/stl_construct.h ****    */
 170:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Size>
 171:/usr/include/c++/9/bits/stl_construct.h ****     inline _ForwardIterator
 172:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy_n(_ForwardIterator __first, _Size __count)
 173:/usr/include/c++/9/bits/stl_construct.h ****     {
 174:/usr/include/c++/9/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 175:/usr/include/c++/9/bits/stl_construct.h ****                        _Value_type;
 176:/usr/include/c++/9/bits/stl_construct.h **** #if __cplusplus >= 201103L
 177:/usr/include/c++/9/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 178:/usr/include/c++/9/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 179:/usr/include/c++/9/bits/stl_construct.h **** 		    "value type is destructible");
 180:/usr/include/c++/9/bits/stl_construct.h **** #endif
 181:/usr/include/c++/9/bits/stl_construct.h ****       return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 182:/usr/include/c++/9/bits/stl_construct.h **** 	__destroy_n(__first, __count);
 183:/usr/include/c++/9/bits/stl_construct.h ****     }
 184:/usr/include/c++/9/bits/stl_construct.h **** 
 185:/usr/include/c++/9/bits/stl_construct.h ****   /**
 186:/usr/include/c++/9/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 187:/usr/include/c++/9/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 188:/usr/include/c++/9/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 189:/usr/include/c++/9/bits/stl_construct.h ****    */
 190:/usr/include/c++/9/bits/stl_construct.h **** 
 191:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 192:/usr/include/c++/9/bits/stl_construct.h ****     void
 193:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 194:/usr/include/c++/9/bits/stl_construct.h **** 	     _Allocator& __alloc)
 195:/usr/include/c++/9/bits/stl_construct.h ****     {
 196:/usr/include/c++/9/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 197:/usr/include/c++/9/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 198:/usr/include/c++/9/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 199:/usr/include/c++/9/bits/stl_construct.h ****     }
 200:/usr/include/c++/9/bits/stl_construct.h **** 
 201:/usr/include/c++/9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 202:/usr/include/c++/9/bits/stl_construct.h ****     inline void
 203:/usr/include/c++/9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 356              		.loc 7 203 5 is_stmt 1 view .LVU62
 357              	.LBB3988:
 358              	.LBB3989:
 359              	.LBB3990:
 360              	.LBB3991:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 361              		.loc 7 107 19 view .LVU63
 362 0059 4C39E3   		cmpq	%r12, %rbx	# __first, _29
 363 005c 7422     		je	.L7	#,
 364              	.LVL14:
 365 005e 6690     		.p2align 4,,10
 366              		.p2align 3
 367              	.L11:
 368              	.LBB3992:
 369              	.LBI3992:
  97:/usr/include/c++/9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 370              		.loc 7 97 5 view .LVU64
 371              	.LBB3993:
 372              	.LBI3993:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 373              		.loc 2 657 7 view .LVU65
 374              	.LBB3994:
 375              	.LBI3994:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 376              		.loc 2 229 7 view .LVU66
 377              	.LBB3995:
 378              	.LBB3996:
 379              	.LBI3996:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 380              		.loc 2 221 7 view .LVU67
 381              	.LBB3997:
 382              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 383              		.loc 2 222 26 is_stmt 0 view .LVU68
 384 0060 498B3C24 		movq	(%r12), %rdi	# MEM[base: __first_50, offset: 0B], _32
 385              	.LVL15:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 386              		.loc 2 222 26 view .LVU69
 387              	.LBE3997:
 388              	.LBE3996:
 389              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 390              		.loc 2 231 2 view .LVU70
 391 0064 498D4424 		leaq	16(%r12), %rax	#, tmp105
 391      10
 392 0069 4839C7   		cmpq	%rax, %rdi	# tmp105, _32
 393 006c 7442     		je	.L8	#,
 394              	.LVL16:
 395              	.LBB3998:
 396              	.LBI3998:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 397              		.loc 2 236 7 is_stmt 1 view .LVU71
 398              	.LBB3999:
 399              	.LBI3999:
 400              		.loc 3 469 7 view .LVU72
 401              	.LBB4000:
 402              	.LBI4000:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 403              		.loc 4 119 7 view .LVU73
 404              	.LBB4001:
 405              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 406              		.loc 4 128 19 is_stmt 0 view .LVU74
 407 006e E8000000 		call	_ZdlPv@PLT	#
 407      00
 408              	.LVL17:
 409              		.loc 4 128 19 view .LVU75
 410              	.LBE4001:
 411              	.LBE4000:
 412              	.LBE3999:
 413              	.LBE3998:
 414              	.LBE3995:
 415              	.LBE3994:
 416              	.LBB4002:
 417              	.LBI4002:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 418              		.loc 2 150 14 is_stmt 1 view .LVU76
 419              	.LBB4003:
 420              	.LBI4003:
 421              		.loc 5 153 7 view .LVU77
 422              	.LBB4004:
 423              	.LBI4004:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 424              		.loc 4 89 7 view .LVU78
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 425              		.loc 4 89 7 is_stmt 0 view .LVU79
 426              	.LBE4004:
 427              	.LBE4003:
 428              	.LBE4002:
 429              	.LBE3993:
 430              	.LBE3992:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 431              		.loc 7 107 4 is_stmt 1 view .LVU80
 432 0073 4983C420 		addq	$32, %r12	#, __first
 433              	.LVL18:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 434              		.loc 7 107 19 view .LVU81
 435 0077 4C39E3   		cmpq	%r12, %rbx	# __first, _29
 436 007a 75E4     		jne	.L11	#,
 437              	.LVL19:
 438              	.L9:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 439              		.loc 7 107 19 is_stmt 0 view .LVU82
 440 007c 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct _Vector_base *)this_4(D) + 40B]._M_impl.D.54673._M_start, __firs
 441              	.LVL20:
 442              	.L7:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 443              		.loc 7 107 19 view .LVU83
 444              	.LBE3991:
 445              	.LBE3990:
 446              	.LBE3989:
 447              	.LBE3988:
 448              	.LBE3987:
 449              	.LBB4014:
 450              	.LBI4014:
 330:/usr/include/c++/9/bits/stl_vector.h ****       {
 451              		.loc 6 330 7 is_stmt 1 view .LVU84
 452              	.LBB4015:
 453              	.LBI4015:
 347:/usr/include/c++/9/bits/stl_vector.h ****       {
 454              		.loc 6 347 7 view .LVU85
 455              	.LBB4016:
 456              	# /usr/include/c++/9/bits/stl_vector.h:350: 	if (__p)
 350:/usr/include/c++/9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 457              		.loc 6 350 2 is_stmt 0 view .LVU86
 458 0080 4D85E4   		testq	%r12, %r12	# __first
 459 0083 7408     		je	.L12	#,
 460              	.LVL21:
 461              	.LBB4017:
 462              	.LBI4017:
 463              		.loc 3 469 7 is_stmt 1 view .LVU87
 464              	.LBB4018:
 465              	.LBB4019:
 466              	.LBI4019:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 467              		.loc 4 119 7 view .LVU88
 468              	.LBB4020:
 469              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 470              		.loc 4 128 19 is_stmt 0 view .LVU89
 471 0085 4C89E7   		movq	%r12, %rdi	# __first,
 472 0088 E8000000 		call	_ZdlPv@PLT	#
 472      00
 473              	.LVL22:
 474              	.L12:
 475              		.loc 4 128 19 view .LVU90
 476              	.LBE4020:
 477              	.LBE4019:
 478              	.LBE4018:
 479              	.LBE4017:
 480              	.LBE4016:
 481              	.LBE4015:
 482              	.LBB4021:
 483              	.LBI4021:
 125:/usr/include/c++/9/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 484              		.loc 6 125 14 is_stmt 1 view .LVU91
 485              	.LBB4022:
 486              	.LBI4022:
 487              		.loc 5 153 7 view .LVU92
 488              	.LBB4023:
 489              	.LBI4023:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 490              		.loc 4 89 7 view .LVU93
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 491              		.loc 4 89 7 is_stmt 0 view .LVU94
 492              	.LBE4023:
 493              	.LBE4022:
 494              	.LBE4021:
 495              	.LBE4014:
 496              	.LBE3985:
 497              	.LBE3984:
 498              	.LBB4026:
 499              	.LBI4026:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 500              		.loc 2 657 7 is_stmt 1 view .LVU95
 501              	.LBB4027:
 502              	.LBI4027:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 503              		.loc 2 229 7 view .LVU96
 504              	.LBB4028:
 505              	.LBB4029:
 506              	.LBI4029:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 507              		.loc 2 221 7 view .LVU97
 508              	.LBB4030:
 509              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 510              		.loc 2 222 26 is_stmt 0 view .LVU98
 511 008d 488B7D08 		movq	8(%rbp), %rdi	# MEM[(char * *)this_4(D) + 8B], _9
 512              	.LVL23:
 513              	.LBB4031:
 514              	.LBI4031:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 515              		.loc 2 200 7 is_stmt 1 view .LVU99
 516              	.LBB4032:
 517              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 518              		.loc 2 203 57 is_stmt 0 view .LVU100
 519 0091 488D4518 		leaq	24(%rbp), %rax	#, tmp107
 520              	.LBE4032:
 521              	.LBE4031:
 522              	.LBE4030:
 523              	.LBE4029:
 524              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 525              		.loc 2 231 2 view .LVU101
 526 0095 4839C7   		cmpq	%rax, %rdi	# tmp107, _9
 527 0098 7405     		je	.L13	#,
 528              	.LVL24:
 529              	.LBB4033:
 530              	.LBI4033:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 531              		.loc 2 236 7 is_stmt 1 view .LVU102
 532              	.LBB4034:
 533              	.LBB4035:
 534              	.LBI4035:
 535              		.loc 3 469 7 view .LVU103
 536              	.LBB4036:
 537              	.LBI4036:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 538              		.loc 4 119 7 view .LVU104
 539              	.LBB4037:
 540              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 541              		.loc 4 128 19 is_stmt 0 view .LVU105
 542 009a E8000000 		call	_ZdlPv@PLT	#
 542      00
 543              	.LVL25:
 544              	.L13:
 545              		.loc 4 128 19 view .LVU106
 546              	.LBE4037:
 547              	.LBE4036:
 548              	.LBE4035:
 549              	.LBE4034:
 550              	.LBE4033:
 551              	.LBE4028:
 552              	.LBE4027:
 553              	.LBB4038:
 554              	.LBI4038:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 555              		.loc 2 150 14 is_stmt 1 view .LVU107
 556              	.LBB4039:
 557              	.LBI4039:
 558              		.loc 5 153 7 view .LVU108
 559              	.LBB4040:
 560              	.LBI4040:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 561              		.loc 4 89 7 view .LVU109
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 562              		.loc 4 89 7 is_stmt 0 view .LVU110
 563              	.LBE4040:
 564              	.LBE4039:
 565              	.LBE4038:
 566              	.LBE4026:
 567              	.LBE4042:
 568              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 569              		.loc 1 28 15 view .LVU111
 570 009f 5B       		popq	%rbx	#
 571              		.cfi_remember_state
 572              		.cfi_def_cfa_offset 24
 573              	.LBB4043:
 574 00a0 4889EF   		movq	%rbp, %rdi	# this,
 575              	.LBE4043:
 576 00a3 5D       		popq	%rbp	#
 577              		.cfi_def_cfa_offset 16
 578              	.LVL26:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 579              		.loc 1 28 15 view .LVU112
 580 00a4 415C     		popq	%r12	#
 581              		.cfi_def_cfa_offset 8
 582              	.LBB4044:
 583 00a6 E9000000 		jmp	_ZNSt9exceptionD2Ev@PLT	#
 583      00
 584              	.LVL27:
 585 00ab 0F1F4400 		.p2align 4,,10
 585      00
 586              		.p2align 3
 587              	.L8:
 588              		.cfi_restore_state
 589              	.LBB4041:
 590              	.LBB4025:
 591              	.LBB4024:
 592              	.LBB4013:
 593              	.LBB4012:
 594              	.LBB4011:
 595              	.LBB4010:
 596              	.LBB4009:
 597              	.LBB4008:
 598              	.LBB4007:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 599              		.loc 2 150 14 is_stmt 1 view .LVU113
 600              	.LBB4006:
 601              		.loc 5 153 7 view .LVU114
 602              	.LBB4005:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 603              		.loc 4 89 7 view .LVU115
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 604              		.loc 4 89 7 is_stmt 0 view .LVU116
 605              	.LBE4005:
 606              	.LBE4006:
 607              	.LBE4007:
 608              	.LBE4008:
 609              	.LBE4009:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 610              		.loc 7 107 4 is_stmt 1 view .LVU117
 611 00b0 4983C420 		addq	$32, %r12	#, __first
 612              	.LVL28:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 613              		.loc 7 107 19 view .LVU118
 614 00b4 4C39E3   		cmpq	%r12, %rbx	# __first, _29
 615 00b7 75A7     		jne	.L11	#,
 616 00b9 EBC1     		jmp	.L9	#
 617              	.LBE4010:
 618              	.LBE4011:
 619              	.LBE4012:
 620              	.LBE4013:
 621              	.LBE4024:
 622              	.LBE4025:
 623              	.LBE4041:
 624              	.LBE4044:
 625              		.cfi_endproc
 626              	.LFE7893:
 628              		.weak	_ZN3c105ErrorD1Ev
 629              		.set	_ZN3c105ErrorD1Ev,_ZN3c105ErrorD2Ev
 630              		.text
 631              		.align 2
 632              		.p2align 4
 634              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0:
 635              	.LVL29:
 636              	.LFB19916:
 525:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 637              		.loc 2 525 7 view -0
 638              		.cfi_startproc
 525:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 639              		.loc 2 525 7 is_stmt 0 view .LVU120
 640 0000 4155     		pushq	%r13	#
 641              		.cfi_def_cfa_offset 16
 642              		.cfi_offset 13, -16
 643 0002 4989F5   		movq	%rsi, %r13	# tmp102, __s
 644 0005 4154     		pushq	%r12	#
 645              		.cfi_def_cfa_offset 24
 646              		.cfi_offset 12, -24
 647 0007 55       		pushq	%rbp	#
 648              		.cfi_def_cfa_offset 32
 649              		.cfi_offset 6, -32
 650              	.LBB4088:
 651              	.LBB4089:
 652              	# /usr/include/c++/9/bits/basic_string.h:193: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 653              		.loc 2 193 51 view .LVU121
 654 0008 488D6F10 		leaq	16(%rdi), %rbp	#, _2
 655              	.LBE4089:
 656              	.LBE4088:
 657              	# /usr/include/c++/9/bits/basic_string.h:525:       basic_string(const _CharT* __s, const _Alloc& _
 525:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 658              		.loc 2 525 7 view .LVU122
 659 000c 53       		pushq	%rbx	#
 660              		.cfi_def_cfa_offset 40
 661              		.cfi_offset 3, -40
 662 000d 4889FB   		movq	%rdi, %rbx	# tmp101, this
 663 0010 4883EC18 		subq	$24, %rsp	#,
 664              		.cfi_def_cfa_offset 64
 665              	# /usr/include/c++/9/bits/basic_string.h:525:       basic_string(const _CharT* __s, const _Alloc& _
 525:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 666              		.loc 2 525 7 view .LVU123
 667 0014 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp105
 667      25280000 
 667      00
 668 001d 48894424 		movq	%rax, 8(%rsp)	# tmp105, D.444347
 668      08
 669 0022 31C0     		xorl	%eax, %eax	# tmp105
 670              	.LVL30:
 671              	.LBB4090:
 672              	.LBI4088:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 673              		.loc 2 190 7 is_stmt 1 view .LVU124
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 674              		.loc 2 190 7 is_stmt 0 view .LVU125
 675              	.LBE4090:
 676              	.LBB4091:
 677              	.LBI4091:
 156:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 678              		.loc 2 156 2 is_stmt 1 view .LVU126
 679              	.LBB4092:
 680              	.LBB4093:
 681              	.LBI4093:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 682              		.loc 5 141 7 view .LVU127
 683              	.LBB4094:
 684              	.LBI4094:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 685              		.loc 4 83 7 view .LVU128
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 686              		.loc 4 83 7 is_stmt 0 view .LVU129
 687              	.LBE4094:
 688              	.LBE4093:
 689              	# /usr/include/c++/9/bits/basic_string.h:157: 	: allocator_type(__a), _M_p(__dat) { }
 157:/usr/include/c++/9/bits/basic_string.h **** 
 690              		.loc 2 157 35 view .LVU130
 691 0024 48892F   		movq	%rbp, (%rdi)	# _2, MEM[(struct _Alloc_hider *)this_1(D)]._M_p
 692              	.LVL31:
 157:/usr/include/c++/9/bits/basic_string.h **** 
 693              		.loc 2 157 35 view .LVU131
 694              	.LBE4092:
 695              	.LBE4091:
 696              	.LBB4095:
 697              	.LBI4095:
 698              		.file 8 "/usr/include/c++/9/bits/char_traits.h"
   1:/usr/include/c++/9/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/c++/9/bits/char_traits.h **** 
   3:/usr/include/c++/9/bits/char_traits.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/char_traits.h **** //
   5:/usr/include/c++/9/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/char_traits.h **** // any later version.
  10:/usr/include/c++/9/bits/char_traits.h **** 
  11:/usr/include/c++/9/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/char_traits.h **** 
  16:/usr/include/c++/9/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/char_traits.h **** 
  20:/usr/include/c++/9/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/char_traits.h **** 
  25:/usr/include/c++/9/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/c++/9/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/9/bits/char_traits.h ****  */
  29:/usr/include/c++/9/bits/char_traits.h **** 
  30:/usr/include/c++/9/bits/char_traits.h **** //
  31:/usr/include/c++/9/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/9/bits/char_traits.h **** //
  33:/usr/include/c++/9/bits/char_traits.h **** 
  34:/usr/include/c++/9/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/c++/9/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/c++/9/bits/char_traits.h **** 
  37:/usr/include/c++/9/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/c++/9/bits/char_traits.h **** 
  39:/usr/include/c++/9/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/c++/9/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/c++/9/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/c++/9/bits/char_traits.h **** 
  43:/usr/include/c++/9/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  44:/usr/include/c++/9/bits/char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  45:/usr/include/c++/9/bits/char_traits.h **** #endif
  46:/usr/include/c++/9/bits/char_traits.h **** 
  47:/usr/include/c++/9/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  48:/usr/include/c++/9/bits/char_traits.h **** {
  49:/usr/include/c++/9/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/include/c++/9/bits/char_traits.h **** 
  51:/usr/include/c++/9/bits/char_traits.h ****   /**
  52:/usr/include/c++/9/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  53:/usr/include/c++/9/bits/char_traits.h ****    *
  54:/usr/include/c++/9/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  55:/usr/include/c++/9/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  56:/usr/include/c++/9/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  57:/usr/include/c++/9/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  58:/usr/include/c++/9/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  59:/usr/include/c++/9/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  60:/usr/include/c++/9/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  61:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
  62:/usr/include/c++/9/bits/char_traits.h ****     struct _Char_types
  63:/usr/include/c++/9/bits/char_traits.h ****     {
  64:/usr/include/c++/9/bits/char_traits.h ****       typedef unsigned long   int_type;
  65:/usr/include/c++/9/bits/char_traits.h ****       typedef std::streampos  pos_type;
  66:/usr/include/c++/9/bits/char_traits.h ****       typedef std::streamoff  off_type;
  67:/usr/include/c++/9/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  68:/usr/include/c++/9/bits/char_traits.h ****     };
  69:/usr/include/c++/9/bits/char_traits.h **** 
  70:/usr/include/c++/9/bits/char_traits.h **** 
  71:/usr/include/c++/9/bits/char_traits.h ****   /**
  72:/usr/include/c++/9/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  73:/usr/include/c++/9/bits/char_traits.h ****    *
  74:/usr/include/c++/9/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  75:/usr/include/c++/9/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  76:/usr/include/c++/9/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  77:/usr/include/c++/9/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  78:/usr/include/c++/9/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  79:/usr/include/c++/9/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  80:/usr/include/c++/9/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  81:/usr/include/c++/9/bits/char_traits.h ****    *
  82:/usr/include/c++/9/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  83:/usr/include/c++/9/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  84:/usr/include/c++/9/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  85:/usr/include/c++/9/bits/char_traits.h ****    */
  86:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
  87:/usr/include/c++/9/bits/char_traits.h ****     struct char_traits
  88:/usr/include/c++/9/bits/char_traits.h ****     {
  89:/usr/include/c++/9/bits/char_traits.h ****       typedef _CharT                                    char_type;
  90:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  91:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  92:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  93:/usr/include/c++/9/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  94:/usr/include/c++/9/bits/char_traits.h **** 
  95:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
  96:/usr/include/c++/9/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  97:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
  98:/usr/include/c++/9/bits/char_traits.h **** 
  99:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 100:/usr/include/c++/9/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 101:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 == __c2; }
 102:/usr/include/c++/9/bits/char_traits.h **** 
 103:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 104:/usr/include/c++/9/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 105:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 < __c2; }
 106:/usr/include/c++/9/bits/char_traits.h **** 
 107:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 108:/usr/include/c++/9/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 109:/usr/include/c++/9/bits/char_traits.h **** 
 110:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 111:/usr/include/c++/9/bits/char_traits.h ****       length(const char_type* __s);
 112:/usr/include/c++/9/bits/char_traits.h **** 
 113:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 114:/usr/include/c++/9/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 115:/usr/include/c++/9/bits/char_traits.h **** 
 116:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 117:/usr/include/c++/9/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 118:/usr/include/c++/9/bits/char_traits.h **** 
 119:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 120:/usr/include/c++/9/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 121:/usr/include/c++/9/bits/char_traits.h **** 
 122:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 123:/usr/include/c++/9/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 124:/usr/include/c++/9/bits/char_traits.h **** 
 125:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 126:/usr/include/c++/9/bits/char_traits.h ****       to_char_type(const int_type& __c)
 127:/usr/include/c++/9/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 128:/usr/include/c++/9/bits/char_traits.h **** 
 129:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 130:/usr/include/c++/9/bits/char_traits.h ****       to_int_type(const char_type& __c)
 131:/usr/include/c++/9/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 132:/usr/include/c++/9/bits/char_traits.h **** 
 133:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 134:/usr/include/c++/9/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 135:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 == __c2; }
 136:/usr/include/c++/9/bits/char_traits.h **** 
 137:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/usr/include/c++/9/bits/char_traits.h ****       eof()
 139:/usr/include/c++/9/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 140:/usr/include/c++/9/bits/char_traits.h **** 
 141:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 142:/usr/include/c++/9/bits/char_traits.h ****       not_eof(const int_type& __c)
 143:/usr/include/c++/9/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 144:/usr/include/c++/9/bits/char_traits.h ****     };
 145:/usr/include/c++/9/bits/char_traits.h **** 
 146:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 147:/usr/include/c++/9/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 148:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 149:/usr/include/c++/9/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 150:/usr/include/c++/9/bits/char_traits.h ****     {
 151:/usr/include/c++/9/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 152:/usr/include/c++/9/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 153:/usr/include/c++/9/bits/char_traits.h **** 	  return -1;
 154:/usr/include/c++/9/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 155:/usr/include/c++/9/bits/char_traits.h **** 	  return 1;
 156:/usr/include/c++/9/bits/char_traits.h ****       return 0;
 157:/usr/include/c++/9/bits/char_traits.h ****     }
 158:/usr/include/c++/9/bits/char_traits.h **** 
 159:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 160:/usr/include/c++/9/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 161:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 162:/usr/include/c++/9/bits/char_traits.h ****     length(const char_type* __p)
 163:/usr/include/c++/9/bits/char_traits.h ****     {
 164:/usr/include/c++/9/bits/char_traits.h ****       std::size_t __i = 0;
 165:/usr/include/c++/9/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 166:/usr/include/c++/9/bits/char_traits.h ****         ++__i;
 167:/usr/include/c++/9/bits/char_traits.h ****       return __i;
 168:/usr/include/c++/9/bits/char_traits.h ****     }
 169:/usr/include/c++/9/bits/char_traits.h **** 
 170:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 171:/usr/include/c++/9/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 172:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 173:/usr/include/c++/9/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 174:/usr/include/c++/9/bits/char_traits.h ****     {
 175:/usr/include/c++/9/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 176:/usr/include/c++/9/bits/char_traits.h ****         if (eq(__s[__i], __a))
 177:/usr/include/c++/9/bits/char_traits.h ****           return __s + __i;
 178:/usr/include/c++/9/bits/char_traits.h ****       return 0;
 179:/usr/include/c++/9/bits/char_traits.h ****     }
 180:/usr/include/c++/9/bits/char_traits.h **** 
 181:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 182:/usr/include/c++/9/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 183:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 184:/usr/include/c++/9/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 185:/usr/include/c++/9/bits/char_traits.h ****     {
 186:/usr/include/c++/9/bits/char_traits.h ****       if (__n == 0)
 187:/usr/include/c++/9/bits/char_traits.h **** 	return __s1;
 188:/usr/include/c++/9/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 189:/usr/include/c++/9/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 190:/usr/include/c++/9/bits/char_traits.h ****     }
 191:/usr/include/c++/9/bits/char_traits.h **** 
 192:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 193:/usr/include/c++/9/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 194:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 195:/usr/include/c++/9/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 196:/usr/include/c++/9/bits/char_traits.h ****     {
 197:/usr/include/c++/9/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 198:/usr/include/c++/9/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 199:/usr/include/c++/9/bits/char_traits.h ****       return __s1;
 200:/usr/include/c++/9/bits/char_traits.h ****     }
 201:/usr/include/c++/9/bits/char_traits.h **** 
 202:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 203:/usr/include/c++/9/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 204:/usr/include/c++/9/bits/char_traits.h ****     char_traits<_CharT>::
 205:/usr/include/c++/9/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 206:/usr/include/c++/9/bits/char_traits.h ****     {
 207:/usr/include/c++/9/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 208:/usr/include/c++/9/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 209:/usr/include/c++/9/bits/char_traits.h ****       return __s;
 210:/usr/include/c++/9/bits/char_traits.h ****     }
 211:/usr/include/c++/9/bits/char_traits.h **** 
 212:/usr/include/c++/9/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 213:/usr/include/c++/9/bits/char_traits.h **** } // namespace
 214:/usr/include/c++/9/bits/char_traits.h **** 
 215:/usr/include/c++/9/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 216:/usr/include/c++/9/bits/char_traits.h **** {
 217:/usr/include/c++/9/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 218:/usr/include/c++/9/bits/char_traits.h **** 
 219:/usr/include/c++/9/bits/char_traits.h **** #if __cplusplus >= 201703L
 220:/usr/include/c++/9/bits/char_traits.h **** #define __cpp_lib_constexpr_char_traits 201611
 221:/usr/include/c++/9/bits/char_traits.h **** 
 222:/usr/include/c++/9/bits/char_traits.h ****   /**
 223:/usr/include/c++/9/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 224:/usr/include/c++/9/bits/char_traits.h ****    *  string are known at compile time.
 225:/usr/include/c++/9/bits/char_traits.h ****    *  @param  __s  The string.
 226:/usr/include/c++/9/bits/char_traits.h ****    *
 227:/usr/include/c++/9/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 228:/usr/include/c++/9/bits/char_traits.h ****    */
 229:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 230:/usr/include/c++/9/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 231:/usr/include/c++/9/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 232:/usr/include/c++/9/bits/char_traits.h ****     {
 233:/usr/include/c++/9/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 234:/usr/include/c++/9/bits/char_traits.h ****       (void) __s;
 235:/usr/include/c++/9/bits/char_traits.h ****       // In constexpr contexts all strings should be constant.
 236:/usr/include/c++/9/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 237:/usr/include/c++/9/bits/char_traits.h **** #else
 238:/usr/include/c++/9/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 239:/usr/include/c++/9/bits/char_traits.h **** 	__s++;
 240:/usr/include/c++/9/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 241:/usr/include/c++/9/bits/char_traits.h **** #endif
 242:/usr/include/c++/9/bits/char_traits.h ****     }
 243:/usr/include/c++/9/bits/char_traits.h **** 
 244:/usr/include/c++/9/bits/char_traits.h ****   /**
 245:/usr/include/c++/9/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 246:/usr/include/c++/9/bits/char_traits.h ****    *  known at compile time.
 247:/usr/include/c++/9/bits/char_traits.h ****    *  @param  __a  The character array.
 248:/usr/include/c++/9/bits/char_traits.h ****    *  @param  __n  Number of characters.
 249:/usr/include/c++/9/bits/char_traits.h ****    *
 250:/usr/include/c++/9/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 251:/usr/include/c++/9/bits/char_traits.h ****    */
 252:/usr/include/c++/9/bits/char_traits.h ****   template<typename _CharT>
 253:/usr/include/c++/9/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 254:/usr/include/c++/9/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 255:/usr/include/c++/9/bits/char_traits.h ****     {
 256:/usr/include/c++/9/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 257:/usr/include/c++/9/bits/char_traits.h ****       (void) __a;
 258:/usr/include/c++/9/bits/char_traits.h ****       (void) __n;
 259:/usr/include/c++/9/bits/char_traits.h ****       // In constexpr contexts all character arrays should be constant.
 260:/usr/include/c++/9/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 261:/usr/include/c++/9/bits/char_traits.h **** #else
 262:/usr/include/c++/9/bits/char_traits.h ****       size_t __i = 0;
 263:/usr/include/c++/9/bits/char_traits.h ****       while (__i < __n && __builtin_constant_p(__a[__i]))
 264:/usr/include/c++/9/bits/char_traits.h **** 	__i++;
 265:/usr/include/c++/9/bits/char_traits.h ****       return __i == __n;
 266:/usr/include/c++/9/bits/char_traits.h **** #endif
 267:/usr/include/c++/9/bits/char_traits.h ****     }
 268:/usr/include/c++/9/bits/char_traits.h **** #endif
 269:/usr/include/c++/9/bits/char_traits.h **** 
 270:/usr/include/c++/9/bits/char_traits.h ****   // 21.1
 271:/usr/include/c++/9/bits/char_traits.h ****   /**
 272:/usr/include/c++/9/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 273:/usr/include/c++/9/bits/char_traits.h ****    *
 274:/usr/include/c++/9/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 275:/usr/include/c++/9/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 276:/usr/include/c++/9/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 277:/usr/include/c++/9/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 278:/usr/include/c++/9/bits/char_traits.h ****    *
 279:/usr/include/c++/9/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 280:/usr/include/c++/9/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 281:/usr/include/c++/9/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 282:/usr/include/c++/9/bits/char_traits.h ****   */
 283:/usr/include/c++/9/bits/char_traits.h ****   template<class _CharT>
 284:/usr/include/c++/9/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 285:/usr/include/c++/9/bits/char_traits.h ****     { };
 286:/usr/include/c++/9/bits/char_traits.h **** 
 287:/usr/include/c++/9/bits/char_traits.h **** 
 288:/usr/include/c++/9/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 289:/usr/include/c++/9/bits/char_traits.h ****   template<>
 290:/usr/include/c++/9/bits/char_traits.h ****     struct char_traits<char>
 291:/usr/include/c++/9/bits/char_traits.h ****     {
 292:/usr/include/c++/9/bits/char_traits.h ****       typedef char              char_type;
 293:/usr/include/c++/9/bits/char_traits.h ****       typedef int               int_type;
 294:/usr/include/c++/9/bits/char_traits.h ****       typedef streampos         pos_type;
 295:/usr/include/c++/9/bits/char_traits.h ****       typedef streamoff         off_type;
 296:/usr/include/c++/9/bits/char_traits.h ****       typedef mbstate_t         state_type;
 297:/usr/include/c++/9/bits/char_traits.h **** 
 298:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 299:/usr/include/c++/9/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 300:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 301:/usr/include/c++/9/bits/char_traits.h **** 
 302:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 303:/usr/include/c++/9/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 304:/usr/include/c++/9/bits/char_traits.h ****       { return __c1 == __c2; }
 305:/usr/include/c++/9/bits/char_traits.h **** 
 306:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 307:/usr/include/c++/9/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 308:/usr/include/c++/9/bits/char_traits.h ****       {
 309:/usr/include/c++/9/bits/char_traits.h **** 	// LWG 467.
 310:/usr/include/c++/9/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 311:/usr/include/c++/9/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 312:/usr/include/c++/9/bits/char_traits.h ****       }
 313:/usr/include/c++/9/bits/char_traits.h **** 
 314:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 315:/usr/include/c++/9/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 316:/usr/include/c++/9/bits/char_traits.h ****       {
 317:/usr/include/c++/9/bits/char_traits.h **** 	if (__n == 0)
 318:/usr/include/c++/9/bits/char_traits.h **** 	  return 0;
 319:/usr/include/c++/9/bits/char_traits.h **** #if __cplusplus >= 201703L
 320:/usr/include/c++/9/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 321:/usr/include/c++/9/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 322:/usr/include/c++/9/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 323:/usr/include/c++/9/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 324:/usr/include/c++/9/bits/char_traits.h **** #endif
 325:/usr/include/c++/9/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 326:/usr/include/c++/9/bits/char_traits.h ****       }
 327:/usr/include/c++/9/bits/char_traits.h **** 
 328:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 329:/usr/include/c++/9/bits/char_traits.h ****       length(const char_type* __s)
 699              		.loc 8 329 7 is_stmt 1 view .LVU132
 700              	.LBB4096:
 330:/usr/include/c++/9/bits/char_traits.h ****       {
 331:/usr/include/c++/9/bits/char_traits.h **** #if __cplusplus >= 201703L
 332:/usr/include/c++/9/bits/char_traits.h **** 	if (__constant_string_p(__s))
 333:/usr/include/c++/9/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 334:/usr/include/c++/9/bits/char_traits.h **** #endif
 335:/usr/include/c++/9/bits/char_traits.h **** 	return __builtin_strlen(__s);
 701              		.loc 8 335 2 view .LVU133
 702              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 703              		.loc 8 335 25 is_stmt 0 view .LVU134
 704 0027 4889F7   		movq	%rsi, %rdi	# __s,
 705              	.LVL32:
 706              		.loc 8 335 25 view .LVU135
 707 002a E8000000 		call	strlen@PLT	#
 707      00
 708              	.LVL33:
 709              		.loc 8 335 25 view .LVU136
 710              	.LBE4096:
 711              	.LBE4095:
 712              	.LBB4098:
 713              	.LBB4099:
 714              	.LBB4100:
 715              	.LBB4101:
 716              	.LBB4102:
 717              	.LBB4103:
 718              	# /usr/include/c++/9/bits/basic_string.tcc:215: 	size_type __dnew = static_cast<size_type>(std::dis
 719              		.file 9 "/usr/include/c++/9/bits/basic_string.tcc"
   1:/usr/include/c++/9/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/9/bits/basic_string.tcc **** 
   3:/usr/include/c++/9/bits/basic_string.tcc **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/basic_string.tcc **** //
   5:/usr/include/c++/9/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/basic_string.tcc **** // any later version.
  10:/usr/include/c++/9/bits/basic_string.tcc **** 
  11:/usr/include/c++/9/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/basic_string.tcc **** 
  16:/usr/include/c++/9/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/basic_string.tcc **** 
  20:/usr/include/c++/9/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/basic_string.tcc **** 
  25:/usr/include/c++/9/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/c++/9/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/9/bits/basic_string.tcc ****  */
  29:/usr/include/c++/9/bits/basic_string.tcc **** 
  30:/usr/include/c++/9/bits/basic_string.tcc **** //
  31:/usr/include/c++/9/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/9/bits/basic_string.tcc **** //
  33:/usr/include/c++/9/bits/basic_string.tcc **** 
  34:/usr/include/c++/9/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/c++/9/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/c++/9/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/c++/9/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/c++/9/bits/basic_string.tcc **** 
  39:/usr/include/c++/9/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/c++/9/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/c++/9/bits/basic_string.tcc **** 
  42:/usr/include/c++/9/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/c++/9/bits/basic_string.tcc **** 
  44:/usr/include/c++/9/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/c++/9/bits/basic_string.tcc **** 
  46:/usr/include/c++/9/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/9/bits/basic_string.tcc **** {
  48:/usr/include/c++/9/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/9/bits/basic_string.tcc **** 
  50:/usr/include/c++/9/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/9/bits/basic_string.tcc **** 
  52:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/c++/9/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/c++/9/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/c++/9/bits/basic_string.tcc **** 
  56:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/c++/9/bits/basic_string.tcc ****     void
  58:/usr/include/c++/9/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/c++/9/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/c++/9/bits/basic_string.tcc ****     {
  61:/usr/include/c++/9/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/c++/9/bits/basic_string.tcc **** 	return;
  63:/usr/include/c++/9/bits/basic_string.tcc **** 
  64:/usr/include/c++/9/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/c++/9/bits/basic_string.tcc **** 
  66:/usr/include/c++/9/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/c++/9/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
  69:/usr/include/c++/9/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
  71:/usr/include/c++/9/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
  79:/usr/include/c++/9/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
  81:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/c++/9/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/c++/9/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/c++/9/bits/basic_string.tcc **** 		return;
  86:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
  87:/usr/include/c++/9/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
  89:/usr/include/c++/9/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/c++/9/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/c++/9/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/c++/9/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/c++/9/bits/basic_string.tcc **** 		return;
  94:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
  95:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
  96:/usr/include/c++/9/bits/basic_string.tcc **** 	else
  97:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
  98:/usr/include/c++/9/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/c++/9/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/c++/9/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/c++/9/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 105:/usr/include/c++/9/bits/basic_string.tcc ****       else
 106:/usr/include/c++/9/bits/basic_string.tcc **** 	{
 107:/usr/include/c++/9/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/c++/9/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/c++/9/bits/basic_string.tcc **** 	    {
 110:/usr/include/c++/9/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/c++/9/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/c++/9/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/c++/9/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/c++/9/bits/basic_string.tcc **** 	    }
 115:/usr/include/c++/9/bits/basic_string.tcc **** 	  else
 116:/usr/include/c++/9/bits/basic_string.tcc **** 	    {
 117:/usr/include/c++/9/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/usr/include/c++/9/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/c++/9/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/c++/9/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/c++/9/bits/basic_string.tcc **** 	    }
 122:/usr/include/c++/9/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/c++/9/bits/basic_string.tcc **** 	}
 124:/usr/include/c++/9/bits/basic_string.tcc **** 
 125:/usr/include/c++/9/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/c++/9/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/c++/9/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/c++/9/bits/basic_string.tcc ****     }
 129:/usr/include/c++/9/bits/basic_string.tcc **** 
 130:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/c++/9/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/usr/include/c++/9/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/c++/9/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/c++/9/bits/basic_string.tcc ****     {
 135:/usr/include/c++/9/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/c++/9/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/c++/9/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/c++/9/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/c++/9/bits/basic_string.tcc **** 
 140:/usr/include/c++/9/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/c++/9/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/c++/9/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/c++/9/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/c++/9/bits/basic_string.tcc **** 	{
 145:/usr/include/c++/9/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/usr/include/c++/9/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/c++/9/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/c++/9/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/c++/9/bits/basic_string.tcc **** 	}
 150:/usr/include/c++/9/bits/basic_string.tcc **** 
 151:/usr/include/c++/9/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/c++/9/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/c++/9/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/c++/9/bits/basic_string.tcc ****     }
 155:/usr/include/c++/9/bits/basic_string.tcc **** 
 156:/usr/include/c++/9/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/c++/9/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/c++/9/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/c++/9/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/c++/9/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/c++/9/bits/basic_string.tcc ****       void
 163:/usr/include/c++/9/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/c++/9/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/c++/9/bits/basic_string.tcc ****       {
 167:/usr/include/c++/9/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/c++/9/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/c++/9/bits/basic_string.tcc **** 
 170:/usr/include/c++/9/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 172:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/c++/9/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 175:/usr/include/c++/9/bits/basic_string.tcc **** 
 176:/usr/include/c++/9/bits/basic_string.tcc **** 	__try
 177:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 178:/usr/include/c++/9/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/c++/9/bits/basic_string.tcc **** 	      {
 180:/usr/include/c++/9/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/c++/9/bits/basic_string.tcc **** 		  {
 182:/usr/include/c++/9/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/c++/9/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/c++/9/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/c++/9/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/c++/9/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/c++/9/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/c++/9/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/usr/include/c++/9/bits/basic_string.tcc **** 		  }
 190:/usr/include/c++/9/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/c++/9/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/c++/9/bits/basic_string.tcc **** 	      }
 193:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 194:/usr/include/c++/9/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 196:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/c++/9/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/c++/9/bits/basic_string.tcc **** 	  }
 199:/usr/include/c++/9/bits/basic_string.tcc **** 
 200:/usr/include/c++/9/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/c++/9/bits/basic_string.tcc ****       }
 202:/usr/include/c++/9/bits/basic_string.tcc **** 
 203:/usr/include/c++/9/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/c++/9/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/c++/9/bits/basic_string.tcc ****       void
 206:/usr/include/c++/9/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 207:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/c++/9/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/c++/9/bits/basic_string.tcc ****       {
 210:/usr/include/c++/9/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/c++/9/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 212:/usr/include/c++/9/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 213:/usr/include/c++/9/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/c++/9/bits/basic_string.tcc **** 
 215:/usr/include/c++/9/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 720              		.loc 9 215 12 view .LVU137
 721 002f 48890424 		movq	%rax, (%rsp)	# tmp91, __dnew
 722              	.LBE4103:
 723              	.LBE4102:
 724              	.LBE4101:
 725              	.LBE4100:
 726              	.LBE4099:
 727              	.LBE4098:
 728              	.LBB4142:
 729              	.LBB4097:
 730              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 731              		.loc 8 335 25 view .LVU138
 732 0033 4989C4   		movq	%rax, %r12	# tmp103, tmp91
 733              	.LVL34:
 734              		.loc 8 335 25 view .LVU139
 735              	.LBE4097:
 736              	.LBE4142:
 737              	.LBB4143:
 738              	.LBI4098:
 263:/usr/include/c++/9/bits/basic_string.h **** 	{
 739              		.loc 2 263 9 is_stmt 1 view .LVU140
 740              	.LBB4140:
 741              	.LBB4138:
 742              	.LBI4100:
 243:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 743              		.loc 2 243 9 view .LVU141
 744              	.LBB4136:
 745              	.LBB4134:
 746              	.LBI4102:
 206:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 747              		.loc 9 206 7 view .LVU142
 748              	.LBB4132:
 749              	# /usr/include/c++/9/bits/basic_string.tcc:217: 	if (__dnew > size_type(_S_local_capacity))
 216:/usr/include/c++/9/bits/basic_string.tcc **** 
 217:/usr/include/c++/9/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 750              		.loc 9 217 2 is_stmt 0 view .LVU143
 751 0036 4883F80F 		cmpq	$15, %rax	#, tmp91
 752 003a 7744     		ja	.L29	#,
 753              	.LVL35:
 754              	.LBB4104:
 755              	.LBI4104:
 396:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 756              		.loc 2 396 7 is_stmt 1 view .LVU144
 757              	.LBB4105:
 758              	.LBI4105:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 759              		.loc 2 346 7 view .LVU145
 760              	.LBB4106:
 761              	# /usr/include/c++/9/bits/basic_string.h:348: 	if (__n == 1)
 348:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 762              		.loc 2 348 2 is_stmt 0 view .LVU146
 763 003c 4883F801 		cmpq	$1, %rax	#, _4
 764 0040 752E     		jne	.L21	#,
 765              	# /usr/include/c++/9/bits/basic_string.h:349: 	  traits_type::assign(*__d, *__s);
 349:/usr/include/c++/9/bits/basic_string.h **** 	else
 766              		.loc 2 349 23 view .LVU147
 767 0042 410FB655 		movzbl	0(%r13), %edx	# MEM[(const char_type &)__s_3(D)], _17
 767      00
 768              	.LVL36:
 769              	.LBB4107:
 770              	.LBI4107:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 771              		.loc 8 299 7 is_stmt 1 view .LVU148
 772              	.LBB4108:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 773              		.loc 8 300 9 view .LVU149
 774              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 775              		.loc 8 300 14 is_stmt 0 view .LVU150
 776 0047 885310   		movb	%dl, 16(%rbx)	# _17, MEM[(char_type &)this_1(D) + 16]
 777              	.LVL37:
 778              	.L22:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 779              		.loc 8 300 14 view .LVU151
 780              	.LBE4108:
 781              	.LBE4107:
 782              	.LBE4106:
 783              	.LBE4105:
 784              	.LBE4104:
 785              	.LBB4119:
 786              	.LBI4119:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 787              		.loc 2 214 7 is_stmt 1 view .LVU152
 788              	.LBB4120:
 789              	.LBB4121:
 790              	.LBI4121:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 791              		.loc 2 182 7 view .LVU153
 792              	.LBB4122:
 793              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 794              		.loc 2 183 9 is_stmt 0 view .LVU154
 795 004a 48894308 		movq	%rax, 8(%rbx)	# _4, MEM[(size_type *)this_1(D) + 8B]
 796              	.LVL38:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 797              		.loc 2 183 9 view .LVU155
 798              	.LBE4122:
 799              	.LBE4121:
 800              	.LBB4123:
 801              	.LBI4123:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 802              		.loc 8 299 7 is_stmt 1 view .LVU156
 803              	.LBB4124:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 804              		.loc 8 300 9 view .LVU157
 805              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 806              		.loc 8 300 14 is_stmt 0 view .LVU158
 807 004e C6440500 		movb	$0, 0(%rbp,%rax)	#, MEM[(char_type &)_20]
 807      00
 808              	.LVL39:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 809              		.loc 8 300 14 view .LVU159
 810              	.LBE4124:
 811              	.LBE4123:
 812              	.LBE4120:
 813              	.LBE4119:
 814              	.LBE4132:
 815              	.LBE4134:
 816              	.LBE4136:
 817              	.LBE4138:
 818              	.LBE4140:
 819              	.LBE4143:
 820              	# /usr/include/c++/9/bits/basic_string.h:527:       { _M_construct(__s, __s ? __s + traits_type::le
 527:/usr/include/c++/9/bits/basic_string.h **** 
 821              		.loc 2 527 77 view .LVU160
 822 0053 488B4424 		movq	8(%rsp), %rax	# D.444347, tmp106
 822      08
 823 0058 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp106
 823      25280000 
 823      00
 824 0061 754F     		jne	.L30	#,
 825 0063 4883C418 		addq	$24, %rsp	#,
 826              		.cfi_remember_state
 827              		.cfi_def_cfa_offset 40
 828 0067 5B       		popq	%rbx	#
 829              		.cfi_def_cfa_offset 32
 830              	.LVL40:
 527:/usr/include/c++/9/bits/basic_string.h **** 
 831              		.loc 2 527 77 view .LVU161
 832 0068 5D       		popq	%rbp	#
 833              		.cfi_def_cfa_offset 24
 834 0069 415C     		popq	%r12	#
 835              		.cfi_def_cfa_offset 16
 836 006b 415D     		popq	%r13	#
 837              		.cfi_def_cfa_offset 8
 838              	.LVL41:
 527:/usr/include/c++/9/bits/basic_string.h **** 
 839              		.loc 2 527 77 view .LVU162
 840 006d C3       		ret	
 841              	.LVL42:
 842 006e 6690     		.p2align 4,,10
 843              		.p2align 3
 844              	.L21:
 845              		.cfi_restore_state
 846              	.LBB4144:
 847              	.LBB4141:
 848              	.LBB4139:
 849              	.LBB4137:
 850              	.LBB4135:
 851              	.LBB4133:
 852              	.LBB4125:
 853              	.LBB4117:
 854              	.LBB4115:
 855              	.LBB4109:
 856              	.LBI4109:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 857              		.loc 2 346 7 is_stmt 1 view .LVU163
 858              	.LBB4110:
 859              	.LBI4110:
 336:/usr/include/c++/9/bits/char_traits.h ****       }
 337:/usr/include/c++/9/bits/char_traits.h **** 
 338:/usr/include/c++/9/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR const char_type*
 339:/usr/include/c++/9/bits/char_traits.h ****       find(const char_type* __s, size_t __n, const char_type& __a)
 340:/usr/include/c++/9/bits/char_traits.h ****       {
 341:/usr/include/c++/9/bits/char_traits.h **** 	if (__n == 0)
 342:/usr/include/c++/9/bits/char_traits.h **** 	  return 0;
 343:/usr/include/c++/9/bits/char_traits.h **** #if __cplusplus >= 201703L
 344:/usr/include/c++/9/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 345:/usr/include/c++/9/bits/char_traits.h **** 	    && __builtin_constant_p(__a)
 346:/usr/include/c++/9/bits/char_traits.h **** 	    && __constant_char_array_p(__s, __n))
 347:/usr/include/c++/9/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 348:/usr/include/c++/9/bits/char_traits.h **** #endif
 349:/usr/include/c++/9/bits/char_traits.h **** 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 350:/usr/include/c++/9/bits/char_traits.h ****       }
 351:/usr/include/c++/9/bits/char_traits.h **** 
 352:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 353:/usr/include/c++/9/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, size_t __n)
 354:/usr/include/c++/9/bits/char_traits.h ****       {
 355:/usr/include/c++/9/bits/char_traits.h **** 	if (__n == 0)
 356:/usr/include/c++/9/bits/char_traits.h **** 	  return __s1;
 357:/usr/include/c++/9/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 358:/usr/include/c++/9/bits/char_traits.h ****       }
 359:/usr/include/c++/9/bits/char_traits.h **** 
 360:/usr/include/c++/9/bits/char_traits.h ****       static char_type*
 361:/usr/include/c++/9/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, size_t __n)
 860              		.loc 8 361 7 view .LVU164
 861              	.LBB4111:
 362:/usr/include/c++/9/bits/char_traits.h ****       {
 363:/usr/include/c++/9/bits/char_traits.h **** 	if (__n == 0)
 862              		.loc 8 363 2 view .LVU165
 863 0070 4885C0   		testq	%rax, %rax	# tmp91
 864 0073 74D5     		je	.L22	#,
 865 0075 EB24     		jmp	.L20	#
 866              	.LVL43:
 867 0077 660F1F84 		.p2align 4,,10
 867      00000000 
 867      00
 868              		.p2align 3
 869              	.L29:
 870              		.loc 8 363 2 is_stmt 0 view .LVU166
 871              	.LBE4111:
 872              	.LBE4110:
 873              	.LBE4109:
 874              	.LBE4115:
 875              	.LBE4117:
 876              	.LBE4125:
 877              	# /usr/include/c++/9/bits/basic_string.tcc:219: 	    _M_data(_M_create(__dnew, size_type(0)));
 218:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 219:/usr/include/c++/9/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 878              		.loc 9 219 6 view .LVU167
 879 0080 4889E6   		movq	%rsp, %rsi	#, tmp93
 880 0083 31D2     		xorl	%edx, %edx	#
 881 0085 4889DF   		movq	%rbx, %rdi	# this,
 882 0088 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT	#
 882      00
 883              	.LVL44:
 884              	.LBB4126:
 885              	.LBB4127:
 886              	# /usr/include/c++/9/bits/basic_string.h:179:       { _M_dataplus._M_p = __p; }
 179:/usr/include/c++/9/bits/basic_string.h **** 
 887              		.loc 2 179 9 view .LVU168
 888 008d 488903   		movq	%rax, (%rbx)	# _2, MEM[(char * *)this_1(D)]
 889              	.LBE4127:
 890              	.LBE4126:
 891              	# /usr/include/c++/9/bits/basic_string.tcc:219: 	    _M_data(_M_create(__dnew, size_type(0)));
 892              		.loc 9 219 6 view .LVU169
 893 0090 4889C5   		movq	%rax, %rbp	# tmp104, _2
 894              	.LVL45:
 895              	.LBB4128:
 896              	.LBI4126:
 178:/usr/include/c++/9/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 897              		.loc 2 178 7 is_stmt 1 view .LVU170
 178:/usr/include/c++/9/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 898              		.loc 2 178 7 is_stmt 0 view .LVU171
 899              	.LBE4128:
 900              	.LBB4129:
 901              	.LBI4129:
 210:/usr/include/c++/9/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 902              		.loc 2 210 7 is_stmt 1 view .LVU172
 903              	.LBB4130:
 904              	# /usr/include/c++/9/bits/basic_string.h:211:       { _M_allocated_capacity = __capacity; }
 211:/usr/include/c++/9/bits/basic_string.h **** 
 905              		.loc 2 211 9 is_stmt 0 view .LVU173
 906 0093 488B0424 		movq	(%rsp), %rax	# __dnew, __dnew
 907 0097 48894310 		movq	%rax, 16(%rbx)	# __dnew, MEM[(size_type *)this_1(D) + 16B]
 908              	.LVL46:
 211:/usr/include/c++/9/bits/basic_string.h **** 
 909              		.loc 2 211 9 view .LVU174
 910              	.LBE4130:
 911              	.LBE4129:
 912              	.LBB4131:
 396:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 913              		.loc 2 396 7 is_stmt 1 view .LVU175
 914              	.LBB4118:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 915              		.loc 2 346 7 view .LVU176
 916              	.LBB4116:
 917              	.LBB4114:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 918              		.loc 2 346 7 view .LVU177
 919              	.LBB4113:
 361:/usr/include/c++/9/bits/char_traits.h ****       {
 920              		.loc 8 361 7 view .LVU178
 921              	.LBB4112:
 922              		.loc 8 363 2 view .LVU179
 923              	.L20:
 364:/usr/include/c++/9/bits/char_traits.h **** 	  return __s1;
 365:/usr/include/c++/9/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 924              		.loc 8 365 2 view .LVU180
 925              	# /usr/include/c++/9/bits/char_traits.h:365: 	return static_cast<char_type*>(__builtin_memcpy(__s1,
 926              		.loc 8 365 49 is_stmt 0 view .LVU181
 927 009b 4889EF   		movq	%rbp, %rdi	# _2,
 928 009e 4C89E2   		movq	%r12, %rdx	# tmp91,
 929 00a1 4C89EE   		movq	%r13, %rsi	# __s,
 930 00a4 E8000000 		call	memcpy@PLT	#
 930      00
 931              	.LVL47:
 932 00a9 488B0424 		movq	(%rsp), %rax	# __dnew, _4
 933 00ad 488B2B   		movq	(%rbx), %rbp	# MEM[(char * *)this_1(D)], _2
 934              	.LVL48:
 935              	# /usr/include/c++/9/bits/char_traits.h:365: 	return static_cast<char_type*>(__builtin_memcpy(__s1,
 936              		.loc 8 365 66 view .LVU182
 937 00b0 EB98     		jmp	.L22	#
 938              	.LVL49:
 939              	.L30:
 940              		.loc 8 365 66 view .LVU183
 941              	.LBE4112:
 942              	.LBE4113:
 943              	.LBE4114:
 944              	.LBE4116:
 945              	.LBE4118:
 946              	.LBE4131:
 947              	.LBE4133:
 948              	.LBE4135:
 949              	.LBE4137:
 950              	.LBE4139:
 951              	.LBE4141:
 952              	.LBE4144:
 953              	# /usr/include/c++/9/bits/basic_string.h:527:       { _M_construct(__s, __s ? __s + traits_type::le
 527:/usr/include/c++/9/bits/basic_string.h **** 
 954              		.loc 2 527 77 view .LVU184
 955 00b2 E8000000 		call	__stack_chk_fail@PLT	#
 955      00
 956              	.LVL50:
 957              		.cfi_endproc
 958              	.LFE19916:
 960              		.section	.text._ZN3c1010IndexErrorD2Ev,"axG",@progbits,_ZN3c1010IndexErrorD5Ev,comdat
 961              		.align 2
 962              		.p2align 4
 963              		.weak	_ZN3c1010IndexErrorD2Ev
 965              	_ZN3c1010IndexErrorD2Ev:
 966              	.LVL51:
 967              	.LFB19550:
 101:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 102:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   const void* caller() const noexcept {
 103:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return caller_;
 104:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   }
 105:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 106:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   /// Returns only the error message string, without source location.
 107:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   /// The returned pointer is invalidated if you call add_context() on
 108:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   /// this object.
 109:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   const char* what_without_backtrace() const noexcept {
 110:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return what_without_backtrace_.c_str();
 111:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   }
 112:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 113:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****  private:
 114:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   void refresh_what();
 115:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   std::string compute_what(bool include_backtrace) const;
 116:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 117:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 118:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** class C10_API WarningHandler {
 119:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   public:
 120:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   virtual ~WarningHandler() noexcept(false) {}
 121:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   /// The default warning handler. Prints the message to stderr.
 122:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   virtual void process(
 123:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const SourceLocation& source_location,
 124:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const std::string& msg,
 125:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****       const bool verbatim);
 126:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 127:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 128:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** namespace Warning {
 129:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 130:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Note: [Verbatim Warnings]
 131:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Warnings originating in C++ code can appear out-of-place to Python users:
 132:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // a user runs a line in Python, but the warning references a line in C++.
 133:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Some parts of PyTorch, like the JIT, are cognizant of this mismatch
 134:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // and take care to map warnings back to the user's program, but most
 135:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // of PyTorch simply throws a context-free warning. To allow warning
 136:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // handlers to add context where appropriate, warn takes the
 137:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // "verbatim" flag. When this is false a warning handler might append
 138:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // the C++ warning to a Python warning message that relates the warning
 139:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // back to the user's program. Callers who have already accounted for
 140:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // context in their warnings should set verbatim to true so their warnings
 141:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // appear without modification.
 142:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 143:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// Issue a warning with a given message. Dispatched to the current
 144:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// warning handler.
 145:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** C10_API void warn(SourceLocation source_location,
 146:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     const std::string& msg,
 147:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     bool verbatim);
 148:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// Sets the global warning handler. This is not thread-safe, so it should
 149:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// generally be called once during initialization or while holding the GIL
 150:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// for programs that use python.
 151:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// User is responsible for keeping the WarningHandler alive until
 152:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// it is not needed.
 153:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** C10_API void set_warning_handler(WarningHandler* handler) noexcept(true);
 154:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** /// Gets the global warning handler.
 155:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** C10_API WarningHandler* get_warning_handler() noexcept(true);
 156:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 157:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** } // namespace Warning
 158:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 159:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Used in ATen for out-of-bound indices that can reasonably only be detected
 160:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // lazily inside a kernel (See: advanced indexing).  These turn into
 161:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // IndexError when they cross to Python.
 162:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** class C10_API IndexError : public Error {
 968              		.loc 1 162 15 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		.loc 1 162 15 is_stmt 0 view .LVU186
 971 0000 F30F1EFA 		endbr64	
 972              	.LVL52:
 973              	.LBB4250:
 974              	.LBB4251:
 975              	.LBI4251:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 976              		.loc 1 28 15 is_stmt 1 view .LVU187
 977              	.LBB4252:
 978 0004 488D0500 		leaq	16+_ZTVN3c105ErrorE(%rip), %rax	#, tmp109
 978      000000
 979              	.LBE4252:
 980              	.LBE4251:
 981              	.LBE4250:
 982              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:162: class C10_API IndexError : p
 983              		.loc 1 162 15 is_stmt 0 view .LVU188
 984 000b 4154     		pushq	%r12	#
 985              		.cfi_def_cfa_offset 16
 986              		.cfi_offset 12, -16
 987 000d 55       		pushq	%rbp	#
 988              		.cfi_def_cfa_offset 24
 989              		.cfi_offset 6, -24
 990 000e 4889FD   		movq	%rdi, %rbp	# tmp108, this
 991 0011 53       		pushq	%rbx	#
 992              		.cfi_def_cfa_offset 32
 993              		.cfi_offset 3, -32
 994              	.LBB4362:
 995              	.LBB4359:
 996              	.LBB4356:
 997              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 998              		.loc 1 28 15 view .LVU189
 999 0012 488907   		movq	%rax, (%rdi)	# tmp109, MEM[(struct Error *)this_3(D)].D.55460._vptr.exception
 1000              	.LVL53:
 1001              	.LBB4253:
 1002              	.LBI4253:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1003              		.loc 2 657 7 is_stmt 1 view .LVU190
 1004              	.LBB4254:
 1005              	.LBI4254:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1006              		.loc 2 229 7 view .LVU191
 1007              	.LBB4255:
 1008              	.LBB4256:
 1009              	.LBI4256:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1010              		.loc 2 221 7 view .LVU192
 1011              	.LBB4257:
 1012              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1013              		.loc 2 222 26 is_stmt 0 view .LVU193
 1014 0015 488BBF80 		movq	128(%rdi), %rdi	# MEM[(char * *)this_3(D) + 128B], _7
 1014      000000
 1015              	.LVL54:
 1016              	.LBB4258:
 1017              	.LBI4258:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1018              		.loc 2 200 7 is_stmt 1 view .LVU194
 1019              	.LBB4259:
 1020              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1021              		.loc 2 203 57 is_stmt 0 view .LVU195
 1022 001c 488D8590 		leaq	144(%rbp), %rax	#, tmp100
 1022      000000
 1023              	.LBE4259:
 1024              	.LBE4258:
 1025              	.LBE4257:
 1026              	.LBE4256:
 1027              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1028              		.loc 2 231 2 view .LVU196
 1029 0023 4839C7   		cmpq	%rax, %rdi	# tmp100, _7
 1030 0026 7405     		je	.L32	#,
 1031              	.LVL55:
 1032              	.LBB4260:
 1033              	.LBI4260:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1034              		.loc 2 236 7 is_stmt 1 view .LVU197
 1035              	.LBB4261:
 1036              	.LBB4262:
 1037              	.LBI4262:
 1038              		.loc 3 469 7 view .LVU198
 1039              	.LBB4263:
 1040              	.LBI4263:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1041              		.loc 4 119 7 view .LVU199
 1042              	.LBB4264:
 1043              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1044              		.loc 4 128 19 is_stmt 0 view .LVU200
 1045 0028 E8000000 		call	_ZdlPv@PLT	#
 1045      00
 1046              	.LVL56:
 1047              	.L32:
 1048              		.loc 4 128 19 view .LVU201
 1049              	.LBE4264:
 1050              	.LBE4263:
 1051              	.LBE4262:
 1052              	.LBE4261:
 1053              	.LBE4260:
 1054              	.LBE4255:
 1055              	.LBE4254:
 1056              	.LBB4265:
 1057              	.LBI4265:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1058              		.loc 2 150 14 is_stmt 1 view .LVU202
 1059              	.LBB4266:
 1060              	.LBI4266:
 1061              		.loc 5 153 7 view .LVU203
 1062              	.LBB4267:
 1063              	.LBI4267:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1064              		.loc 4 89 7 view .LVU204
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1065              		.loc 4 89 7 is_stmt 0 view .LVU205
 1066              	.LBE4267:
 1067              	.LBE4266:
 1068              	.LBE4265:
 1069              	.LBE4253:
 1070              	.LBB4268:
 1071              	.LBI4268:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1072              		.loc 2 657 7 is_stmt 1 view .LVU206
 1073              	.LBB4269:
 1074              	.LBI4269:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1075              		.loc 2 229 7 view .LVU207
 1076              	.LBB4270:
 1077              	.LBB4271:
 1078              	.LBI4271:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1079              		.loc 2 221 7 view .LVU208
 1080              	.LBB4272:
 1081              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1082              		.loc 2 222 26 is_stmt 0 view .LVU209
 1083 002d 488B7D60 		movq	96(%rbp), %rdi	# MEM[(char * *)this_3(D) + 96B], _9
 1084              	.LVL57:
 1085              	.LBB4273:
 1086              	.LBI4273:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1087              		.loc 2 200 7 is_stmt 1 view .LVU210
 1088              	.LBB4274:
 1089              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1090              		.loc 2 203 57 is_stmt 0 view .LVU211
 1091 0031 488D4570 		leaq	112(%rbp), %rax	#, tmp102
 1092              	.LBE4274:
 1093              	.LBE4273:
 1094              	.LBE4272:
 1095              	.LBE4271:
 1096              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1097              		.loc 2 231 2 view .LVU212
 1098 0035 4839C7   		cmpq	%rax, %rdi	# tmp102, _9
 1099 0038 7405     		je	.L33	#,
 1100              	.LVL58:
 1101              	.LBB4275:
 1102              	.LBI4275:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1103              		.loc 2 236 7 is_stmt 1 view .LVU213
 1104              	.LBB4276:
 1105              	.LBB4277:
 1106              	.LBI4277:
 1107              		.loc 3 469 7 view .LVU214
 1108              	.LBB4278:
 1109              	.LBI4278:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1110              		.loc 4 119 7 view .LVU215
 1111              	.LBB4279:
 1112              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1113              		.loc 4 128 19 is_stmt 0 view .LVU216
 1114 003a E8000000 		call	_ZdlPv@PLT	#
 1114      00
 1115              	.LVL59:
 1116              	.L33:
 1117              		.loc 4 128 19 view .LVU217
 1118              	.LBE4279:
 1119              	.LBE4278:
 1120              	.LBE4277:
 1121              	.LBE4276:
 1122              	.LBE4275:
 1123              	.LBE4270:
 1124              	.LBE4269:
 1125              	.LBB4280:
 1126              	.LBI4280:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1127              		.loc 2 150 14 is_stmt 1 view .LVU218
 1128              	.LBB4281:
 1129              	.LBI4281:
 1130              		.loc 5 153 7 view .LVU219
 1131              	.LBB4282:
 1132              	.LBI4282:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1133              		.loc 4 89 7 view .LVU220
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1134              		.loc 4 89 7 is_stmt 0 view .LVU221
 1135              	.LBE4282:
 1136              	.LBE4281:
 1137              	.LBE4280:
 1138              	.LBE4268:
 1139              	.LBB4283:
 1140              	.LBI4283:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1141              		.loc 2 657 7 is_stmt 1 view .LVU222
 1142              	.LBB4284:
 1143              	.LBI4284:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1144              		.loc 2 229 7 view .LVU223
 1145              	.LBB4285:
 1146              	.LBB4286:
 1147              	.LBI4286:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1148              		.loc 2 221 7 view .LVU224
 1149              	.LBB4287:
 1150              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1151              		.loc 2 222 26 is_stmt 0 view .LVU225
 1152 003f 488B7D40 		movq	64(%rbp), %rdi	# MEM[(char * *)this_3(D) + 64B], _11
 1153              	.LVL60:
 1154              	.LBB4288:
 1155              	.LBI4288:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1156              		.loc 2 200 7 is_stmt 1 view .LVU226
 1157              	.LBB4289:
 1158              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1159              		.loc 2 203 57 is_stmt 0 view .LVU227
 1160 0043 488D4550 		leaq	80(%rbp), %rax	#, tmp104
 1161              	.LBE4289:
 1162              	.LBE4288:
 1163              	.LBE4287:
 1164              	.LBE4286:
 1165              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1166              		.loc 2 231 2 view .LVU228
 1167 0047 4839C7   		cmpq	%rax, %rdi	# tmp104, _11
 1168 004a 7405     		je	.L34	#,
 1169              	.LVL61:
 1170              	.LBB4290:
 1171              	.LBI4290:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1172              		.loc 2 236 7 is_stmt 1 view .LVU229
 1173              	.LBB4291:
 1174              	.LBB4292:
 1175              	.LBI4292:
 1176              		.loc 3 469 7 view .LVU230
 1177              	.LBB4293:
 1178              	.LBI4293:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1179              		.loc 4 119 7 view .LVU231
 1180              	.LBB4294:
 1181              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1182              		.loc 4 128 19 is_stmt 0 view .LVU232
 1183 004c E8000000 		call	_ZdlPv@PLT	#
 1183      00
 1184              	.LVL62:
 1185              	.L34:
 1186              		.loc 4 128 19 view .LVU233
 1187              	.LBE4294:
 1188              	.LBE4293:
 1189              	.LBE4292:
 1190              	.LBE4291:
 1191              	.LBE4290:
 1192              	.LBE4285:
 1193              	.LBE4284:
 1194              	.LBB4295:
 1195              	.LBI4295:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1196              		.loc 2 150 14 is_stmt 1 view .LVU234
 1197              	.LBB4296:
 1198              	.LBI4296:
 1199              		.loc 5 153 7 view .LVU235
 1200              	.LBB4297:
 1201              	.LBI4297:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1202              		.loc 4 89 7 view .LVU236
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1203              		.loc 4 89 7 is_stmt 0 view .LVU237
 1204              	.LBE4297:
 1205              	.LBE4296:
 1206              	.LBE4295:
 1207              	.LBE4283:
 1208              	.LBB4298:
 1209              	.LBI4298:
 675:/usr/include/c++/9/bits/stl_vector.h ****       {
 1210              		.loc 6 675 7 is_stmt 1 view .LVU238
 1211              	.LBB4299:
 1212              	.LBB4300:
 1213              	.LBI4300:
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 1214              		.loc 6 273 7 view .LVU239
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 1215              		.loc 6 273 7 is_stmt 0 view .LVU240
 1216              	.LBE4300:
 1217              	# /usr/include/c++/9/bits/stl_vector.h:677: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M
 1218              		.loc 6 677 15 view .LVU241
 1219 0051 488B5D30 		movq	48(%rbp), %rbx	# MEM[(struct vector *)this_3(D) + 40B].D.55370._M_impl.D.54673._M_finish, _17
 1220 0055 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct vector *)this_3(D) + 40B].D.55370._M_impl.D.54673._M_start, __fi
 1221              	.LVL63:
 1222              	.LBB4301:
 1223              	.LBI4301:
 1224              		.loc 7 203 5 is_stmt 1 view .LVU242
 1225              	.LBB4302:
 1226              	.LBB4303:
 1227              	.LBB4304:
 1228              	.LBB4305:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1229              		.loc 7 107 19 view .LVU243
 1230 0059 4C39E3   		cmpq	%r12, %rbx	# __first, _17
 1231 005c 7422     		je	.L35	#,
 1232              	.LVL64:
 1233 005e 6690     		.p2align 4,,10
 1234              		.p2align 3
 1235              	.L39:
 1236              	.LBB4306:
 1237              	.LBI4306:
  97:/usr/include/c++/9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 1238              		.loc 7 97 5 view .LVU244
 1239              	.LBB4307:
 1240              	.LBI4307:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1241              		.loc 2 657 7 view .LVU245
 1242              	.LBB4308:
 1243              	.LBI4308:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1244              		.loc 2 229 7 view .LVU246
 1245              	.LBB4309:
 1246              	.LBB4310:
 1247              	.LBI4310:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1248              		.loc 2 221 7 view .LVU247
 1249              	.LBB4311:
 1250              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1251              		.loc 2 222 26 is_stmt 0 view .LVU248
 1252 0060 498B3C24 		movq	(%r12), %rdi	# MEM[base: __first_52, offset: 0B], _20
 1253              	.LVL65:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1254              		.loc 2 222 26 view .LVU249
 1255              	.LBE4311:
 1256              	.LBE4310:
 1257              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1258              		.loc 2 231 2 view .LVU250
 1259 0064 498D4424 		leaq	16(%r12), %rax	#, tmp105
 1259      10
 1260 0069 4839C7   		cmpq	%rax, %rdi	# tmp105, _20
 1261 006c 7442     		je	.L36	#,
 1262              	.LVL66:
 1263              	.LBB4312:
 1264              	.LBI4312:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1265              		.loc 2 236 7 is_stmt 1 view .LVU251
 1266              	.LBB4313:
 1267              	.LBI4313:
 1268              		.loc 3 469 7 view .LVU252
 1269              	.LBB4314:
 1270              	.LBI4314:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1271              		.loc 4 119 7 view .LVU253
 1272              	.LBB4315:
 1273              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1274              		.loc 4 128 19 is_stmt 0 view .LVU254
 1275 006e E8000000 		call	_ZdlPv@PLT	#
 1275      00
 1276              	.LVL67:
 1277              		.loc 4 128 19 view .LVU255
 1278              	.LBE4315:
 1279              	.LBE4314:
 1280              	.LBE4313:
 1281              	.LBE4312:
 1282              	.LBE4309:
 1283              	.LBE4308:
 1284              	.LBB4316:
 1285              	.LBI4316:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1286              		.loc 2 150 14 is_stmt 1 view .LVU256
 1287              	.LBB4317:
 1288              	.LBI4317:
 1289              		.loc 5 153 7 view .LVU257
 1290              	.LBB4318:
 1291              	.LBI4318:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1292              		.loc 4 89 7 view .LVU258
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1293              		.loc 4 89 7 is_stmt 0 view .LVU259
 1294              	.LBE4318:
 1295              	.LBE4317:
 1296              	.LBE4316:
 1297              	.LBE4307:
 1298              	.LBE4306:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1299              		.loc 7 107 4 is_stmt 1 view .LVU260
 1300 0073 4983C420 		addq	$32, %r12	#, __first
 1301              	.LVL68:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1302              		.loc 7 107 19 view .LVU261
 1303 0077 4939DC   		cmpq	%rbx, %r12	# _17, __first
 1304 007a 75E4     		jne	.L39	#,
 1305              	.LVL69:
 1306              	.L37:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1307              		.loc 7 107 19 is_stmt 0 view .LVU262
 1308 007c 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct _Vector_base *)this_3(D) + 40B]._M_impl.D.54673._M_start, __firs
 1309              	.LVL70:
 1310              	.L35:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1311              		.loc 7 107 19 view .LVU263
 1312              	.LBE4305:
 1313              	.LBE4304:
 1314              	.LBE4303:
 1315              	.LBE4302:
 1316              	.LBE4301:
 1317              	.LBB4328:
 1318              	.LBI4328:
 330:/usr/include/c++/9/bits/stl_vector.h ****       {
 1319              		.loc 6 330 7 is_stmt 1 view .LVU264
 1320              	.LBB4329:
 1321              	.LBI4329:
 347:/usr/include/c++/9/bits/stl_vector.h ****       {
 1322              		.loc 6 347 7 view .LVU265
 1323              	.LBB4330:
 1324              	# /usr/include/c++/9/bits/stl_vector.h:350: 	if (__p)
 350:/usr/include/c++/9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1325              		.loc 6 350 2 is_stmt 0 view .LVU266
 1326 0080 4D85E4   		testq	%r12, %r12	# __first
 1327 0083 7408     		je	.L40	#,
 1328              	.LVL71:
 1329              	.LBB4331:
 1330              	.LBI4331:
 1331              		.loc 3 469 7 is_stmt 1 view .LVU267
 1332              	.LBB4332:
 1333              	.LBB4333:
 1334              	.LBI4333:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1335              		.loc 4 119 7 view .LVU268
 1336              	.LBB4334:
 1337              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1338              		.loc 4 128 19 is_stmt 0 view .LVU269
 1339 0085 4C89E7   		movq	%r12, %rdi	# __first,
 1340 0088 E8000000 		call	_ZdlPv@PLT	#
 1340      00
 1341              	.LVL72:
 1342              	.L40:
 1343              		.loc 4 128 19 view .LVU270
 1344              	.LBE4334:
 1345              	.LBE4333:
 1346              	.LBE4332:
 1347              	.LBE4331:
 1348              	.LBE4330:
 1349              	.LBE4329:
 1350              	.LBB4335:
 1351              	.LBI4335:
 125:/usr/include/c++/9/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 1352              		.loc 6 125 14 is_stmt 1 view .LVU271
 1353              	.LBB4336:
 1354              	.LBI4336:
 1355              		.loc 5 153 7 view .LVU272
 1356              	.LBB4337:
 1357              	.LBI4337:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1358              		.loc 4 89 7 view .LVU273
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1359              		.loc 4 89 7 is_stmt 0 view .LVU274
 1360              	.LBE4337:
 1361              	.LBE4336:
 1362              	.LBE4335:
 1363              	.LBE4328:
 1364              	.LBE4299:
 1365              	.LBE4298:
 1366              	.LBB4340:
 1367              	.LBI4340:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1368              		.loc 2 657 7 is_stmt 1 view .LVU275
 1369              	.LBB4341:
 1370              	.LBI4341:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1371              		.loc 2 229 7 view .LVU276
 1372              	.LBB4342:
 1373              	.LBB4343:
 1374              	.LBI4343:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1375              		.loc 2 221 7 view .LVU277
 1376              	.LBB4344:
 1377              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1378              		.loc 2 222 26 is_stmt 0 view .LVU278
 1379 008d 488B7D08 		movq	8(%rbp), %rdi	# MEM[(char * *)this_3(D) + 8B], _14
 1380              	.LVL73:
 1381              	.LBB4345:
 1382              	.LBI4345:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1383              		.loc 2 200 7 is_stmt 1 view .LVU279
 1384              	.LBB4346:
 1385              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1386              		.loc 2 203 57 is_stmt 0 view .LVU280
 1387 0091 488D4518 		leaq	24(%rbp), %rax	#, tmp107
 1388              	.LBE4346:
 1389              	.LBE4345:
 1390              	.LBE4344:
 1391              	.LBE4343:
 1392              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1393              		.loc 2 231 2 view .LVU281
 1394 0095 4839C7   		cmpq	%rax, %rdi	# tmp107, _14
 1395 0098 7405     		je	.L41	#,
 1396              	.LVL74:
 1397              	.LBB4347:
 1398              	.LBI4347:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1399              		.loc 2 236 7 is_stmt 1 view .LVU282
 1400              	.LBB4348:
 1401              	.LBB4349:
 1402              	.LBI4349:
 1403              		.loc 3 469 7 view .LVU283
 1404              	.LBB4350:
 1405              	.LBI4350:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1406              		.loc 4 119 7 view .LVU284
 1407              	.LBB4351:
 1408              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1409              		.loc 4 128 19 is_stmt 0 view .LVU285
 1410 009a E8000000 		call	_ZdlPv@PLT	#
 1410      00
 1411              	.LVL75:
 1412              	.L41:
 1413              		.loc 4 128 19 view .LVU286
 1414              	.LBE4351:
 1415              	.LBE4350:
 1416              	.LBE4349:
 1417              	.LBE4348:
 1418              	.LBE4347:
 1419              	.LBE4342:
 1420              	.LBE4341:
 1421              	.LBB4352:
 1422              	.LBI4352:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1423              		.loc 2 150 14 is_stmt 1 view .LVU287
 1424              	.LBB4353:
 1425              	.LBI4353:
 1426              		.loc 5 153 7 view .LVU288
 1427              	.LBB4354:
 1428              	.LBI4354:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1429              		.loc 4 89 7 view .LVU289
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1430              		.loc 4 89 7 is_stmt 0 view .LVU290
 1431              	.LBE4354:
 1432              	.LBE4353:
 1433              	.LBE4352:
 1434              	.LBE4340:
 1435              	.LBE4356:
 1436              	.LBE4359:
 1437              	.LBE4362:
 1438              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:162: class C10_API IndexError : p
 1439              		.loc 1 162 15 view .LVU291
 1440 009f 5B       		popq	%rbx	#
 1441              		.cfi_remember_state
 1442              		.cfi_def_cfa_offset 24
 1443              	.LBB4363:
 1444              	.LBB4360:
 1445              	.LBB4357:
 1446              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1447              		.loc 1 28 15 view .LVU292
 1448 00a0 4889EF   		movq	%rbp, %rdi	# this,
 1449              	.LBE4357:
 1450              	.LBE4360:
 1451              	.LBE4363:
 1452              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:162: class C10_API IndexError : p
 1453              		.loc 1 162 15 view .LVU293
 1454 00a3 5D       		popq	%rbp	#
 1455              		.cfi_def_cfa_offset 16
 1456              	.LVL76:
 1457              		.loc 1 162 15 view .LVU294
 1458 00a4 415C     		popq	%r12	#
 1459              		.cfi_def_cfa_offset 8
 1460              	.LBB4364:
 1461              	.LBB4361:
 1462              	.LBB4358:
 1463              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1464              		.loc 1 28 15 view .LVU295
 1465 00a6 E9000000 		jmp	_ZNSt9exceptionD2Ev@PLT	#
 1465      00
 1466              	.LVL77:
 1467 00ab 0F1F4400 		.p2align 4,,10
 1467      00
 1468              		.p2align 3
 1469              	.L36:
 1470              		.cfi_restore_state
 1471              	.LBB4355:
 1472              	.LBB4339:
 1473              	.LBB4338:
 1474              	.LBB4327:
 1475              	.LBB4326:
 1476              	.LBB4325:
 1477              	.LBB4324:
 1478              	.LBB4323:
 1479              	.LBB4322:
 1480              	.LBB4321:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1481              		.loc 2 150 14 is_stmt 1 view .LVU296
 1482              	.LBB4320:
 1483              		.loc 5 153 7 view .LVU297
 1484              	.LBB4319:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1485              		.loc 4 89 7 view .LVU298
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1486              		.loc 4 89 7 is_stmt 0 view .LVU299
 1487              	.LBE4319:
 1488              	.LBE4320:
 1489              	.LBE4321:
 1490              	.LBE4322:
 1491              	.LBE4323:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1492              		.loc 7 107 4 is_stmt 1 view .LVU300
 1493 00b0 4983C420 		addq	$32, %r12	#, __first
 1494              	.LVL78:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1495              		.loc 7 107 19 view .LVU301
 1496 00b4 4C39E3   		cmpq	%r12, %rbx	# __first, _17
 1497 00b7 75A7     		jne	.L39	#,
 1498 00b9 EBC1     		jmp	.L37	#
 1499              	.LBE4324:
 1500              	.LBE4325:
 1501              	.LBE4326:
 1502              	.LBE4327:
 1503              	.LBE4338:
 1504              	.LBE4339:
 1505              	.LBE4355:
 1506              	.LBE4358:
 1507              	.LBE4361:
 1508              	.LBE4364:
 1509              		.cfi_endproc
 1510              	.LFE19550:
 1512              		.weak	_ZN3c1010IndexErrorD1Ev
 1513              		.set	_ZN3c1010IndexErrorD1Ev,_ZN3c1010IndexErrorD2Ev
 1514              		.section	.text._ZN3c105ErrorD0Ev,"axG",@progbits,_ZN3c105ErrorD5Ev,comdat
 1515              		.align 2
 1516              		.p2align 4
 1517              		.weak	_ZN3c105ErrorD0Ev
 1519              	_ZN3c105ErrorD0Ev:
 1520              	.LVL79:
 1521              	.LFB7895:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1522              		.loc 1 28 15 view -0
 1523              		.cfi_startproc
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1524              		.loc 1 28 15 is_stmt 0 view .LVU303
 1525 0000 F30F1EFA 		endbr64	
 1526              	.LVL80:
 1527              	.LBB4469:
 1528              	.LBI4469:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1529              		.loc 1 28 15 is_stmt 1 view .LVU304
 1530              	.LBB4470:
 1531 0004 488D0500 		leaq	16+_ZTVN3c105ErrorE(%rip), %rax	#, tmp109
 1531      000000
 1532              	.LBE4470:
 1533              	.LBE4469:
 1534 000b 4154     		pushq	%r12	#
 1535              		.cfi_def_cfa_offset 16
 1536              		.cfi_offset 12, -16
 1537 000d 55       		pushq	%rbp	#
 1538              		.cfi_def_cfa_offset 24
 1539              		.cfi_offset 6, -24
 1540 000e 4889FD   		movq	%rdi, %rbp	# tmp108, this
 1541 0011 53       		pushq	%rbx	#
 1542              		.cfi_def_cfa_offset 32
 1543              		.cfi_offset 3, -32
 1544              	.LBB4576:
 1545              	.LBB4574:
 1546              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1547              		.loc 1 28 15 is_stmt 0 view .LVU305
 1548 0012 488907   		movq	%rax, (%rdi)	# tmp109, this_2(D)->D.55460._vptr.exception
 1549              	.LVL81:
 1550              	.LBB4471:
 1551              	.LBI4471:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1552              		.loc 2 657 7 is_stmt 1 view .LVU306
 1553              	.LBB4472:
 1554              	.LBI4472:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1555              		.loc 2 229 7 view .LVU307
 1556              	.LBB4473:
 1557              	.LBB4474:
 1558              	.LBI4474:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1559              		.loc 2 221 7 view .LVU308
 1560              	.LBB4475:
 1561              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1562              		.loc 2 222 26 is_stmt 0 view .LVU309
 1563 0015 488BBF80 		movq	128(%rdi), %rdi	# MEM[(char * *)this_2(D) + 128B], _5
 1563      000000
 1564              	.LVL82:
 1565              	.LBB4476:
 1566              	.LBI4476:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1567              		.loc 2 200 7 is_stmt 1 view .LVU310
 1568              	.LBB4477:
 1569              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1570              		.loc 2 203 57 is_stmt 0 view .LVU311
 1571 001c 488D8590 		leaq	144(%rbp), %rax	#, tmp100
 1571      000000
 1572              	.LBE4477:
 1573              	.LBE4476:
 1574              	.LBE4475:
 1575              	.LBE4474:
 1576              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1577              		.loc 2 231 2 view .LVU312
 1578 0023 4839C7   		cmpq	%rax, %rdi	# tmp100, _5
 1579 0026 7405     		je	.L47	#,
 1580              	.LVL83:
 1581              	.LBB4478:
 1582              	.LBI4478:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1583              		.loc 2 236 7 is_stmt 1 view .LVU313
 1584              	.LBB4479:
 1585              	.LBB4480:
 1586              	.LBI4480:
 1587              		.loc 3 469 7 view .LVU314
 1588              	.LBB4481:
 1589              	.LBI4481:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1590              		.loc 4 119 7 view .LVU315
 1591              	.LBB4482:
 1592              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1593              		.loc 4 128 19 is_stmt 0 view .LVU316
 1594 0028 E8000000 		call	_ZdlPv@PLT	#
 1594      00
 1595              	.LVL84:
 1596              	.L47:
 1597              		.loc 4 128 19 view .LVU317
 1598              	.LBE4482:
 1599              	.LBE4481:
 1600              	.LBE4480:
 1601              	.LBE4479:
 1602              	.LBE4478:
 1603              	.LBE4473:
 1604              	.LBE4472:
 1605              	.LBB4483:
 1606              	.LBI4483:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1607              		.loc 2 150 14 is_stmt 1 view .LVU318
 1608              	.LBB4484:
 1609              	.LBI4484:
 1610              		.loc 5 153 7 view .LVU319
 1611              	.LBB4485:
 1612              	.LBI4485:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1613              		.loc 4 89 7 view .LVU320
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1614              		.loc 4 89 7 is_stmt 0 view .LVU321
 1615              	.LBE4485:
 1616              	.LBE4484:
 1617              	.LBE4483:
 1618              	.LBE4471:
 1619              	.LBB4486:
 1620              	.LBI4486:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1621              		.loc 2 657 7 is_stmt 1 view .LVU322
 1622              	.LBB4487:
 1623              	.LBI4487:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1624              		.loc 2 229 7 view .LVU323
 1625              	.LBB4488:
 1626              	.LBB4489:
 1627              	.LBI4489:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1628              		.loc 2 221 7 view .LVU324
 1629              	.LBB4490:
 1630              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1631              		.loc 2 222 26 is_stmt 0 view .LVU325
 1632 002d 488B7D60 		movq	96(%rbp), %rdi	# MEM[(char * *)this_2(D) + 96B], _7
 1633              	.LVL85:
 1634              	.LBB4491:
 1635              	.LBI4491:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1636              		.loc 2 200 7 is_stmt 1 view .LVU326
 1637              	.LBB4492:
 1638              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1639              		.loc 2 203 57 is_stmt 0 view .LVU327
 1640 0031 488D4570 		leaq	112(%rbp), %rax	#, tmp102
 1641              	.LBE4492:
 1642              	.LBE4491:
 1643              	.LBE4490:
 1644              	.LBE4489:
 1645              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1646              		.loc 2 231 2 view .LVU328
 1647 0035 4839C7   		cmpq	%rax, %rdi	# tmp102, _7
 1648 0038 7405     		je	.L48	#,
 1649              	.LVL86:
 1650              	.LBB4493:
 1651              	.LBI4493:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1652              		.loc 2 236 7 is_stmt 1 view .LVU329
 1653              	.LBB4494:
 1654              	.LBB4495:
 1655              	.LBI4495:
 1656              		.loc 3 469 7 view .LVU330
 1657              	.LBB4496:
 1658              	.LBI4496:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1659              		.loc 4 119 7 view .LVU331
 1660              	.LBB4497:
 1661              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1662              		.loc 4 128 19 is_stmt 0 view .LVU332
 1663 003a E8000000 		call	_ZdlPv@PLT	#
 1663      00
 1664              	.LVL87:
 1665              	.L48:
 1666              		.loc 4 128 19 view .LVU333
 1667              	.LBE4497:
 1668              	.LBE4496:
 1669              	.LBE4495:
 1670              	.LBE4494:
 1671              	.LBE4493:
 1672              	.LBE4488:
 1673              	.LBE4487:
 1674              	.LBB4498:
 1675              	.LBI4498:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1676              		.loc 2 150 14 is_stmt 1 view .LVU334
 1677              	.LBB4499:
 1678              	.LBI4499:
 1679              		.loc 5 153 7 view .LVU335
 1680              	.LBB4500:
 1681              	.LBI4500:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1682              		.loc 4 89 7 view .LVU336
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1683              		.loc 4 89 7 is_stmt 0 view .LVU337
 1684              	.LBE4500:
 1685              	.LBE4499:
 1686              	.LBE4498:
 1687              	.LBE4486:
 1688              	.LBB4501:
 1689              	.LBI4501:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1690              		.loc 2 657 7 is_stmt 1 view .LVU338
 1691              	.LBB4502:
 1692              	.LBI4502:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1693              		.loc 2 229 7 view .LVU339
 1694              	.LBB4503:
 1695              	.LBB4504:
 1696              	.LBI4504:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1697              		.loc 2 221 7 view .LVU340
 1698              	.LBB4505:
 1699              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1700              		.loc 2 222 26 is_stmt 0 view .LVU341
 1701 003f 488B7D40 		movq	64(%rbp), %rdi	# MEM[(char * *)this_2(D) + 64B], _9
 1702              	.LVL88:
 1703              	.LBB4506:
 1704              	.LBI4506:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1705              		.loc 2 200 7 is_stmt 1 view .LVU342
 1706              	.LBB4507:
 1707              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1708              		.loc 2 203 57 is_stmt 0 view .LVU343
 1709 0043 488D4550 		leaq	80(%rbp), %rax	#, tmp104
 1710              	.LBE4507:
 1711              	.LBE4506:
 1712              	.LBE4505:
 1713              	.LBE4504:
 1714              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1715              		.loc 2 231 2 view .LVU344
 1716 0047 4839C7   		cmpq	%rax, %rdi	# tmp104, _9
 1717 004a 7405     		je	.L49	#,
 1718              	.LVL89:
 1719              	.LBB4508:
 1720              	.LBI4508:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1721              		.loc 2 236 7 is_stmt 1 view .LVU345
 1722              	.LBB4509:
 1723              	.LBB4510:
 1724              	.LBI4510:
 1725              		.loc 3 469 7 view .LVU346
 1726              	.LBB4511:
 1727              	.LBI4511:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1728              		.loc 4 119 7 view .LVU347
 1729              	.LBB4512:
 1730              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1731              		.loc 4 128 19 is_stmt 0 view .LVU348
 1732 004c E8000000 		call	_ZdlPv@PLT	#
 1732      00
 1733              	.LVL90:
 1734              	.L49:
 1735              		.loc 4 128 19 view .LVU349
 1736              	.LBE4512:
 1737              	.LBE4511:
 1738              	.LBE4510:
 1739              	.LBE4509:
 1740              	.LBE4508:
 1741              	.LBE4503:
 1742              	.LBE4502:
 1743              	.LBB4513:
 1744              	.LBI4513:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1745              		.loc 2 150 14 is_stmt 1 view .LVU350
 1746              	.LBB4514:
 1747              	.LBI4514:
 1748              		.loc 5 153 7 view .LVU351
 1749              	.LBB4515:
 1750              	.LBI4515:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1751              		.loc 4 89 7 view .LVU352
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1752              		.loc 4 89 7 is_stmt 0 view .LVU353
 1753              	.LBE4515:
 1754              	.LBE4514:
 1755              	.LBE4513:
 1756              	.LBE4501:
 1757              	.LBB4516:
 1758              	.LBI4516:
 675:/usr/include/c++/9/bits/stl_vector.h ****       {
 1759              		.loc 6 675 7 is_stmt 1 view .LVU354
 1760              	.LBB4517:
 1761              	.LBB4518:
 1762              	.LBI4518:
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 1763              		.loc 6 273 7 view .LVU355
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 1764              		.loc 6 273 7 is_stmt 0 view .LVU356
 1765              	.LBE4518:
 1766              	# /usr/include/c++/9/bits/stl_vector.h:677: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M
 1767              		.loc 6 677 15 view .LVU357
 1768 0051 488B5D30 		movq	48(%rbp), %rbx	# MEM[(struct vector *)this_2(D) + 40B].D.55370._M_impl.D.54673._M_finish, _15
 1769 0055 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct vector *)this_2(D) + 40B].D.55370._M_impl.D.54673._M_start, __fi
 1770              	.LVL91:
 1771              	.LBB4519:
 1772              	.LBI4519:
 1773              		.loc 7 203 5 is_stmt 1 view .LVU358
 1774              	.LBB4520:
 1775              	.LBB4521:
 1776              	.LBB4522:
 1777              	.LBB4523:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1778              		.loc 7 107 19 view .LVU359
 1779 0059 4C39E3   		cmpq	%r12, %rbx	# __first, _15
 1780 005c 7422     		je	.L50	#,
 1781              	.LVL92:
 1782 005e 6690     		.p2align 4,,10
 1783              		.p2align 3
 1784              	.L54:
 1785              	.LBB4524:
 1786              	.LBI4524:
  97:/usr/include/c++/9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 1787              		.loc 7 97 5 view .LVU360
 1788              	.LBB4525:
 1789              	.LBI4525:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1790              		.loc 2 657 7 view .LVU361
 1791              	.LBB4526:
 1792              	.LBI4526:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1793              		.loc 2 229 7 view .LVU362
 1794              	.LBB4527:
 1795              	.LBB4528:
 1796              	.LBI4528:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1797              		.loc 2 221 7 view .LVU363
 1798              	.LBB4529:
 1799              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1800              		.loc 2 222 26 is_stmt 0 view .LVU364
 1801 0060 498B3C24 		movq	(%r12), %rdi	# MEM[base: __first_51, offset: 0B], _18
 1802              	.LVL93:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1803              		.loc 2 222 26 view .LVU365
 1804              	.LBE4529:
 1805              	.LBE4528:
 1806              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1807              		.loc 2 231 2 view .LVU366
 1808 0064 498D4424 		leaq	16(%r12), %rax	#, tmp105
 1808      10
 1809 0069 4839C7   		cmpq	%rax, %rdi	# tmp105, _18
 1810 006c 7452     		je	.L51	#,
 1811              	.LVL94:
 1812              	.LBB4530:
 1813              	.LBI4530:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1814              		.loc 2 236 7 is_stmt 1 view .LVU367
 1815              	.LBB4531:
 1816              	.LBI4531:
 1817              		.loc 3 469 7 view .LVU368
 1818              	.LBB4532:
 1819              	.LBI4532:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1820              		.loc 4 119 7 view .LVU369
 1821              	.LBB4533:
 1822              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1823              		.loc 4 128 19 is_stmt 0 view .LVU370
 1824 006e E8000000 		call	_ZdlPv@PLT	#
 1824      00
 1825              	.LVL95:
 1826              		.loc 4 128 19 view .LVU371
 1827              	.LBE4533:
 1828              	.LBE4532:
 1829              	.LBE4531:
 1830              	.LBE4530:
 1831              	.LBE4527:
 1832              	.LBE4526:
 1833              	.LBB4534:
 1834              	.LBI4534:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1835              		.loc 2 150 14 is_stmt 1 view .LVU372
 1836              	.LBB4535:
 1837              	.LBI4535:
 1838              		.loc 5 153 7 view .LVU373
 1839              	.LBB4536:
 1840              	.LBI4536:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1841              		.loc 4 89 7 view .LVU374
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1842              		.loc 4 89 7 is_stmt 0 view .LVU375
 1843              	.LBE4536:
 1844              	.LBE4535:
 1845              	.LBE4534:
 1846              	.LBE4525:
 1847              	.LBE4524:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1848              		.loc 7 107 4 is_stmt 1 view .LVU376
 1849 0073 4983C420 		addq	$32, %r12	#, __first
 1850              	.LVL96:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1851              		.loc 7 107 19 view .LVU377
 1852 0077 4C39E3   		cmpq	%r12, %rbx	# __first, _15
 1853 007a 75E4     		jne	.L54	#,
 1854              	.LVL97:
 1855              	.L52:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1856              		.loc 7 107 19 is_stmt 0 view .LVU378
 1857 007c 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct _Vector_base *)this_2(D) + 40B]._M_impl.D.54673._M_start, __firs
 1858              	.LVL98:
 1859              	.L50:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1860              		.loc 7 107 19 view .LVU379
 1861              	.LBE4523:
 1862              	.LBE4522:
 1863              	.LBE4521:
 1864              	.LBE4520:
 1865              	.LBE4519:
 1866              	.LBB4546:
 1867              	.LBI4546:
 330:/usr/include/c++/9/bits/stl_vector.h ****       {
 1868              		.loc 6 330 7 is_stmt 1 view .LVU380
 1869              	.LBB4547:
 1870              	.LBI4547:
 347:/usr/include/c++/9/bits/stl_vector.h ****       {
 1871              		.loc 6 347 7 view .LVU381
 1872              	.LBB4548:
 1873              	# /usr/include/c++/9/bits/stl_vector.h:350: 	if (__p)
 350:/usr/include/c++/9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1874              		.loc 6 350 2 is_stmt 0 view .LVU382
 1875 0080 4D85E4   		testq	%r12, %r12	# __first
 1876 0083 7408     		je	.L55	#,
 1877              	.LVL99:
 1878              	.LBB4549:
 1879              	.LBI4549:
 1880              		.loc 3 469 7 is_stmt 1 view .LVU383
 1881              	.LBB4550:
 1882              	.LBB4551:
 1883              	.LBI4551:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1884              		.loc 4 119 7 view .LVU384
 1885              	.LBB4552:
 1886              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1887              		.loc 4 128 19 is_stmt 0 view .LVU385
 1888 0085 4C89E7   		movq	%r12, %rdi	# __first,
 1889 0088 E8000000 		call	_ZdlPv@PLT	#
 1889      00
 1890              	.LVL100:
 1891              	.L55:
 1892              		.loc 4 128 19 view .LVU386
 1893              	.LBE4552:
 1894              	.LBE4551:
 1895              	.LBE4550:
 1896              	.LBE4549:
 1897              	.LBE4548:
 1898              	.LBE4547:
 1899              	.LBB4553:
 1900              	.LBI4553:
 125:/usr/include/c++/9/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 1901              		.loc 6 125 14 is_stmt 1 view .LVU387
 1902              	.LBB4554:
 1903              	.LBI4554:
 1904              		.loc 5 153 7 view .LVU388
 1905              	.LBB4555:
 1906              	.LBI4555:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1907              		.loc 4 89 7 view .LVU389
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1908              		.loc 4 89 7 is_stmt 0 view .LVU390
 1909              	.LBE4555:
 1910              	.LBE4554:
 1911              	.LBE4553:
 1912              	.LBE4546:
 1913              	.LBE4517:
 1914              	.LBE4516:
 1915              	.LBB4558:
 1916              	.LBI4558:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 1917              		.loc 2 657 7 is_stmt 1 view .LVU391
 1918              	.LBB4559:
 1919              	.LBI4559:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 1920              		.loc 2 229 7 view .LVU392
 1921              	.LBB4560:
 1922              	.LBB4561:
 1923              	.LBI4561:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1924              		.loc 2 221 7 view .LVU393
 1925              	.LBB4562:
 1926              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 1927              		.loc 2 222 26 is_stmt 0 view .LVU394
 1928 008d 488B7D08 		movq	8(%rbp), %rdi	# MEM[(char * *)this_2(D) + 8B], _12
 1929              	.LVL101:
 1930              	.LBB4563:
 1931              	.LBI4563:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 1932              		.loc 2 200 7 is_stmt 1 view .LVU395
 1933              	.LBB4564:
 1934              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 1935              		.loc 2 203 57 is_stmt 0 view .LVU396
 1936 0091 488D4518 		leaq	24(%rbp), %rax	#, tmp107
 1937              	.LBE4564:
 1938              	.LBE4563:
 1939              	.LBE4562:
 1940              	.LBE4561:
 1941              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1942              		.loc 2 231 2 view .LVU397
 1943 0095 4839C7   		cmpq	%rax, %rdi	# tmp107, _12
 1944 0098 7405     		je	.L56	#,
 1945              	.LVL102:
 1946              	.LBB4565:
 1947              	.LBI4565:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1948              		.loc 2 236 7 is_stmt 1 view .LVU398
 1949              	.LBB4566:
 1950              	.LBB4567:
 1951              	.LBI4567:
 1952              		.loc 3 469 7 view .LVU399
 1953              	.LBB4568:
 1954              	.LBI4568:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 1955              		.loc 4 119 7 view .LVU400
 1956              	.LBB4569:
 1957              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 1958              		.loc 4 128 19 is_stmt 0 view .LVU401
 1959 009a E8000000 		call	_ZdlPv@PLT	#
 1959      00
 1960              	.LVL103:
 1961              	.L56:
 1962              		.loc 4 128 19 view .LVU402
 1963              	.LBE4569:
 1964              	.LBE4568:
 1965              	.LBE4567:
 1966              	.LBE4566:
 1967              	.LBE4565:
 1968              	.LBE4560:
 1969              	.LBE4559:
 1970              	.LBB4570:
 1971              	.LBI4570:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 1972              		.loc 2 150 14 is_stmt 1 view .LVU403
 1973              	.LBB4571:
 1974              	.LBI4571:
 1975              		.loc 5 153 7 view .LVU404
 1976              	.LBB4572:
 1977              	.LBI4572:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1978              		.loc 4 89 7 view .LVU405
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 1979              		.loc 4 89 7 is_stmt 0 view .LVU406
 1980              	.LBE4572:
 1981              	.LBE4571:
 1982              	.LBE4570:
 1983              	.LBE4558:
 1984              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1985              		.loc 1 28 15 view .LVU407
 1986 009f 4889EF   		movq	%rbp, %rdi	# this,
 1987 00a2 E8000000 		call	_ZNSt9exceptionD2Ev@PLT	#
 1987      00
 1988              	.LVL104:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 1989              		.loc 1 28 15 view .LVU408
 1990              	.LBE4574:
 1991              	.LBE4576:
 1992 00a7 5B       		popq	%rbx	#
 1993              		.cfi_remember_state
 1994              		.cfi_def_cfa_offset 24
 1995 00a8 4889EF   		movq	%rbp, %rdi	# this,
 1996 00ab BEA80000 		movl	$168, %esi	#,
 1996      00
 1997 00b0 5D       		popq	%rbp	#
 1998              		.cfi_def_cfa_offset 16
 1999              	.LVL105:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 2000              		.loc 1 28 15 view .LVU409
 2001 00b1 415C     		popq	%r12	#
 2002              		.cfi_def_cfa_offset 8
 2003 00b3 E9000000 		jmp	_ZdlPvm@PLT	#
 2003      00
 2004              	.LVL106:
 2005 00b8 0F1F8400 		.p2align 4,,10
 2005      00000000 
 2006              		.p2align 3
 2007              	.L51:
 2008              		.cfi_restore_state
 2009              	.LBB4577:
 2010              	.LBB4575:
 2011              	.LBB4573:
 2012              	.LBB4557:
 2013              	.LBB4556:
 2014              	.LBB4545:
 2015              	.LBB4544:
 2016              	.LBB4543:
 2017              	.LBB4542:
 2018              	.LBB4541:
 2019              	.LBB4540:
 2020              	.LBB4539:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 2021              		.loc 2 150 14 is_stmt 1 view .LVU410
 2022              	.LBB4538:
 2023              		.loc 5 153 7 view .LVU411
 2024              	.LBB4537:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2025              		.loc 4 89 7 view .LVU412
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2026              		.loc 4 89 7 is_stmt 0 view .LVU413
 2027              	.LBE4537:
 2028              	.LBE4538:
 2029              	.LBE4539:
 2030              	.LBE4540:
 2031              	.LBE4541:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2032              		.loc 7 107 4 is_stmt 1 view .LVU414
 2033 00c0 4983C420 		addq	$32, %r12	#, __first
 2034              	.LVL107:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2035              		.loc 7 107 19 view .LVU415
 2036 00c4 4C39E3   		cmpq	%r12, %rbx	# __first, _15
 2037 00c7 7597     		jne	.L54	#,
 2038 00c9 EBB1     		jmp	.L52	#
 2039              	.LBE4542:
 2040              	.LBE4543:
 2041              	.LBE4544:
 2042              	.LBE4545:
 2043              	.LBE4556:
 2044              	.LBE4557:
 2045              	.LBE4573:
 2046              	.LBE4575:
 2047              	.LBE4577:
 2048              		.cfi_endproc
 2049              	.LFE7895:
 2051              		.section	.text._ZN3c1010IndexErrorD0Ev,"axG",@progbits,_ZN3c1010IndexErrorD5Ev,comdat
 2052              		.align 2
 2053              		.p2align 4
 2054              		.weak	_ZN3c1010IndexErrorD0Ev
 2056              	_ZN3c1010IndexErrorD0Ev:
 2057              	.LVL108:
 2058              	.LFB19552:
 2059              		.loc 1 162 15 view -0
 2060              		.cfi_startproc
 2061              		.loc 1 162 15 is_stmt 0 view .LVU417
 2062 0000 F30F1EFA 		endbr64	
 2063              	.LVL109:
 2064              	.LBB4684:
 2065              	.LBI4684:
 2066              		.loc 1 162 15 is_stmt 1 view .LVU418
 2067              	.LBB4685:
 2068              	.LBB4686:
 2069              	.LBI4686:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 2070              		.loc 1 28 15 view .LVU419
 2071              	.LBB4687:
 2072 0004 488D0500 		leaq	16+_ZTVN3c105ErrorE(%rip), %rax	#, tmp109
 2072      000000
 2073              	.LBE4687:
 2074              	.LBE4686:
 2075              	.LBE4685:
 2076              	.LBE4684:
 2077              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:162: class C10_API IndexError : p
 2078              		.loc 1 162 15 is_stmt 0 view .LVU420
 2079 000b 4154     		pushq	%r12	#
 2080              		.cfi_def_cfa_offset 16
 2081              		.cfi_offset 12, -16
 2082 000d 55       		pushq	%rbp	#
 2083              		.cfi_def_cfa_offset 24
 2084              		.cfi_offset 6, -24
 2085 000e 4889FD   		movq	%rdi, %rbp	# tmp108, this
 2086 0011 53       		pushq	%rbx	#
 2087              		.cfi_def_cfa_offset 32
 2088              		.cfi_offset 3, -32
 2089              	.LBB4797:
 2090              	.LBB4795:
 2091              	.LBB4793:
 2092              	.LBB4791:
 2093              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 2094              		.loc 1 28 15 view .LVU421
 2095 0012 488907   		movq	%rax, (%rdi)	# tmp109, MEM[(struct Error *)this_2(D)].D.55460._vptr.exception
 2096              	.LVL110:
 2097              	.LBB4688:
 2098              	.LBI4688:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 2099              		.loc 2 657 7 is_stmt 1 view .LVU422
 2100              	.LBB4689:
 2101              	.LBI4689:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 2102              		.loc 2 229 7 view .LVU423
 2103              	.LBB4690:
 2104              	.LBB4691:
 2105              	.LBI4691:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2106              		.loc 2 221 7 view .LVU424
 2107              	.LBB4692:
 2108              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 2109              		.loc 2 222 26 is_stmt 0 view .LVU425
 2110 0015 488BBF80 		movq	128(%rdi), %rdi	# MEM[(char * *)this_2(D) + 128B], _8
 2110      000000
 2111              	.LVL111:
 2112              	.LBB4693:
 2113              	.LBI4693:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 2114              		.loc 2 200 7 is_stmt 1 view .LVU426
 2115              	.LBB4694:
 2116              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 2117              		.loc 2 203 57 is_stmt 0 view .LVU427
 2118 001c 488D8590 		leaq	144(%rbp), %rax	#, tmp100
 2118      000000
 2119              	.LBE4694:
 2120              	.LBE4693:
 2121              	.LBE4692:
 2122              	.LBE4691:
 2123              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2124              		.loc 2 231 2 view .LVU428
 2125 0023 4839C7   		cmpq	%rax, %rdi	# tmp100, _8
 2126 0026 7405     		je	.L62	#,
 2127              	.LVL112:
 2128              	.LBB4695:
 2129              	.LBI4695:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2130              		.loc 2 236 7 is_stmt 1 view .LVU429
 2131              	.LBB4696:
 2132              	.LBB4697:
 2133              	.LBI4697:
 2134              		.loc 3 469 7 view .LVU430
 2135              	.LBB4698:
 2136              	.LBI4698:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 2137              		.loc 4 119 7 view .LVU431
 2138              	.LBB4699:
 2139              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 2140              		.loc 4 128 19 is_stmt 0 view .LVU432
 2141 0028 E8000000 		call	_ZdlPv@PLT	#
 2141      00
 2142              	.LVL113:
 2143              	.L62:
 2144              		.loc 4 128 19 view .LVU433
 2145              	.LBE4699:
 2146              	.LBE4698:
 2147              	.LBE4697:
 2148              	.LBE4696:
 2149              	.LBE4695:
 2150              	.LBE4690:
 2151              	.LBE4689:
 2152              	.LBB4700:
 2153              	.LBI4700:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 2154              		.loc 2 150 14 is_stmt 1 view .LVU434
 2155              	.LBB4701:
 2156              	.LBI4701:
 2157              		.loc 5 153 7 view .LVU435
 2158              	.LBB4702:
 2159              	.LBI4702:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2160              		.loc 4 89 7 view .LVU436
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2161              		.loc 4 89 7 is_stmt 0 view .LVU437
 2162              	.LBE4702:
 2163              	.LBE4701:
 2164              	.LBE4700:
 2165              	.LBE4688:
 2166              	.LBB4703:
 2167              	.LBI4703:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 2168              		.loc 2 657 7 is_stmt 1 view .LVU438
 2169              	.LBB4704:
 2170              	.LBI4704:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 2171              		.loc 2 229 7 view .LVU439
 2172              	.LBB4705:
 2173              	.LBB4706:
 2174              	.LBI4706:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2175              		.loc 2 221 7 view .LVU440
 2176              	.LBB4707:
 2177              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 2178              		.loc 2 222 26 is_stmt 0 view .LVU441
 2179 002d 488B7D60 		movq	96(%rbp), %rdi	# MEM[(char * *)this_2(D) + 96B], _10
 2180              	.LVL114:
 2181              	.LBB4708:
 2182              	.LBI4708:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 2183              		.loc 2 200 7 is_stmt 1 view .LVU442
 2184              	.LBB4709:
 2185              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 2186              		.loc 2 203 57 is_stmt 0 view .LVU443
 2187 0031 488D4570 		leaq	112(%rbp), %rax	#, tmp102
 2188              	.LBE4709:
 2189              	.LBE4708:
 2190              	.LBE4707:
 2191              	.LBE4706:
 2192              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2193              		.loc 2 231 2 view .LVU444
 2194 0035 4839C7   		cmpq	%rax, %rdi	# tmp102, _10
 2195 0038 7405     		je	.L63	#,
 2196              	.LVL115:
 2197              	.LBB4710:
 2198              	.LBI4710:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2199              		.loc 2 236 7 is_stmt 1 view .LVU445
 2200              	.LBB4711:
 2201              	.LBB4712:
 2202              	.LBI4712:
 2203              		.loc 3 469 7 view .LVU446
 2204              	.LBB4713:
 2205              	.LBI4713:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 2206              		.loc 4 119 7 view .LVU447
 2207              	.LBB4714:
 2208              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 2209              		.loc 4 128 19 is_stmt 0 view .LVU448
 2210 003a E8000000 		call	_ZdlPv@PLT	#
 2210      00
 2211              	.LVL116:
 2212              	.L63:
 2213              		.loc 4 128 19 view .LVU449
 2214              	.LBE4714:
 2215              	.LBE4713:
 2216              	.LBE4712:
 2217              	.LBE4711:
 2218              	.LBE4710:
 2219              	.LBE4705:
 2220              	.LBE4704:
 2221              	.LBB4715:
 2222              	.LBI4715:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 2223              		.loc 2 150 14 is_stmt 1 view .LVU450
 2224              	.LBB4716:
 2225              	.LBI4716:
 2226              		.loc 5 153 7 view .LVU451
 2227              	.LBB4717:
 2228              	.LBI4717:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2229              		.loc 4 89 7 view .LVU452
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2230              		.loc 4 89 7 is_stmt 0 view .LVU453
 2231              	.LBE4717:
 2232              	.LBE4716:
 2233              	.LBE4715:
 2234              	.LBE4703:
 2235              	.LBB4718:
 2236              	.LBI4718:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 2237              		.loc 2 657 7 is_stmt 1 view .LVU454
 2238              	.LBB4719:
 2239              	.LBI4719:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 2240              		.loc 2 229 7 view .LVU455
 2241              	.LBB4720:
 2242              	.LBB4721:
 2243              	.LBI4721:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2244              		.loc 2 221 7 view .LVU456
 2245              	.LBB4722:
 2246              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 2247              		.loc 2 222 26 is_stmt 0 view .LVU457
 2248 003f 488B7D40 		movq	64(%rbp), %rdi	# MEM[(char * *)this_2(D) + 64B], _12
 2249              	.LVL117:
 2250              	.LBB4723:
 2251              	.LBI4723:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 2252              		.loc 2 200 7 is_stmt 1 view .LVU458
 2253              	.LBB4724:
 2254              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 2255              		.loc 2 203 57 is_stmt 0 view .LVU459
 2256 0043 488D4550 		leaq	80(%rbp), %rax	#, tmp104
 2257              	.LBE4724:
 2258              	.LBE4723:
 2259              	.LBE4722:
 2260              	.LBE4721:
 2261              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2262              		.loc 2 231 2 view .LVU460
 2263 0047 4839C7   		cmpq	%rax, %rdi	# tmp104, _12
 2264 004a 7405     		je	.L64	#,
 2265              	.LVL118:
 2266              	.LBB4725:
 2267              	.LBI4725:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2268              		.loc 2 236 7 is_stmt 1 view .LVU461
 2269              	.LBB4726:
 2270              	.LBB4727:
 2271              	.LBI4727:
 2272              		.loc 3 469 7 view .LVU462
 2273              	.LBB4728:
 2274              	.LBI4728:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 2275              		.loc 4 119 7 view .LVU463
 2276              	.LBB4729:
 2277              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 2278              		.loc 4 128 19 is_stmt 0 view .LVU464
 2279 004c E8000000 		call	_ZdlPv@PLT	#
 2279      00
 2280              	.LVL119:
 2281              	.L64:
 2282              		.loc 4 128 19 view .LVU465
 2283              	.LBE4729:
 2284              	.LBE4728:
 2285              	.LBE4727:
 2286              	.LBE4726:
 2287              	.LBE4725:
 2288              	.LBE4720:
 2289              	.LBE4719:
 2290              	.LBB4730:
 2291              	.LBI4730:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 2292              		.loc 2 150 14 is_stmt 1 view .LVU466
 2293              	.LBB4731:
 2294              	.LBI4731:
 2295              		.loc 5 153 7 view .LVU467
 2296              	.LBB4732:
 2297              	.LBI4732:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2298              		.loc 4 89 7 view .LVU468
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2299              		.loc 4 89 7 is_stmt 0 view .LVU469
 2300              	.LBE4732:
 2301              	.LBE4731:
 2302              	.LBE4730:
 2303              	.LBE4718:
 2304              	.LBB4733:
 2305              	.LBI4733:
 675:/usr/include/c++/9/bits/stl_vector.h ****       {
 2306              		.loc 6 675 7 is_stmt 1 view .LVU470
 2307              	.LBB4734:
 2308              	.LBB4735:
 2309              	.LBI4735:
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 2310              		.loc 6 273 7 view .LVU471
 273:/usr/include/c++/9/bits/stl_vector.h ****       { return this->_M_impl; }
 2311              		.loc 6 273 7 is_stmt 0 view .LVU472
 2312              	.LBE4735:
 2313              	# /usr/include/c++/9/bits/stl_vector.h:677: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M
 2314              		.loc 6 677 15 view .LVU473
 2315 0051 488B5D30 		movq	48(%rbp), %rbx	# MEM[(struct vector *)this_2(D) + 40B].D.55370._M_impl.D.54673._M_finish, _18
 2316 0055 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct vector *)this_2(D) + 40B].D.55370._M_impl.D.54673._M_start, __fi
 2317              	.LVL120:
 2318              	.LBB4736:
 2319              	.LBI4736:
 2320              		.loc 7 203 5 is_stmt 1 view .LVU474
 2321              	.LBB4737:
 2322              	.LBB4738:
 2323              	.LBB4739:
 2324              	.LBB4740:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2325              		.loc 7 107 19 view .LVU475
 2326 0059 4C39E3   		cmpq	%r12, %rbx	# __first, _18
 2327 005c 7422     		je	.L65	#,
 2328              	.LVL121:
 2329 005e 6690     		.p2align 4,,10
 2330              		.p2align 3
 2331              	.L69:
 2332              	.LBB4741:
 2333              	.LBI4741:
  97:/usr/include/c++/9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 2334              		.loc 7 97 5 view .LVU476
 2335              	.LBB4742:
 2336              	.LBI4742:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 2337              		.loc 2 657 7 view .LVU477
 2338              	.LBB4743:
 2339              	.LBI4743:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 2340              		.loc 2 229 7 view .LVU478
 2341              	.LBB4744:
 2342              	.LBB4745:
 2343              	.LBI4745:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2344              		.loc 2 221 7 view .LVU479
 2345              	.LBB4746:
 2346              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 2347              		.loc 2 222 26 is_stmt 0 view .LVU480
 2348 0060 498B3C24 		movq	(%r12), %rdi	# MEM[base: __first_53, offset: 0B], _21
 2349              	.LVL122:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 2350              		.loc 2 222 26 view .LVU481
 2351              	.LBE4746:
 2352              	.LBE4745:
 2353              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2354              		.loc 2 231 2 view .LVU482
 2355 0064 498D4424 		leaq	16(%r12), %rax	#, tmp105
 2355      10
 2356 0069 4839C7   		cmpq	%rax, %rdi	# tmp105, _21
 2357 006c 7452     		je	.L66	#,
 2358              	.LVL123:
 2359              	.LBB4747:
 2360              	.LBI4747:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2361              		.loc 2 236 7 is_stmt 1 view .LVU483
 2362              	.LBB4748:
 2363              	.LBI4748:
 2364              		.loc 3 469 7 view .LVU484
 2365              	.LBB4749:
 2366              	.LBI4749:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 2367              		.loc 4 119 7 view .LVU485
 2368              	.LBB4750:
 2369              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 2370              		.loc 4 128 19 is_stmt 0 view .LVU486
 2371 006e E8000000 		call	_ZdlPv@PLT	#
 2371      00
 2372              	.LVL124:
 2373              		.loc 4 128 19 view .LVU487
 2374              	.LBE4750:
 2375              	.LBE4749:
 2376              	.LBE4748:
 2377              	.LBE4747:
 2378              	.LBE4744:
 2379              	.LBE4743:
 2380              	.LBB4751:
 2381              	.LBI4751:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 2382              		.loc 2 150 14 is_stmt 1 view .LVU488
 2383              	.LBB4752:
 2384              	.LBI4752:
 2385              		.loc 5 153 7 view .LVU489
 2386              	.LBB4753:
 2387              	.LBI4753:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2388              		.loc 4 89 7 view .LVU490
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2389              		.loc 4 89 7 is_stmt 0 view .LVU491
 2390              	.LBE4753:
 2391              	.LBE4752:
 2392              	.LBE4751:
 2393              	.LBE4742:
 2394              	.LBE4741:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2395              		.loc 7 107 4 is_stmt 1 view .LVU492
 2396 0073 4983C420 		addq	$32, %r12	#, __first
 2397              	.LVL125:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2398              		.loc 7 107 19 view .LVU493
 2399 0077 4939DC   		cmpq	%rbx, %r12	# _18, __first
 2400 007a 75E4     		jne	.L69	#,
 2401              	.LVL126:
 2402              	.L67:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2403              		.loc 7 107 19 is_stmt 0 view .LVU494
 2404 007c 4C8B6528 		movq	40(%rbp), %r12	# MEM[(struct _Vector_base *)this_2(D) + 40B]._M_impl.D.54673._M_start, __firs
 2405              	.LVL127:
 2406              	.L65:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2407              		.loc 7 107 19 view .LVU495
 2408              	.LBE4740:
 2409              	.LBE4739:
 2410              	.LBE4738:
 2411              	.LBE4737:
 2412              	.LBE4736:
 2413              	.LBB4763:
 2414              	.LBI4763:
 330:/usr/include/c++/9/bits/stl_vector.h ****       {
 2415              		.loc 6 330 7 is_stmt 1 view .LVU496
 2416              	.LBB4764:
 2417              	.LBI4764:
 347:/usr/include/c++/9/bits/stl_vector.h ****       {
 2418              		.loc 6 347 7 view .LVU497
 2419              	.LBB4765:
 2420              	# /usr/include/c++/9/bits/stl_vector.h:350: 	if (__p)
 350:/usr/include/c++/9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2421              		.loc 6 350 2 is_stmt 0 view .LVU498
 2422 0080 4D85E4   		testq	%r12, %r12	# __first
 2423 0083 7408     		je	.L70	#,
 2424              	.LVL128:
 2425              	.LBB4766:
 2426              	.LBI4766:
 2427              		.loc 3 469 7 is_stmt 1 view .LVU499
 2428              	.LBB4767:
 2429              	.LBB4768:
 2430              	.LBI4768:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 2431              		.loc 4 119 7 view .LVU500
 2432              	.LBB4769:
 2433              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 2434              		.loc 4 128 19 is_stmt 0 view .LVU501
 2435 0085 4C89E7   		movq	%r12, %rdi	# __first,
 2436 0088 E8000000 		call	_ZdlPv@PLT	#
 2436      00
 2437              	.LVL129:
 2438              	.L70:
 2439              		.loc 4 128 19 view .LVU502
 2440              	.LBE4769:
 2441              	.LBE4768:
 2442              	.LBE4767:
 2443              	.LBE4766:
 2444              	.LBE4765:
 2445              	.LBE4764:
 2446              	.LBB4770:
 2447              	.LBI4770:
 125:/usr/include/c++/9/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 2448              		.loc 6 125 14 is_stmt 1 view .LVU503
 2449              	.LBB4771:
 2450              	.LBI4771:
 2451              		.loc 5 153 7 view .LVU504
 2452              	.LBB4772:
 2453              	.LBI4772:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2454              		.loc 4 89 7 view .LVU505
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2455              		.loc 4 89 7 is_stmt 0 view .LVU506
 2456              	.LBE4772:
 2457              	.LBE4771:
 2458              	.LBE4770:
 2459              	.LBE4763:
 2460              	.LBE4734:
 2461              	.LBE4733:
 2462              	.LBB4775:
 2463              	.LBI4775:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 2464              		.loc 2 657 7 is_stmt 1 view .LVU507
 2465              	.LBB4776:
 2466              	.LBI4776:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 2467              		.loc 2 229 7 view .LVU508
 2468              	.LBB4777:
 2469              	.LBB4778:
 2470              	.LBI4778:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2471              		.loc 2 221 7 view .LVU509
 2472              	.LBB4779:
 2473              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 2474              		.loc 2 222 26 is_stmt 0 view .LVU510
 2475 008d 488B7D08 		movq	8(%rbp), %rdi	# MEM[(char * *)this_2(D) + 8B], _15
 2476              	.LVL130:
 2477              	.LBB4780:
 2478              	.LBI4780:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 2479              		.loc 2 200 7 is_stmt 1 view .LVU511
 2480              	.LBB4781:
 2481              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 2482              		.loc 2 203 57 is_stmt 0 view .LVU512
 2483 0091 488D4518 		leaq	24(%rbp), %rax	#, tmp107
 2484              	.LBE4781:
 2485              	.LBE4780:
 2486              	.LBE4779:
 2487              	.LBE4778:
 2488              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2489              		.loc 2 231 2 view .LVU513
 2490 0095 4839C7   		cmpq	%rax, %rdi	# tmp107, _15
 2491 0098 7405     		je	.L71	#,
 2492              	.LVL131:
 2493              	.LBB4782:
 2494              	.LBI4782:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2495              		.loc 2 236 7 is_stmt 1 view .LVU514
 2496              	.LBB4783:
 2497              	.LBB4784:
 2498              	.LBI4784:
 2499              		.loc 3 469 7 view .LVU515
 2500              	.LBB4785:
 2501              	.LBI4785:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 2502              		.loc 4 119 7 view .LVU516
 2503              	.LBB4786:
 2504              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 2505              		.loc 4 128 19 is_stmt 0 view .LVU517
 2506 009a E8000000 		call	_ZdlPv@PLT	#
 2506      00
 2507              	.LVL132:
 2508              	.L71:
 2509              		.loc 4 128 19 view .LVU518
 2510              	.LBE4786:
 2511              	.LBE4785:
 2512              	.LBE4784:
 2513              	.LBE4783:
 2514              	.LBE4782:
 2515              	.LBE4777:
 2516              	.LBE4776:
 2517              	.LBB4787:
 2518              	.LBI4787:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 2519              		.loc 2 150 14 is_stmt 1 view .LVU519
 2520              	.LBB4788:
 2521              	.LBI4788:
 2522              		.loc 5 153 7 view .LVU520
 2523              	.LBB4789:
 2524              	.LBI4789:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2525              		.loc 4 89 7 view .LVU521
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2526              		.loc 4 89 7 is_stmt 0 view .LVU522
 2527              	.LBE4789:
 2528              	.LBE4788:
 2529              	.LBE4787:
 2530              	.LBE4775:
 2531              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:28: class C10_API Error : public 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 2532              		.loc 1 28 15 view .LVU523
 2533 009f 4889EF   		movq	%rbp, %rdi	# this,
 2534 00a2 E8000000 		call	_ZNSt9exceptionD2Ev@PLT	#
 2534      00
 2535              	.LVL133:
  28:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   // The actual error message.
 2536              		.loc 1 28 15 view .LVU524
 2537              	.LBE4791:
 2538              	.LBE4793:
 2539              	.LBE4795:
 2540              	.LBE4797:
 2541              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:162: class C10_API IndexError : p
 2542              		.loc 1 162 15 view .LVU525
 2543 00a7 5B       		popq	%rbx	#
 2544              		.cfi_remember_state
 2545              		.cfi_def_cfa_offset 24
 2546 00a8 4889EF   		movq	%rbp, %rdi	# this,
 2547 00ab BEA80000 		movl	$168, %esi	#,
 2547      00
 2548 00b0 5D       		popq	%rbp	#
 2549              		.cfi_def_cfa_offset 16
 2550              	.LVL134:
 2551              		.loc 1 162 15 view .LVU526
 2552 00b1 415C     		popq	%r12	#
 2553              		.cfi_def_cfa_offset 8
 2554 00b3 E9000000 		jmp	_ZdlPvm@PLT	#
 2554      00
 2555              	.LVL135:
 2556 00b8 0F1F8400 		.p2align 4,,10
 2556      00000000 
 2557              		.p2align 3
 2558              	.L66:
 2559              		.cfi_restore_state
 2560              	.LBB4798:
 2561              	.LBB4796:
 2562              	.LBB4794:
 2563              	.LBB4792:
 2564              	.LBB4790:
 2565              	.LBB4774:
 2566              	.LBB4773:
 2567              	.LBB4762:
 2568              	.LBB4761:
 2569              	.LBB4760:
 2570              	.LBB4759:
 2571              	.LBB4758:
 2572              	.LBB4757:
 2573              	.LBB4756:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 2574              		.loc 2 150 14 is_stmt 1 view .LVU527
 2575              	.LBB4755:
 2576              		.loc 5 153 7 view .LVU528
 2577              	.LBB4754:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2578              		.loc 4 89 7 view .LVU529
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2579              		.loc 4 89 7 is_stmt 0 view .LVU530
 2580              	.LBE4754:
 2581              	.LBE4755:
 2582              	.LBE4756:
 2583              	.LBE4757:
 2584              	.LBE4758:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2585              		.loc 7 107 4 is_stmt 1 view .LVU531
 2586 00c0 4983C420 		addq	$32, %r12	#, __first
 2587              	.LVL136:
 107:/usr/include/c++/9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2588              		.loc 7 107 19 view .LVU532
 2589 00c4 4C39E3   		cmpq	%r12, %rbx	# __first, _18
 2590 00c7 7597     		jne	.L69	#,
 2591 00c9 EBB1     		jmp	.L67	#
 2592              	.LBE4759:
 2593              	.LBE4760:
 2594              	.LBE4761:
 2595              	.LBE4762:
 2596              	.LBE4773:
 2597              	.LBE4774:
 2598              	.LBE4790:
 2599              	.LBE4792:
 2600              	.LBE4794:
 2601              	.LBE4796:
 2602              	.LBE4798:
 2603              		.cfi_endproc
 2604              	.LFE19552:
 2606              		.section	.rodata._ZN3c106detail13if_empty_thenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2607              		.align 8
 2608              	.LC0:
 2609 0000 62617369 		.string	"basic_string::_M_construct null not valid"
 2609      635F7374 
 2609      72696E67 
 2609      3A3A5F4D 
 2609      5F636F6E 
 2610              		.section	.text._ZN3c106detail13if_empty_thenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 2611              		.p2align 4
 2612              		.weak	_ZN3c106detail13if_empty_thenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_
 2614              	_ZN3c106detail13if_empty_thenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_:
 2615              	.LVL137:
 2616              	.LFB2960:
 163:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   using Error::Error;
 164:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 165:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 166:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Used in ATen for invalid values.  These turn into
 167:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // ValueError when they cross to Python.
 168:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** class C10_API ValueError : public Error {
 169:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   using Error::Error;
 170:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 171:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 172:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Used in ATen for invalid types.  These turn into
 173:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // TypeError when they cross to Python.
 174:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** class C10_API TypeError : public Error {
 175:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   using Error::Error;
 176:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 177:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 178:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Used in ATen for non finite indices.  These turn into
 179:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // ExitException when they cross to Python.
 180:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** class C10_API EnforceFiniteError : public Error {
 181:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   using Error::Error;
 182:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 183:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 184:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Used in Onnxifi backend lowering.  These turn into
 185:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // ExitException when they cross to Python.
 186:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** class C10_API OnnxfiBackendSystemError : public Error {
 187:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   using Error::Error;
 188:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 189:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 190:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // A utility function to return an exception std::string by prepending its
 191:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // exception type before its what() content
 192:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** C10_API std::string GetExceptionString(const std::exception& e);
 193:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 194:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** namespace detail {
 195:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** 
 196:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** // Return x if it is non-empty; otherwise return y.
 197:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** inline std::string if_empty_then(const std::string& x, const std::string& y) {
 2617              		.loc 1 197 78 view -0
 2618              		.cfi_startproc
 2619              		.loc 1 197 78 is_stmt 0 view .LVU534
 2620 0000 F30F1EFA 		endbr64	
 2621 0004 4155     		pushq	%r13	#
 2622              		.cfi_def_cfa_offset 16
 2623              		.cfi_offset 13, -16
 2624 0006 4154     		pushq	%r12	#
 2625              		.cfi_def_cfa_offset 24
 2626              		.cfi_offset 12, -24
 2627 0008 4989FC   		movq	%rdi, %r12	# tmp122, <retval>
 2628 000b 4883C710 		addq	$16, %rdi	#, pretmp_15
 2629              	.LVL138:
 2630              		.loc 1 197 78 view .LVU535
 2631 000f 55       		pushq	%rbp	#
 2632              		.cfi_def_cfa_offset 32
 2633              		.cfi_offset 6, -32
 2634 0010 4883EC10 		subq	$16, %rsp	#,
 2635              		.cfi_def_cfa_offset 48
 2636              	.LBB4907:
 2637              	.LBB4908:
 2638              	# /usr/include/c++/9/bits/basic_string.h:1032:       { return this->size() == 0; }
1032:/usr/include/c++/9/bits/basic_string.h **** 
 2639              		.loc 2 1032 29 view .LVU536
 2640 0014 4C8B6E08 		movq	8(%rsi), %r13	# MEM[(long unsigned int *)x_3(D) + 8B], prephitmp_76
 2641              	.LBE4908:
 2642              	.LBE4907:
 2643              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:197: inline std::string if_empty_
 2644              		.loc 1 197 78 view .LVU537
 2645 0018 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp127
 2645      25280000 
 2645      00
 2646 0021 48894424 		movq	%rax, 8(%rsp)	# tmp127, D.444757
 2646      08
 2647 0026 31C0     		xorl	%eax, %eax	# tmp127
 198:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   if (x.empty()) {
 2648              		.loc 1 198 3 is_stmt 1 view .LVU538
 2649              	.LVL139:
 2650              	.LBB4909:
 2651              	.LBI4907:
1031:/usr/include/c++/9/bits/basic_string.h ****       { return this->size() == 0; }
 2652              		.loc 2 1031 7 view .LVU539
1031:/usr/include/c++/9/bits/basic_string.h ****       { return this->size() == 0; }
 2653              		.loc 2 1031 7 is_stmt 0 view .LVU540
 2654              	.LBE4909:
 2655              	.LBB4910:
 2656              	.LBB4911:
 2657              	.LBB4912:
 2658              	.LBB4913:
 2659              	.LBB4914:
 2660              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 2661              		.loc 2 160 46 view .LVU541
 2662 0028 49893C24 		movq	%rdi, (%r12)	# pretmp_15,* <retval>
 2663              	.LBE4914:
 2664              	.LBE4913:
 2665              	.LBE4912:
 2666              	.LBE4911:
 2667              	.LBE4910:
 2668              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:198:   if (x.empty()) {
 2669              		.loc 1 198 3 view .LVU542
 2670 002c 4D85ED   		testq	%r13, %r13	# prephitmp_76
 2671 002f 753F     		jne	.L77	#,
 199:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return y;
 2672              		.loc 1 199 5 is_stmt 1 view .LVU543
 2673              	.LVL140:
 2674              	.LBB4958:
 2675              	.LBI4910:
 448:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 2676              		.loc 2 448 7 view .LVU544
 2677              	.LBB4956:
 2678              	.LBB4954:
 2679              	.LBB4919:
 2680              	.LBI4919:
 290:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 2681              		.loc 2 290 7 view .LVU545
 290:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 2682              		.loc 2 290 7 is_stmt 0 view .LVU546
 2683              	.LBE4919:
 2684              	.LBB4920:
 2685              	.LBI4920:
 2686              		.file 10 "/usr/include/c++/9/ext/alloc_traits.h"
   1:/usr/include/c++/9/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/9/ext/alloc_traits.h **** 
   3:/usr/include/c++/9/ext/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ext/alloc_traits.h **** //
   5:/usr/include/c++/9/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/9/ext/alloc_traits.h **** 
  11:/usr/include/c++/9/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/ext/alloc_traits.h **** 
  16:/usr/include/c++/9/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ext/alloc_traits.h **** 
  20:/usr/include/c++/9/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ext/alloc_traits.h **** 
  25:/usr/include/c++/9/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/9/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/9/ext/alloc_traits.h ****  */
  28:/usr/include/c++/9/ext/alloc_traits.h **** 
  29:/usr/include/c++/9/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/9/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/9/ext/alloc_traits.h **** 
  32:/usr/include/c++/9/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/9/ext/alloc_traits.h **** 
  34:/usr/include/c++/9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/9/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/c++/9/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/c++/9/ext/alloc_traits.h **** #else
  38:/usr/include/c++/9/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/c++/9/ext/alloc_traits.h **** #endif
  40:/usr/include/c++/9/ext/alloc_traits.h **** 
  41:/usr/include/c++/9/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/9/ext/alloc_traits.h **** {
  43:/usr/include/c++/9/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/9/ext/alloc_traits.h **** 
  45:/usr/include/c++/9/ext/alloc_traits.h **** /**
  46:/usr/include/c++/9/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  47:/usr/include/c++/9/ext/alloc_traits.h ****  * @ingroup allocators
  48:/usr/include/c++/9/ext/alloc_traits.h **** */
  49:/usr/include/c++/9/ext/alloc_traits.h **** template<typename _Alloc, typename = typename _Alloc::value_type>
  50:/usr/include/c++/9/ext/alloc_traits.h ****   struct __alloc_traits
  51:/usr/include/c++/9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  52:/usr/include/c++/9/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  53:/usr/include/c++/9/ext/alloc_traits.h **** #endif
  54:/usr/include/c++/9/ext/alloc_traits.h ****   {
  55:/usr/include/c++/9/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  56:/usr/include/c++/9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  57:/usr/include/c++/9/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  58:/usr/include/c++/9/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  59:/usr/include/c++/9/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  60:/usr/include/c++/9/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  61:/usr/include/c++/9/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  62:/usr/include/c++/9/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  63:/usr/include/c++/9/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  64:/usr/include/c++/9/ext/alloc_traits.h ****     typedef value_type&                             reference;
  65:/usr/include/c++/9/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  66:/usr/include/c++/9/ext/alloc_traits.h ****     using _Base_type::allocate;
  67:/usr/include/c++/9/ext/alloc_traits.h ****     using _Base_type::deallocate;
  68:/usr/include/c++/9/ext/alloc_traits.h ****     using _Base_type::construct;
  69:/usr/include/c++/9/ext/alloc_traits.h ****     using _Base_type::destroy;
  70:/usr/include/c++/9/ext/alloc_traits.h ****     using _Base_type::max_size;
  71:/usr/include/c++/9/ext/alloc_traits.h **** 
  72:/usr/include/c++/9/ext/alloc_traits.h ****   private:
  73:/usr/include/c++/9/ext/alloc_traits.h ****     template<typename _Ptr>
  74:/usr/include/c++/9/ext/alloc_traits.h ****       using __is_custom_pointer
  75:/usr/include/c++/9/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  76:/usr/include/c++/9/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  77:/usr/include/c++/9/ext/alloc_traits.h **** 
  78:/usr/include/c++/9/ext/alloc_traits.h ****   public:
  79:/usr/include/c++/9/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  80:/usr/include/c++/9/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  81:/usr/include/c++/9/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  82:/usr/include/c++/9/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  83:/usr/include/c++/9/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
  84:/usr/include/c++/9/ext/alloc_traits.h **** 					      std::forward<_Args>(__args)...)))
  85:/usr/include/c++/9/ext/alloc_traits.h ****       {
  86:/usr/include/c++/9/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::__to_address(__p),
  87:/usr/include/c++/9/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  88:/usr/include/c++/9/ext/alloc_traits.h ****       }
  89:/usr/include/c++/9/ext/alloc_traits.h **** 
  90:/usr/include/c++/9/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  91:/usr/include/c++/9/ext/alloc_traits.h ****     template<typename _Ptr>
  92:/usr/include/c++/9/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  93:/usr/include/c++/9/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  94:/usr/include/c++/9/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
  95:/usr/include/c++/9/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::__to_address(__p)); }
  96:/usr/include/c++/9/ext/alloc_traits.h **** 
  97:/usr/include/c++/9/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 2687              		.loc 10 97 19 is_stmt 1 view .LVU547
 2688              	.LBB4921:
 2689              	.LBI4921:
 470:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 471:/usr/include/c++/9/bits/alloc_traits.h **** 
 472:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 473:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Up
 474:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 475:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 476:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 477:/usr/include/c++/9/bits/alloc_traits.h ****        *
 478:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 479:/usr/include/c++/9/bits/alloc_traits.h ****       */
 480:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 481:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 482:/usr/include/c++/9/bits/alloc_traits.h **** 	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 483:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 484:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 485:/usr/include/c++/9/bits/alloc_traits.h **** 
 486:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 487:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 488:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 489:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 490:/usr/include/c++/9/bits/alloc_traits.h ****        *
 491:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 492:/usr/include/c++/9/bits/alloc_traits.h ****       */
 493:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 494:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 495:/usr/include/c++/9/bits/alloc_traits.h **** 	destroy(allocator_type& __a, _Up* __p)
 496:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 497:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 498:/usr/include/c++/9/bits/alloc_traits.h **** 
 499:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 500:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 501:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 502:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 503:/usr/include/c++/9/bits/alloc_traits.h ****       */
 504:/usr/include/c++/9/bits/alloc_traits.h ****       static size_type
 505:/usr/include/c++/9/bits/alloc_traits.h ****       max_size(const allocator_type& __a) noexcept
 506:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.max_size(); }
 507:/usr/include/c++/9/bits/alloc_traits.h **** 
 508:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 509:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 510:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 511:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __rhs
 512:/usr/include/c++/9/bits/alloc_traits.h ****       */
 513:/usr/include/c++/9/bits/alloc_traits.h ****       static allocator_type
 514:/usr/include/c++/9/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 2690              		.loc 3 514 7 view .LVU548
 2691              	.LBB4922:
 2692              	.LBI4922:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2693              		.loc 5 141 7 view .LVU549
 2694              	.LBB4923:
 2695              	.LBI4923:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2696              		.loc 4 83 7 view .LVU550
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2697              		.loc 4 83 7 is_stmt 0 view .LVU551
 2698              	.LBE4923:
 2699              	.LBE4922:
 2700              	.LBE4921:
 2701              	.LBE4920:
 2702              	.LBB4924:
 2703              	.LBI4924:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 2704              		.loc 2 190 7 is_stmt 1 view .LVU552
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 2705              		.loc 2 190 7 is_stmt 0 view .LVU553
 2706              	.LBE4924:
 2707              	.LBB4925:
 2708              	.LBI4913:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 2709              		.loc 2 159 2 is_stmt 1 view .LVU554
 2710              	.LBB4918:
 2711              	.LBB4915:
 2712              	.LBI4915:
 2713              		.file 11 "/usr/include/c++/9/bits/move.h"
   1:/usr/include/c++/9/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/9/bits/move.h **** 
   3:/usr/include/c++/9/bits/move.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/move.h **** //
   5:/usr/include/c++/9/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/move.h **** // any later version.
  10:/usr/include/c++/9/bits/move.h **** 
  11:/usr/include/c++/9/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/move.h **** 
  16:/usr/include/c++/9/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/move.h **** 
  20:/usr/include/c++/9/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/move.h **** 
  25:/usr/include/c++/9/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/9/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/9/bits/move.h ****  */
  29:/usr/include/c++/9/bits/move.h **** 
  30:/usr/include/c++/9/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/9/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/9/bits/move.h **** 
  33:/usr/include/c++/9/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/9/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/9/bits/move.h **** 
  36:/usr/include/c++/9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/9/bits/move.h **** {
  38:/usr/include/c++/9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/9/bits/move.h **** 
  40:/usr/include/c++/9/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/9/bits/move.h ****   /**
  42:/usr/include/c++/9/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/9/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/9/bits/move.h ****    */
  45:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/9/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/include/c++/9/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/include/c++/9/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/usr/include/c++/9/bits/move.h **** 
  50:/usr/include/c++/9/bits/move.h **** #if __cplusplus >= 201103L
  51:/usr/include/c++/9/bits/move.h **** 
  52:/usr/include/c++/9/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  53:/usr/include/c++/9/bits/move.h **** } // namespace
  54:/usr/include/c++/9/bits/move.h **** 
  55:/usr/include/c++/9/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  56:/usr/include/c++/9/bits/move.h **** 
  57:/usr/include/c++/9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/9/bits/move.h **** {
  59:/usr/include/c++/9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/9/bits/move.h **** 
  61:/usr/include/c++/9/bits/move.h ****   /**
  62:/usr/include/c++/9/bits/move.h ****    *  @addtogroup utilities
  63:/usr/include/c++/9/bits/move.h ****    *  @{
  64:/usr/include/c++/9/bits/move.h ****    */
  65:/usr/include/c++/9/bits/move.h **** 
  66:/usr/include/c++/9/bits/move.h ****   /**
  67:/usr/include/c++/9/bits/move.h ****    *  @brief  Forward an lvalue.
  68:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to the specified type.
  69:/usr/include/c++/9/bits/move.h ****    *
  70:/usr/include/c++/9/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  71:/usr/include/c++/9/bits/move.h ****    */
  72:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  73:/usr/include/c++/9/bits/move.h ****     constexpr _Tp&&
  74:/usr/include/c++/9/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  75:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  76:/usr/include/c++/9/bits/move.h **** 
  77:/usr/include/c++/9/bits/move.h ****   /**
  78:/usr/include/c++/9/bits/move.h ****    *  @brief  Forward an rvalue.
  79:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to the specified type.
  80:/usr/include/c++/9/bits/move.h ****    *
  81:/usr/include/c++/9/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  82:/usr/include/c++/9/bits/move.h ****    */
  83:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  84:/usr/include/c++/9/bits/move.h ****     constexpr _Tp&&
  85:/usr/include/c++/9/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  86:/usr/include/c++/9/bits/move.h ****     {
  87:/usr/include/c++/9/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  88:/usr/include/c++/9/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  89:/usr/include/c++/9/bits/move.h ****       return static_cast<_Tp&&>(__t);
  90:/usr/include/c++/9/bits/move.h ****     }
  91:/usr/include/c++/9/bits/move.h **** 
  92:/usr/include/c++/9/bits/move.h ****   /**
  93:/usr/include/c++/9/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  94:/usr/include/c++/9/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  95:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  96:/usr/include/c++/9/bits/move.h ****   */
  97:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  98:/usr/include/c++/9/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
  99:/usr/include/c++/9/bits/move.h ****     move(_Tp&& __t) noexcept
 2714              		.loc 11 99 5 view .LVU555
 2715              		.loc 11 99 5 is_stmt 0 view .LVU556
 2716              	.LBE4915:
 2717              	.LBB4916:
 2718              	.LBI4916:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2719              		.loc 5 141 7 is_stmt 1 view .LVU557
 2720              	.LBB4917:
 2721              	.LBI4917:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2722              		.loc 4 83 7 view .LVU558
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2723              		.loc 4 83 7 is_stmt 0 view .LVU559
 2724              	.LBE4917:
 2725              	.LBE4916:
 2726              	.LBE4918:
 2727              	.LBE4925:
 2728              	.LBB4926:
 2729              	.LBI4926:
 2730              		.loc 5 153 7 is_stmt 1 view .LVU560
 2731              	.LBB4927:
 2732              	.LBI4927:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2733              		.loc 4 89 7 view .LVU561
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2734              		.loc 4 89 7 is_stmt 0 view .LVU562
 2735              	.LBE4927:
 2736              	.LBE4926:
 2737              	# /usr/include/c++/9/bits/basic_string.h:451:       { _M_construct(__str._M_data(), __str._M_data()
 451:/usr/include/c++/9/bits/basic_string.h **** 
 2738              		.loc 2 451 55 view .LVU563
 2739 0031 488B2A   		movq	(%rdx), %rbp	# MEM[(char * *)y_6(D)], _8
 2740              	.LBB4928:
 2741              	.LBI4928:
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2742              		.loc 2 186 7 is_stmt 1 view .LVU564
 2743              	.LVL141:
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2744              		.loc 2 186 7 is_stmt 0 view .LVU565
 2745              	.LBE4928:
 2746              	# /usr/include/c++/9/bits/basic_string.h:451:       { _M_construct(__str._M_data(), __str._M_data()
 451:/usr/include/c++/9/bits/basic_string.h **** 
 2747              		.loc 2 451 55 view .LVU566
 2748 0034 4C8B6A08 		movq	8(%rdx), %r13	# MEM[(long unsigned int *)y_6(D) + 8B], _9
 2749              	.LBB4929:
 2750              	.LBI4929:
 936:/usr/include/c++/9/bits/basic_string.h ****       { return _M_string_length; }
 2751              		.loc 2 936 7 is_stmt 1 view .LVU567
 2752              	.LVL142:
 936:/usr/include/c++/9/bits/basic_string.h ****       { return _M_string_length; }
 2753              		.loc 2 936 7 is_stmt 0 view .LVU568
 2754              	.LBE4929:
 2755              	.LBB4930:
 2756              	.LBI4930:
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2757              		.loc 2 186 7 is_stmt 1 view .LVU569
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2758              		.loc 2 186 7 is_stmt 0 view .LVU570
 2759              	.LBE4930:
 2760              	.LBB4931:
 2761              	.LBI4931:
 263:/usr/include/c++/9/bits/basic_string.h **** 	{
 2762              		.loc 2 263 9 is_stmt 1 view .LVU571
 2763              	.LBB4932:
 2764              	.LBB4933:
 2765              	.LBI4933:
 243:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 2766              		.loc 2 243 9 view .LVU572
 2767              	.LBB4934:
 2768              	.LBB4935:
 2769              	.LBI4935:
 206:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 2770              		.loc 9 206 7 view .LVU573
 2771              	.LBB4936:
 2772              	# /usr/include/c++/9/bits/basic_string.tcc:211: 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg !
 211:/usr/include/c++/9/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 2773              		.loc 9 211 42 is_stmt 0 view .LVU574
 2774 0038 4889E8   		movq	%rbp, %rax	# _8, tmp128
 2775 003b 4C01E8   		addq	%r13, %rax	# _9, tmp128
 2776 003e 7409     		je	.L78	#,
 2777 0040 4885ED   		testq	%rbp, %rbp	# _8
 2778 0043 0F84AE00 		je	.L84	#,
 2778      0000
 2779              	.L78:
 2780              	# /usr/include/c++/9/bits/basic_string.tcc:215: 	size_type __dnew = static_cast<size_type>(std::dis
 215:/usr/include/c++/9/bits/basic_string.tcc **** 
 2781              		.loc 9 215 12 view .LVU575
 2782 0049 4C892C24 		movq	%r13, (%rsp)	# _9, __dnew
 2783              	# /usr/include/c++/9/bits/basic_string.tcc:217: 	if (__dnew > size_type(_S_local_capacity))
 217:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 2784              		.loc 9 217 2 view .LVU576
 2785 004d 4983FD0F 		cmpq	$15, %r13	#, _9
 2786 0051 7745     		ja	.L102	#,
 2787              	.LVL143:
 2788              	.LBB4937:
 2789              	.LBI4937:
 392:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 2790              		.loc 2 392 7 is_stmt 1 view .LVU577
 2791              	.LBB4938:
 2792              	.LBI4938:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 2793              		.loc 2 346 7 view .LVU578
 2794              	.LBB4939:
 2795              	# /usr/include/c++/9/bits/basic_string.h:348: 	if (__n == 1)
 348:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 2796              		.loc 2 348 2 is_stmt 0 view .LVU579
 2797 0053 4983FD01 		cmpq	$1, %r13	#, _9
 2798 0057 0F859300 		jne	.L81	#,
 2798      0000
 2799              	# /usr/include/c++/9/bits/basic_string.h:349: 	  traits_type::assign(*__d, *__s);
 349:/usr/include/c++/9/bits/basic_string.h **** 	else
 2800              		.loc 2 349 23 view .LVU580
 2801 005d 0FB64500 		movzbl	0(%rbp), %eax	# MEM[(const char_type &)_8], _23
 2802              	.LVL144:
 2803              	.LBB4940:
 2804              	.LBI4940:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 2805              		.loc 8 299 7 is_stmt 1 view .LVU581
 2806              	.LBB4941:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2807              		.loc 8 300 9 view .LVU582
 2808 0061 498B3C24 		movq	(%r12), %rdi	# MEM[(char * *)_5(D)], pretmp_15
 2809              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2810              		.loc 8 300 14 is_stmt 0 view .LVU583
 2811 0065 41884424 		movb	%al, 16(%r12)	# _23, MEM[(char_type &)_5(D) + 16]
 2811      10
 2812              	.LVL145:
 2813              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2814              		.loc 8 300 22 view .LVU584
 2815 006a EB5C     		jmp	.L87	#
 2816              	.LVL146:
 2817 006c 0F1F4000 		.p2align 4,,10
 2818              		.p2align 3
 2819              	.L77:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2820              		.loc 8 300 22 view .LVU585
 2821              	.LBE4941:
 2822              	.LBE4940:
 2823              	.LBE4939:
 2824              	.LBE4938:
 2825              	.LBE4937:
 2826              	.LBE4936:
 2827              	.LBE4935:
 2828              	.LBE4934:
 2829              	.LBE4933:
 2830              	.LBE4932:
 2831              	.LBE4931:
 2832              	.LBE4954:
 2833              	.LBE4956:
 2834              	.LBE4958:
 200:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   } else {
 201:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****     return x;
 2835              		.loc 1 201 5 is_stmt 1 view .LVU586
 2836              	.LBB4959:
 2837              	.LBI4959:
 448:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 2838              		.loc 2 448 7 view .LVU587
 2839              	.LBB4960:
 2840              	.LBB4961:
 2841              	.LBB4962:
 2842              	.LBI4962:
 290:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 2843              		.loc 2 290 7 view .LVU588
 290:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
 2844              		.loc 2 290 7 is_stmt 0 view .LVU589
 2845              	.LBE4962:
 2846              	.LBB4963:
 2847              	.LBI4963:
 2848              		.loc 10 97 19 is_stmt 1 view .LVU590
 2849              	.LBB4964:
 2850              	.LBI4964:
 2851              		.loc 3 514 7 view .LVU591
 2852              	.LBB4965:
 2853              	.LBI4965:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2854              		.loc 5 141 7 view .LVU592
 2855              	.LBB4966:
 2856              	.LBI4966:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2857              		.loc 4 83 7 view .LVU593
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2858              		.loc 4 83 7 is_stmt 0 view .LVU594
 2859              	.LBE4966:
 2860              	.LBE4965:
 2861              	.LBE4964:
 2862              	.LBE4963:
 2863              	.LBB4967:
 2864              	.LBI4967:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 2865              		.loc 2 190 7 is_stmt 1 view .LVU595
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 2866              		.loc 2 190 7 is_stmt 0 view .LVU596
 2867              	.LBE4967:
 2868              	.LBB4968:
 2869              	.LBI4968:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 2870              		.loc 2 159 2 is_stmt 1 view .LVU597
 2871              	.LBB4969:
 2872              	.LBB4970:
 2873              	.LBI4970:
 2874              		.loc 11 99 5 view .LVU598
 2875              		.loc 11 99 5 is_stmt 0 view .LVU599
 2876              	.LBE4970:
 2877              	.LBB4971:
 2878              	.LBI4971:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2879              		.loc 5 141 7 is_stmt 1 view .LVU600
 2880              	.LBB4972:
 2881              	.LBI4972:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2882              		.loc 4 83 7 view .LVU601
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 2883              		.loc 4 83 7 is_stmt 0 view .LVU602
 2884              	.LBE4972:
 2885              	.LBE4971:
 2886              	.LBE4969:
 2887              	.LBE4968:
 2888              	.LBB4973:
 2889              	.LBI4973:
 2890              		.loc 5 153 7 is_stmt 1 view .LVU603
 2891              	.LBB4974:
 2892              	.LBI4974:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2893              		.loc 4 89 7 view .LVU604
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 2894              		.loc 4 89 7 is_stmt 0 view .LVU605
 2895              	.LBE4974:
 2896              	.LBE4973:
 2897              	# /usr/include/c++/9/bits/basic_string.h:451:       { _M_construct(__str._M_data(), __str._M_data()
 451:/usr/include/c++/9/bits/basic_string.h **** 
 2898              		.loc 2 451 55 view .LVU606
 2899 0070 488B2E   		movq	(%rsi), %rbp	# MEM[(char * *)x_3(D)], _12
 2900              	.LBB4975:
 2901              	.LBI4975:
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2902              		.loc 2 186 7 is_stmt 1 view .LVU607
 2903              	.LVL147:
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2904              		.loc 2 186 7 is_stmt 0 view .LVU608
 2905              	.LBE4975:
 2906              	.LBB4976:
 2907              	.LBI4976:
 936:/usr/include/c++/9/bits/basic_string.h ****       { return _M_string_length; }
 2908              		.loc 2 936 7 is_stmt 1 view .LVU609
 936:/usr/include/c++/9/bits/basic_string.h ****       { return _M_string_length; }
 2909              		.loc 2 936 7 is_stmt 0 view .LVU610
 2910              	.LBE4976:
 2911              	.LBB4977:
 2912              	.LBI4977:
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2913              		.loc 2 186 7 is_stmt 1 view .LVU611
 186:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2914              		.loc 2 186 7 is_stmt 0 view .LVU612
 2915              	.LBE4977:
 2916              	.LBB4978:
 2917              	.LBI4978:
 263:/usr/include/c++/9/bits/basic_string.h **** 	{
 2918              		.loc 2 263 9 is_stmt 1 view .LVU613
 2919              	.LBB4979:
 2920              	.LBB4980:
 2921              	.LBI4980:
 243:/usr/include/c++/9/bits/basic_string.h **** 			 std::__false_type)
 2922              		.loc 2 243 9 view .LVU614
 2923              	.LBB4981:
 2924              	.LBB4982:
 2925              	.LBI4982:
 206:/usr/include/c++/9/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 2926              		.loc 9 206 7 view .LVU615
 2927              	.LBB4983:
 2928              	# /usr/include/c++/9/bits/basic_string.tcc:211: 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg !
 211:/usr/include/c++/9/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 2929              		.loc 9 211 42 is_stmt 0 view .LVU616
 2930 0073 4885ED   		testq	%rbp, %rbp	# _12
 2931 0076 747F     		je	.L84	#,
 2932              	# /usr/include/c++/9/bits/basic_string.tcc:215: 	size_type __dnew = static_cast<size_type>(std::dis
 215:/usr/include/c++/9/bits/basic_string.tcc **** 
 2933              		.loc 9 215 12 view .LVU617
 2934 0078 4C892C24 		movq	%r13, (%rsp)	# prephitmp_76, __dnew
 2935              	# /usr/include/c++/9/bits/basic_string.tcc:217: 	if (__dnew > size_type(_S_local_capacity))
 217:/usr/include/c++/9/bits/basic_string.tcc **** 	  {
 2936              		.loc 9 217 2 view .LVU618
 2937 007c 4983FD0F 		cmpq	$15, %r13	#, prephitmp_76
 2938 0080 7716     		ja	.L102	#,
 2939              	.LVL148:
 2940              	.LBB4984:
 2941              	.LBI4984:
 392:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 2942              		.loc 2 392 7 is_stmt 1 view .LVU619
 2943              	.LBB4985:
 2944              	.LBI4985:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 2945              		.loc 2 346 7 view .LVU620
 2946              	.LBB4986:
 2947              	# /usr/include/c++/9/bits/basic_string.h:348: 	if (__n == 1)
 348:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 2948              		.loc 2 348 2 is_stmt 0 view .LVU621
 2949 0082 4983FD01 		cmpq	$1, %r13	#, prephitmp_76
 2950 0086 752D     		jne	.L86	#,
 2951              	# /usr/include/c++/9/bits/basic_string.h:349: 	  traits_type::assign(*__d, *__s);
 349:/usr/include/c++/9/bits/basic_string.h **** 	else
 2952              		.loc 2 349 23 view .LVU622
 2953 0088 0FB64500 		movzbl	0(%rbp), %eax	# MEM[(const char_type &)_12], _32
 2954              	.LVL149:
 2955              	.LBB4987:
 2956              	.LBI4987:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 2957              		.loc 8 299 7 is_stmt 1 view .LVU623
 2958              	.LBB4988:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2959              		.loc 8 300 9 view .LVU624
 2960              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2961              		.loc 8 300 14 is_stmt 0 view .LVU625
 2962 008c 41884424 		movb	%al, 16(%r12)	# _32, MEM[(char_type &)_5(D) + 16]
 2962      10
 2963              	.LVL150:
 2964              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2965              		.loc 8 300 22 view .LVU626
 2966 0091 EB35     		jmp	.L87	#
 2967              	.LVL151:
 2968              		.p2align 4,,10
 2969 0093 0F1F4400 		.p2align 3
 2969      00
 2970              	.L102:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 2971              		.loc 8 300 22 view .LVU627
 2972              	.LBE4988:
 2973              	.LBE4987:
 2974              	.LBE4986:
 2975              	.LBE4985:
 2976              	.LBE4984:
 2977              	# /usr/include/c++/9/bits/basic_string.tcc:219: 	    _M_data(_M_create(__dnew, size_type(0)));
 2978              		.loc 9 219 6 view .LVU628
 2979 0098 4C89E7   		movq	%r12, %rdi	# <retval>,
 2980 009b 4889E6   		movq	%rsp, %rsi	#, tmp113
 2981              	.LVL152:
 2982              		.loc 9 219 6 view .LVU629
 2983 009e 31D2     		xorl	%edx, %edx	#
 2984              	.LVL153:
 2985              		.loc 9 219 6 view .LVU630
 2986 00a0 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT	#
 2986      00
 2987              	.LVL154:
 2988              	.LBB4995:
 2989              	.LBB4996:
 2990              	# /usr/include/c++/9/bits/basic_string.h:179:       { _M_dataplus._M_p = __p; }
 179:/usr/include/c++/9/bits/basic_string.h **** 
 2991              		.loc 2 179 9 view .LVU631
 2992 00a5 49890424 		movq	%rax, (%r12)	# pretmp_15, MEM[(char * *)_5(D)]
 2993              	.LBE4996:
 2994              	.LBE4995:
 2995              	# /usr/include/c++/9/bits/basic_string.tcc:219: 	    _M_data(_M_create(__dnew, size_type(0)));
 2996              		.loc 9 219 6 view .LVU632
 2997 00a9 4889C7   		movq	%rax, %rdi	# tmp126, pretmp_15
 2998              	.LVL155:
 2999              	.LBB4997:
 3000              	.LBI4995:
 178:/usr/include/c++/9/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 3001              		.loc 2 178 7 is_stmt 1 view .LVU633
 178:/usr/include/c++/9/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 3002              		.loc 2 178 7 is_stmt 0 view .LVU634
 3003              	.LBE4997:
 3004              	.LBB4998:
 3005              	.LBI4998:
 210:/usr/include/c++/9/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 3006              		.loc 2 210 7 is_stmt 1 view .LVU635
 3007              	.LBB4999:
 3008              	# /usr/include/c++/9/bits/basic_string.h:211:       { _M_allocated_capacity = __capacity; }
 211:/usr/include/c++/9/bits/basic_string.h **** 
 3009              		.loc 2 211 9 is_stmt 0 view .LVU636
 3010 00ac 488B0424 		movq	(%rsp), %rax	#, __dnew
 3011 00b0 49894424 		movq	%rax, 16(%r12)	# __dnew, MEM[(size_type *)_5(D) + 16B]
 3011      10
 3012              	.LVL156:
 211:/usr/include/c++/9/bits/basic_string.h **** 
 3013              		.loc 2 211 9 view .LVU637
 3014              	.LBE4999:
 3015              	.LBE4998:
 3016              	.LBB5000:
 392:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 3017              		.loc 2 392 7 is_stmt 1 view .LVU638
 3018              	.LBB4994:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 3019              		.loc 2 346 7 view .LVU639
 3020              	.L86:
 3021              	.LBB4993:
 3022              	.LBB4989:
 3023              	.LBI4989:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 3024              		.loc 2 346 7 view .LVU640
 3025              	.LBB4990:
 3026              	.LBB4991:
 3027              	.LBI4991:
 361:/usr/include/c++/9/bits/char_traits.h ****       {
 3028              		.loc 8 361 7 view .LVU641
 3029              	.LBB4992:
 363:/usr/include/c++/9/bits/char_traits.h **** 	  return __s1;
 3030              		.loc 8 363 2 view .LVU642
 3031              		.loc 8 365 2 view .LVU643
 3032              	# /usr/include/c++/9/bits/char_traits.h:365: 	return static_cast<char_type*>(__builtin_memcpy(__s1,
 3033              		.loc 8 365 49 is_stmt 0 view .LVU644
 3034 00b5 4C89EA   		movq	%r13, %rdx	# prephitmp_76,
 3035 00b8 4889EE   		movq	%rbp, %rsi	# _12,
 3036 00bb E8000000 		call	memcpy@PLT	#
 3036      00
 3037              	.LVL157:
 3038              		.loc 8 365 49 view .LVU645
 3039 00c0 4C8B2C24 		movq	(%rsp), %r13	#, prephitmp_76
 3040              	.LVL158:
 3041              		.loc 8 365 49 view .LVU646
 3042 00c4 498B3C24 		movq	(%r12), %rdi	# MEM[(char * *)_5(D)], pretmp_15
 3043              	.L87:
 3044              	.LVL159:
 3045              		.loc 8 365 49 view .LVU647
 3046              	.LBE4992:
 3047              	.LBE4991:
 3048              	.LBE4990:
 3049              	.LBE4989:
 3050              	.LBE4993:
 3051              	.LBE4994:
 3052              	.LBE5000:
 3053              	.LBB5001:
 3054              	.LBI5001:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 3055              		.loc 2 214 7 is_stmt 1 view .LVU648
 3056              	.LBB5002:
 3057              	.LBB5003:
 3058              	.LBI5003:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 3059              		.loc 2 182 7 view .LVU649
 3060              	.LBB5004:
 3061              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 3062              		.loc 2 183 9 is_stmt 0 view .LVU650
 3063 00c8 4D896C24 		movq	%r13, 8(%r12)	# prephitmp_76, MEM[(size_type *)_5(D) + 8B]
 3063      08
 3064              	.LVL160:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 3065              		.loc 2 183 9 view .LVU651
 3066              	.LBE5004:
 3067              	.LBE5003:
 3068              	.LBB5005:
 3069              	.LBI5005:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 3070              		.loc 8 299 7 is_stmt 1 view .LVU652
 3071              	.LBB5006:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3072              		.loc 8 300 9 view .LVU653
 3073              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3074              		.loc 8 300 14 is_stmt 0 view .LVU654
 3075 00cd 42C6042F 		movb	$0, (%rdi,%r13)	#,* prephitmp_76
 3075      00
 3076              	.LVL161:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3077              		.loc 8 300 14 view .LVU655
 3078              	.LBE5006:
 3079              	.LBE5005:
 3080              	.LBE5002:
 3081              	.LBE5001:
 3082              	.LBE4983:
 3083              	.LBE4982:
 3084              	.LBE4981:
 3085              	.LBE4980:
 3086              	.LBE4979:
 3087              	.LBE4978:
 3088              	.LBE4961:
 3089              	.LBE4960:
 3090              	.LBE4959:
 3091              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:203: }
 202:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h ****   }
 203:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** }
 3092              		.loc 1 203 1 view .LVU656
 3093 00d2 488B4424 		movq	8(%rsp), %rax	# D.444757, tmp129
 3093      08
 3094 00d7 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp129
 3094      25280000 
 3094      00
 3095 00e0 7521     		jne	.L103	#,
 3096 00e2 4883C410 		addq	$16, %rsp	#,
 3097              		.cfi_remember_state
 3098              		.cfi_def_cfa_offset 32
 3099 00e6 4C89E0   		movq	%r12, %rax	# <retval>,
 3100 00e9 5D       		popq	%rbp	#
 3101              		.cfi_def_cfa_offset 24
 3102 00ea 415C     		popq	%r12	#
 3103              		.cfi_def_cfa_offset 16
 3104              	.LVL162:
 3105              		.loc 1 203 1 view .LVU657
 3106 00ec 415D     		popq	%r13	#
 3107              		.cfi_def_cfa_offset 8
 3108 00ee C3       		ret	
 3109              	.LVL163:
 3110 00ef 90       		.p2align 4,,10
 3111              		.p2align 3
 3112              	.L81:
 3113              		.cfi_restore_state
 3114              	.LBB5007:
 3115              	.LBB4957:
 3116              	.LBB4955:
 3117              	.LBB4953:
 3118              	.LBB4952:
 3119              	.LBB4951:
 3120              	.LBB4950:
 3121              	.LBB4949:
 3122              	.LBB4948:
 3123              	.LBB4947:
 3124              	.LBB4946:
 3125              	.LBB4945:
 3126              	.LBB4942:
 3127              	.LBI4942:
 346:/usr/include/c++/9/bits/basic_string.h ****       {
 3128              		.loc 2 346 7 is_stmt 1 view .LVU658
 3129              	.LBB4943:
 3130              	.LBI4943:
 361:/usr/include/c++/9/bits/char_traits.h ****       {
 3131              		.loc 8 361 7 view .LVU659
 3132              	.LBB4944:
 363:/usr/include/c++/9/bits/char_traits.h **** 	  return __s1;
 3133              		.loc 8 363 2 view .LVU660
 3134 00f0 4D85ED   		testq	%r13, %r13	# _9
 3135 00f3 74D3     		je	.L87	#,
 3136 00f5 EBBE     		jmp	.L86	#
 3137              	.LVL164:
 3138              	.L84:
 363:/usr/include/c++/9/bits/char_traits.h **** 	  return __s1;
 3139              		.loc 8 363 2 is_stmt 0 view .LVU661
 3140              	.LBE4944:
 3141              	.LBE4943:
 3142              	.LBE4942:
 3143              	.LBE4945:
 3144              	.LBE4946:
 3145              	.LBE4947:
 3146              	# /usr/include/c++/9/bits/basic_string.tcc:212: 	  std::__throw_logic_error(__N("basic_string::"
 212:/usr/include/c++/9/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 3147              		.loc 9 212 28 view .LVU662
 3148 00f7 488D3D00 		leaq	.LC0(%rip), %rdi	#,
 3148      000000
 3149 00fe E8000000 		call	_ZSt19__throw_logic_errorPKc@PLT	#
 3149      00
 3150              	.LVL165:
 3151              	.L103:
 212:/usr/include/c++/9/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 3152              		.loc 9 212 28 view .LVU663
 3153              	.LBE4948:
 3154              	.LBE4949:
 3155              	.LBE4950:
 3156              	.LBE4951:
 3157              	.LBE4952:
 3158              	.LBE4953:
 3159              	.LBE4955:
 3160              	.LBE4957:
 3161              	.LBE5007:
 3162              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:203: }
 3163              		.loc 1 203 1 view .LVU664
 3164 0103 E8000000 		call	__stack_chk_fail@PLT	#
 3164      00
 3165              	.LVL166:
 3166              		.cfi_endproc
 3167              	.LFE2960:
 3169              		.section	.text._ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED2Ev,"axG",@progbits,_ZNSt7
 3170              		.align 2
 3171              		.p2align 4
 3172              		.weak	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED2Ev
 3174              	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED2Ev:
 3175              	.LVL167:
 3176              	.LFB12472:
 3177              		.file 12 "/usr/include/c++/9/sstream"
   1:/usr/include/c++/9/sstream **** // String based streams -*- C++ -*-
   2:/usr/include/c++/9/sstream **** 
   3:/usr/include/c++/9/sstream **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/sstream **** //
   5:/usr/include/c++/9/sstream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/sstream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/sstream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/sstream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/sstream **** // any later version.
  10:/usr/include/c++/9/sstream **** 
  11:/usr/include/c++/9/sstream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/sstream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/sstream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/sstream **** // GNU General Public License for more details.
  15:/usr/include/c++/9/sstream **** 
  16:/usr/include/c++/9/sstream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/sstream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/sstream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/sstream **** 
  20:/usr/include/c++/9/sstream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/sstream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/sstream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/sstream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/sstream **** 
  25:/usr/include/c++/9/sstream **** /** @file include/sstream
  26:/usr/include/c++/9/sstream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/9/sstream ****  */
  28:/usr/include/c++/9/sstream **** 
  29:/usr/include/c++/9/sstream **** //
  30:/usr/include/c++/9/sstream **** // ISO C++ 14882: 27.7  String-based streams
  31:/usr/include/c++/9/sstream **** //
  32:/usr/include/c++/9/sstream **** 
  33:/usr/include/c++/9/sstream **** #ifndef _GLIBCXX_SSTREAM
  34:/usr/include/c++/9/sstream **** #define _GLIBCXX_SSTREAM 1
  35:/usr/include/c++/9/sstream **** 
  36:/usr/include/c++/9/sstream **** #pragma GCC system_header
  37:/usr/include/c++/9/sstream **** 
  38:/usr/include/c++/9/sstream **** #include <istream>
  39:/usr/include/c++/9/sstream **** #include <ostream>
  40:/usr/include/c++/9/sstream **** 
  41:/usr/include/c++/9/sstream **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/9/sstream **** {
  43:/usr/include/c++/9/sstream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/9/sstream **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  45:/usr/include/c++/9/sstream **** 
  46:/usr/include/c++/9/sstream ****   // [27.7.1] template class basic_stringbuf
  47:/usr/include/c++/9/sstream ****   /**
  48:/usr/include/c++/9/sstream ****    *  @brief  The actual work of input and output (for std::string).
  49:/usr/include/c++/9/sstream ****    *  @ingroup io
  50:/usr/include/c++/9/sstream ****    *
  51:/usr/include/c++/9/sstream ****    *  @tparam _CharT  Type of character stream.
  52:/usr/include/c++/9/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
  53:/usr/include/c++/9/sstream ****    *                   char_traits<_CharT>.
  54:/usr/include/c++/9/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  55:/usr/include/c++/9/sstream ****    *
  56:/usr/include/c++/9/sstream ****    *  This class associates either or both of its input and output sequences
  57:/usr/include/c++/9/sstream ****    *  with a sequence of characters, which can be initialized from, or made
  58:/usr/include/c++/9/sstream ****    *  available as, a @c std::basic_string.  (Paraphrased from [27.7.1]/1.)
  59:/usr/include/c++/9/sstream ****    *
  60:/usr/include/c++/9/sstream ****    *  For this class, open modes (of type @c ios_base::openmode) have
  61:/usr/include/c++/9/sstream ****    *  @c in set if the input sequence can be read, and @c out set if the
  62:/usr/include/c++/9/sstream ****    *  output sequence can be written.
  63:/usr/include/c++/9/sstream ****   */
  64:/usr/include/c++/9/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
  65:/usr/include/c++/9/sstream ****     class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
 3178              		.loc 12 65 11 is_stmt 1 view -0
 3179              		.cfi_startproc
 3180              		.loc 12 65 11 is_stmt 0 view .LVU666
 3181 0000 F30F1EFA 		endbr64	
 3182              	.LBB5027:
 3183 0004 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp92
 3183      000000
 3184              	.LBE5027:
 3185 000b 53       		pushq	%rbx	#
 3186              		.cfi_def_cfa_offset 16
 3187              		.cfi_offset 3, -16
 3188              	# /usr/include/c++/9/sstream:65:     class basic_stringbuf : public basic_streambuf<_CharT, _Traits
 3189              		.loc 12 65 11 view .LVU667
 3190 000c 4889FB   		movq	%rdi, %rbx	# tmp91, this
 3191              	.LBB5047:
 3192 000f 488907   		movq	%rax, (%rdi)	# tmp92, this_2(D)->D.48380._vptr.basic_streambuf
 3193              	.LVL168:
 3194              	.LBB5028:
 3195              	.LBI5028:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 3196              		.loc 2 657 7 is_stmt 1 view .LVU668
 3197              	.LBB5029:
 3198              	.LBI5029:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 3199              		.loc 2 229 7 view .LVU669
 3200              	.LBB5030:
 3201              	.LBB5031:
 3202              	.LBI5031:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 3203              		.loc 2 221 7 view .LVU670
 3204              	.LBB5032:
 3205              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 3206              		.loc 2 222 26 is_stmt 0 view .LVU671
 3207 0012 488B7F48 		movq	72(%rdi), %rdi	# MEM[(char * *)this_2(D) + 72B], _6
 3208              	.LVL169:
 3209              	.LBB5033:
 3210              	.LBI5033:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 3211              		.loc 2 200 7 is_stmt 1 view .LVU672
 3212              	.LBB5034:
 3213              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 3214              		.loc 2 203 57 is_stmt 0 view .LVU673
 3215 0016 488D4358 		leaq	88(%rbx), %rax	#, tmp88
 3216              	.LBE5034:
 3217              	.LBE5033:
 3218              	.LBE5032:
 3219              	.LBE5031:
 3220              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3221              		.loc 2 231 2 view .LVU674
 3222 001a 4839C7   		cmpq	%rax, %rdi	# tmp88, _6
 3223 001d 7405     		je	.L105	#,
 3224              	.LVL170:
 3225              	.LBB5035:
 3226              	.LBI5035:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 3227              		.loc 2 236 7 is_stmt 1 view .LVU675
 3228              	.LBB5036:
 3229              	.LBB5037:
 3230              	.LBI5037:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 3231              		.loc 3 469 7 view .LVU676
 3232              	.LBB5038:
 3233              	.LBI5038:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 3234              		.loc 4 119 7 view .LVU677
 3235              	.LBB5039:
 3236              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 3237              		.loc 4 128 19 is_stmt 0 view .LVU678
 3238 001f E8000000 		call	_ZdlPv@PLT	#
 3238      00
 3239              	.LVL171:
 3240              	.L105:
 3241              		.loc 4 128 19 view .LVU679
 3242              	.LBE5039:
 3243              	.LBE5038:
 3244              	.LBE5037:
 3245              	.LBE5036:
 3246              	.LBE5035:
 3247              	.LBE5030:
 3248              	.LBE5029:
 3249              	.LBB5040:
 3250              	.LBI5040:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 3251              		.loc 2 150 14 is_stmt 1 view .LVU680
 3252              	.LBB5041:
 3253              	.LBI5041:
 3254              		.loc 5 153 7 view .LVU681
 3255              	.LBB5042:
 3256              	.LBI5042:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3257              		.loc 4 89 7 view .LVU682
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3258              		.loc 4 89 7 is_stmt 0 view .LVU683
 3259              	.LBE5042:
 3260              	.LBE5041:
 3261              	.LBE5040:
 3262              	.LBE5028:
 3263              	.LBB5043:
 3264              	.LBI5043:
 3265              		.file 13 "/usr/include/c++/9/streambuf"
   1:/usr/include/c++/9/streambuf **** // Stream buffer classes -*- C++ -*-
   2:/usr/include/c++/9/streambuf **** 
   3:/usr/include/c++/9/streambuf **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/streambuf **** //
   5:/usr/include/c++/9/streambuf **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/streambuf **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/streambuf **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/streambuf **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/streambuf **** // any later version.
  10:/usr/include/c++/9/streambuf **** 
  11:/usr/include/c++/9/streambuf **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/streambuf **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/streambuf **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/streambuf **** // GNU General Public License for more details.
  15:/usr/include/c++/9/streambuf **** 
  16:/usr/include/c++/9/streambuf **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/streambuf **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/streambuf **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/streambuf **** 
  20:/usr/include/c++/9/streambuf **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/streambuf **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/streambuf **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/streambuf **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/streambuf **** 
  25:/usr/include/c++/9/streambuf **** /** @file include/streambuf
  26:/usr/include/c++/9/streambuf ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/9/streambuf ****  */
  28:/usr/include/c++/9/streambuf **** 
  29:/usr/include/c++/9/streambuf **** //
  30:/usr/include/c++/9/streambuf **** // ISO C++ 14882: 27.5  Stream buffers
  31:/usr/include/c++/9/streambuf **** //
  32:/usr/include/c++/9/streambuf **** 
  33:/usr/include/c++/9/streambuf **** #ifndef _GLIBXX_STREAMBUF
  34:/usr/include/c++/9/streambuf **** #define _GLIBXX_STREAMBUF 1
  35:/usr/include/c++/9/streambuf **** 
  36:/usr/include/c++/9/streambuf **** #pragma GCC system_header
  37:/usr/include/c++/9/streambuf **** 
  38:/usr/include/c++/9/streambuf **** #include <bits/c++config.h>
  39:/usr/include/c++/9/streambuf **** #include <iosfwd>
  40:/usr/include/c++/9/streambuf **** #include <bits/localefwd.h>
  41:/usr/include/c++/9/streambuf **** #include <bits/ios_base.h>
  42:/usr/include/c++/9/streambuf **** #include <bits/cpp_type_traits.h>
  43:/usr/include/c++/9/streambuf **** #include <ext/type_traits.h>
  44:/usr/include/c++/9/streambuf **** 
  45:/usr/include/c++/9/streambuf **** namespace std _GLIBCXX_VISIBILITY(default)
  46:/usr/include/c++/9/streambuf **** {
  47:/usr/include/c++/9/streambuf **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  48:/usr/include/c++/9/streambuf **** 
  49:/usr/include/c++/9/streambuf **** #define _IsUnused __attribute__ ((__unused__))
  50:/usr/include/c++/9/streambuf **** 
  51:/usr/include/c++/9/streambuf ****   template<typename _CharT, typename _Traits>
  52:/usr/include/c++/9/streambuf ****     streamsize
  53:/usr/include/c++/9/streambuf ****     __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
  54:/usr/include/c++/9/streambuf **** 			  basic_streambuf<_CharT, _Traits>*, bool&);
  55:/usr/include/c++/9/streambuf **** 
  56:/usr/include/c++/9/streambuf ****   /**
  57:/usr/include/c++/9/streambuf ****    *  @brief  The actual work of input and output (interface).
  58:/usr/include/c++/9/streambuf ****    *  @ingroup io
  59:/usr/include/c++/9/streambuf ****    *
  60:/usr/include/c++/9/streambuf ****    *  @tparam _CharT  Type of character stream.
  61:/usr/include/c++/9/streambuf ****    *  @tparam _Traits  Traits for character type, defaults to
  62:/usr/include/c++/9/streambuf ****    *                   char_traits<_CharT>.
  63:/usr/include/c++/9/streambuf ****    *
  64:/usr/include/c++/9/streambuf ****    *  This is a base class.  Derived stream buffers each control a
  65:/usr/include/c++/9/streambuf ****    *  pair of character sequences:  one for input, and one for output.
  66:/usr/include/c++/9/streambuf ****    *
  67:/usr/include/c++/9/streambuf ****    *  Section [27.5.1] of the standard describes the requirements and
  68:/usr/include/c++/9/streambuf ****    *  behavior of stream buffer classes.  That section (three paragraphs)
  69:/usr/include/c++/9/streambuf ****    *  is reproduced here, for simplicity and accuracy.
  70:/usr/include/c++/9/streambuf ****    *
  71:/usr/include/c++/9/streambuf ****    *  -# Stream buffers can impose various constraints on the sequences
  72:/usr/include/c++/9/streambuf ****    *     they control.  Some constraints are:
  73:/usr/include/c++/9/streambuf ****    *     - The controlled input sequence can be not readable.
  74:/usr/include/c++/9/streambuf ****    *     - The controlled output sequence can be not writable.
  75:/usr/include/c++/9/streambuf ****    *     - The controlled sequences can be associated with the contents of
  76:/usr/include/c++/9/streambuf ****    *       other representations for character sequences, such as external
  77:/usr/include/c++/9/streambuf ****    *       files.
  78:/usr/include/c++/9/streambuf ****    *     - The controlled sequences can support operations @e directly to or
  79:/usr/include/c++/9/streambuf ****    *       from associated sequences.
  80:/usr/include/c++/9/streambuf ****    *     - The controlled sequences can impose limitations on how the
  81:/usr/include/c++/9/streambuf ****    *       program can read characters from a sequence, write characters to
  82:/usr/include/c++/9/streambuf ****    *       a sequence, put characters back into an input sequence, or alter
  83:/usr/include/c++/9/streambuf ****    *       the stream position.
  84:/usr/include/c++/9/streambuf ****    *     .
  85:/usr/include/c++/9/streambuf ****    *  -# Each sequence is characterized by three pointers which, if non-null,
  86:/usr/include/c++/9/streambuf ****    *     all point into the same @c charT array object.  The array object
  87:/usr/include/c++/9/streambuf ****    *     represents, at any moment, a (sub)sequence of characters from the
  88:/usr/include/c++/9/streambuf ****    *     sequence.  Operations performed on a sequence alter the values
  89:/usr/include/c++/9/streambuf ****    *     stored in these pointers, perform reads and writes directly to or
  90:/usr/include/c++/9/streambuf ****    *     from associated sequences, and alter <em>the stream position</em> and
  91:/usr/include/c++/9/streambuf ****    *     conversion state as needed to maintain this subsequence relationship.
  92:/usr/include/c++/9/streambuf ****    *     The three pointers are:
  93:/usr/include/c++/9/streambuf ****    *     - the <em>beginning pointer</em>, or lowest element address in the
  94:/usr/include/c++/9/streambuf ****    *       array (called @e xbeg here);
  95:/usr/include/c++/9/streambuf ****    *     - the <em>next pointer</em>, or next element address that is a
  96:/usr/include/c++/9/streambuf ****    *       current candidate for reading or writing (called @e xnext here);
  97:/usr/include/c++/9/streambuf ****    *     - the <em>end pointer</em>, or first element address beyond the
  98:/usr/include/c++/9/streambuf ****    *       end of the array (called @e xend here).
  99:/usr/include/c++/9/streambuf ****    *     .
 100:/usr/include/c++/9/streambuf ****    *  -# The following semantic constraints shall always apply for any set
 101:/usr/include/c++/9/streambuf ****    *     of three pointers for a sequence, using the pointer names given
 102:/usr/include/c++/9/streambuf ****    *     immediately above:
 103:/usr/include/c++/9/streambuf ****    *     - If @e xnext is not a null pointer, then @e xbeg and @e xend shall
 104:/usr/include/c++/9/streambuf ****    *       also be non-null pointers into the same @c charT array, as
 105:/usr/include/c++/9/streambuf ****    *       described above; otherwise, @e xbeg and @e xend shall also be null.
 106:/usr/include/c++/9/streambuf ****    *     - If @e xnext is not a null pointer and @e xnext < @e xend for an
 107:/usr/include/c++/9/streambuf ****    *       output sequence, then a <em>write position</em> is available.
 108:/usr/include/c++/9/streambuf ****    *       In this case, @e *xnext shall be assignable as the next element
 109:/usr/include/c++/9/streambuf ****    *       to write (to put, or to store a character value, into the sequence).
 110:/usr/include/c++/9/streambuf ****    *     - If @e xnext is not a null pointer and @e xbeg < @e xnext for an
 111:/usr/include/c++/9/streambuf ****    *       input sequence, then a <em>putback position</em> is available.
 112:/usr/include/c++/9/streambuf ****    *       In this case, @e xnext[-1] shall have a defined value and is the
 113:/usr/include/c++/9/streambuf ****    *       next (preceding) element to store a character that is put back
 114:/usr/include/c++/9/streambuf ****    *       into the input sequence.
 115:/usr/include/c++/9/streambuf ****    *     - If @e xnext is not a null pointer and @e xnext< @e xend for an
 116:/usr/include/c++/9/streambuf ****    *       input sequence, then a <em>read position</em> is available.
 117:/usr/include/c++/9/streambuf ****    *       In this case, @e *xnext shall have a defined value and is the
 118:/usr/include/c++/9/streambuf ****    *       next element to read (to get, or to obtain a character value,
 119:/usr/include/c++/9/streambuf ****    *       from the sequence).
 120:/usr/include/c++/9/streambuf ****   */
 121:/usr/include/c++/9/streambuf ****   template<typename _CharT, typename _Traits>
 122:/usr/include/c++/9/streambuf ****     class basic_streambuf
 123:/usr/include/c++/9/streambuf ****     {
 124:/usr/include/c++/9/streambuf ****     public:
 125:/usr/include/c++/9/streambuf ****       //@{
 126:/usr/include/c++/9/streambuf ****       /**
 127:/usr/include/c++/9/streambuf ****        *  These are standard types.  They permit a standardized way of
 128:/usr/include/c++/9/streambuf ****        *  referring to names of (or names dependent on) the template
 129:/usr/include/c++/9/streambuf ****        *  parameters, which are specific to the implementation.
 130:/usr/include/c++/9/streambuf ****       */
 131:/usr/include/c++/9/streambuf ****       typedef _CharT 					char_type;
 132:/usr/include/c++/9/streambuf ****       typedef _Traits 					traits_type;
 133:/usr/include/c++/9/streambuf ****       typedef typename traits_type::int_type 		int_type;
 134:/usr/include/c++/9/streambuf ****       typedef typename traits_type::pos_type 		pos_type;
 135:/usr/include/c++/9/streambuf ****       typedef typename traits_type::off_type 		off_type;
 136:/usr/include/c++/9/streambuf ****       //@}
 137:/usr/include/c++/9/streambuf **** 
 138:/usr/include/c++/9/streambuf ****       //@{
 139:/usr/include/c++/9/streambuf ****       /// This is a non-standard type.
 140:/usr/include/c++/9/streambuf ****       typedef basic_streambuf<char_type, traits_type>  	__streambuf_type;
 141:/usr/include/c++/9/streambuf ****       //@}
 142:/usr/include/c++/9/streambuf **** 
 143:/usr/include/c++/9/streambuf ****       friend class basic_ios<char_type, traits_type>;
 144:/usr/include/c++/9/streambuf ****       friend class basic_istream<char_type, traits_type>;
 145:/usr/include/c++/9/streambuf ****       friend class basic_ostream<char_type, traits_type>;
 146:/usr/include/c++/9/streambuf ****       friend class istreambuf_iterator<char_type, traits_type>;
 147:/usr/include/c++/9/streambuf ****       friend class ostreambuf_iterator<char_type, traits_type>;
 148:/usr/include/c++/9/streambuf **** 
 149:/usr/include/c++/9/streambuf ****       friend streamsize
 150:/usr/include/c++/9/streambuf ****       __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);
 151:/usr/include/c++/9/streambuf **** 
 152:/usr/include/c++/9/streambuf ****       template<bool _IsMove, typename _CharT2>
 153:/usr/include/c++/9/streambuf ****         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
 154:/usr/include/c++/9/streambuf **** 					       _CharT2*>::__type
 155:/usr/include/c++/9/streambuf ****         __copy_move_a2(istreambuf_iterator<_CharT2>,
 156:/usr/include/c++/9/streambuf **** 		       istreambuf_iterator<_CharT2>, _CharT2*);
 157:/usr/include/c++/9/streambuf **** 
 158:/usr/include/c++/9/streambuf ****       template<typename _CharT2>
 159:/usr/include/c++/9/streambuf ****         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
 160:/usr/include/c++/9/streambuf **** 				  istreambuf_iterator<_CharT2> >::__type
 161:/usr/include/c++/9/streambuf ****         find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
 162:/usr/include/c++/9/streambuf **** 	     const _CharT2&);
 163:/usr/include/c++/9/streambuf **** 
 164:/usr/include/c++/9/streambuf ****       template<typename _CharT2, typename _Distance>
 165:/usr/include/c++/9/streambuf ****         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
 166:/usr/include/c++/9/streambuf **** 					       void>::__type
 167:/usr/include/c++/9/streambuf ****         advance(istreambuf_iterator<_CharT2>&, _Distance);
 168:/usr/include/c++/9/streambuf **** 
 169:/usr/include/c++/9/streambuf ****       template<typename _CharT2, typename _Traits2>
 170:/usr/include/c++/9/streambuf ****         friend basic_istream<_CharT2, _Traits2>&
 171:/usr/include/c++/9/streambuf ****         operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);
 172:/usr/include/c++/9/streambuf **** 
 173:/usr/include/c++/9/streambuf ****       template<typename _CharT2, typename _Traits2, typename _Alloc>
 174:/usr/include/c++/9/streambuf ****         friend basic_istream<_CharT2, _Traits2>&
 175:/usr/include/c++/9/streambuf ****         operator>>(basic_istream<_CharT2, _Traits2>&,
 176:/usr/include/c++/9/streambuf **** 		   basic_string<_CharT2, _Traits2, _Alloc>&);
 177:/usr/include/c++/9/streambuf **** 
 178:/usr/include/c++/9/streambuf ****       template<typename _CharT2, typename _Traits2, typename _Alloc>
 179:/usr/include/c++/9/streambuf ****         friend basic_istream<_CharT2, _Traits2>&
 180:/usr/include/c++/9/streambuf ****         getline(basic_istream<_CharT2, _Traits2>&,
 181:/usr/include/c++/9/streambuf **** 		basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);
 182:/usr/include/c++/9/streambuf **** 
 183:/usr/include/c++/9/streambuf ****     protected:
 184:/usr/include/c++/9/streambuf ****       /*
 185:/usr/include/c++/9/streambuf ****        *  This is based on _IO_FILE, just reordered to be more consistent,
 186:/usr/include/c++/9/streambuf ****        *  and is intended to be the most minimal abstraction for an
 187:/usr/include/c++/9/streambuf ****        *  internal buffer.
 188:/usr/include/c++/9/streambuf ****        *  -  get == input == read
 189:/usr/include/c++/9/streambuf ****        *  -  put == output == write
 190:/usr/include/c++/9/streambuf ****       */
 191:/usr/include/c++/9/streambuf ****       char_type* 		_M_in_beg;     ///< Start of get area.
 192:/usr/include/c++/9/streambuf ****       char_type* 		_M_in_cur;     ///< Current read area.
 193:/usr/include/c++/9/streambuf ****       char_type* 		_M_in_end;     ///< End of get area.
 194:/usr/include/c++/9/streambuf ****       char_type* 		_M_out_beg;    ///< Start of put area.
 195:/usr/include/c++/9/streambuf ****       char_type* 		_M_out_cur;    ///< Current put area.
 196:/usr/include/c++/9/streambuf ****       char_type* 		_M_out_end;    ///< End of put area.
 197:/usr/include/c++/9/streambuf **** 
 198:/usr/include/c++/9/streambuf ****       /// Current locale setting.
 199:/usr/include/c++/9/streambuf ****       locale 			_M_buf_locale;
 200:/usr/include/c++/9/streambuf **** 
 201:/usr/include/c++/9/streambuf ****   public:
 202:/usr/include/c++/9/streambuf ****       /// Destructor deallocates no buffer space.
 203:/usr/include/c++/9/streambuf ****       virtual
 204:/usr/include/c++/9/streambuf ****       ~basic_streambuf()
 3266              		.loc 13 204 7 is_stmt 1 view .LVU684
 3267              	.LBB5044:
 3268              	# /usr/include/c++/9/streambuf:205:       { }
 205:/usr/include/c++/9/streambuf ****       { }
 3269              		.loc 13 205 9 is_stmt 0 view .LVU685
 3270 0024 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp93
 3270      000000
 3271 002b 488D7B38 		leaq	56(%rbx), %rdi	#, tmp90
 3272 002f 488903   		movq	%rax, (%rbx)	# tmp93, MEM[(struct basic_streambuf *)this_2(D)]._vptr.basic_streambuf
 3273              	.LBE5044:
 3274              	.LBE5043:
 3275              	.LBE5047:
 3276              	# /usr/include/c++/9/sstream:65:     class basic_stringbuf : public basic_streambuf<_CharT, _Traits
 3277              		.loc 12 65 11 view .LVU686
 3278 0032 5B       		popq	%rbx	#
 3279              		.cfi_def_cfa_offset 8
 3280              	.LVL172:
 3281              	.LBB5048:
 3282              	.LBB5046:
 3283              	.LBB5045:
 3284              	# /usr/include/c++/9/streambuf:205:       { }
 3285              		.loc 13 205 9 view .LVU687
 3286 0033 E9000000 		jmp	_ZNSt6localeD1Ev@PLT	#
 3286      00
 3287              	.LVL173:
 3288              		.loc 13 205 9 view .LVU688
 3289              	.LBE5045:
 3290              	.LBE5046:
 3291              	.LBE5048:
 3292              		.cfi_endproc
 3293              	.LFE12472:
 3295              		.weak	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev
 3296              		.set	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev,_ZNSt7__cxx1115basic_stringbufIc
 3297              		.section	.text._ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev,"axG",@progbits,_ZNSt7
 3298              		.align 2
 3299              		.p2align 4
 3300              		.weak	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev
 3302              	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev:
 3303              	.LVL174:
 3304              	.LFB12474:
 3305              		.loc 12 65 11 is_stmt 1 view -0
 3306              		.cfi_startproc
 3307              		.loc 12 65 11 is_stmt 0 view .LVU690
 3308 0000 F30F1EFA 		endbr64	
 3309              	.LVL175:
 3310              	.LBB5070:
 3311              	.LBI5070:
 3312              		.loc 12 65 11 is_stmt 1 view .LVU691
 3313              	.LBB5071:
 3314 0004 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp92
 3314      000000
 3315              	.LBE5071:
 3316              	.LBE5070:
 3317 000b 55       		pushq	%rbp	#
 3318              		.cfi_def_cfa_offset 16
 3319              		.cfi_offset 6, -16
 3320              	# /usr/include/c++/9/sstream:65:     class basic_stringbuf : public basic_streambuf<_CharT, _Traits
 3321              		.loc 12 65 11 is_stmt 0 view .LVU692
 3322 000c 4889FD   		movq	%rdi, %rbp	# tmp91, this
 3323              	.LBB5090:
 3324              	.LBB5089:
 3325 000f 488907   		movq	%rax, (%rdi)	# tmp92, this_2(D)->D.48380._vptr.basic_streambuf
 3326              	.LVL176:
 3327              	.LBB5072:
 3328              	.LBI5072:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 3329              		.loc 2 657 7 is_stmt 1 view .LVU693
 3330              	.LBB5073:
 3331              	.LBI5073:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 3332              		.loc 2 229 7 view .LVU694
 3333              	.LBB5074:
 3334              	.LBB5075:
 3335              	.LBI5075:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 3336              		.loc 2 221 7 view .LVU695
 3337              	.LBB5076:
 3338              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 3339              		.loc 2 222 26 is_stmt 0 view .LVU696
 3340 0012 488B7F48 		movq	72(%rdi), %rdi	# MEM[(char * *)this_2(D) + 72B], _5
 3341              	.LVL177:
 3342              	.LBB5077:
 3343              	.LBI5077:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 3344              		.loc 2 200 7 is_stmt 1 view .LVU697
 3345              	.LBB5078:
 3346              	# /usr/include/c++/9/bits/basic_string.h:203: 	return std::pointer_traits<const_pointer>::pointer_t
 203:/usr/include/c++/9/bits/basic_string.h **** #else
 3347              		.loc 2 203 57 is_stmt 0 view .LVU698
 3348 0016 488D4558 		leaq	88(%rbp), %rax	#, tmp88
 3349              	.LBE5078:
 3350              	.LBE5077:
 3351              	.LBE5076:
 3352              	.LBE5075:
 3353              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3354              		.loc 2 231 2 view .LVU699
 3355 001a 4839C7   		cmpq	%rax, %rdi	# tmp88, _5
 3356 001d 7405     		je	.L108	#,
 3357              	.LVL178:
 3358              	.LBB5079:
 3359              	.LBI5079:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 3360              		.loc 2 236 7 is_stmt 1 view .LVU700
 3361              	.LBB5080:
 3362              	.LBB5081:
 3363              	.LBI5081:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 3364              		.loc 3 469 7 view .LVU701
 3365              	.LBB5082:
 3366              	.LBI5082:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 3367              		.loc 4 119 7 view .LVU702
 3368              	.LBB5083:
 3369              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 3370              		.loc 4 128 19 is_stmt 0 view .LVU703
 3371 001f E8000000 		call	_ZdlPv@PLT	#
 3371      00
 3372              	.LVL179:
 3373              	.L108:
 3374              		.loc 4 128 19 view .LVU704
 3375              	.LBE5083:
 3376              	.LBE5082:
 3377              	.LBE5081:
 3378              	.LBE5080:
 3379              	.LBE5079:
 3380              	.LBE5074:
 3381              	.LBE5073:
 3382              	.LBB5084:
 3383              	.LBI5084:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 3384              		.loc 2 150 14 is_stmt 1 view .LVU705
 3385              	.LBB5085:
 3386              	.LBI5085:
 3387              		.loc 5 153 7 view .LVU706
 3388              	.LBB5086:
 3389              	.LBI5086:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3390              		.loc 4 89 7 view .LVU707
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3391              		.loc 4 89 7 is_stmt 0 view .LVU708
 3392              	.LBE5086:
 3393              	.LBE5085:
 3394              	.LBE5084:
 3395              	.LBE5072:
 3396              	.LBB5087:
 3397              	.LBI5087:
 204:/usr/include/c++/9/streambuf ****       { }
 3398              		.loc 13 204 7 is_stmt 1 view .LVU709
 3399              	.LBB5088:
 3400              	# /usr/include/c++/9/streambuf:205:       { }
 3401              		.loc 13 205 9 is_stmt 0 view .LVU710
 3402 0024 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp93
 3402      000000
 3403 002b 488D7D38 		leaq	56(%rbp), %rdi	#, tmp90
 3404 002f 48894500 		movq	%rax, 0(%rbp)	# tmp93, MEM[(struct basic_streambuf *)this_2(D)]._vptr.basic_streambuf
 3405 0033 E8000000 		call	_ZNSt6localeD1Ev@PLT	#
 3405      00
 3406              	.LVL180:
 3407              		.loc 13 205 9 view .LVU711
 3408              	.LBE5088:
 3409              	.LBE5087:
 3410              	.LBE5089:
 3411              	.LBE5090:
 3412              	# /usr/include/c++/9/sstream:65:     class basic_stringbuf : public basic_streambuf<_CharT, _Traits
 3413              		.loc 12 65 11 view .LVU712
 3414 0038 4889EF   		movq	%rbp, %rdi	# this,
 3415 003b BE680000 		movl	$104, %esi	#,
 3415      00
 3416 0040 5D       		popq	%rbp	#
 3417              		.cfi_def_cfa_offset 8
 3418              	.LVL181:
 3419              		.loc 12 65 11 view .LVU713
 3420 0041 E9000000 		jmp	_ZdlPvm@PLT	#
 3420      00
 3421              	.LVL182:
 3422              		.loc 12 65 11 view .LVU714
 3423              		.cfi_endproc
 3424              	.LFE12474:
 3426              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_,"axG",@progbits,_ZN3c10
 3427              		.p2align 4
 3428              		.weak	_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_
 3430              	_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_:
 3431              	.LVL183:
 3432              	.LFB11993:
 3433              		.file 14 "/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h"
   1:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #ifndef C10_UTIL_STRINGUTIL_H_
   2:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #define C10_UTIL_STRINGUTIL_H_
   3:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
   4:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #include <c10/macros/Macros.h>
   5:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #include <c10/util/string_utils.h>
   6:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
   7:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #include <cstddef>
   8:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #include <ostream>
   9:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #include <sstream>
  10:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #include <string>
  11:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** #include <vector>
  12:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  13:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** namespace c10 {
  14:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  15:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** namespace detail {
  16:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  17:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** // Obtains the base name from a full path.
  18:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** C10_API std::string StripBasename(const std::string& full_path);
  19:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  20:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** C10_API std::string ExcludeFileExtension(const std::string& full_path);
  21:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  22:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template <typename T>
  23:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** struct CanonicalizeStrTypes {
  24:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   using type = const T&;
  25:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
  26:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  27:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template <size_t N>
  28:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** struct CanonicalizeStrTypes<char[N]> {
  29:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   using type = const char *;
  30:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
  31:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  32:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  33:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** inline std::ostream& _str(std::ostream& ss) {
  34:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return ss;
  35:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
  36:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  37:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template <typename T>
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** inline std::ostream& _str(std::ostream& ss, const T& t) {
  39:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
  40:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return ss;
  41:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
  42:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  43:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template <typename T, typename... Args>
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** inline std::ostream& _str(std::ostream& ss, const T& t, const Args&... args) {
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
  46:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
  47:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  48:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template<typename... Args>
  49:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** struct _str_wrapper final {
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   static std::string call(const Args&... args) {
 3434              		.loc 14 50 22 is_stmt 1 view -0
 3435              		.cfi_startproc
 3436              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3437              		.cfi_lsda 0x1b,.LLSDA11993
 3438              		.loc 14 50 22 is_stmt 0 view .LVU716
 3439 0000 F30F1EFA 		endbr64	
 3440 0004 55       		pushq	%rbp	#
 3441              		.cfi_def_cfa_offset 16
 3442              		.cfi_offset 6, -16
 3443 0005 4889E5   		movq	%rsp, %rbp	#,
 3444              		.cfi_def_cfa_register 6
 3445 0008 4157     		pushq	%r15	#
 3446 000a 4156     		pushq	%r14	#
 3447 000c 4155     		pushq	%r13	#
 3448 000e 4154     		pushq	%r12	#
 3449              		.cfi_offset 15, -24
 3450              		.cfi_offset 14, -32
 3451              		.cfi_offset 13, -40
 3452              		.cfi_offset 12, -48
 3453 0010 4989FC   		movq	%rdi, %r12	# tmp201, <retval>
 3454 0013 53       		pushq	%rbx	#
 3455              		.cfi_offset 3, -56
 3456 0014 4889D3   		movq	%rdx, %rbx	# tmp203, args#1
 3457 0017 4883E4E0 		andq	$-32, %rsp	#,
 3458 001b 4881ECA0 		subq	$416, %rsp	#,
 3458      010000
 3459              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
 3460              		.loc 14 50 22 view .LVU717
 3461 0022 48897424 		movq	%rsi, 24(%rsp)	# tmp202, %sfp
 3461      18
 3462              	.LBB5250:
 3463              	.LBB5251:
 3464              	.LBB5252:
 3465              	.LBB5253:
 3466              	.LBB5254:
 3467              	.LBB5255:
 3468              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 3469              		.file 15 "/usr/include/c++/9/bits/basic_ios.h"
   1:/usr/include/c++/9/bits/basic_ios.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/9/bits/basic_ios.h **** 
   3:/usr/include/c++/9/bits/basic_ios.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/basic_ios.h **** //
   5:/usr/include/c++/9/bits/basic_ios.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/basic_ios.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/basic_ios.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/basic_ios.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/basic_ios.h **** // any later version.
  10:/usr/include/c++/9/bits/basic_ios.h **** 
  11:/usr/include/c++/9/bits/basic_ios.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/basic_ios.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/basic_ios.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/basic_ios.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/basic_ios.h **** 
  16:/usr/include/c++/9/bits/basic_ios.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/basic_ios.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/basic_ios.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/basic_ios.h **** 
  20:/usr/include/c++/9/bits/basic_ios.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/basic_ios.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/basic_ios.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/basic_ios.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/basic_ios.h **** 
  25:/usr/include/c++/9/bits/basic_ios.h **** /** @file bits/basic_ios.h
  26:/usr/include/c++/9/bits/basic_ios.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/basic_ios.h ****  *  Do not attempt to use it directly. @headername{ios}
  28:/usr/include/c++/9/bits/basic_ios.h ****  */
  29:/usr/include/c++/9/bits/basic_ios.h **** 
  30:/usr/include/c++/9/bits/basic_ios.h **** #ifndef _BASIC_IOS_H
  31:/usr/include/c++/9/bits/basic_ios.h **** #define _BASIC_IOS_H 1
  32:/usr/include/c++/9/bits/basic_ios.h **** 
  33:/usr/include/c++/9/bits/basic_ios.h **** #pragma GCC system_header
  34:/usr/include/c++/9/bits/basic_ios.h **** 
  35:/usr/include/c++/9/bits/basic_ios.h **** #include <bits/localefwd.h>
  36:/usr/include/c++/9/bits/basic_ios.h **** #include <bits/locale_classes.h>
  37:/usr/include/c++/9/bits/basic_ios.h **** #include <bits/locale_facets.h>
  38:/usr/include/c++/9/bits/basic_ios.h **** #include <bits/streambuf_iterator.h>
  39:/usr/include/c++/9/bits/basic_ios.h **** #include <bits/move.h>
  40:/usr/include/c++/9/bits/basic_ios.h **** 
  41:/usr/include/c++/9/bits/basic_ios.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/9/bits/basic_ios.h **** {
  43:/usr/include/c++/9/bits/basic_ios.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/9/bits/basic_ios.h **** 
  45:/usr/include/c++/9/bits/basic_ios.h ****   template<typename _Facet>
  46:/usr/include/c++/9/bits/basic_ios.h ****     inline const _Facet&
  47:/usr/include/c++/9/bits/basic_ios.h ****     __check_facet(const _Facet* __f)
  48:/usr/include/c++/9/bits/basic_ios.h ****     {
  49:/usr/include/c++/9/bits/basic_ios.h ****       if (!__f)
  50:/usr/include/c++/9/bits/basic_ios.h **** 	__throw_bad_cast();
  51:/usr/include/c++/9/bits/basic_ios.h ****       return *__f;
  52:/usr/include/c++/9/bits/basic_ios.h ****     }
  53:/usr/include/c++/9/bits/basic_ios.h **** 
  54:/usr/include/c++/9/bits/basic_ios.h ****   /**
  55:/usr/include/c++/9/bits/basic_ios.h ****    *  @brief Template class basic_ios, virtual base class for all
  56:/usr/include/c++/9/bits/basic_ios.h ****    *  stream classes. 
  57:/usr/include/c++/9/bits/basic_ios.h ****    *  @ingroup io
  58:/usr/include/c++/9/bits/basic_ios.h ****    *
  59:/usr/include/c++/9/bits/basic_ios.h ****    *  @tparam _CharT  Type of character stream.
  60:/usr/include/c++/9/bits/basic_ios.h ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/usr/include/c++/9/bits/basic_ios.h ****    *                   char_traits<_CharT>.
  62:/usr/include/c++/9/bits/basic_ios.h ****    *
  63:/usr/include/c++/9/bits/basic_ios.h ****    *  Most of the member functions called dispatched on stream objects
  64:/usr/include/c++/9/bits/basic_ios.h ****    *  (e.g., @c std::cout.foo(bar);) are consolidated in this class.
  65:/usr/include/c++/9/bits/basic_ios.h ****   */
  66:/usr/include/c++/9/bits/basic_ios.h ****   template<typename _CharT, typename _Traits>
  67:/usr/include/c++/9/bits/basic_ios.h ****     class basic_ios : public ios_base
  68:/usr/include/c++/9/bits/basic_ios.h ****     {
  69:/usr/include/c++/9/bits/basic_ios.h ****     public:
  70:/usr/include/c++/9/bits/basic_ios.h ****       //@{
  71:/usr/include/c++/9/bits/basic_ios.h ****       /**
  72:/usr/include/c++/9/bits/basic_ios.h ****        *  These are standard types.  They permit a standardized way of
  73:/usr/include/c++/9/bits/basic_ios.h ****        *  referring to names of (or names dependent on) the template
  74:/usr/include/c++/9/bits/basic_ios.h ****        *  parameters, which are specific to the implementation.
  75:/usr/include/c++/9/bits/basic_ios.h ****       */
  76:/usr/include/c++/9/bits/basic_ios.h ****       typedef _CharT                                 char_type;
  77:/usr/include/c++/9/bits/basic_ios.h ****       typedef typename _Traits::int_type             int_type;
  78:/usr/include/c++/9/bits/basic_ios.h ****       typedef typename _Traits::pos_type             pos_type;
  79:/usr/include/c++/9/bits/basic_ios.h ****       typedef typename _Traits::off_type             off_type;
  80:/usr/include/c++/9/bits/basic_ios.h ****       typedef _Traits                                traits_type;
  81:/usr/include/c++/9/bits/basic_ios.h ****       //@}
  82:/usr/include/c++/9/bits/basic_ios.h **** 
  83:/usr/include/c++/9/bits/basic_ios.h ****       //@{
  84:/usr/include/c++/9/bits/basic_ios.h ****       /**
  85:/usr/include/c++/9/bits/basic_ios.h ****        *  These are non-standard types.
  86:/usr/include/c++/9/bits/basic_ios.h ****       */
  87:/usr/include/c++/9/bits/basic_ios.h ****       typedef ctype<_CharT>                          __ctype_type;
  88:/usr/include/c++/9/bits/basic_ios.h ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  89:/usr/include/c++/9/bits/basic_ios.h **** 						     __num_put_type;
  90:/usr/include/c++/9/bits/basic_ios.h ****       typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
  91:/usr/include/c++/9/bits/basic_ios.h **** 						     __num_get_type;
  92:/usr/include/c++/9/bits/basic_ios.h ****       //@}
  93:/usr/include/c++/9/bits/basic_ios.h **** 
  94:/usr/include/c++/9/bits/basic_ios.h ****       // Data members:
  95:/usr/include/c++/9/bits/basic_ios.h ****     protected:
  96:/usr/include/c++/9/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*                _M_tie;
  97:/usr/include/c++/9/bits/basic_ios.h ****       mutable char_type                              _M_fill;
  98:/usr/include/c++/9/bits/basic_ios.h ****       mutable bool                                   _M_fill_init;
  99:/usr/include/c++/9/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*              _M_streambuf;
 100:/usr/include/c++/9/bits/basic_ios.h **** 
 101:/usr/include/c++/9/bits/basic_ios.h ****       // Cached use_facet<ctype>, which is based on the current locale info.
 102:/usr/include/c++/9/bits/basic_ios.h ****       const __ctype_type*                            _M_ctype;
 103:/usr/include/c++/9/bits/basic_ios.h ****       // For ostream.
 104:/usr/include/c++/9/bits/basic_ios.h ****       const __num_put_type*                          _M_num_put;
 105:/usr/include/c++/9/bits/basic_ios.h ****       // For istream.
 106:/usr/include/c++/9/bits/basic_ios.h ****       const __num_get_type*                          _M_num_get;
 107:/usr/include/c++/9/bits/basic_ios.h **** 
 108:/usr/include/c++/9/bits/basic_ios.h ****     public:
 109:/usr/include/c++/9/bits/basic_ios.h ****       //@{
 110:/usr/include/c++/9/bits/basic_ios.h ****       /**
 111:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  The quick-and-easy status check.
 112:/usr/include/c++/9/bits/basic_ios.h ****        *
 113:/usr/include/c++/9/bits/basic_ios.h ****        *  This allows you to write constructs such as
 114:/usr/include/c++/9/bits/basic_ios.h ****        *  <code>if (!a_stream) ...</code> and <code>while (a_stream) ...</code>
 115:/usr/include/c++/9/bits/basic_ios.h ****       */
 116:/usr/include/c++/9/bits/basic_ios.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/9/bits/basic_ios.h ****       explicit operator bool() const
 118:/usr/include/c++/9/bits/basic_ios.h ****       { return !this->fail(); }
 119:/usr/include/c++/9/bits/basic_ios.h **** #else
 120:/usr/include/c++/9/bits/basic_ios.h ****       operator void*() const
 121:/usr/include/c++/9/bits/basic_ios.h ****       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }
 122:/usr/include/c++/9/bits/basic_ios.h **** #endif
 123:/usr/include/c++/9/bits/basic_ios.h **** 
 124:/usr/include/c++/9/bits/basic_ios.h ****       bool
 125:/usr/include/c++/9/bits/basic_ios.h ****       operator!() const
 126:/usr/include/c++/9/bits/basic_ios.h ****       { return this->fail(); }
 127:/usr/include/c++/9/bits/basic_ios.h ****       //@}
 128:/usr/include/c++/9/bits/basic_ios.h **** 
 129:/usr/include/c++/9/bits/basic_ios.h ****       /**
 130:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Returns the error state of the stream buffer.
 131:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  A bit pattern (well, isn't everything?)
 132:/usr/include/c++/9/bits/basic_ios.h ****        *
 133:/usr/include/c++/9/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 134:/usr/include/c++/9/bits/basic_ios.h ****        *  users will call one of the interpreting wrappers, e.g., good().
 135:/usr/include/c++/9/bits/basic_ios.h ****       */
 136:/usr/include/c++/9/bits/basic_ios.h ****       iostate
 137:/usr/include/c++/9/bits/basic_ios.h ****       rdstate() const
 138:/usr/include/c++/9/bits/basic_ios.h ****       { return _M_streambuf_state; }
 139:/usr/include/c++/9/bits/basic_ios.h **** 
 140:/usr/include/c++/9/bits/basic_ios.h ****       /**
 141:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  [Re]sets the error state.
 142:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __state  The new state flag(s) to set.
 143:/usr/include/c++/9/bits/basic_ios.h ****        *
 144:/usr/include/c++/9/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 145:/usr/include/c++/9/bits/basic_ios.h ****        *  users will not need to pass an argument.
 146:/usr/include/c++/9/bits/basic_ios.h ****       */
 147:/usr/include/c++/9/bits/basic_ios.h ****       void
 148:/usr/include/c++/9/bits/basic_ios.h ****       clear(iostate __state = goodbit);
 149:/usr/include/c++/9/bits/basic_ios.h **** 
 150:/usr/include/c++/9/bits/basic_ios.h ****       /**
 151:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Sets additional flags in the error state.
 152:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __state  The additional state flag(s) to set.
 153:/usr/include/c++/9/bits/basic_ios.h ****        *
 154:/usr/include/c++/9/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.
 155:/usr/include/c++/9/bits/basic_ios.h ****       */
 156:/usr/include/c++/9/bits/basic_ios.h ****       void
 157:/usr/include/c++/9/bits/basic_ios.h ****       setstate(iostate __state)
 158:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 159:/usr/include/c++/9/bits/basic_ios.h **** 
 160:/usr/include/c++/9/bits/basic_ios.h ****       // Flip the internal state on for the proper state bits, then
 161:/usr/include/c++/9/bits/basic_ios.h ****       // rethrows the propagated exception if bit also set in
 162:/usr/include/c++/9/bits/basic_ios.h ****       // exceptions().
 163:/usr/include/c++/9/bits/basic_ios.h ****       void
 164:/usr/include/c++/9/bits/basic_ios.h ****       _M_setstate(iostate __state)
 165:/usr/include/c++/9/bits/basic_ios.h ****       {
 166:/usr/include/c++/9/bits/basic_ios.h **** 	// 27.6.1.2.1 Common requirements.
 167:/usr/include/c++/9/bits/basic_ios.h **** 	// Turn this on without causing an ios::failure to be thrown.
 168:/usr/include/c++/9/bits/basic_ios.h **** 	_M_streambuf_state |= __state;
 169:/usr/include/c++/9/bits/basic_ios.h **** 	if (this->exceptions() & __state)
 170:/usr/include/c++/9/bits/basic_ios.h **** 	  __throw_exception_again;
 171:/usr/include/c++/9/bits/basic_ios.h ****       }
 172:/usr/include/c++/9/bits/basic_ios.h **** 
 173:/usr/include/c++/9/bits/basic_ios.h ****       /**
 174:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Fast error checking.
 175:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  True if no error flags are set.
 176:/usr/include/c++/9/bits/basic_ios.h ****        *
 177:/usr/include/c++/9/bits/basic_ios.h ****        *  A wrapper around rdstate.
 178:/usr/include/c++/9/bits/basic_ios.h ****       */
 179:/usr/include/c++/9/bits/basic_ios.h ****       bool
 180:/usr/include/c++/9/bits/basic_ios.h ****       good() const
 181:/usr/include/c++/9/bits/basic_ios.h ****       { return this->rdstate() == 0; }
 182:/usr/include/c++/9/bits/basic_ios.h **** 
 183:/usr/include/c++/9/bits/basic_ios.h ****       /**
 184:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Fast error checking.
 185:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  True if the eofbit is set.
 186:/usr/include/c++/9/bits/basic_ios.h ****        *
 187:/usr/include/c++/9/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 188:/usr/include/c++/9/bits/basic_ios.h ****       */
 189:/usr/include/c++/9/bits/basic_ios.h ****       bool
 190:/usr/include/c++/9/bits/basic_ios.h ****       eof() const
 191:/usr/include/c++/9/bits/basic_ios.h ****       { return (this->rdstate() & eofbit) != 0; }
 192:/usr/include/c++/9/bits/basic_ios.h **** 
 193:/usr/include/c++/9/bits/basic_ios.h ****       /**
 194:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Fast error checking.
 195:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  True if either the badbit or the failbit is set.
 196:/usr/include/c++/9/bits/basic_ios.h ****        *
 197:/usr/include/c++/9/bits/basic_ios.h ****        *  Checking the badbit in fail() is historical practice.
 198:/usr/include/c++/9/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 199:/usr/include/c++/9/bits/basic_ios.h ****       */
 200:/usr/include/c++/9/bits/basic_ios.h ****       bool
 201:/usr/include/c++/9/bits/basic_ios.h ****       fail() const
 202:/usr/include/c++/9/bits/basic_ios.h ****       { return (this->rdstate() & (badbit | failbit)) != 0; }
 203:/usr/include/c++/9/bits/basic_ios.h **** 
 204:/usr/include/c++/9/bits/basic_ios.h ****       /**
 205:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Fast error checking.
 206:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  True if the badbit is set.
 207:/usr/include/c++/9/bits/basic_ios.h ****        *
 208:/usr/include/c++/9/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 209:/usr/include/c++/9/bits/basic_ios.h ****       */
 210:/usr/include/c++/9/bits/basic_ios.h ****       bool
 211:/usr/include/c++/9/bits/basic_ios.h ****       bad() const
 212:/usr/include/c++/9/bits/basic_ios.h ****       { return (this->rdstate() & badbit) != 0; }
 213:/usr/include/c++/9/bits/basic_ios.h **** 
 214:/usr/include/c++/9/bits/basic_ios.h ****       /**
 215:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 216:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The current exceptions mask.
 217:/usr/include/c++/9/bits/basic_ios.h ****        *
 218:/usr/include/c++/9/bits/basic_ios.h ****        *  This changes nothing in the stream.  See the one-argument version
 219:/usr/include/c++/9/bits/basic_ios.h ****        *  of exceptions(iostate) for the meaning of the return value.
 220:/usr/include/c++/9/bits/basic_ios.h ****       */
 221:/usr/include/c++/9/bits/basic_ios.h ****       iostate
 222:/usr/include/c++/9/bits/basic_ios.h ****       exceptions() const
 223:/usr/include/c++/9/bits/basic_ios.h ****       { return _M_exception; }
 224:/usr/include/c++/9/bits/basic_ios.h **** 
 225:/usr/include/c++/9/bits/basic_ios.h ****       /**
 226:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 227:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __except  The new exceptions mask.
 228:/usr/include/c++/9/bits/basic_ios.h ****        *
 229:/usr/include/c++/9/bits/basic_ios.h ****        *  By default, error flags are set silently.  You can set an
 230:/usr/include/c++/9/bits/basic_ios.h ****        *  exceptions mask for each stream; if a bit in the mask becomes set
 231:/usr/include/c++/9/bits/basic_ios.h ****        *  in the error flags, then an exception of type
 232:/usr/include/c++/9/bits/basic_ios.h ****        *  std::ios_base::failure is thrown.
 233:/usr/include/c++/9/bits/basic_ios.h ****        *
 234:/usr/include/c++/9/bits/basic_ios.h ****        *  If the error flag is already set when the exceptions mask is
 235:/usr/include/c++/9/bits/basic_ios.h ****        *  added, the exception is immediately thrown.  Try running the
 236:/usr/include/c++/9/bits/basic_ios.h ****        *  following under GCC 3.1 or later:
 237:/usr/include/c++/9/bits/basic_ios.h ****        *  @code
 238:/usr/include/c++/9/bits/basic_ios.h ****        *  #include <iostream>
 239:/usr/include/c++/9/bits/basic_ios.h ****        *  #include <fstream>
 240:/usr/include/c++/9/bits/basic_ios.h ****        *  #include <exception>
 241:/usr/include/c++/9/bits/basic_ios.h ****        *
 242:/usr/include/c++/9/bits/basic_ios.h ****        *  int main()
 243:/usr/include/c++/9/bits/basic_ios.h ****        *  {
 244:/usr/include/c++/9/bits/basic_ios.h ****        *      std::set_terminate (__gnu_cxx::__verbose_terminate_handler);
 245:/usr/include/c++/9/bits/basic_ios.h ****        *
 246:/usr/include/c++/9/bits/basic_ios.h ****        *      std::ifstream f ("/etc/motd");
 247:/usr/include/c++/9/bits/basic_ios.h ****        *
 248:/usr/include/c++/9/bits/basic_ios.h ****        *      std::cerr << "Setting badbit\n";
 249:/usr/include/c++/9/bits/basic_ios.h ****        *      f.setstate (std::ios_base::badbit);
 250:/usr/include/c++/9/bits/basic_ios.h ****        *
 251:/usr/include/c++/9/bits/basic_ios.h ****        *      std::cerr << "Setting exception mask\n";
 252:/usr/include/c++/9/bits/basic_ios.h ****        *      f.exceptions (std::ios_base::badbit);
 253:/usr/include/c++/9/bits/basic_ios.h ****        *  }
 254:/usr/include/c++/9/bits/basic_ios.h ****        *  @endcode
 255:/usr/include/c++/9/bits/basic_ios.h ****       */
 256:/usr/include/c++/9/bits/basic_ios.h ****       void
 257:/usr/include/c++/9/bits/basic_ios.h ****       exceptions(iostate __except)
 258:/usr/include/c++/9/bits/basic_ios.h ****       {
 259:/usr/include/c++/9/bits/basic_ios.h ****         _M_exception = __except;
 260:/usr/include/c++/9/bits/basic_ios.h ****         this->clear(_M_streambuf_state);
 261:/usr/include/c++/9/bits/basic_ios.h ****       }
 262:/usr/include/c++/9/bits/basic_ios.h **** 
 263:/usr/include/c++/9/bits/basic_ios.h ****       // Constructor/destructor:
 264:/usr/include/c++/9/bits/basic_ios.h ****       /**
 265:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Constructor performs initialization.
 266:/usr/include/c++/9/bits/basic_ios.h ****        *
 267:/usr/include/c++/9/bits/basic_ios.h ****        *  The parameter is passed by derived streams.
 268:/usr/include/c++/9/bits/basic_ios.h ****       */
 269:/usr/include/c++/9/bits/basic_ios.h ****       explicit
 270:/usr/include/c++/9/bits/basic_ios.h ****       basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
 271:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 272:/usr/include/c++/9/bits/basic_ios.h **** 	_M_ctype(0), _M_num_put(0), _M_num_get(0)
 273:/usr/include/c++/9/bits/basic_ios.h ****       { this->init(__sb); }
 274:/usr/include/c++/9/bits/basic_ios.h **** 
 275:/usr/include/c++/9/bits/basic_ios.h ****       /**
 276:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Empty.
 277:/usr/include/c++/9/bits/basic_ios.h ****        *
 278:/usr/include/c++/9/bits/basic_ios.h ****        *  The destructor does nothing.  More specifically, it does not
 279:/usr/include/c++/9/bits/basic_ios.h ****        *  destroy the streambuf held by rdbuf().
 280:/usr/include/c++/9/bits/basic_ios.h ****       */
 281:/usr/include/c++/9/bits/basic_ios.h ****       virtual
 282:/usr/include/c++/9/bits/basic_ios.h ****       ~basic_ios() { }
 283:/usr/include/c++/9/bits/basic_ios.h **** 
 284:/usr/include/c++/9/bits/basic_ios.h ****       // Members:
 285:/usr/include/c++/9/bits/basic_ios.h ****       /**
 286:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Fetches the current @e tied stream.
 287:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  A pointer to the tied stream, or NULL if the stream is
 288:/usr/include/c++/9/bits/basic_ios.h ****        *           not tied.
 289:/usr/include/c++/9/bits/basic_ios.h ****        *
 290:/usr/include/c++/9/bits/basic_ios.h ****        *  A stream may be @e tied (or synchronized) to a second output
 291:/usr/include/c++/9/bits/basic_ios.h ****        *  stream.  When this stream performs any I/O, the tied stream is
 292:/usr/include/c++/9/bits/basic_ios.h ****        *  first flushed.  For example, @c std::cin is tied to @c std::cout.
 293:/usr/include/c++/9/bits/basic_ios.h ****       */
 294:/usr/include/c++/9/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 295:/usr/include/c++/9/bits/basic_ios.h ****       tie() const
 296:/usr/include/c++/9/bits/basic_ios.h ****       { return _M_tie; }
 297:/usr/include/c++/9/bits/basic_ios.h **** 
 298:/usr/include/c++/9/bits/basic_ios.h ****       /**
 299:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Ties this stream to an output stream.
 300:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __tiestr  The output stream.
 301:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The previously tied output stream, or NULL if the stream
 302:/usr/include/c++/9/bits/basic_ios.h ****        *           was not tied.
 303:/usr/include/c++/9/bits/basic_ios.h ****        *
 304:/usr/include/c++/9/bits/basic_ios.h ****        *  This sets up a new tie; see tie() for more.
 305:/usr/include/c++/9/bits/basic_ios.h ****       */
 306:/usr/include/c++/9/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 307:/usr/include/c++/9/bits/basic_ios.h ****       tie(basic_ostream<_CharT, _Traits>* __tiestr)
 308:/usr/include/c++/9/bits/basic_ios.h ****       {
 309:/usr/include/c++/9/bits/basic_ios.h ****         basic_ostream<_CharT, _Traits>* __old = _M_tie;
 310:/usr/include/c++/9/bits/basic_ios.h ****         _M_tie = __tiestr;
 311:/usr/include/c++/9/bits/basic_ios.h ****         return __old;
 312:/usr/include/c++/9/bits/basic_ios.h ****       }
 313:/usr/include/c++/9/bits/basic_ios.h **** 
 314:/usr/include/c++/9/bits/basic_ios.h ****       /**
 315:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Accessing the underlying buffer.
 316:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The current stream buffer.
 317:/usr/include/c++/9/bits/basic_ios.h ****        *
 318:/usr/include/c++/9/bits/basic_ios.h ****        *  This does not change the state of the stream.
 319:/usr/include/c++/9/bits/basic_ios.h ****       */
 320:/usr/include/c++/9/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 321:/usr/include/c++/9/bits/basic_ios.h ****       rdbuf() const
 322:/usr/include/c++/9/bits/basic_ios.h ****       { return _M_streambuf; }
 323:/usr/include/c++/9/bits/basic_ios.h **** 
 324:/usr/include/c++/9/bits/basic_ios.h ****       /**
 325:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Changing the underlying buffer.
 326:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __sb  The new stream buffer.
 327:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The previous stream buffer.
 328:/usr/include/c++/9/bits/basic_ios.h ****        *
 329:/usr/include/c++/9/bits/basic_ios.h ****        *  Associates a new buffer with the current stream, and clears the
 330:/usr/include/c++/9/bits/basic_ios.h ****        *  error state.
 331:/usr/include/c++/9/bits/basic_ios.h ****        *
 332:/usr/include/c++/9/bits/basic_ios.h ****        *  Due to historical accidents which the LWG refuses to correct, the
 333:/usr/include/c++/9/bits/basic_ios.h ****        *  I/O library suffers from a design error:  this function is hidden
 334:/usr/include/c++/9/bits/basic_ios.h ****        *  in derived classes by overrides of the zero-argument @c rdbuf(),
 335:/usr/include/c++/9/bits/basic_ios.h ****        *  which is non-virtual for hysterical raisins.  As a result, you
 336:/usr/include/c++/9/bits/basic_ios.h ****        *  must use explicit qualifications to access this function via any
 337:/usr/include/c++/9/bits/basic_ios.h ****        *  derived class.  For example:
 338:/usr/include/c++/9/bits/basic_ios.h ****        *
 339:/usr/include/c++/9/bits/basic_ios.h ****        *  @code
 340:/usr/include/c++/9/bits/basic_ios.h ****        *  std::fstream     foo;         // or some other derived type
 341:/usr/include/c++/9/bits/basic_ios.h ****        *  std::streambuf*  p = .....;
 342:/usr/include/c++/9/bits/basic_ios.h ****        *
 343:/usr/include/c++/9/bits/basic_ios.h ****        *  foo.ios::rdbuf(p);            // ios == basic_ios<char>
 344:/usr/include/c++/9/bits/basic_ios.h ****        *  @endcode
 345:/usr/include/c++/9/bits/basic_ios.h ****       */
 346:/usr/include/c++/9/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 347:/usr/include/c++/9/bits/basic_ios.h ****       rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
 348:/usr/include/c++/9/bits/basic_ios.h **** 
 349:/usr/include/c++/9/bits/basic_ios.h ****       /**
 350:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Copies fields of __rhs into this.
 351:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __rhs  The source values for the copies.
 352:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  Reference to this object.
 353:/usr/include/c++/9/bits/basic_ios.h ****        *
 354:/usr/include/c++/9/bits/basic_ios.h ****        *  All fields of __rhs are copied into this object except that rdbuf()
 355:/usr/include/c++/9/bits/basic_ios.h ****        *  and rdstate() remain unchanged.  All values in the pword and iword
 356:/usr/include/c++/9/bits/basic_ios.h ****        *  arrays are copied.  Before copying, each callback is invoked with
 357:/usr/include/c++/9/bits/basic_ios.h ****        *  erase_event.  After copying, each (new) callback is invoked with
 358:/usr/include/c++/9/bits/basic_ios.h ****        *  copyfmt_event.  The final step is to copy exceptions().
 359:/usr/include/c++/9/bits/basic_ios.h ****       */
 360:/usr/include/c++/9/bits/basic_ios.h ****       basic_ios&
 361:/usr/include/c++/9/bits/basic_ios.h ****       copyfmt(const basic_ios& __rhs);
 362:/usr/include/c++/9/bits/basic_ios.h **** 
 363:/usr/include/c++/9/bits/basic_ios.h ****       /**
 364:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Retrieves the @a empty character.
 365:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The current fill character.
 366:/usr/include/c++/9/bits/basic_ios.h ****        *
 367:/usr/include/c++/9/bits/basic_ios.h ****        *  It defaults to a space (' ') in the current locale.
 368:/usr/include/c++/9/bits/basic_ios.h ****       */
 369:/usr/include/c++/9/bits/basic_ios.h ****       char_type
 370:/usr/include/c++/9/bits/basic_ios.h ****       fill() const
 371:/usr/include/c++/9/bits/basic_ios.h ****       {
 372:/usr/include/c++/9/bits/basic_ios.h **** 	if (!_M_fill_init)
 373:/usr/include/c++/9/bits/basic_ios.h **** 	  {
 374:/usr/include/c++/9/bits/basic_ios.h **** 	    _M_fill = this->widen(' ');
 375:/usr/include/c++/9/bits/basic_ios.h **** 	    _M_fill_init = true;
 376:/usr/include/c++/9/bits/basic_ios.h **** 	  }
 377:/usr/include/c++/9/bits/basic_ios.h **** 	return _M_fill;
 378:/usr/include/c++/9/bits/basic_ios.h ****       }
 379:/usr/include/c++/9/bits/basic_ios.h **** 
 380:/usr/include/c++/9/bits/basic_ios.h ****       /**
 381:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Sets a new @a empty character.
 382:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __ch  The new character.
 383:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The previous fill character.
 384:/usr/include/c++/9/bits/basic_ios.h ****        *
 385:/usr/include/c++/9/bits/basic_ios.h ****        *  The fill character is used to fill out space when P+ characters
 386:/usr/include/c++/9/bits/basic_ios.h ****        *  have been requested (e.g., via setw), Q characters are actually
 387:/usr/include/c++/9/bits/basic_ios.h ****        *  used, and Q<P.  It defaults to a space (' ') in the current locale.
 388:/usr/include/c++/9/bits/basic_ios.h ****       */
 389:/usr/include/c++/9/bits/basic_ios.h ****       char_type
 390:/usr/include/c++/9/bits/basic_ios.h ****       fill(char_type __ch)
 391:/usr/include/c++/9/bits/basic_ios.h ****       {
 392:/usr/include/c++/9/bits/basic_ios.h **** 	char_type __old = this->fill();
 393:/usr/include/c++/9/bits/basic_ios.h **** 	_M_fill = __ch;
 394:/usr/include/c++/9/bits/basic_ios.h **** 	return __old;
 395:/usr/include/c++/9/bits/basic_ios.h ****       }
 396:/usr/include/c++/9/bits/basic_ios.h **** 
 397:/usr/include/c++/9/bits/basic_ios.h ****       // Locales:
 398:/usr/include/c++/9/bits/basic_ios.h ****       /**
 399:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Moves to a new locale.
 400:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __loc  The new locale.
 401:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The previous locale.
 402:/usr/include/c++/9/bits/basic_ios.h ****        *
 403:/usr/include/c++/9/bits/basic_ios.h ****        *  Calls @c ios_base::imbue(loc), and if a stream buffer is associated
 404:/usr/include/c++/9/bits/basic_ios.h ****        *  with this stream, calls that buffer's @c pubimbue(loc).
 405:/usr/include/c++/9/bits/basic_ios.h ****        *
 406:/usr/include/c++/9/bits/basic_ios.h ****        *  Additional l10n notes are at
 407:/usr/include/c++/9/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 408:/usr/include/c++/9/bits/basic_ios.h ****       */
 409:/usr/include/c++/9/bits/basic_ios.h ****       locale
 410:/usr/include/c++/9/bits/basic_ios.h ****       imbue(const locale& __loc);
 411:/usr/include/c++/9/bits/basic_ios.h **** 
 412:/usr/include/c++/9/bits/basic_ios.h ****       /**
 413:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Squeezes characters.
 414:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __c  The character to narrow.
 415:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __dfault  The character to narrow.
 416:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The narrowed character.
 417:/usr/include/c++/9/bits/basic_ios.h ****        *
 418:/usr/include/c++/9/bits/basic_ios.h ****        *  Maps a character of @c char_type to a character of @c char,
 419:/usr/include/c++/9/bits/basic_ios.h ****        *  if possible.
 420:/usr/include/c++/9/bits/basic_ios.h ****        *
 421:/usr/include/c++/9/bits/basic_ios.h ****        *  Returns the result of
 422:/usr/include/c++/9/bits/basic_ios.h ****        *  @code
 423:/usr/include/c++/9/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).narrow(c,dfault)
 424:/usr/include/c++/9/bits/basic_ios.h ****        *  @endcode
 425:/usr/include/c++/9/bits/basic_ios.h ****        *
 426:/usr/include/c++/9/bits/basic_ios.h ****        *  Additional l10n notes are at
 427:/usr/include/c++/9/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 428:/usr/include/c++/9/bits/basic_ios.h ****       */
 429:/usr/include/c++/9/bits/basic_ios.h ****       char
 430:/usr/include/c++/9/bits/basic_ios.h ****       narrow(char_type __c, char __dfault) const
 431:/usr/include/c++/9/bits/basic_ios.h ****       { return __check_facet(_M_ctype).narrow(__c, __dfault); }
 432:/usr/include/c++/9/bits/basic_ios.h **** 
 433:/usr/include/c++/9/bits/basic_ios.h ****       /**
 434:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Widens characters.
 435:/usr/include/c++/9/bits/basic_ios.h ****        *  @param  __c  The character to widen.
 436:/usr/include/c++/9/bits/basic_ios.h ****        *  @return  The widened character.
 437:/usr/include/c++/9/bits/basic_ios.h ****        *
 438:/usr/include/c++/9/bits/basic_ios.h ****        *  Maps a character of @c char to a character of @c char_type.
 439:/usr/include/c++/9/bits/basic_ios.h ****        *
 440:/usr/include/c++/9/bits/basic_ios.h ****        *  Returns the result of
 441:/usr/include/c++/9/bits/basic_ios.h ****        *  @code
 442:/usr/include/c++/9/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).widen(c)
 443:/usr/include/c++/9/bits/basic_ios.h ****        *  @endcode
 444:/usr/include/c++/9/bits/basic_ios.h ****        *
 445:/usr/include/c++/9/bits/basic_ios.h ****        *  Additional l10n notes are at
 446:/usr/include/c++/9/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 447:/usr/include/c++/9/bits/basic_ios.h ****       */
 448:/usr/include/c++/9/bits/basic_ios.h ****       char_type
 449:/usr/include/c++/9/bits/basic_ios.h ****       widen(char __c) const
 450:/usr/include/c++/9/bits/basic_ios.h ****       { return __check_facet(_M_ctype).widen(__c); }
 451:/usr/include/c++/9/bits/basic_ios.h **** 
 452:/usr/include/c++/9/bits/basic_ios.h ****     protected:
 453:/usr/include/c++/9/bits/basic_ios.h ****       // 27.4.5.1  basic_ios constructors
 454:/usr/include/c++/9/bits/basic_ios.h ****       /**
 455:/usr/include/c++/9/bits/basic_ios.h ****        *  @brief  Empty.
 456:/usr/include/c++/9/bits/basic_ios.h ****        *
 457:/usr/include/c++/9/bits/basic_ios.h ****        *  The default constructor does nothing and is not normally
 458:/usr/include/c++/9/bits/basic_ios.h ****        *  accessible to users.
 459:/usr/include/c++/9/bits/basic_ios.h ****       */
 460:/usr/include/c++/9/bits/basic_ios.h ****       basic_ios()
 461:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 462:/usr/include/c++/9/bits/basic_ios.h **** 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
 3470              		.loc 15 462 59 view .LVU718
 3471 0027 4C8DAC24 		leaq	144(%rsp), %r13	#, tmp199
 3471      90000000 
 3472 002f 4C8D7C24 		leaq	32(%rsp), %r15	#, tmp194
 3472      20
 3473 0034 4C89EF   		movq	%r13, %rdi	# tmp199,
 3474              	.LVL184:
 3475              		.loc 15 462 59 view .LVU719
 3476              	.LBE5255:
 3477              	.LBE5254:
 3478              	.LBE5253:
 3479              	.LBE5252:
 3480              	.LBE5251:
 3481              	.LBE5250:
 3482              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
 3483              		.loc 14 50 22 view .LVU720
 3484 0037 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp209
 3484      25280000 
 3484      00
 3485 0040 48898424 		movq	%rax, 408(%rsp)	# tmp209, D.445011
 3485      98010000 
 3486 0048 31C0     		xorl	%eax, %eax	# tmp209
 3487              	.LVL185:
 3488              	.LBB5334:
 3489              	.LBI5250:
  66:/usr/include/c++/9/sstream ****     {
  67:/usr/include/c++/9/sstream ****       struct __xfer_bufptrs;
  68:/usr/include/c++/9/sstream ****     public:
  69:/usr/include/c++/9/sstream ****       // Types:
  70:/usr/include/c++/9/sstream ****       typedef _CharT 					char_type;
  71:/usr/include/c++/9/sstream ****       typedef _Traits 					traits_type;
  72:/usr/include/c++/9/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  73:/usr/include/c++/9/sstream ****       // 251. basic_stringbuf missing allocator_type
  74:/usr/include/c++/9/sstream ****       typedef _Alloc				       	allocator_type;
  75:/usr/include/c++/9/sstream ****       typedef typename traits_type::int_type 		int_type;
  76:/usr/include/c++/9/sstream ****       typedef typename traits_type::pos_type 		pos_type;
  77:/usr/include/c++/9/sstream ****       typedef typename traits_type::off_type 		off_type;
  78:/usr/include/c++/9/sstream **** 
  79:/usr/include/c++/9/sstream ****       typedef basic_streambuf<char_type, traits_type>  	__streambuf_type;
  80:/usr/include/c++/9/sstream ****       typedef basic_string<char_type, _Traits, _Alloc> 	__string_type;
  81:/usr/include/c++/9/sstream ****       typedef typename __string_type::size_type		__size_type;
  82:/usr/include/c++/9/sstream **** 
  83:/usr/include/c++/9/sstream ****     protected:
  84:/usr/include/c++/9/sstream ****       /// Place to stash in || out || in | out settings for current stringbuf.
  85:/usr/include/c++/9/sstream ****       ios_base::openmode 	_M_mode;
  86:/usr/include/c++/9/sstream **** 
  87:/usr/include/c++/9/sstream ****       // Data Members:
  88:/usr/include/c++/9/sstream ****       __string_type 		_M_string;
  89:/usr/include/c++/9/sstream **** 
  90:/usr/include/c++/9/sstream ****     public:
  91:/usr/include/c++/9/sstream ****       // Constructors:
  92:/usr/include/c++/9/sstream **** 
  93:/usr/include/c++/9/sstream ****       /**
  94:/usr/include/c++/9/sstream ****        *  @brief  Starts with an empty string buffer.
  95:/usr/include/c++/9/sstream ****        *
  96:/usr/include/c++/9/sstream ****        *  The default constructor initializes the parent class using its
  97:/usr/include/c++/9/sstream ****        *  own default ctor.
  98:/usr/include/c++/9/sstream ****       */
  99:/usr/include/c++/9/sstream ****       basic_stringbuf()
 100:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(ios_base::in | ios_base::out), _M_string()
 101:/usr/include/c++/9/sstream ****       { }
 102:/usr/include/c++/9/sstream **** 
 103:/usr/include/c++/9/sstream ****       /**
 104:/usr/include/c++/9/sstream ****        *  @brief  Starts with an empty string buffer.
 105:/usr/include/c++/9/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 106:/usr/include/c++/9/sstream ****        *
 107:/usr/include/c++/9/sstream ****        *  The default constructor initializes the parent class using its
 108:/usr/include/c++/9/sstream ****        *  own default ctor.
 109:/usr/include/c++/9/sstream ****       */
 110:/usr/include/c++/9/sstream ****       explicit
 111:/usr/include/c++/9/sstream ****       basic_stringbuf(ios_base::openmode __mode)
 112:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 113:/usr/include/c++/9/sstream ****       { }
 114:/usr/include/c++/9/sstream **** 
 115:/usr/include/c++/9/sstream ****       /**
 116:/usr/include/c++/9/sstream ****        *  @brief  Starts with an existing string buffer.
 117:/usr/include/c++/9/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 118:/usr/include/c++/9/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 119:/usr/include/c++/9/sstream ****        *
 120:/usr/include/c++/9/sstream ****        *  This constructor initializes the parent class using its
 121:/usr/include/c++/9/sstream ****        *  own default ctor.
 122:/usr/include/c++/9/sstream ****       */
 123:/usr/include/c++/9/sstream ****       explicit
 124:/usr/include/c++/9/sstream ****       basic_stringbuf(const __string_type& __str,
 125:/usr/include/c++/9/sstream **** 		      ios_base::openmode __mode = ios_base::in | ios_base::out)
 126:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(),
 127:/usr/include/c++/9/sstream **** 	_M_string(__str.data(), __str.size(), __str.get_allocator())
 128:/usr/include/c++/9/sstream ****       { _M_stringbuf_init(__mode); }
 129:/usr/include/c++/9/sstream **** 
 130:/usr/include/c++/9/sstream **** #if __cplusplus >= 201103L
 131:/usr/include/c++/9/sstream ****       basic_stringbuf(const basic_stringbuf&) = delete;
 132:/usr/include/c++/9/sstream **** 
 133:/usr/include/c++/9/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs)
 134:/usr/include/c++/9/sstream ****       : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
 135:/usr/include/c++/9/sstream ****       { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }
 136:/usr/include/c++/9/sstream **** 
 137:/usr/include/c++/9/sstream ****       // 27.8.2.2 Assign and swap:
 138:/usr/include/c++/9/sstream **** 
 139:/usr/include/c++/9/sstream ****       basic_stringbuf&
 140:/usr/include/c++/9/sstream ****       operator=(const basic_stringbuf&) = delete;
 141:/usr/include/c++/9/sstream **** 
 142:/usr/include/c++/9/sstream ****       basic_stringbuf&
 143:/usr/include/c++/9/sstream ****       operator=(basic_stringbuf&& __rhs)
 144:/usr/include/c++/9/sstream ****       {
 145:/usr/include/c++/9/sstream **** 	__xfer_bufptrs __st{__rhs, this};
 146:/usr/include/c++/9/sstream **** 	const __streambuf_type& __base = __rhs;
 147:/usr/include/c++/9/sstream **** 	__streambuf_type::operator=(__base);
 148:/usr/include/c++/9/sstream **** 	this->pubimbue(__rhs.getloc());
 149:/usr/include/c++/9/sstream **** 	_M_mode = __rhs._M_mode;
 150:/usr/include/c++/9/sstream **** 	_M_string = std::move(__rhs._M_string);
 151:/usr/include/c++/9/sstream **** 	__rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 152:/usr/include/c++/9/sstream **** 	return *this;
 153:/usr/include/c++/9/sstream ****       }
 154:/usr/include/c++/9/sstream **** 
 155:/usr/include/c++/9/sstream ****       void
 156:/usr/include/c++/9/sstream ****       swap(basic_stringbuf& __rhs)
 157:/usr/include/c++/9/sstream ****       {
 158:/usr/include/c++/9/sstream **** 	__xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 159:/usr/include/c++/9/sstream **** 	__xfer_bufptrs __r_st{__rhs, this};
 160:/usr/include/c++/9/sstream **** 	__streambuf_type& __base = __rhs;
 161:/usr/include/c++/9/sstream **** 	__streambuf_type::swap(__base);
 162:/usr/include/c++/9/sstream **** 	__rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 163:/usr/include/c++/9/sstream **** 	std::swap(_M_mode, __rhs._M_mode);
 164:/usr/include/c++/9/sstream **** 	std::swap(_M_string, __rhs._M_string);
 165:/usr/include/c++/9/sstream ****       }
 166:/usr/include/c++/9/sstream **** #endif
 167:/usr/include/c++/9/sstream **** 
 168:/usr/include/c++/9/sstream ****       // Get and set:
 169:/usr/include/c++/9/sstream ****       /**
 170:/usr/include/c++/9/sstream ****        *  @brief  Copying out the string buffer.
 171:/usr/include/c++/9/sstream ****        *  @return  A copy of one of the underlying sequences.
 172:/usr/include/c++/9/sstream ****        *
 173:/usr/include/c++/9/sstream ****        *  <em>If the buffer is only created in input mode, the underlying
 174:/usr/include/c++/9/sstream ****        *  character sequence is equal to the input sequence; otherwise, it
 175:/usr/include/c++/9/sstream ****        *  is equal to the output sequence.</em> [27.7.1.2]/1
 176:/usr/include/c++/9/sstream ****       */
 177:/usr/include/c++/9/sstream ****       __string_type
 178:/usr/include/c++/9/sstream ****       str() const
 179:/usr/include/c++/9/sstream ****       {
 180:/usr/include/c++/9/sstream **** 	__string_type __ret(_M_string.get_allocator());
 181:/usr/include/c++/9/sstream **** 	if (this->pptr())
 182:/usr/include/c++/9/sstream **** 	  {
 183:/usr/include/c++/9/sstream **** 	    // The current egptr() may not be the actual string end.
 184:/usr/include/c++/9/sstream **** 	    if (this->pptr() > this->egptr())
 185:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 186:/usr/include/c++/9/sstream **** 	    else
 187:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->egptr());
 188:/usr/include/c++/9/sstream **** 	  }
 189:/usr/include/c++/9/sstream **** 	else
 190:/usr/include/c++/9/sstream **** 	  __ret = _M_string;
 191:/usr/include/c++/9/sstream **** 	return __ret;
 192:/usr/include/c++/9/sstream ****       }
 193:/usr/include/c++/9/sstream **** 
 194:/usr/include/c++/9/sstream ****       /**
 195:/usr/include/c++/9/sstream ****        *  @brief  Setting a new buffer.
 196:/usr/include/c++/9/sstream ****        *  @param  __s  The string to use as a new sequence.
 197:/usr/include/c++/9/sstream ****        *
 198:/usr/include/c++/9/sstream ****        *  Deallocates any previous stored sequence, then copies @a s to
 199:/usr/include/c++/9/sstream ****        *  use as a new one.
 200:/usr/include/c++/9/sstream ****       */
 201:/usr/include/c++/9/sstream ****       void
 202:/usr/include/c++/9/sstream ****       str(const __string_type& __s)
 203:/usr/include/c++/9/sstream ****       {
 204:/usr/include/c++/9/sstream **** 	// Cannot use _M_string = __s, since v3 strings are COW
 205:/usr/include/c++/9/sstream **** 	// (not always true now but assign() always works).
 206:/usr/include/c++/9/sstream **** 	_M_string.assign(__s.data(), __s.size());
 207:/usr/include/c++/9/sstream **** 	_M_stringbuf_init(_M_mode);
 208:/usr/include/c++/9/sstream ****       }
 209:/usr/include/c++/9/sstream **** 
 210:/usr/include/c++/9/sstream ****     protected:
 211:/usr/include/c++/9/sstream ****       // Common initialization code goes here.
 212:/usr/include/c++/9/sstream ****       void
 213:/usr/include/c++/9/sstream ****       _M_stringbuf_init(ios_base::openmode __mode)
 214:/usr/include/c++/9/sstream ****       {
 215:/usr/include/c++/9/sstream **** 	_M_mode = __mode;
 216:/usr/include/c++/9/sstream **** 	__size_type __len = 0;
 217:/usr/include/c++/9/sstream **** 	if (_M_mode & (ios_base::ate | ios_base::app))
 218:/usr/include/c++/9/sstream **** 	  __len = _M_string.size();
 219:/usr/include/c++/9/sstream **** 	_M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
 220:/usr/include/c++/9/sstream ****       }
 221:/usr/include/c++/9/sstream **** 
 222:/usr/include/c++/9/sstream ****       virtual streamsize
 223:/usr/include/c++/9/sstream ****       showmanyc()
 224:/usr/include/c++/9/sstream ****       {
 225:/usr/include/c++/9/sstream **** 	streamsize __ret = -1;
 226:/usr/include/c++/9/sstream **** 	if (_M_mode & ios_base::in)
 227:/usr/include/c++/9/sstream **** 	  {
 228:/usr/include/c++/9/sstream **** 	    _M_update_egptr();
 229:/usr/include/c++/9/sstream **** 	    __ret = this->egptr() - this->gptr();
 230:/usr/include/c++/9/sstream **** 	  }
 231:/usr/include/c++/9/sstream **** 	return __ret;
 232:/usr/include/c++/9/sstream ****       }
 233:/usr/include/c++/9/sstream **** 
 234:/usr/include/c++/9/sstream ****       virtual int_type
 235:/usr/include/c++/9/sstream ****       underflow();
 236:/usr/include/c++/9/sstream **** 
 237:/usr/include/c++/9/sstream ****       virtual int_type
 238:/usr/include/c++/9/sstream ****       pbackfail(int_type __c = traits_type::eof());
 239:/usr/include/c++/9/sstream **** 
 240:/usr/include/c++/9/sstream ****       virtual int_type
 241:/usr/include/c++/9/sstream ****       overflow(int_type __c = traits_type::eof());
 242:/usr/include/c++/9/sstream **** 
 243:/usr/include/c++/9/sstream ****       /**
 244:/usr/include/c++/9/sstream ****        *  @brief  Manipulates the buffer.
 245:/usr/include/c++/9/sstream ****        *  @param  __s  Pointer to a buffer area.
 246:/usr/include/c++/9/sstream ****        *  @param  __n  Size of @a __s.
 247:/usr/include/c++/9/sstream ****        *  @return  @c this
 248:/usr/include/c++/9/sstream ****        *
 249:/usr/include/c++/9/sstream ****        *  If no buffer has already been created, and both @a __s and @a __n are
 250:/usr/include/c++/9/sstream ****        *  non-zero, then @c __s is used as a buffer; see
 251:/usr/include/c++/9/sstream ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
 252:/usr/include/c++/9/sstream ****        *  for more.
 253:/usr/include/c++/9/sstream ****       */
 254:/usr/include/c++/9/sstream ****       virtual __streambuf_type*
 255:/usr/include/c++/9/sstream ****       setbuf(char_type* __s, streamsize __n)
 256:/usr/include/c++/9/sstream ****       {
 257:/usr/include/c++/9/sstream **** 	if (__s && __n >= 0)
 258:/usr/include/c++/9/sstream **** 	  {
 259:/usr/include/c++/9/sstream **** 	    // This is implementation-defined behavior, and assumes
 260:/usr/include/c++/9/sstream **** 	    // that an external char_type array of length __n exists
 261:/usr/include/c++/9/sstream **** 	    // and has been pre-allocated. If this is not the case,
 262:/usr/include/c++/9/sstream **** 	    // things will quickly blow up.
 263:/usr/include/c++/9/sstream **** 
 264:/usr/include/c++/9/sstream **** 	    // Step 1: Destroy the current internal array.
 265:/usr/include/c++/9/sstream **** 	    _M_string.clear();
 266:/usr/include/c++/9/sstream **** 
 267:/usr/include/c++/9/sstream **** 	    // Step 2: Use the external array.
 268:/usr/include/c++/9/sstream **** 	    _M_sync(__s, __n, 0);
 269:/usr/include/c++/9/sstream **** 	  }
 270:/usr/include/c++/9/sstream **** 	return this;
 271:/usr/include/c++/9/sstream ****       }
 272:/usr/include/c++/9/sstream **** 
 273:/usr/include/c++/9/sstream ****       virtual pos_type
 274:/usr/include/c++/9/sstream ****       seekoff(off_type __off, ios_base::seekdir __way,
 275:/usr/include/c++/9/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 276:/usr/include/c++/9/sstream **** 
 277:/usr/include/c++/9/sstream ****       virtual pos_type
 278:/usr/include/c++/9/sstream ****       seekpos(pos_type __sp,
 279:/usr/include/c++/9/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 280:/usr/include/c++/9/sstream **** 
 281:/usr/include/c++/9/sstream ****       // Internal function for correctly updating the internal buffer
 282:/usr/include/c++/9/sstream ****       // for a particular _M_string, due to initialization or re-sizing
 283:/usr/include/c++/9/sstream ****       // of an existing _M_string.
 284:/usr/include/c++/9/sstream ****       void
 285:/usr/include/c++/9/sstream ****       _M_sync(char_type* __base, __size_type __i, __size_type __o);
 286:/usr/include/c++/9/sstream **** 
 287:/usr/include/c++/9/sstream ****       // Internal function for correctly updating egptr() to the actual
 288:/usr/include/c++/9/sstream ****       // string end.
 289:/usr/include/c++/9/sstream ****       void
 290:/usr/include/c++/9/sstream ****       _M_update_egptr()
 291:/usr/include/c++/9/sstream ****       {
 292:/usr/include/c++/9/sstream **** 	const bool __testin = _M_mode & ios_base::in;
 293:/usr/include/c++/9/sstream **** 	if (this->pptr() && this->pptr() > this->egptr())
 294:/usr/include/c++/9/sstream **** 	  {
 295:/usr/include/c++/9/sstream **** 	    if (__testin)
 296:/usr/include/c++/9/sstream **** 	      this->setg(this->eback(), this->gptr(), this->pptr());
 297:/usr/include/c++/9/sstream **** 	    else
 298:/usr/include/c++/9/sstream **** 	      this->setg(this->pptr(), this->pptr(), this->pptr());
 299:/usr/include/c++/9/sstream **** 	  }
 300:/usr/include/c++/9/sstream ****       }
 301:/usr/include/c++/9/sstream **** 
 302:/usr/include/c++/9/sstream ****       // Works around the issue with pbump, part of the protected
 303:/usr/include/c++/9/sstream ****       // interface of basic_streambuf, taking just an int.
 304:/usr/include/c++/9/sstream ****       void
 305:/usr/include/c++/9/sstream ****       _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
 306:/usr/include/c++/9/sstream **** 
 307:/usr/include/c++/9/sstream ****     private:
 308:/usr/include/c++/9/sstream **** #if __cplusplus >= 201103L
 309:/usr/include/c++/9/sstream **** #if _GLIBCXX_USE_CXX11_ABI
 310:/usr/include/c++/9/sstream ****       // This type captures the state of the gptr / pptr pointers as offsets
 311:/usr/include/c++/9/sstream ****       // so they can be restored in another object after moving the string.
 312:/usr/include/c++/9/sstream ****       struct __xfer_bufptrs
 313:/usr/include/c++/9/sstream ****       {
 314:/usr/include/c++/9/sstream **** 	__xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 315:/usr/include/c++/9/sstream **** 	: _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 316:/usr/include/c++/9/sstream **** 	{
 317:/usr/include/c++/9/sstream **** 	  const _CharT* const __str = __from._M_string.data();
 318:/usr/include/c++/9/sstream **** 	  const _CharT* __end = nullptr;
 319:/usr/include/c++/9/sstream **** 	  if (__from.eback())
 320:/usr/include/c++/9/sstream **** 	    {
 321:/usr/include/c++/9/sstream **** 	      _M_goff[0] = __from.eback() - __str;
 322:/usr/include/c++/9/sstream **** 	      _M_goff[1] = __from.gptr() - __str;
 323:/usr/include/c++/9/sstream **** 	      _M_goff[2] = __from.egptr() - __str;
 324:/usr/include/c++/9/sstream **** 	      __end = __from.egptr();
 325:/usr/include/c++/9/sstream **** 	    }
 326:/usr/include/c++/9/sstream **** 	  if (__from.pbase())
 327:/usr/include/c++/9/sstream **** 	    {
 328:/usr/include/c++/9/sstream **** 	      _M_poff[0] = __from.pbase() - __str;
 329:/usr/include/c++/9/sstream **** 	      _M_poff[1] = __from.pptr() - __from.pbase();
 330:/usr/include/c++/9/sstream **** 	      _M_poff[2] = __from.epptr() - __str;
 331:/usr/include/c++/9/sstream **** 	      if (__from.pptr() > __end)
 332:/usr/include/c++/9/sstream **** 		__end = __from.pptr();
 333:/usr/include/c++/9/sstream **** 	    }
 334:/usr/include/c++/9/sstream **** 
 335:/usr/include/c++/9/sstream **** 	  // Set _M_string length to the greater of the get and put areas.
 336:/usr/include/c++/9/sstream **** 	  if (__end)
 337:/usr/include/c++/9/sstream **** 	    {
 338:/usr/include/c++/9/sstream **** 	      // The const_cast avoids changing this constructor's signature,
 339:/usr/include/c++/9/sstream **** 	      // because it is exported from the dynamic library.
 340:/usr/include/c++/9/sstream **** 	      auto& __mut_from = const_cast<basic_stringbuf&>(__from);
 341:/usr/include/c++/9/sstream **** 	      __mut_from._M_string._M_length(__end - __str);
 342:/usr/include/c++/9/sstream **** 	    }
 343:/usr/include/c++/9/sstream **** 	}
 344:/usr/include/c++/9/sstream **** 
 345:/usr/include/c++/9/sstream **** 	~__xfer_bufptrs()
 346:/usr/include/c++/9/sstream **** 	{
 347:/usr/include/c++/9/sstream **** 	  char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
 348:/usr/include/c++/9/sstream **** 	  if (_M_goff[0] != -1)
 349:/usr/include/c++/9/sstream **** 	    _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
 350:/usr/include/c++/9/sstream **** 	  if (_M_poff[0] != -1)
 351:/usr/include/c++/9/sstream **** 	    _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 352:/usr/include/c++/9/sstream **** 	}
 353:/usr/include/c++/9/sstream **** 
 354:/usr/include/c++/9/sstream **** 	basic_stringbuf* _M_to;
 355:/usr/include/c++/9/sstream **** 	off_type _M_goff[3];
 356:/usr/include/c++/9/sstream **** 	off_type _M_poff[3];
 357:/usr/include/c++/9/sstream ****       };
 358:/usr/include/c++/9/sstream **** #else
 359:/usr/include/c++/9/sstream ****       // This type does nothing when using Copy-On-Write strings.
 360:/usr/include/c++/9/sstream ****       struct __xfer_bufptrs
 361:/usr/include/c++/9/sstream ****       {
 362:/usr/include/c++/9/sstream **** 	__xfer_bufptrs(const basic_stringbuf&, basic_stringbuf*) { }
 363:/usr/include/c++/9/sstream ****       };
 364:/usr/include/c++/9/sstream **** #endif
 365:/usr/include/c++/9/sstream **** 
 366:/usr/include/c++/9/sstream ****       // The move constructor initializes an __xfer_bufptrs temporary then
 367:/usr/include/c++/9/sstream ****       // delegates to this constructor to performs moves during its lifetime.
 368:/usr/include/c++/9/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
 369:/usr/include/c++/9/sstream ****       : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
 370:/usr/include/c++/9/sstream ****       _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
 371:/usr/include/c++/9/sstream ****       { }
 372:/usr/include/c++/9/sstream **** #endif
 373:/usr/include/c++/9/sstream ****     };
 374:/usr/include/c++/9/sstream **** 
 375:/usr/include/c++/9/sstream **** 
 376:/usr/include/c++/9/sstream ****   // [27.7.2] Template class basic_istringstream
 377:/usr/include/c++/9/sstream ****   /**
 378:/usr/include/c++/9/sstream ****    *  @brief  Controlling input for std::string.
 379:/usr/include/c++/9/sstream ****    *  @ingroup io
 380:/usr/include/c++/9/sstream ****    *
 381:/usr/include/c++/9/sstream ****    *  @tparam _CharT  Type of character stream.
 382:/usr/include/c++/9/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
 383:/usr/include/c++/9/sstream ****    *                   char_traits<_CharT>.
 384:/usr/include/c++/9/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
 385:/usr/include/c++/9/sstream ****    *
 386:/usr/include/c++/9/sstream ****    *  This class supports reading from objects of type std::basic_string,
 387:/usr/include/c++/9/sstream ****    *  using the inherited functions from std::basic_istream.  To control
 388:/usr/include/c++/9/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 389:/usr/include/c++/9/sstream ****    *  which this page refers to as @c sb.
 390:/usr/include/c++/9/sstream ****   */
 391:/usr/include/c++/9/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
 392:/usr/include/c++/9/sstream ****     class basic_istringstream : public basic_istream<_CharT, _Traits>
 393:/usr/include/c++/9/sstream ****     {
 394:/usr/include/c++/9/sstream ****     public:
 395:/usr/include/c++/9/sstream ****       // Types:
 396:/usr/include/c++/9/sstream ****       typedef _CharT 					char_type;
 397:/usr/include/c++/9/sstream ****       typedef _Traits 					traits_type;
 398:/usr/include/c++/9/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 399:/usr/include/c++/9/sstream ****       // 251. basic_stringbuf missing allocator_type
 400:/usr/include/c++/9/sstream ****       typedef _Alloc				       	allocator_type;
 401:/usr/include/c++/9/sstream ****       typedef typename traits_type::int_type 		int_type;
 402:/usr/include/c++/9/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 403:/usr/include/c++/9/sstream ****       typedef typename traits_type::off_type 		off_type;
 404:/usr/include/c++/9/sstream **** 
 405:/usr/include/c++/9/sstream ****       // Non-standard types:
 406:/usr/include/c++/9/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 407:/usr/include/c++/9/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 408:/usr/include/c++/9/sstream ****       typedef basic_istream<char_type, traits_type>	__istream_type;
 409:/usr/include/c++/9/sstream **** 
 410:/usr/include/c++/9/sstream ****     private:
 411:/usr/include/c++/9/sstream ****       __stringbuf_type	_M_stringbuf;
 412:/usr/include/c++/9/sstream **** 
 413:/usr/include/c++/9/sstream ****     public:
 414:/usr/include/c++/9/sstream ****       // Constructors:
 415:/usr/include/c++/9/sstream **** 
 416:/usr/include/c++/9/sstream ****       /**
 417:/usr/include/c++/9/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 418:/usr/include/c++/9/sstream ****        *
 419:/usr/include/c++/9/sstream ****        *  Initializes @c sb using @c in, and passes @c &sb to the base
 420:/usr/include/c++/9/sstream ****        *  class initializer.  Does not allocate any buffer.
 421:/usr/include/c++/9/sstream ****        *
 422:/usr/include/c++/9/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 423:/usr/include/c++/9/sstream ****        *  string class does its own memory management.
 424:/usr/include/c++/9/sstream ****       */
 425:/usr/include/c++/9/sstream ****       basic_istringstream()
 426:/usr/include/c++/9/sstream ****       : __istream_type(), _M_stringbuf(ios_base::in)
 427:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 428:/usr/include/c++/9/sstream **** 
 429:/usr/include/c++/9/sstream ****       /**
 430:/usr/include/c++/9/sstream ****        *  @brief  Starts with an empty string buffer.
 431:/usr/include/c++/9/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 432:/usr/include/c++/9/sstream ****        *
 433:/usr/include/c++/9/sstream ****        *  @c ios_base::in is automatically included in @a __mode.
 434:/usr/include/c++/9/sstream ****        *
 435:/usr/include/c++/9/sstream ****        *  Initializes @c sb using @c __mode|in, and passes @c &sb to the base
 436:/usr/include/c++/9/sstream ****        *  class initializer.  Does not allocate any buffer.
 437:/usr/include/c++/9/sstream ****        *
 438:/usr/include/c++/9/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 439:/usr/include/c++/9/sstream ****        *  string class does its own memory management.
 440:/usr/include/c++/9/sstream ****       */
 441:/usr/include/c++/9/sstream ****       explicit
 442:/usr/include/c++/9/sstream ****       basic_istringstream(ios_base::openmode __mode)
 443:/usr/include/c++/9/sstream ****       : __istream_type(), _M_stringbuf(__mode | ios_base::in)
 444:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 445:/usr/include/c++/9/sstream **** 
 446:/usr/include/c++/9/sstream ****       /**
 447:/usr/include/c++/9/sstream ****        *  @brief  Starts with an existing string buffer.
 448:/usr/include/c++/9/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 449:/usr/include/c++/9/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 450:/usr/include/c++/9/sstream ****        *
 451:/usr/include/c++/9/sstream ****        *  @c ios_base::in is automatically included in @a mode.
 452:/usr/include/c++/9/sstream ****        *
 453:/usr/include/c++/9/sstream ****        *  Initializes @c sb using @a str and @c mode|in, and passes @c &sb
 454:/usr/include/c++/9/sstream ****        *  to the base class initializer.
 455:/usr/include/c++/9/sstream ****        *
 456:/usr/include/c++/9/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 457:/usr/include/c++/9/sstream ****        *  string class does its own memory management.
 458:/usr/include/c++/9/sstream ****       */
 459:/usr/include/c++/9/sstream ****       explicit
 460:/usr/include/c++/9/sstream ****       basic_istringstream(const __string_type& __str,
 461:/usr/include/c++/9/sstream **** 			  ios_base::openmode __mode = ios_base::in)
 462:/usr/include/c++/9/sstream ****       : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
 463:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 464:/usr/include/c++/9/sstream **** 
 465:/usr/include/c++/9/sstream ****       /**
 466:/usr/include/c++/9/sstream ****        *  @brief  The destructor does nothing.
 467:/usr/include/c++/9/sstream ****        *
 468:/usr/include/c++/9/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 469:/usr/include/c++/9/sstream ****        *  formatting stream.
 470:/usr/include/c++/9/sstream ****       */
 471:/usr/include/c++/9/sstream ****       ~basic_istringstream()
 472:/usr/include/c++/9/sstream ****       { }
 473:/usr/include/c++/9/sstream **** 
 474:/usr/include/c++/9/sstream **** #if __cplusplus >= 201103L
 475:/usr/include/c++/9/sstream ****       basic_istringstream(const basic_istringstream&) = delete;
 476:/usr/include/c++/9/sstream **** 
 477:/usr/include/c++/9/sstream ****       basic_istringstream(basic_istringstream&& __rhs)
 478:/usr/include/c++/9/sstream ****       : __istream_type(std::move(__rhs)),
 479:/usr/include/c++/9/sstream ****       _M_stringbuf(std::move(__rhs._M_stringbuf))
 480:/usr/include/c++/9/sstream ****       { __istream_type::set_rdbuf(&_M_stringbuf); }
 481:/usr/include/c++/9/sstream **** 
 482:/usr/include/c++/9/sstream ****       // 27.8.3.2 Assign and swap:
 483:/usr/include/c++/9/sstream **** 
 484:/usr/include/c++/9/sstream ****       basic_istringstream&
 485:/usr/include/c++/9/sstream ****       operator=(const basic_istringstream&) = delete;
 486:/usr/include/c++/9/sstream **** 
 487:/usr/include/c++/9/sstream ****       basic_istringstream&
 488:/usr/include/c++/9/sstream ****       operator=(basic_istringstream&& __rhs)
 489:/usr/include/c++/9/sstream ****       {
 490:/usr/include/c++/9/sstream **** 	__istream_type::operator=(std::move(__rhs));
 491:/usr/include/c++/9/sstream **** 	_M_stringbuf = std::move(__rhs._M_stringbuf);
 492:/usr/include/c++/9/sstream **** 	return *this;
 493:/usr/include/c++/9/sstream ****       }
 494:/usr/include/c++/9/sstream **** 
 495:/usr/include/c++/9/sstream ****       void
 496:/usr/include/c++/9/sstream ****       swap(basic_istringstream& __rhs)
 497:/usr/include/c++/9/sstream ****       {
 498:/usr/include/c++/9/sstream **** 	__istream_type::swap(__rhs);
 499:/usr/include/c++/9/sstream **** 	_M_stringbuf.swap(__rhs._M_stringbuf);
 500:/usr/include/c++/9/sstream ****       }
 501:/usr/include/c++/9/sstream **** #endif
 502:/usr/include/c++/9/sstream **** 
 503:/usr/include/c++/9/sstream ****       // Members:
 504:/usr/include/c++/9/sstream ****       /**
 505:/usr/include/c++/9/sstream ****        *  @brief  Accessing the underlying buffer.
 506:/usr/include/c++/9/sstream ****        *  @return  The current basic_stringbuf buffer.
 507:/usr/include/c++/9/sstream ****        *
 508:/usr/include/c++/9/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 509:/usr/include/c++/9/sstream ****       */
 510:/usr/include/c++/9/sstream ****       __stringbuf_type*
 511:/usr/include/c++/9/sstream ****       rdbuf() const
 512:/usr/include/c++/9/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 513:/usr/include/c++/9/sstream **** 
 514:/usr/include/c++/9/sstream ****       /**
 515:/usr/include/c++/9/sstream ****        *  @brief  Copying out the string buffer.
 516:/usr/include/c++/9/sstream ****        *  @return  @c rdbuf()->str()
 517:/usr/include/c++/9/sstream ****       */
 518:/usr/include/c++/9/sstream ****       __string_type
 519:/usr/include/c++/9/sstream ****       str() const
 520:/usr/include/c++/9/sstream ****       { return _M_stringbuf.str(); }
 521:/usr/include/c++/9/sstream **** 
 522:/usr/include/c++/9/sstream ****       /**
 523:/usr/include/c++/9/sstream ****        *  @brief  Setting a new buffer.
 524:/usr/include/c++/9/sstream ****        *  @param  __s  The string to use as a new sequence.
 525:/usr/include/c++/9/sstream ****        *
 526:/usr/include/c++/9/sstream ****        *  Calls @c rdbuf()->str(s).
 527:/usr/include/c++/9/sstream ****       */
 528:/usr/include/c++/9/sstream ****       void
 529:/usr/include/c++/9/sstream ****       str(const __string_type& __s)
 530:/usr/include/c++/9/sstream ****       { _M_stringbuf.str(__s); }
 531:/usr/include/c++/9/sstream ****     };
 532:/usr/include/c++/9/sstream **** 
 533:/usr/include/c++/9/sstream **** 
 534:/usr/include/c++/9/sstream ****   // [27.7.3] Template class basic_ostringstream
 535:/usr/include/c++/9/sstream ****   /**
 536:/usr/include/c++/9/sstream ****    *  @brief  Controlling output for std::string.
 537:/usr/include/c++/9/sstream ****    *  @ingroup io
 538:/usr/include/c++/9/sstream ****    *
 539:/usr/include/c++/9/sstream ****    *  @tparam _CharT  Type of character stream.
 540:/usr/include/c++/9/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
 541:/usr/include/c++/9/sstream ****    *                   char_traits<_CharT>.
 542:/usr/include/c++/9/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
 543:/usr/include/c++/9/sstream ****    *
 544:/usr/include/c++/9/sstream ****    *  This class supports writing to objects of type std::basic_string,
 545:/usr/include/c++/9/sstream ****    *  using the inherited functions from std::basic_ostream.  To control
 546:/usr/include/c++/9/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 547:/usr/include/c++/9/sstream ****    *  which this page refers to as @c sb.
 548:/usr/include/c++/9/sstream ****   */
 549:/usr/include/c++/9/sstream ****   template <typename _CharT, typename _Traits, typename _Alloc>
 550:/usr/include/c++/9/sstream ****     class basic_ostringstream : public basic_ostream<_CharT, _Traits>
 551:/usr/include/c++/9/sstream ****     {
 552:/usr/include/c++/9/sstream ****     public:
 553:/usr/include/c++/9/sstream ****       // Types:
 554:/usr/include/c++/9/sstream ****       typedef _CharT 					char_type;
 555:/usr/include/c++/9/sstream ****       typedef _Traits 					traits_type;
 556:/usr/include/c++/9/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 557:/usr/include/c++/9/sstream ****       // 251. basic_stringbuf missing allocator_type
 558:/usr/include/c++/9/sstream ****       typedef _Alloc				       	allocator_type;
 559:/usr/include/c++/9/sstream ****       typedef typename traits_type::int_type 		int_type;
 560:/usr/include/c++/9/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 561:/usr/include/c++/9/sstream ****       typedef typename traits_type::off_type 		off_type;
 562:/usr/include/c++/9/sstream **** 
 563:/usr/include/c++/9/sstream ****       // Non-standard types:
 564:/usr/include/c++/9/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 565:/usr/include/c++/9/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 566:/usr/include/c++/9/sstream ****       typedef basic_ostream<char_type, traits_type>	__ostream_type;
 567:/usr/include/c++/9/sstream **** 
 568:/usr/include/c++/9/sstream ****     private:
 569:/usr/include/c++/9/sstream ****       __stringbuf_type	_M_stringbuf;
 570:/usr/include/c++/9/sstream **** 
 571:/usr/include/c++/9/sstream ****     public:
 572:/usr/include/c++/9/sstream ****       // Constructors/destructor:
 573:/usr/include/c++/9/sstream **** 
 574:/usr/include/c++/9/sstream ****       /**
 575:/usr/include/c++/9/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 576:/usr/include/c++/9/sstream ****        *
 577:/usr/include/c++/9/sstream ****        *  Initializes @c sb using @c mode|out, and passes @c &sb to the base
 578:/usr/include/c++/9/sstream ****        *  class initializer.  Does not allocate any buffer.
 579:/usr/include/c++/9/sstream ****        *
 580:/usr/include/c++/9/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 581:/usr/include/c++/9/sstream ****        *  string class does its own memory management.
 582:/usr/include/c++/9/sstream ****       */
 583:/usr/include/c++/9/sstream ****       basic_ostringstream()
 3490              		.loc 12 583 7 is_stmt 1 view .LVU721
 3491              	.LBB5332:
 3492              	.LBB5330:
 3493              	.LBB5266:
 3494              	.LBI5253:
 460:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 3495              		.loc 15 460 7 view .LVU722
 3496              	.LBB5261:
 3497              	.LBB5256:
 3498              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 3499              		.loc 15 462 59 is_stmt 0 view .LVU723
 3500 004a E8000000 		call	_ZNSt8ios_baseC2Ev@PLT	#
 3500      00
 3501              	.LVL186:
 3502              		.loc 15 462 59 view .LVU724
 3503 004f 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp211
 3503      000000
 3504 0056 C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp127
 3505              	.LBE5256:
 3506              	.LBE5261:
 3507              	.LBE5266:
 3508              	.LBB5267:
 3509              	.LBB5268:
 3510              	.LBB5269:
 3511              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 3512              		.file 16 "/usr/include/c++/9/ostream"
   1:/usr/include/c++/9/ostream **** // Output streams -*- C++ -*-
   2:/usr/include/c++/9/ostream **** 
   3:/usr/include/c++/9/ostream **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ostream **** //
   5:/usr/include/c++/9/ostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/ostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/ostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/ostream **** // any later version.
  10:/usr/include/c++/9/ostream **** 
  11:/usr/include/c++/9/ostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/ostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/ostream **** // GNU General Public License for more details.
  15:/usr/include/c++/9/ostream **** 
  16:/usr/include/c++/9/ostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ostream **** 
  20:/usr/include/c++/9/ostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ostream **** 
  25:/usr/include/c++/9/ostream **** /** @file include/ostream
  26:/usr/include/c++/9/ostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/9/ostream ****  */
  28:/usr/include/c++/9/ostream **** 
  29:/usr/include/c++/9/ostream **** //
  30:/usr/include/c++/9/ostream **** // ISO C++ 14882: 27.6.2  Output streams
  31:/usr/include/c++/9/ostream **** //
  32:/usr/include/c++/9/ostream **** 
  33:/usr/include/c++/9/ostream **** #ifndef _GLIBCXX_OSTREAM
  34:/usr/include/c++/9/ostream **** #define _GLIBCXX_OSTREAM 1
  35:/usr/include/c++/9/ostream **** 
  36:/usr/include/c++/9/ostream **** #pragma GCC system_header
  37:/usr/include/c++/9/ostream **** 
  38:/usr/include/c++/9/ostream **** #include <ios>
  39:/usr/include/c++/9/ostream **** #include <bits/ostream_insert.h>
  40:/usr/include/c++/9/ostream **** 
  41:/usr/include/c++/9/ostream **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/9/ostream **** {
  43:/usr/include/c++/9/ostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/9/ostream **** 
  45:/usr/include/c++/9/ostream ****   /**
  46:/usr/include/c++/9/ostream ****    *  @brief  Template class basic_ostream.
  47:/usr/include/c++/9/ostream ****    *  @ingroup io
  48:/usr/include/c++/9/ostream ****    *
  49:/usr/include/c++/9/ostream ****    *  @tparam _CharT  Type of character stream.
  50:/usr/include/c++/9/ostream ****    *  @tparam _Traits  Traits for character type, defaults to
  51:/usr/include/c++/9/ostream ****    *                   char_traits<_CharT>.
  52:/usr/include/c++/9/ostream ****    *
  53:/usr/include/c++/9/ostream ****    *  This is the base class for all output streams.  It provides text
  54:/usr/include/c++/9/ostream ****    *  formatting of all builtin types, and communicates with any class
  55:/usr/include/c++/9/ostream ****    *  derived from basic_streambuf to do the actual output.
  56:/usr/include/c++/9/ostream ****   */
  57:/usr/include/c++/9/ostream ****   template<typename _CharT, typename _Traits>
  58:/usr/include/c++/9/ostream ****     class basic_ostream : virtual public basic_ios<_CharT, _Traits>
  59:/usr/include/c++/9/ostream ****     {
  60:/usr/include/c++/9/ostream ****     public:
  61:/usr/include/c++/9/ostream ****       // Types (inherited from basic_ios):
  62:/usr/include/c++/9/ostream ****       typedef _CharT			 		char_type;
  63:/usr/include/c++/9/ostream ****       typedef typename _Traits::int_type 		int_type;
  64:/usr/include/c++/9/ostream ****       typedef typename _Traits::pos_type 		pos_type;
  65:/usr/include/c++/9/ostream ****       typedef typename _Traits::off_type 		off_type;
  66:/usr/include/c++/9/ostream ****       typedef _Traits			 		traits_type;
  67:/usr/include/c++/9/ostream **** 
  68:/usr/include/c++/9/ostream ****       // Non-standard Types:
  69:/usr/include/c++/9/ostream ****       typedef basic_streambuf<_CharT, _Traits> 		__streambuf_type;
  70:/usr/include/c++/9/ostream ****       typedef basic_ios<_CharT, _Traits>		__ios_type;
  71:/usr/include/c++/9/ostream ****       typedef basic_ostream<_CharT, _Traits>		__ostream_type;
  72:/usr/include/c++/9/ostream ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  73:/usr/include/c++/9/ostream ****       							__num_put_type;
  74:/usr/include/c++/9/ostream ****       typedef ctype<_CharT>	      			__ctype_type;
  75:/usr/include/c++/9/ostream **** 
  76:/usr/include/c++/9/ostream ****       /**
  77:/usr/include/c++/9/ostream ****        *  @brief  Base constructor.
  78:/usr/include/c++/9/ostream ****        *
  79:/usr/include/c++/9/ostream ****        *  This ctor is almost never called by the user directly, rather from
  80:/usr/include/c++/9/ostream ****        *  derived classes' initialization lists, which pass a pointer to
  81:/usr/include/c++/9/ostream ****        *  their own stream buffer.
  82:/usr/include/c++/9/ostream ****       */
  83:/usr/include/c++/9/ostream ****       explicit
  84:/usr/include/c++/9/ostream ****       basic_ostream(__streambuf_type* __sb)
  85:/usr/include/c++/9/ostream ****       { this->init(__sb); }
  86:/usr/include/c++/9/ostream **** 
  87:/usr/include/c++/9/ostream ****       /**
  88:/usr/include/c++/9/ostream ****        *  @brief  Base destructor.
  89:/usr/include/c++/9/ostream ****        *
  90:/usr/include/c++/9/ostream ****        *  This does very little apart from providing a virtual base dtor.
  91:/usr/include/c++/9/ostream ****       */
  92:/usr/include/c++/9/ostream ****       virtual
  93:/usr/include/c++/9/ostream ****       ~basic_ostream() { }
  94:/usr/include/c++/9/ostream **** 
  95:/usr/include/c++/9/ostream ****       /// Safe prefix/suffix operations.
  96:/usr/include/c++/9/ostream ****       class sentry;
  97:/usr/include/c++/9/ostream ****       friend class sentry;
  98:/usr/include/c++/9/ostream **** 
  99:/usr/include/c++/9/ostream ****       //@{
 100:/usr/include/c++/9/ostream ****       /**
 101:/usr/include/c++/9/ostream ****        *  @brief  Interface for manipulators.
 102:/usr/include/c++/9/ostream ****        *
 103:/usr/include/c++/9/ostream ****        *  Manipulators such as @c std::endl and @c std::hex use these
 104:/usr/include/c++/9/ostream ****        *  functions in constructs like "std::cout << std::endl".  For more
 105:/usr/include/c++/9/ostream ****        *  information, see the iomanip header.
 106:/usr/include/c++/9/ostream ****       */
 107:/usr/include/c++/9/ostream ****       __ostream_type&
 108:/usr/include/c++/9/ostream ****       operator<<(__ostream_type& (*__pf)(__ostream_type&))
 109:/usr/include/c++/9/ostream ****       {
 110:/usr/include/c++/9/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 111:/usr/include/c++/9/ostream **** 	// DR 60. What is a formatted input function?
 112:/usr/include/c++/9/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 113:/usr/include/c++/9/ostream **** 	return __pf(*this);
 114:/usr/include/c++/9/ostream ****       }
 115:/usr/include/c++/9/ostream **** 
 116:/usr/include/c++/9/ostream ****       __ostream_type&
 117:/usr/include/c++/9/ostream ****       operator<<(__ios_type& (*__pf)(__ios_type&))
 118:/usr/include/c++/9/ostream ****       {
 119:/usr/include/c++/9/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/9/ostream **** 	// DR 60. What is a formatted input function?
 121:/usr/include/c++/9/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 122:/usr/include/c++/9/ostream **** 	__pf(*this);
 123:/usr/include/c++/9/ostream **** 	return *this;
 124:/usr/include/c++/9/ostream ****       }
 125:/usr/include/c++/9/ostream **** 
 126:/usr/include/c++/9/ostream ****       __ostream_type&
 127:/usr/include/c++/9/ostream ****       operator<<(ios_base& (*__pf) (ios_base&))
 128:/usr/include/c++/9/ostream ****       {
 129:/usr/include/c++/9/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 130:/usr/include/c++/9/ostream **** 	// DR 60. What is a formatted input function?
 131:/usr/include/c++/9/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 132:/usr/include/c++/9/ostream **** 	__pf(*this);
 133:/usr/include/c++/9/ostream **** 	return *this;
 134:/usr/include/c++/9/ostream ****       }
 135:/usr/include/c++/9/ostream ****       //@}
 136:/usr/include/c++/9/ostream **** 
 137:/usr/include/c++/9/ostream ****       //@{
 138:/usr/include/c++/9/ostream ****       /**
 139:/usr/include/c++/9/ostream ****        *  @name Inserters
 140:/usr/include/c++/9/ostream ****        *
 141:/usr/include/c++/9/ostream ****        *  All the @c operator<< functions (aka <em>formatted output
 142:/usr/include/c++/9/ostream ****        *  functions</em>) have some common behavior.  Each starts by
 143:/usr/include/c++/9/ostream ****        *  constructing a temporary object of type std::basic_ostream::sentry.
 144:/usr/include/c++/9/ostream ****        *  This can have several effects, concluding with the setting of a
 145:/usr/include/c++/9/ostream ****        *  status flag; see the sentry documentation for more.
 146:/usr/include/c++/9/ostream ****        *
 147:/usr/include/c++/9/ostream ****        *  If the sentry status is good, the function tries to generate
 148:/usr/include/c++/9/ostream ****        *  whatever data is appropriate for the type of the argument.
 149:/usr/include/c++/9/ostream ****        *
 150:/usr/include/c++/9/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 151:/usr/include/c++/9/ostream ****        *  will be turned on in the stream's error state without causing an
 152:/usr/include/c++/9/ostream ****        *  ios_base::failure to be thrown.  The original exception will then
 153:/usr/include/c++/9/ostream ****        *  be rethrown.
 154:/usr/include/c++/9/ostream ****       */
 155:/usr/include/c++/9/ostream **** 
 156:/usr/include/c++/9/ostream ****       //@{
 157:/usr/include/c++/9/ostream ****       /**
 158:/usr/include/c++/9/ostream ****        *  @brief Integer arithmetic inserters
 159:/usr/include/c++/9/ostream ****        *  @param  __n A variable of builtin integral type.
 160:/usr/include/c++/9/ostream ****        *  @return  @c *this if successful
 161:/usr/include/c++/9/ostream ****        *
 162:/usr/include/c++/9/ostream ****        *  These functions use the stream's current locale (specifically, the
 163:/usr/include/c++/9/ostream ****        *  @c num_get facet) to perform numeric formatting.
 164:/usr/include/c++/9/ostream ****       */
 165:/usr/include/c++/9/ostream ****       __ostream_type&
 166:/usr/include/c++/9/ostream ****       operator<<(long __n)
 167:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 168:/usr/include/c++/9/ostream **** 
 169:/usr/include/c++/9/ostream ****       __ostream_type&
 170:/usr/include/c++/9/ostream ****       operator<<(unsigned long __n)
 171:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 172:/usr/include/c++/9/ostream **** 
 173:/usr/include/c++/9/ostream ****       __ostream_type&
 174:/usr/include/c++/9/ostream ****       operator<<(bool __n)
 175:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 176:/usr/include/c++/9/ostream **** 
 177:/usr/include/c++/9/ostream ****       __ostream_type&
 178:/usr/include/c++/9/ostream ****       operator<<(short __n);
 179:/usr/include/c++/9/ostream **** 
 180:/usr/include/c++/9/ostream ****       __ostream_type&
 181:/usr/include/c++/9/ostream ****       operator<<(unsigned short __n)
 182:/usr/include/c++/9/ostream ****       {
 183:/usr/include/c++/9/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 184:/usr/include/c++/9/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 185:/usr/include/c++/9/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 186:/usr/include/c++/9/ostream ****       }
 187:/usr/include/c++/9/ostream **** 
 188:/usr/include/c++/9/ostream ****       __ostream_type&
 189:/usr/include/c++/9/ostream ****       operator<<(int __n);
 190:/usr/include/c++/9/ostream **** 
 191:/usr/include/c++/9/ostream ****       __ostream_type&
 192:/usr/include/c++/9/ostream ****       operator<<(unsigned int __n)
 193:/usr/include/c++/9/ostream ****       {
 194:/usr/include/c++/9/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 195:/usr/include/c++/9/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 196:/usr/include/c++/9/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 197:/usr/include/c++/9/ostream ****       }
 198:/usr/include/c++/9/ostream **** 
 199:/usr/include/c++/9/ostream **** #ifdef _GLIBCXX_USE_LONG_LONG
 200:/usr/include/c++/9/ostream ****       __ostream_type&
 201:/usr/include/c++/9/ostream ****       operator<<(long long __n)
 202:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 203:/usr/include/c++/9/ostream **** 
 204:/usr/include/c++/9/ostream ****       __ostream_type&
 205:/usr/include/c++/9/ostream ****       operator<<(unsigned long long __n)
 206:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 207:/usr/include/c++/9/ostream **** #endif
 208:/usr/include/c++/9/ostream ****       //@}
 209:/usr/include/c++/9/ostream **** 
 210:/usr/include/c++/9/ostream ****       //@{
 211:/usr/include/c++/9/ostream ****       /**
 212:/usr/include/c++/9/ostream ****        *  @brief  Floating point arithmetic inserters
 213:/usr/include/c++/9/ostream ****        *  @param  __f A variable of builtin floating point type.
 214:/usr/include/c++/9/ostream ****        *  @return  @c *this if successful
 215:/usr/include/c++/9/ostream ****        *
 216:/usr/include/c++/9/ostream ****        *  These functions use the stream's current locale (specifically, the
 217:/usr/include/c++/9/ostream ****        *  @c num_get facet) to perform numeric formatting.
 218:/usr/include/c++/9/ostream ****       */
 219:/usr/include/c++/9/ostream ****       __ostream_type&
 220:/usr/include/c++/9/ostream ****       operator<<(double __f)
 221:/usr/include/c++/9/ostream ****       { return _M_insert(__f); }
 222:/usr/include/c++/9/ostream **** 
 223:/usr/include/c++/9/ostream ****       __ostream_type&
 224:/usr/include/c++/9/ostream ****       operator<<(float __f)
 225:/usr/include/c++/9/ostream ****       {
 226:/usr/include/c++/9/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 227:/usr/include/c++/9/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 228:/usr/include/c++/9/ostream **** 	return _M_insert(static_cast<double>(__f));
 229:/usr/include/c++/9/ostream ****       }
 230:/usr/include/c++/9/ostream **** 
 231:/usr/include/c++/9/ostream ****       __ostream_type&
 232:/usr/include/c++/9/ostream ****       operator<<(long double __f)
 233:/usr/include/c++/9/ostream ****       { return _M_insert(__f); }
 234:/usr/include/c++/9/ostream ****       //@}
 235:/usr/include/c++/9/ostream **** 
 236:/usr/include/c++/9/ostream ****       /**
 237:/usr/include/c++/9/ostream ****        *  @brief  Pointer arithmetic inserters
 238:/usr/include/c++/9/ostream ****        *  @param  __p A variable of pointer type.
 239:/usr/include/c++/9/ostream ****        *  @return  @c *this if successful
 240:/usr/include/c++/9/ostream ****        *
 241:/usr/include/c++/9/ostream ****        *  These functions use the stream's current locale (specifically, the
 242:/usr/include/c++/9/ostream ****        *  @c num_get facet) to perform numeric formatting.
 243:/usr/include/c++/9/ostream ****       */
 244:/usr/include/c++/9/ostream ****       __ostream_type&
 245:/usr/include/c++/9/ostream ****       operator<<(const void* __p)
 246:/usr/include/c++/9/ostream ****       { return _M_insert(__p); }
 247:/usr/include/c++/9/ostream **** 
 248:/usr/include/c++/9/ostream **** #if __cplusplus >= 201703L
 249:/usr/include/c++/9/ostream ****       __ostream_type&
 250:/usr/include/c++/9/ostream ****       operator<<(nullptr_t)
 251:/usr/include/c++/9/ostream ****       { return *this << "nullptr"; }
 252:/usr/include/c++/9/ostream **** #endif
 253:/usr/include/c++/9/ostream **** 
 254:/usr/include/c++/9/ostream ****       /**
 255:/usr/include/c++/9/ostream ****        *  @brief  Extracting from another streambuf.
 256:/usr/include/c++/9/ostream ****        *  @param  __sb  A pointer to a streambuf
 257:/usr/include/c++/9/ostream ****        *
 258:/usr/include/c++/9/ostream ****        *  This function behaves like one of the basic arithmetic extractors,
 259:/usr/include/c++/9/ostream ****        *  in that it also constructs a sentry object and has the same error
 260:/usr/include/c++/9/ostream ****        *  handling behavior.
 261:/usr/include/c++/9/ostream ****        *
 262:/usr/include/c++/9/ostream ****        *  If @p __sb is NULL, the stream will set failbit in its error state.
 263:/usr/include/c++/9/ostream ****        *
 264:/usr/include/c++/9/ostream ****        *  Characters are extracted from @p __sb and inserted into @c *this
 265:/usr/include/c++/9/ostream ****        *  until one of the following occurs:
 266:/usr/include/c++/9/ostream ****        *
 267:/usr/include/c++/9/ostream ****        *  - the input stream reaches end-of-file,
 268:/usr/include/c++/9/ostream ****        *  - insertion into the output sequence fails (in this case, the
 269:/usr/include/c++/9/ostream ****        *    character that would have been inserted is not extracted), or
 270:/usr/include/c++/9/ostream ****        *  - an exception occurs while getting a character from @p __sb, which
 271:/usr/include/c++/9/ostream ****        *    sets failbit in the error state
 272:/usr/include/c++/9/ostream ****        *
 273:/usr/include/c++/9/ostream ****        *  If the function inserts no characters, failbit is set.
 274:/usr/include/c++/9/ostream ****       */
 275:/usr/include/c++/9/ostream ****       __ostream_type&
 276:/usr/include/c++/9/ostream ****       operator<<(__streambuf_type* __sb);
 277:/usr/include/c++/9/ostream ****       //@}
 278:/usr/include/c++/9/ostream **** 
 279:/usr/include/c++/9/ostream ****       //@{
 280:/usr/include/c++/9/ostream ****       /**
 281:/usr/include/c++/9/ostream ****        *  @name Unformatted Output Functions
 282:/usr/include/c++/9/ostream ****        *
 283:/usr/include/c++/9/ostream ****        *  All the unformatted output functions have some common behavior.
 284:/usr/include/c++/9/ostream ****        *  Each starts by constructing a temporary object of type
 285:/usr/include/c++/9/ostream ****        *  std::basic_ostream::sentry.  This has several effects, concluding
 286:/usr/include/c++/9/ostream ****        *  with the setting of a status flag; see the sentry documentation
 287:/usr/include/c++/9/ostream ****        *  for more.
 288:/usr/include/c++/9/ostream ****        *
 289:/usr/include/c++/9/ostream ****        *  If the sentry status is good, the function tries to generate
 290:/usr/include/c++/9/ostream ****        *  whatever data is appropriate for the type of the argument.
 291:/usr/include/c++/9/ostream ****        *
 292:/usr/include/c++/9/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 293:/usr/include/c++/9/ostream ****        *  will be turned on in the stream's error state.  If badbit is on in
 294:/usr/include/c++/9/ostream ****        *  the stream's exceptions mask, the exception will be rethrown
 295:/usr/include/c++/9/ostream ****        *  without completing its actions.
 296:/usr/include/c++/9/ostream ****       */
 297:/usr/include/c++/9/ostream **** 
 298:/usr/include/c++/9/ostream ****       /**
 299:/usr/include/c++/9/ostream ****        *  @brief  Simple insertion.
 300:/usr/include/c++/9/ostream ****        *  @param  __c  The character to insert.
 301:/usr/include/c++/9/ostream ****        *  @return  *this
 302:/usr/include/c++/9/ostream ****        *
 303:/usr/include/c++/9/ostream ****        *  Tries to insert @p __c.
 304:/usr/include/c++/9/ostream ****        *
 305:/usr/include/c++/9/ostream ****        *  @note  This function is not overloaded on signed char and
 306:/usr/include/c++/9/ostream ****        *         unsigned char.
 307:/usr/include/c++/9/ostream ****       */
 308:/usr/include/c++/9/ostream ****       __ostream_type&
 309:/usr/include/c++/9/ostream ****       put(char_type __c);
 310:/usr/include/c++/9/ostream **** 
 311:/usr/include/c++/9/ostream ****       /**
 312:/usr/include/c++/9/ostream ****        *  @brief  Core write functionality, without sentry.
 313:/usr/include/c++/9/ostream ****        *  @param  __s  The array to insert.
 314:/usr/include/c++/9/ostream ****        *  @param  __n  Maximum number of characters to insert.
 315:/usr/include/c++/9/ostream ****       */
 316:/usr/include/c++/9/ostream ****       void
 317:/usr/include/c++/9/ostream ****       _M_write(const char_type* __s, streamsize __n)
 318:/usr/include/c++/9/ostream ****       {
 319:/usr/include/c++/9/ostream **** 	const streamsize __put = this->rdbuf()->sputn(__s, __n);
 320:/usr/include/c++/9/ostream **** 	if (__put != __n)
 321:/usr/include/c++/9/ostream **** 	  this->setstate(ios_base::badbit);
 322:/usr/include/c++/9/ostream ****       }
 323:/usr/include/c++/9/ostream **** 
 324:/usr/include/c++/9/ostream ****       /**
 325:/usr/include/c++/9/ostream ****        *  @brief  Character string insertion.
 326:/usr/include/c++/9/ostream ****        *  @param  __s  The array to insert.
 327:/usr/include/c++/9/ostream ****        *  @param  __n  Maximum number of characters to insert.
 328:/usr/include/c++/9/ostream ****        *  @return  *this
 329:/usr/include/c++/9/ostream ****        *
 330:/usr/include/c++/9/ostream ****        *  Characters are copied from @p __s and inserted into the stream until
 331:/usr/include/c++/9/ostream ****        *  one of the following happens:
 332:/usr/include/c++/9/ostream ****        *
 333:/usr/include/c++/9/ostream ****        *  - @p __n characters are inserted
 334:/usr/include/c++/9/ostream ****        *  - inserting into the output sequence fails (in this case, badbit
 335:/usr/include/c++/9/ostream ****        *    will be set in the stream's error state)
 336:/usr/include/c++/9/ostream ****        *
 337:/usr/include/c++/9/ostream ****        *  @note  This function is not overloaded on signed char and
 338:/usr/include/c++/9/ostream ****        *         unsigned char.
 339:/usr/include/c++/9/ostream ****       */
 340:/usr/include/c++/9/ostream ****       __ostream_type&
 341:/usr/include/c++/9/ostream ****       write(const char_type* __s, streamsize __n);
 342:/usr/include/c++/9/ostream ****       //@}
 343:/usr/include/c++/9/ostream **** 
 344:/usr/include/c++/9/ostream ****       /**
 345:/usr/include/c++/9/ostream ****        *  @brief  Synchronizing the stream buffer.
 346:/usr/include/c++/9/ostream ****        *  @return  *this
 347:/usr/include/c++/9/ostream ****        *
 348:/usr/include/c++/9/ostream ****        *  If @c rdbuf() is a null pointer, changes nothing.
 349:/usr/include/c++/9/ostream ****        *
 350:/usr/include/c++/9/ostream ****        *  Otherwise, calls @c rdbuf()->pubsync(), and if that returns -1,
 351:/usr/include/c++/9/ostream ****        *  sets badbit.
 352:/usr/include/c++/9/ostream ****       */
 353:/usr/include/c++/9/ostream ****       __ostream_type&
 354:/usr/include/c++/9/ostream ****       flush();
 355:/usr/include/c++/9/ostream **** 
 356:/usr/include/c++/9/ostream ****       /**
 357:/usr/include/c++/9/ostream ****        *  @brief  Getting the current write position.
 358:/usr/include/c++/9/ostream ****        *  @return  A file position object.
 359:/usr/include/c++/9/ostream ****        *
 360:/usr/include/c++/9/ostream ****        *  If @c fail() is not false, returns @c pos_type(-1) to indicate
 361:/usr/include/c++/9/ostream ****        *  failure.  Otherwise returns @c rdbuf()->pubseekoff(0,cur,out).
 362:/usr/include/c++/9/ostream ****       */
 363:/usr/include/c++/9/ostream ****       pos_type
 364:/usr/include/c++/9/ostream ****       tellp();
 365:/usr/include/c++/9/ostream **** 
 366:/usr/include/c++/9/ostream ****       /**
 367:/usr/include/c++/9/ostream ****        *  @brief  Changing the current write position.
 368:/usr/include/c++/9/ostream ****        *  @param  __pos  A file position object.
 369:/usr/include/c++/9/ostream ****        *  @return  *this
 370:/usr/include/c++/9/ostream ****        *
 371:/usr/include/c++/9/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekpos(pos).  If
 372:/usr/include/c++/9/ostream ****        *  that function fails, sets failbit.
 373:/usr/include/c++/9/ostream ****       */
 374:/usr/include/c++/9/ostream ****       __ostream_type&
 375:/usr/include/c++/9/ostream ****       seekp(pos_type);
 376:/usr/include/c++/9/ostream **** 
 377:/usr/include/c++/9/ostream ****       /**
 378:/usr/include/c++/9/ostream ****        *  @brief  Changing the current write position.
 379:/usr/include/c++/9/ostream ****        *  @param  __off  A file offset object.
 380:/usr/include/c++/9/ostream ****        *  @param  __dir  The direction in which to seek.
 381:/usr/include/c++/9/ostream ****        *  @return  *this
 382:/usr/include/c++/9/ostream ****        *
 383:/usr/include/c++/9/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).
 384:/usr/include/c++/9/ostream ****        *  If that function fails, sets failbit.
 385:/usr/include/c++/9/ostream ****       */
 386:/usr/include/c++/9/ostream ****        __ostream_type&
 387:/usr/include/c++/9/ostream ****       seekp(off_type, ios_base::seekdir);
 388:/usr/include/c++/9/ostream **** 
 389:/usr/include/c++/9/ostream ****     protected:
 390:/usr/include/c++/9/ostream ****       basic_ostream()
 391:/usr/include/c++/9/ostream ****       { this->init(0); }
 3513              		.loc 16 391 9 view .LVU725
 3514 005a 31F6     		xorl	%esi, %esi	#
 3515              	.LBE5269:
 3516              	.LBE5268:
 3517              	.LBE5267:
 3518              	.LBB5276:
 3519              	.LBB5262:
 3520              	.LBB5257:
 3521              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 3522              		.loc 15 462 59 view .LVU726
 3523 005c 48898424 		movq	%rax, 144(%rsp)	# tmp211, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 3523      90000000 
 3524 0064 31C0     		xorl	%eax, %eax	#
 3525 0066 C4E37D39 		vextracti128	$0x1, %ymm0, 392(%rsp)	# tmp127, MEM[(void *)&ss + 344B]
 3525      84248801 
 3525      000001
 3526              	.LVL187:
 3527              		.loc 15 462 59 view .LVU727
 3528              	.LBE5257:
 3529              	.LBE5262:
 3530              	.LBE5276:
 3531              	.LBB5277:
 3532              	.LBI5267:
 390:/usr/include/c++/9/ostream ****       { this->init(0); }
 3533              		.loc 16 390 7 is_stmt 1 view .LVU728
 3534              	.LBE5277:
 3535              	.LBB5278:
 3536              	.LBB5263:
 3537              	.LBB5258:
 3538              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 3539              		.loc 15 462 59 is_stmt 0 view .LVU729
 3540 0071 66898424 		movw	%ax, 368(%rsp)	#, MEM[(void *)&ss + 336B]
 3540      70010000 
 3541              	.LBE5258:
 3542              	.LBE5263:
 3543              	.LBE5278:
 3544              	.LBB5279:
 3545              	.LBB5273:
 3546              	.LBB5270:
 3547              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 3548              		.loc 16 391 7 view .LVU730
 3549 0079 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 3549      000000
 3550              	.LBE5270:
 3551              	.LBE5273:
 3552              	.LBE5279:
 3553              	.LBB5280:
 3554              	.LBB5264:
 3555              	.LBB5259:
 3556              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 3557              		.loc 15 462 59 view .LVU731
 3558 0080 C5F81184 		vmovups	%xmm0, 376(%rsp)	# tmp127, MEM[(void *)&ss + 344B]
 3558      24780100 
 3558      00
 3559              	.LBE5259:
 3560              	.LBE5264:
 3561              	.LBE5280:
 3562              	.LBB5281:
 3563              	.LBB5274:
 3564              	.LBB5271:
 3565              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 3566              		.loc 16 391 7 view .LVU732
 3567 0089 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_19 + -24B], _22
 3568 008d 48894424 		movq	%rax, 32(%rsp)	# tmp212, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 3568      20
 3569 0092 488B0500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const v
 3569      000000
 3570              	.LBE5271:
 3571              	.LBE5274:
 3572              	.LBE5281:
 3573              	.LBB5282:
 3574              	.LBB5265:
 3575              	.LBB5260:
 3576              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 3577              		.loc 15 462 59 view .LVU733
 3578 0099 48C78424 		movq	$0, 360(%rsp)	#, MEM[(struct basic_ios *)&ss + 112B]._M_tie
 3578      68010000 
 3578      00000000 
 3579              	.LBE5260:
 3580              	.LBE5265:
 3581              	.LBE5282:
 3582              	.LBB5283:
 3583              	.LBB5275:
 3584              	.LBB5272:
 3585              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 3586              		.loc 16 391 7 view .LVU734
 3587 00a5 4C01FF   		addq	%r15, %rdi	# tmp194, _22
 3588 00a8 488907   		movq	%rax, (%rdi)	# tmp215, *_22.D.34155._vptr.ios_base
 3589              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 3590              		.loc 16 391 9 view .LVU735
 3591 00ab C5F877   		vzeroupper
 3592              	.LEHB0:
 3593 00ae E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 3593      00
 3594              	.LVL188:
 3595              	.LEHE0:
 3596              		.loc 16 391 9 view .LVU736
 3597              	.LBE5272:
 3598              	.LBE5275:
 3599              	.LBE5283:
 3600              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 3601              		.loc 12 584 53 view .LVU737
 3602 00b3 C5FA7E0D 		vmovq	.LC1(%rip), %xmm1	#, tmp217
 3602      00000000 
 3603 00bb 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp216
 3603      000000
 3604              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 3605              		.loc 12 585 9 view .LVU738
 3606 00c2 4C8D7424 		leaq	40(%rsp), %r14	#, tmp196
 3606      28
 3607              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 3608              		.loc 12 584 53 view .LVU739
 3609 00c7 48898424 		movq	%rax, 144(%rsp)	# tmp216, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 3609      90000000 
 3610              	.LVL189:
 3611              	.LBB5284:
 3612              	.LBI5284:
 111:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 3613              		.loc 12 111 7 is_stmt 1 view .LVU740
 3614              	.LBB5285:
 3615              	.LBB5286:
 3616              	.LBB5287:
 3617              	.LBI5287:
 206:/usr/include/c++/9/streambuf **** 
 207:/usr/include/c++/9/streambuf ****       // [27.5.2.2.1] locales
 208:/usr/include/c++/9/streambuf ****       /**
 209:/usr/include/c++/9/streambuf ****        *  @brief  Entry point for imbue().
 210:/usr/include/c++/9/streambuf ****        *  @param  __loc  The new locale.
 211:/usr/include/c++/9/streambuf ****        *  @return  The previous locale.
 212:/usr/include/c++/9/streambuf ****        *
 213:/usr/include/c++/9/streambuf ****        *  Calls the derived imbue(__loc).
 214:/usr/include/c++/9/streambuf ****       */
 215:/usr/include/c++/9/streambuf ****       locale
 216:/usr/include/c++/9/streambuf ****       pubimbue(const locale& __loc)
 217:/usr/include/c++/9/streambuf ****       {
 218:/usr/include/c++/9/streambuf **** 	locale __tmp(this->getloc());
 219:/usr/include/c++/9/streambuf **** 	this->imbue(__loc);
 220:/usr/include/c++/9/streambuf **** 	_M_buf_locale = __loc;
 221:/usr/include/c++/9/streambuf **** 	return __tmp;
 222:/usr/include/c++/9/streambuf ****       }
 223:/usr/include/c++/9/streambuf **** 
 224:/usr/include/c++/9/streambuf ****       /**
 225:/usr/include/c++/9/streambuf ****        *  @brief  Locale access.
 226:/usr/include/c++/9/streambuf ****        *  @return  The current locale in effect.
 227:/usr/include/c++/9/streambuf ****        *
 228:/usr/include/c++/9/streambuf ****        *  If pubimbue(loc) has been called, then the most recent @c loc
 229:/usr/include/c++/9/streambuf ****        *  is returned.  Otherwise the global locale in effect at the time
 230:/usr/include/c++/9/streambuf ****        *  of construction is returned.
 231:/usr/include/c++/9/streambuf ****       */
 232:/usr/include/c++/9/streambuf ****       locale
 233:/usr/include/c++/9/streambuf ****       getloc() const
 234:/usr/include/c++/9/streambuf ****       { return _M_buf_locale; }
 235:/usr/include/c++/9/streambuf **** 
 236:/usr/include/c++/9/streambuf ****       // [27.5.2.2.2] buffer management and positioning
 237:/usr/include/c++/9/streambuf ****       //@{
 238:/usr/include/c++/9/streambuf ****       /**
 239:/usr/include/c++/9/streambuf ****        *  @brief  Entry points for derived buffer functions.
 240:/usr/include/c++/9/streambuf ****        *
 241:/usr/include/c++/9/streambuf ****        *  The public versions of @c pubfoo dispatch to the protected
 242:/usr/include/c++/9/streambuf ****        *  derived @c foo member functions, passing the arguments (if any)
 243:/usr/include/c++/9/streambuf ****        *  and returning the result unchanged.
 244:/usr/include/c++/9/streambuf ****       */
 245:/usr/include/c++/9/streambuf ****       basic_streambuf*
 246:/usr/include/c++/9/streambuf ****       pubsetbuf(char_type* __s, streamsize __n)
 247:/usr/include/c++/9/streambuf ****       { return this->setbuf(__s, __n); }
 248:/usr/include/c++/9/streambuf **** 
 249:/usr/include/c++/9/streambuf ****       /**
 250:/usr/include/c++/9/streambuf ****        *  @brief  Alters the stream position.
 251:/usr/include/c++/9/streambuf ****        *  @param  __off  Offset.
 252:/usr/include/c++/9/streambuf ****        *  @param  __way  Value for ios_base::seekdir.
 253:/usr/include/c++/9/streambuf ****        *  @param  __mode Value for ios_base::openmode.
 254:/usr/include/c++/9/streambuf ****        *
 255:/usr/include/c++/9/streambuf ****        *  Calls virtual seekoff function.
 256:/usr/include/c++/9/streambuf ****       */
 257:/usr/include/c++/9/streambuf ****       pos_type
 258:/usr/include/c++/9/streambuf ****       pubseekoff(off_type __off, ios_base::seekdir __way,
 259:/usr/include/c++/9/streambuf **** 		 ios_base::openmode __mode = ios_base::in | ios_base::out)
 260:/usr/include/c++/9/streambuf ****       { return this->seekoff(__off, __way, __mode); }
 261:/usr/include/c++/9/streambuf **** 
 262:/usr/include/c++/9/streambuf ****       /**
 263:/usr/include/c++/9/streambuf ****        *  @brief  Alters the stream position.
 264:/usr/include/c++/9/streambuf ****        *  @param  __sp  Position
 265:/usr/include/c++/9/streambuf ****        *  @param  __mode Value for ios_base::openmode.
 266:/usr/include/c++/9/streambuf ****        *
 267:/usr/include/c++/9/streambuf ****        *  Calls virtual seekpos function.
 268:/usr/include/c++/9/streambuf ****       */
 269:/usr/include/c++/9/streambuf ****       pos_type
 270:/usr/include/c++/9/streambuf ****       pubseekpos(pos_type __sp,
 271:/usr/include/c++/9/streambuf **** 		 ios_base::openmode __mode = ios_base::in | ios_base::out)
 272:/usr/include/c++/9/streambuf ****       { return this->seekpos(__sp, __mode); }
 273:/usr/include/c++/9/streambuf **** 
 274:/usr/include/c++/9/streambuf ****       /**
 275:/usr/include/c++/9/streambuf ****        *  @brief  Calls virtual sync function.
 276:/usr/include/c++/9/streambuf ****       */
 277:/usr/include/c++/9/streambuf ****       int
 278:/usr/include/c++/9/streambuf ****       pubsync() { return this->sync(); }
 279:/usr/include/c++/9/streambuf ****       //@}
 280:/usr/include/c++/9/streambuf **** 
 281:/usr/include/c++/9/streambuf ****       // [27.5.2.2.3] get area
 282:/usr/include/c++/9/streambuf ****       /**
 283:/usr/include/c++/9/streambuf ****        *  @brief  Looking ahead into the stream.
 284:/usr/include/c++/9/streambuf ****        *  @return  The number of characters available.
 285:/usr/include/c++/9/streambuf ****        *
 286:/usr/include/c++/9/streambuf ****        *  If a read position is available, returns the number of characters
 287:/usr/include/c++/9/streambuf ****        *  available for reading before the buffer must be refilled.
 288:/usr/include/c++/9/streambuf ****        *  Otherwise returns the derived @c showmanyc().
 289:/usr/include/c++/9/streambuf ****       */
 290:/usr/include/c++/9/streambuf ****       streamsize
 291:/usr/include/c++/9/streambuf ****       in_avail()
 292:/usr/include/c++/9/streambuf ****       {
 293:/usr/include/c++/9/streambuf **** 	const streamsize __ret = this->egptr() - this->gptr();
 294:/usr/include/c++/9/streambuf **** 	return __ret ? __ret : this->showmanyc();
 295:/usr/include/c++/9/streambuf ****       }
 296:/usr/include/c++/9/streambuf **** 
 297:/usr/include/c++/9/streambuf ****       /**
 298:/usr/include/c++/9/streambuf ****        *  @brief  Getting the next character.
 299:/usr/include/c++/9/streambuf ****        *  @return  The next character, or eof.
 300:/usr/include/c++/9/streambuf ****        *
 301:/usr/include/c++/9/streambuf ****        *  Calls @c sbumpc(), and if that function returns
 302:/usr/include/c++/9/streambuf ****        *  @c traits::eof(), so does this function.  Otherwise, @c sgetc().
 303:/usr/include/c++/9/streambuf ****       */
 304:/usr/include/c++/9/streambuf ****       int_type
 305:/usr/include/c++/9/streambuf ****       snextc()
 306:/usr/include/c++/9/streambuf ****       {
 307:/usr/include/c++/9/streambuf **** 	int_type __ret = traits_type::eof();
 308:/usr/include/c++/9/streambuf **** 	if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
 309:/usr/include/c++/9/streambuf **** 						       __ret), true))
 310:/usr/include/c++/9/streambuf **** 	  __ret = this->sgetc();
 311:/usr/include/c++/9/streambuf **** 	return __ret;
 312:/usr/include/c++/9/streambuf ****       }
 313:/usr/include/c++/9/streambuf **** 
 314:/usr/include/c++/9/streambuf ****       /**
 315:/usr/include/c++/9/streambuf ****        *  @brief  Getting the next character.
 316:/usr/include/c++/9/streambuf ****        *  @return  The next character, or eof.
 317:/usr/include/c++/9/streambuf ****        *
 318:/usr/include/c++/9/streambuf ****        *  If the input read position is available, returns that character
 319:/usr/include/c++/9/streambuf ****        *  and increments the read pointer, otherwise calls and returns
 320:/usr/include/c++/9/streambuf ****        *  @c uflow().
 321:/usr/include/c++/9/streambuf ****       */
 322:/usr/include/c++/9/streambuf ****       int_type
 323:/usr/include/c++/9/streambuf ****       sbumpc()
 324:/usr/include/c++/9/streambuf ****       {
 325:/usr/include/c++/9/streambuf **** 	int_type __ret;
 326:/usr/include/c++/9/streambuf **** 	if (__builtin_expect(this->gptr() < this->egptr(), true))
 327:/usr/include/c++/9/streambuf **** 	  {
 328:/usr/include/c++/9/streambuf **** 	    __ret = traits_type::to_int_type(*this->gptr());
 329:/usr/include/c++/9/streambuf **** 	    this->gbump(1);
 330:/usr/include/c++/9/streambuf **** 	  }
 331:/usr/include/c++/9/streambuf **** 	else
 332:/usr/include/c++/9/streambuf **** 	  __ret = this->uflow();
 333:/usr/include/c++/9/streambuf **** 	return __ret;
 334:/usr/include/c++/9/streambuf ****       }
 335:/usr/include/c++/9/streambuf **** 
 336:/usr/include/c++/9/streambuf ****       /**
 337:/usr/include/c++/9/streambuf ****        *  @brief  Getting the next character.
 338:/usr/include/c++/9/streambuf ****        *  @return  The next character, or eof.
 339:/usr/include/c++/9/streambuf ****        *
 340:/usr/include/c++/9/streambuf ****        *  If the input read position is available, returns that character,
 341:/usr/include/c++/9/streambuf ****        *  otherwise calls and returns @c underflow().  Does not move the
 342:/usr/include/c++/9/streambuf ****        *  read position after fetching the character.
 343:/usr/include/c++/9/streambuf ****       */
 344:/usr/include/c++/9/streambuf ****       int_type
 345:/usr/include/c++/9/streambuf ****       sgetc()
 346:/usr/include/c++/9/streambuf ****       {
 347:/usr/include/c++/9/streambuf **** 	int_type __ret;
 348:/usr/include/c++/9/streambuf **** 	if (__builtin_expect(this->gptr() < this->egptr(), true))
 349:/usr/include/c++/9/streambuf **** 	  __ret = traits_type::to_int_type(*this->gptr());
 350:/usr/include/c++/9/streambuf **** 	else
 351:/usr/include/c++/9/streambuf **** 	  __ret = this->underflow();
 352:/usr/include/c++/9/streambuf **** 	return __ret;
 353:/usr/include/c++/9/streambuf ****       }
 354:/usr/include/c++/9/streambuf **** 
 355:/usr/include/c++/9/streambuf ****       /**
 356:/usr/include/c++/9/streambuf ****        *  @brief  Entry point for xsgetn.
 357:/usr/include/c++/9/streambuf ****        *  @param  __s  A buffer area.
 358:/usr/include/c++/9/streambuf ****        *  @param  __n  A count.
 359:/usr/include/c++/9/streambuf ****        *
 360:/usr/include/c++/9/streambuf ****        *  Returns xsgetn(__s,__n).  The effect is to fill @a __s[0] through
 361:/usr/include/c++/9/streambuf ****        *  @a __s[__n-1] with characters from the input sequence, if possible.
 362:/usr/include/c++/9/streambuf ****       */
 363:/usr/include/c++/9/streambuf ****       streamsize
 364:/usr/include/c++/9/streambuf ****       sgetn(char_type* __s, streamsize __n)
 365:/usr/include/c++/9/streambuf ****       { return this->xsgetn(__s, __n); }
 366:/usr/include/c++/9/streambuf **** 
 367:/usr/include/c++/9/streambuf ****       // [27.5.2.2.4] putback
 368:/usr/include/c++/9/streambuf ****       /**
 369:/usr/include/c++/9/streambuf ****        *  @brief  Pushing characters back into the input stream.
 370:/usr/include/c++/9/streambuf ****        *  @param  __c  The character to push back.
 371:/usr/include/c++/9/streambuf ****        *  @return  The previous character, if possible.
 372:/usr/include/c++/9/streambuf ****        *
 373:/usr/include/c++/9/streambuf ****        *  Similar to sungetc(), but @a __c is pushed onto the stream
 374:/usr/include/c++/9/streambuf ****        *  instead of <em>the previous character.</em> If successful,
 375:/usr/include/c++/9/streambuf ****        *  the next character fetched from the input stream will be @a
 376:/usr/include/c++/9/streambuf ****        *  __c.
 377:/usr/include/c++/9/streambuf ****       */
 378:/usr/include/c++/9/streambuf ****       int_type
 379:/usr/include/c++/9/streambuf ****       sputbackc(char_type __c)
 380:/usr/include/c++/9/streambuf ****       {
 381:/usr/include/c++/9/streambuf **** 	int_type __ret;
 382:/usr/include/c++/9/streambuf **** 	const bool __testpos = this->eback() < this->gptr();
 383:/usr/include/c++/9/streambuf **** 	if (__builtin_expect(!__testpos ||
 384:/usr/include/c++/9/streambuf **** 			     !traits_type::eq(__c, this->gptr()[-1]), false))
 385:/usr/include/c++/9/streambuf **** 	  __ret = this->pbackfail(traits_type::to_int_type(__c));
 386:/usr/include/c++/9/streambuf **** 	else
 387:/usr/include/c++/9/streambuf **** 	  {
 388:/usr/include/c++/9/streambuf **** 	    this->gbump(-1);
 389:/usr/include/c++/9/streambuf **** 	    __ret = traits_type::to_int_type(*this->gptr());
 390:/usr/include/c++/9/streambuf **** 	  }
 391:/usr/include/c++/9/streambuf **** 	return __ret;
 392:/usr/include/c++/9/streambuf ****       }
 393:/usr/include/c++/9/streambuf **** 
 394:/usr/include/c++/9/streambuf ****       /**
 395:/usr/include/c++/9/streambuf ****        *  @brief  Moving backwards in the input stream.
 396:/usr/include/c++/9/streambuf ****        *  @return  The previous character, if possible.
 397:/usr/include/c++/9/streambuf ****        *
 398:/usr/include/c++/9/streambuf ****        *  If a putback position is available, this function decrements
 399:/usr/include/c++/9/streambuf ****        *  the input pointer and returns that character.  Otherwise,
 400:/usr/include/c++/9/streambuf ****        *  calls and returns pbackfail().  The effect is to @a unget
 401:/usr/include/c++/9/streambuf ****        *  the last character @a gotten.
 402:/usr/include/c++/9/streambuf ****       */
 403:/usr/include/c++/9/streambuf ****       int_type
 404:/usr/include/c++/9/streambuf ****       sungetc()
 405:/usr/include/c++/9/streambuf ****       {
 406:/usr/include/c++/9/streambuf **** 	int_type __ret;
 407:/usr/include/c++/9/streambuf **** 	if (__builtin_expect(this->eback() < this->gptr(), true))
 408:/usr/include/c++/9/streambuf **** 	  {
 409:/usr/include/c++/9/streambuf **** 	    this->gbump(-1);
 410:/usr/include/c++/9/streambuf **** 	    __ret = traits_type::to_int_type(*this->gptr());
 411:/usr/include/c++/9/streambuf **** 	  }
 412:/usr/include/c++/9/streambuf **** 	else
 413:/usr/include/c++/9/streambuf **** 	  __ret = this->pbackfail();
 414:/usr/include/c++/9/streambuf **** 	return __ret;
 415:/usr/include/c++/9/streambuf ****       }
 416:/usr/include/c++/9/streambuf **** 
 417:/usr/include/c++/9/streambuf ****       // [27.5.2.2.5] put area
 418:/usr/include/c++/9/streambuf ****       /**
 419:/usr/include/c++/9/streambuf ****        *  @brief  Entry point for all single-character output functions.
 420:/usr/include/c++/9/streambuf ****        *  @param  __c  A character to output.
 421:/usr/include/c++/9/streambuf ****        *  @return  @a __c, if possible.
 422:/usr/include/c++/9/streambuf ****        *
 423:/usr/include/c++/9/streambuf ****        *  One of two public output functions.
 424:/usr/include/c++/9/streambuf ****        *
 425:/usr/include/c++/9/streambuf ****        *  If a write position is available for the output sequence (i.e.,
 426:/usr/include/c++/9/streambuf ****        *  the buffer is not full), stores @a __c in that position, increments
 427:/usr/include/c++/9/streambuf ****        *  the position, and returns @c traits::to_int_type(__c).  If a write
 428:/usr/include/c++/9/streambuf ****        *  position is not available, returns @c overflow(__c).
 429:/usr/include/c++/9/streambuf ****       */
 430:/usr/include/c++/9/streambuf ****       int_type
 431:/usr/include/c++/9/streambuf ****       sputc(char_type __c)
 432:/usr/include/c++/9/streambuf ****       {
 433:/usr/include/c++/9/streambuf **** 	int_type __ret;
 434:/usr/include/c++/9/streambuf **** 	if (__builtin_expect(this->pptr() < this->epptr(), true))
 435:/usr/include/c++/9/streambuf **** 	  {
 436:/usr/include/c++/9/streambuf **** 	    *this->pptr() = __c;
 437:/usr/include/c++/9/streambuf **** 	    this->pbump(1);
 438:/usr/include/c++/9/streambuf **** 	    __ret = traits_type::to_int_type(__c);
 439:/usr/include/c++/9/streambuf **** 	  }
 440:/usr/include/c++/9/streambuf **** 	else
 441:/usr/include/c++/9/streambuf **** 	  __ret = this->overflow(traits_type::to_int_type(__c));
 442:/usr/include/c++/9/streambuf **** 	return __ret;
 443:/usr/include/c++/9/streambuf ****       }
 444:/usr/include/c++/9/streambuf **** 
 445:/usr/include/c++/9/streambuf ****       /**
 446:/usr/include/c++/9/streambuf ****        *  @brief  Entry point for all single-character output functions.
 447:/usr/include/c++/9/streambuf ****        *  @param  __s  A buffer read area.
 448:/usr/include/c++/9/streambuf ****        *  @param  __n  A count.
 449:/usr/include/c++/9/streambuf ****        *
 450:/usr/include/c++/9/streambuf ****        *  One of two public output functions.
 451:/usr/include/c++/9/streambuf ****        *
 452:/usr/include/c++/9/streambuf ****        *
 453:/usr/include/c++/9/streambuf ****        *  Returns xsputn(__s,__n).  The effect is to write @a __s[0] through
 454:/usr/include/c++/9/streambuf ****        *  @a __s[__n-1] to the output sequence, if possible.
 455:/usr/include/c++/9/streambuf ****       */
 456:/usr/include/c++/9/streambuf ****       streamsize
 457:/usr/include/c++/9/streambuf ****       sputn(const char_type* __s, streamsize __n)
 458:/usr/include/c++/9/streambuf ****       { return this->xsputn(__s, __n); }
 459:/usr/include/c++/9/streambuf **** 
 460:/usr/include/c++/9/streambuf ****     protected:
 461:/usr/include/c++/9/streambuf ****       /**
 462:/usr/include/c++/9/streambuf ****        *  @brief  Base constructor.
 463:/usr/include/c++/9/streambuf ****        *
 464:/usr/include/c++/9/streambuf ****        *  Only called from derived constructors, and sets up all the
 465:/usr/include/c++/9/streambuf ****        *  buffer data to zero, including the pointers described in the
 466:/usr/include/c++/9/streambuf ****        *  basic_streambuf class description.  Note that, as a result,
 467:/usr/include/c++/9/streambuf ****        *  - the class starts with no read nor write positions available,
 468:/usr/include/c++/9/streambuf ****        *  - this is not an error
 469:/usr/include/c++/9/streambuf ****       */
 470:/usr/include/c++/9/streambuf ****       basic_streambuf()
 3618              		.loc 13 470 7 view .LVU741
 3619              	.LBE5287:
 3620              	.LBE5286:
 3621              	.LBE5285:
 3622              	.LBE5284:
 3623              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 3624              		.loc 12 584 53 is_stmt 0 view .LVU742
 3625 00cf 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp218
 3625      000000
 3626 00d6 C4E3F122 		vpinsrq	$1, %rax, %xmm1, %xmm0	# tmp218, tmp217, tmp133
 3626      C001
 3627              	.LBB5323:
 3628              	.LBB5320:
 3629              	.LBB5317:
 3630              	.LBB5292:
 3631              	.LBB5288:
 3632              	.LBB5289:
 3633              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 471:/usr/include/c++/9/streambuf ****       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
 472:/usr/include/c++/9/streambuf ****       _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
 473:/usr/include/c++/9/streambuf ****       _M_buf_locale(locale())
 3634              		.loc 13 473 29 view .LVU743
 3635 00dc 488D4424 		leaq	96(%rsp), %rax	#, tmp193
 3635      60
 3636 00e1 4889C7   		movq	%rax, %rdi	# tmp193,
 3637              	.LBE5289:
 3638              	.LBE5288:
 3639              	.LBE5292:
 3640              	.LBE5317:
 3641              	.LBE5320:
 3642              	.LBE5323:
 3643              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 3644              		.loc 12 584 53 view .LVU744
 3645 00e4 C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp133, MEM[(int (*) () * *)&ss]
 3645      2420
 3646              	.LBB5324:
 3647              	.LBB5321:
 3648              	.LBB5318:
 3649              	.LBB5293:
 3650              	.LBB5291:
 3651              	.LBB5290:
 3652              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 3653              		.loc 13 473 29 view .LVU745
 3654 00ea C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp135
 3655 00ee 48894424 		movq	%rax, 16(%rsp)	# tmp193, %sfp
 3655      10
 3656 00f3 C5F82944 		vmovaps	%xmm0, 48(%rsp)	# tmp135, MEM[(char_type * *)&ss + 16B]
 3656      2430
 3657 00f9 C5F82944 		vmovaps	%xmm0, 64(%rsp)	# tmp135, MEM[(char_type * *)&ss + 32B]
 3657      2440
 3658 00ff C5F82944 		vmovaps	%xmm0, 80(%rsp)	# tmp135, MEM[(char_type * *)&ss + 48B]
 3658      2450
 3659 0105 E8000000 		call	_ZNSt6localeC1Ev@PLT	#
 3659      00
 3660              	.LVL190:
 3661              		.loc 13 473 29 view .LVU746
 3662              	.LBE5290:
 3663              	.LBE5291:
 3664              	.LBE5293:
 3665              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 3666              		.loc 12 112 56 view .LVU747
 3667 010a 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp220
 3667      000000
 3668              	.LBE5318:
 3669              	.LBE5321:
 3670              	.LBE5324:
 3671              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 3672              		.loc 12 585 9 view .LVU748
 3673 0111 4C89F6   		movq	%r14, %rsi	# tmp196,
 3674 0114 4C89EF   		movq	%r13, %rdi	# tmp199,
 3675              	.LBB5325:
 3676              	.LBB5322:
 3677              	.LBB5319:
 3678              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 3679              		.loc 12 112 56 view .LVU749
 3680 0117 48894424 		movq	%rax, 40(%rsp)	# tmp220, MEM[(struct basic_stringbuf *)&ss + 8B].D.48380._vptr.basic_streambu
 3680      28
 3681              	.LBB5294:
 3682              	.LBB5295:
 3683              	.LBB5296:
 3684              	.LBB5297:
 3685              	.LBB5298:
 3686              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 3687              		.loc 2 160 46 view .LVU750
 3688 011c 488D8424 		leaq	128(%rsp), %rax	#, tmp198
 3688      80000000 
 3689              	.LBE5298:
 3690              	.LBE5297:
 3691              	.LBE5296:
 3692              	.LBE5295:
 3693              	.LBE5294:
 3694              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 3695              		.loc 12 112 56 view .LVU751
 3696 0124 C7442468 		movl	$16, 104(%rsp)	#, MEM[(struct basic_stringbuf *)&ss + 8B]._M_mode
 3696      10000000 
 3697              	.LVL191:
 3698              	.LBB5316:
 3699              	.LBI5294:
 431:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 3700              		.loc 2 431 7 is_stmt 1 view .LVU752
 3701              	.LBB5315:
 3702              	.LBB5304:
 3703              	.LBI5304:
 138:/usr/include/c++/9/bits/allocator.h **** 
 3704              		.loc 5 138 7 view .LVU753
 3705              	.LBB5305:
 3706              	.LBI5305:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 3707              		.loc 4 80 7 view .LVU754
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 3708              		.loc 4 80 7 is_stmt 0 view .LVU755
 3709              	.LBE5305:
 3710              	.LBE5304:
 3711              	.LBB5306:
 3712              	.LBI5306:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 3713              		.loc 2 190 7 is_stmt 1 view .LVU756
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 3714              		.loc 2 190 7 is_stmt 0 view .LVU757
 3715              	.LBE5306:
 3716              	.LBB5307:
 3717              	.LBI5296:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 3718              		.loc 2 159 2 is_stmt 1 view .LVU758
 3719              	.LBB5303:
 3720              	.LBB5302:
 3721              	.LBB5299:
 3722              	.LBI5299:
 3723              		.loc 11 99 5 view .LVU759
 3724              		.loc 11 99 5 is_stmt 0 view .LVU760
 3725              	.LBE5299:
 3726              	.LBB5300:
 3727              	.LBI5300:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3728              		.loc 5 141 7 is_stmt 1 view .LVU761
 3729              	.LBB5301:
 3730              	.LBI5301:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3731              		.loc 4 83 7 view .LVU762
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3732              		.loc 4 83 7 is_stmt 0 view .LVU763
 3733              	.LBE5301:
 3734              	.LBE5300:
 3735              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 3736              		.loc 2 160 46 view .LVU764
 3737 012c 48894424 		movq	%rax, 8(%rsp)	# tmp198, %sfp
 3737      08
 3738 0131 48894424 		movq	%rax, 112(%rsp)	# tmp198, MEM[(struct _Alloc_hider *)&ss + 80B]._M_p
 3738      70
 3739              	.LVL192:
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 3740              		.loc 2 160 46 view .LVU765
 3741              	.LBE5302:
 3742              	.LBE5303:
 3743              	.LBE5307:
 3744              	.LBB5308:
 3745              	.LBI5308:
 3746              		.loc 5 153 7 is_stmt 1 view .LVU766
 3747              	.LBB5309:
 3748              	.LBI5309:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3749              		.loc 4 89 7 view .LVU767
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3750              		.loc 4 89 7 is_stmt 0 view .LVU768
 3751              	.LBE5309:
 3752              	.LBE5308:
 3753              	.LBB5310:
 3754              	.LBI5310:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 3755              		.loc 2 214 7 is_stmt 1 view .LVU769
 3756              	.LBB5311:
 3757              	.LBI5311:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 3758              		.loc 2 182 7 view .LVU770
 3759              	.LBB5312:
 3760              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 3761              		.loc 2 183 9 is_stmt 0 view .LVU771
 3762 0136 48C74424 		movq	$0, 120(%rsp)	#, MEM[(size_type *)&ss + 88B]
 3762      78000000 
 3762      00
 3763              	.LVL193:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 3764              		.loc 2 183 9 view .LVU772
 3765              	.LBE5312:
 3766              	.LBE5311:
 3767              	.LBB5313:
 3768              	.LBI5313:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 3769              		.loc 8 299 7 is_stmt 1 view .LVU773
 3770              	.LBB5314:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3771              		.loc 8 300 9 view .LVU774
 3772              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3773              		.loc 8 300 14 is_stmt 0 view .LVU775
 3774 013f C6842480 		movb	$0, 128(%rsp)	#, MEM[(char_type &)&ss + 96]
 3774      00000000 
 3775              	.LVL194:
 3776              	.LEHB1:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3777              		.loc 8 300 14 view .LVU776
 3778              	.LBE5314:
 3779              	.LBE5313:
 3780              	.LBE5310:
 3781              	.LBE5315:
 3782              	.LBE5316:
 3783              	.LBE5319:
 3784              	.LBE5322:
 3785              	.LBE5325:
 3786              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 3787              		.loc 12 585 9 view .LVU777
 3788 0147 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 3788      00
 3789              	.LVL195:
 3790              	.LEHE1:
 3791              		.loc 12 585 9 view .LVU778
 3792              	.LBE5330:
 3793              	.LBE5332:
 3794              	.LBE5334:
 3795              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:52:     _str(ss, args...);
  51:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
  52:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     _str(ss, args...);
 3796              		.loc 14 52 9 view .LVU779
 3797 014c 488B4424 		movq	24(%rsp), %rax	# %sfp, args#0
 3797      18
 3798 0151 4C8B30   		movq	(%rax), %r14	# *args#0_4(D), _10
 3799              	.LVL196:
 3800              	.LBB5335:
 3801              	.LBI5335:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 3802              		.loc 14 44 22 is_stmt 1 view .LVU780
 3803              	.LBB5336:
 3804              	.LBB5337:
 3805              	.LBI5337:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 3806              		.loc 14 38 22 view .LVU781
 3807              	.LBB5338:
 3808              	.LBI5338:
 392:/usr/include/c++/9/ostream **** 
 393:/usr/include/c++/9/ostream **** #if __cplusplus >= 201103L
 394:/usr/include/c++/9/ostream ****       // Non-standard constructor that does not call init()
 395:/usr/include/c++/9/ostream ****       basic_ostream(basic_iostream<_CharT, _Traits>&) { }
 396:/usr/include/c++/9/ostream **** 
 397:/usr/include/c++/9/ostream ****       basic_ostream(const basic_ostream&) = delete;
 398:/usr/include/c++/9/ostream **** 
 399:/usr/include/c++/9/ostream ****       basic_ostream(basic_ostream&& __rhs)
 400:/usr/include/c++/9/ostream ****       : __ios_type()
 401:/usr/include/c++/9/ostream ****       { __ios_type::move(__rhs); }
 402:/usr/include/c++/9/ostream **** 
 403:/usr/include/c++/9/ostream ****       // 27.7.3.3 Assign/swap
 404:/usr/include/c++/9/ostream **** 
 405:/usr/include/c++/9/ostream ****       basic_ostream& operator=(const basic_ostream&) = delete;
 406:/usr/include/c++/9/ostream **** 
 407:/usr/include/c++/9/ostream ****       basic_ostream&
 408:/usr/include/c++/9/ostream ****       operator=(basic_ostream&& __rhs)
 409:/usr/include/c++/9/ostream ****       {
 410:/usr/include/c++/9/ostream **** 	swap(__rhs);
 411:/usr/include/c++/9/ostream **** 	return *this;
 412:/usr/include/c++/9/ostream ****       }
 413:/usr/include/c++/9/ostream **** 
 414:/usr/include/c++/9/ostream ****       void
 415:/usr/include/c++/9/ostream ****       swap(basic_ostream& __rhs)
 416:/usr/include/c++/9/ostream ****       { __ios_type::swap(__rhs); }
 417:/usr/include/c++/9/ostream **** #endif
 418:/usr/include/c++/9/ostream **** 
 419:/usr/include/c++/9/ostream ****       template<typename _ValueT>
 420:/usr/include/c++/9/ostream **** 	__ostream_type&
 421:/usr/include/c++/9/ostream **** 	_M_insert(_ValueT __v);
 422:/usr/include/c++/9/ostream ****     };
 423:/usr/include/c++/9/ostream **** 
 424:/usr/include/c++/9/ostream ****   /**
 425:/usr/include/c++/9/ostream ****    *  @brief  Performs setup work for output streams.
 426:/usr/include/c++/9/ostream ****    *
 427:/usr/include/c++/9/ostream ****    *  Objects of this class are created before all of the standard
 428:/usr/include/c++/9/ostream ****    *  inserters are run.  It is responsible for <em>exception-safe prefix and
 429:/usr/include/c++/9/ostream ****    *  suffix operations</em>.
 430:/usr/include/c++/9/ostream ****   */
 431:/usr/include/c++/9/ostream ****   template <typename _CharT, typename _Traits>
 432:/usr/include/c++/9/ostream ****     class basic_ostream<_CharT, _Traits>::sentry
 433:/usr/include/c++/9/ostream ****     {
 434:/usr/include/c++/9/ostream ****       // Data Members.
 435:/usr/include/c++/9/ostream ****       bool 				_M_ok;
 436:/usr/include/c++/9/ostream ****       basic_ostream<_CharT, _Traits>& 	_M_os;
 437:/usr/include/c++/9/ostream **** 
 438:/usr/include/c++/9/ostream ****     public:
 439:/usr/include/c++/9/ostream ****       /**
 440:/usr/include/c++/9/ostream ****        *  @brief  The constructor performs preparatory work.
 441:/usr/include/c++/9/ostream ****        *  @param  __os  The output stream to guard.
 442:/usr/include/c++/9/ostream ****        *
 443:/usr/include/c++/9/ostream ****        *  If the stream state is good (@a __os.good() is true), then if the
 444:/usr/include/c++/9/ostream ****        *  stream is tied to another output stream, @c is.tie()->flush()
 445:/usr/include/c++/9/ostream ****        *  is called to synchronize the output sequences.
 446:/usr/include/c++/9/ostream ****        *
 447:/usr/include/c++/9/ostream ****        *  If the stream state is still good, then the sentry state becomes
 448:/usr/include/c++/9/ostream ****        *  true (@a okay).
 449:/usr/include/c++/9/ostream ****       */
 450:/usr/include/c++/9/ostream ****       explicit
 451:/usr/include/c++/9/ostream ****       sentry(basic_ostream<_CharT, _Traits>& __os);
 452:/usr/include/c++/9/ostream **** 
 453:/usr/include/c++/9/ostream **** #pragma GCC diagnostic push
 454:/usr/include/c++/9/ostream **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 455:/usr/include/c++/9/ostream ****       /**
 456:/usr/include/c++/9/ostream ****        *  @brief  Possibly flushes the stream.
 457:/usr/include/c++/9/ostream ****        *
 458:/usr/include/c++/9/ostream ****        *  If @c ios_base::unitbuf is set in @c os.flags(), and
 459:/usr/include/c++/9/ostream ****        *  @c std::uncaught_exception() is true, the sentry destructor calls
 460:/usr/include/c++/9/ostream ****        *  @c flush() on the output stream.
 461:/usr/include/c++/9/ostream ****       */
 462:/usr/include/c++/9/ostream ****       ~sentry()
 463:/usr/include/c++/9/ostream ****       {
 464:/usr/include/c++/9/ostream **** 	// XXX MT
 465:/usr/include/c++/9/ostream **** 	if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
 466:/usr/include/c++/9/ostream **** 	  {
 467:/usr/include/c++/9/ostream **** 	    // Can't call flush directly or else will get into recursive lock.
 468:/usr/include/c++/9/ostream **** 	    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
 469:/usr/include/c++/9/ostream **** 	      _M_os.setstate(ios_base::badbit);
 470:/usr/include/c++/9/ostream **** 	  }
 471:/usr/include/c++/9/ostream ****       }
 472:/usr/include/c++/9/ostream **** #pragma GCC diagnostic pop
 473:/usr/include/c++/9/ostream **** 
 474:/usr/include/c++/9/ostream ****       /**
 475:/usr/include/c++/9/ostream ****        *  @brief  Quick status checking.
 476:/usr/include/c++/9/ostream ****        *  @return  The sentry state.
 477:/usr/include/c++/9/ostream ****        *
 478:/usr/include/c++/9/ostream ****        *  For ease of use, sentries may be converted to booleans.  The
 479:/usr/include/c++/9/ostream ****        *  return value is that of the sentry state (true == okay).
 480:/usr/include/c++/9/ostream ****       */
 481:/usr/include/c++/9/ostream **** #if __cplusplus >= 201103L
 482:/usr/include/c++/9/ostream ****       explicit
 483:/usr/include/c++/9/ostream **** #endif
 484:/usr/include/c++/9/ostream ****       operator bool() const
 485:/usr/include/c++/9/ostream ****       { return _M_ok; }
 486:/usr/include/c++/9/ostream ****     };
 487:/usr/include/c++/9/ostream **** 
 488:/usr/include/c++/9/ostream ****   //@{
 489:/usr/include/c++/9/ostream ****   /**
 490:/usr/include/c++/9/ostream ****    *  @brief  Character inserters
 491:/usr/include/c++/9/ostream ****    *  @param  __out  An output stream.
 492:/usr/include/c++/9/ostream ****    *  @param  __c  A character.
 493:/usr/include/c++/9/ostream ****    *  @return  out
 494:/usr/include/c++/9/ostream ****    *
 495:/usr/include/c++/9/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 496:/usr/include/c++/9/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 497:/usr/include/c++/9/ostream ****    *  status, this function inserts a single character and any required
 498:/usr/include/c++/9/ostream ****    *  padding (as determined by [22.2.2.2.2]).  @c __out.width(0) is then
 499:/usr/include/c++/9/ostream ****    *  called.
 500:/usr/include/c++/9/ostream ****    *
 501:/usr/include/c++/9/ostream ****    *  If @p __c is of type @c char and the character type of the stream is not
 502:/usr/include/c++/9/ostream ****    *  @c char, the character is widened before insertion.
 503:/usr/include/c++/9/ostream ****   */
 504:/usr/include/c++/9/ostream ****   template<typename _CharT, typename _Traits>
 505:/usr/include/c++/9/ostream ****     inline basic_ostream<_CharT, _Traits>&
 506:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
 507:/usr/include/c++/9/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 508:/usr/include/c++/9/ostream **** 
 509:/usr/include/c++/9/ostream ****   template<typename _CharT, typename _Traits>
 510:/usr/include/c++/9/ostream ****     inline basic_ostream<_CharT, _Traits>&
 511:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
 512:/usr/include/c++/9/ostream ****     { return (__out << __out.widen(__c)); }
 513:/usr/include/c++/9/ostream **** 
 514:/usr/include/c++/9/ostream ****   // Specialization
 515:/usr/include/c++/9/ostream ****   template <class _Traits>
 516:/usr/include/c++/9/ostream ****     inline basic_ostream<char, _Traits>&
 517:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, char __c)
 518:/usr/include/c++/9/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 519:/usr/include/c++/9/ostream **** 
 520:/usr/include/c++/9/ostream ****   // Signed and unsigned
 521:/usr/include/c++/9/ostream ****   template<class _Traits>
 522:/usr/include/c++/9/ostream ****     inline basic_ostream<char, _Traits>&
 523:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
 524:/usr/include/c++/9/ostream ****     { return (__out << static_cast<char>(__c)); }
 525:/usr/include/c++/9/ostream **** 
 526:/usr/include/c++/9/ostream ****   template<class _Traits>
 527:/usr/include/c++/9/ostream ****     inline basic_ostream<char, _Traits>&
 528:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
 529:/usr/include/c++/9/ostream ****     { return (__out << static_cast<char>(__c)); }
 530:/usr/include/c++/9/ostream ****   //@}
 531:/usr/include/c++/9/ostream **** 
 532:/usr/include/c++/9/ostream ****   //@{
 533:/usr/include/c++/9/ostream ****   /**
 534:/usr/include/c++/9/ostream ****    *  @brief  String inserters
 535:/usr/include/c++/9/ostream ****    *  @param  __out  An output stream.
 536:/usr/include/c++/9/ostream ****    *  @param  __s  A character string.
 537:/usr/include/c++/9/ostream ****    *  @return  out
 538:/usr/include/c++/9/ostream ****    *  @pre  @p __s must be a non-NULL pointer
 539:/usr/include/c++/9/ostream ****    *
 540:/usr/include/c++/9/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 541:/usr/include/c++/9/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 542:/usr/include/c++/9/ostream ****    *  status, this function inserts @c traits::length(__s) characters starting
 543:/usr/include/c++/9/ostream ****    *  at @p __s, widened if necessary, followed by any required padding (as
 544:/usr/include/c++/9/ostream ****    *  determined by [22.2.2.2.2]).  @c __out.width(0) is then called.
 545:/usr/include/c++/9/ostream ****   */
 546:/usr/include/c++/9/ostream ****   template<typename _CharT, typename _Traits>
 547:/usr/include/c++/9/ostream ****     inline basic_ostream<_CharT, _Traits>&
 548:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
 549:/usr/include/c++/9/ostream ****     {
 550:/usr/include/c++/9/ostream ****       if (!__s)
 551:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 552:/usr/include/c++/9/ostream ****       else
 553:/usr/include/c++/9/ostream **** 	__ostream_insert(__out, __s,
 554:/usr/include/c++/9/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 555:/usr/include/c++/9/ostream ****       return __out;
 556:/usr/include/c++/9/ostream ****     }
 557:/usr/include/c++/9/ostream **** 
 558:/usr/include/c++/9/ostream ****   template<typename _CharT, typename _Traits>
 559:/usr/include/c++/9/ostream ****     basic_ostream<_CharT, _Traits> &
 560:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
 561:/usr/include/c++/9/ostream **** 
 562:/usr/include/c++/9/ostream ****   // Partial specializations
 563:/usr/include/c++/9/ostream ****   template<class _Traits>
 564:/usr/include/c++/9/ostream ****     inline basic_ostream<char, _Traits>&
 565:/usr/include/c++/9/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
 3809              		.loc 16 565 5 view .LVU782
 3810              	.LBB5339:
 3811              	# /usr/include/c++/9/ostream:567:       if (!__s)
 566:/usr/include/c++/9/ostream ****     {
 567:/usr/include/c++/9/ostream ****       if (!__s)
 3812              		.loc 16 567 7 is_stmt 0 view .LVU783
 3813 0154 4D85F6   		testq	%r14, %r14	# _10
 3814 0157 0F843301 		je	.L132	#,
 3814      0000
 3815              	.LVL197:
 3816              	.LBB5340:
 3817              	.LBI5340:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 3818              		.loc 8 329 7 is_stmt 1 view .LVU784
 3819              	.LBB5341:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 3820              		.loc 8 335 2 view .LVU785
 3821              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 3822              		.loc 8 335 25 is_stmt 0 view .LVU786
 3823 015d 4C89F7   		movq	%r14, %rdi	# _10,
 3824 0160 E8000000 		call	strlen@PLT	#
 3824      00
 3825              	.LVL198:
 3826              	.LBE5341:
 3827              	.LBE5340:
 3828              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 568:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 569:/usr/include/c++/9/ostream ****       else
 570:/usr/include/c++/9/ostream **** 	__ostream_insert(__out, __s,
 3829              		.loc 16 570 18 view .LVU787
 3830 0165 4C89F6   		movq	%r14, %rsi	# _10,
 3831 0168 4C89FF   		movq	%r15, %rdi	# tmp194,
 3832              	.LBB5343:
 3833              	.LBB5342:
 3834              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 3835              		.loc 8 335 25 view .LVU788
 3836 016b 4889C2   		movq	%rax, %rdx	# tmp206, tmp165
 3837              	.LVL199:
 3838              	.LEHB2:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 3839              		.loc 8 335 25 view .LVU789
 3840              	.LBE5342:
 3841              	.LBE5343:
 3842              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 3843              		.loc 16 570 18 view .LVU790
 3844 016e E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 3844      00
 3845              	.LVL200:
 3846              	.L115:
 3847              		.loc 16 570 18 view .LVU791
 3848              	.LBE5339:
 3849              	.LBE5338:
 3850              	.LBE5337:
 3851              	.LBB5352:
 3852              	.LBI5352:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 3853              		.loc 14 38 22 is_stmt 1 view .LVU792
 3854              	.LBB5353:
 3855              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:39:   ss << t;
  39:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return ss;
 3856              		.loc 14 39 6 is_stmt 0 view .LVU793
 3857 0173 8B33     		movl	(%rbx), %esi	# *args#1_5(D),
 3858 0175 4C89FF   		movq	%r15, %rdi	# tmp194,
 3859 0178 E8000000 		call	_ZNSolsEi@PLT	#
 3859      00
 3860              	.LVL201:
 3861              	.LEHE2:
  39:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return ss;
 3862              		.loc 14 39 6 view .LVU794
 3863              	.LBE5353:
 3864              	.LBE5352:
 3865              	.LBE5336:
 3866              	.LBE5335:
 3867              	.LBB5356:
 3868              	.LBI5356:
 586:/usr/include/c++/9/sstream **** 
 587:/usr/include/c++/9/sstream ****       /**
 588:/usr/include/c++/9/sstream ****        *  @brief  Starts with an empty string buffer.
 589:/usr/include/c++/9/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 590:/usr/include/c++/9/sstream ****        *
 591:/usr/include/c++/9/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 592:/usr/include/c++/9/sstream ****        *
 593:/usr/include/c++/9/sstream ****        *  Initializes @c sb using @c mode|out, and passes @c &sb to the base
 594:/usr/include/c++/9/sstream ****        *  class initializer.  Does not allocate any buffer.
 595:/usr/include/c++/9/sstream ****        *
 596:/usr/include/c++/9/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 597:/usr/include/c++/9/sstream ****        *  string class does its own memory management.
 598:/usr/include/c++/9/sstream ****       */
 599:/usr/include/c++/9/sstream ****       explicit
 600:/usr/include/c++/9/sstream ****       basic_ostringstream(ios_base::openmode __mode)
 601:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
 602:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 603:/usr/include/c++/9/sstream **** 
 604:/usr/include/c++/9/sstream ****       /**
 605:/usr/include/c++/9/sstream ****        *  @brief  Starts with an existing string buffer.
 606:/usr/include/c++/9/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 607:/usr/include/c++/9/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 608:/usr/include/c++/9/sstream ****        *
 609:/usr/include/c++/9/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 610:/usr/include/c++/9/sstream ****        *
 611:/usr/include/c++/9/sstream ****        *  Initializes @c sb using @a str and @c mode|out, and passes @c &sb
 612:/usr/include/c++/9/sstream ****        *  to the base class initializer.
 613:/usr/include/c++/9/sstream ****        *
 614:/usr/include/c++/9/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 615:/usr/include/c++/9/sstream ****        *  string class does its own memory management.
 616:/usr/include/c++/9/sstream ****       */
 617:/usr/include/c++/9/sstream ****       explicit
 618:/usr/include/c++/9/sstream ****       basic_ostringstream(const __string_type& __str,
 619:/usr/include/c++/9/sstream **** 			  ios_base::openmode __mode = ios_base::out)
 620:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
 621:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 622:/usr/include/c++/9/sstream **** 
 623:/usr/include/c++/9/sstream ****       /**
 624:/usr/include/c++/9/sstream ****        *  @brief  The destructor does nothing.
 625:/usr/include/c++/9/sstream ****        *
 626:/usr/include/c++/9/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 627:/usr/include/c++/9/sstream ****        *  formatting stream.
 628:/usr/include/c++/9/sstream ****       */
 629:/usr/include/c++/9/sstream ****       ~basic_ostringstream()
 630:/usr/include/c++/9/sstream ****       { }
 631:/usr/include/c++/9/sstream **** 
 632:/usr/include/c++/9/sstream **** #if __cplusplus >= 201103L
 633:/usr/include/c++/9/sstream ****       basic_ostringstream(const basic_ostringstream&) = delete;
 634:/usr/include/c++/9/sstream **** 
 635:/usr/include/c++/9/sstream ****       basic_ostringstream(basic_ostringstream&& __rhs)
 636:/usr/include/c++/9/sstream ****       : __ostream_type(std::move(__rhs)),
 637:/usr/include/c++/9/sstream ****       _M_stringbuf(std::move(__rhs._M_stringbuf))
 638:/usr/include/c++/9/sstream ****       { __ostream_type::set_rdbuf(&_M_stringbuf); }
 639:/usr/include/c++/9/sstream **** 
 640:/usr/include/c++/9/sstream ****       // 27.8.3.2 Assign and swap:
 641:/usr/include/c++/9/sstream **** 
 642:/usr/include/c++/9/sstream ****       basic_ostringstream&
 643:/usr/include/c++/9/sstream ****       operator=(const basic_ostringstream&) = delete;
 644:/usr/include/c++/9/sstream **** 
 645:/usr/include/c++/9/sstream ****       basic_ostringstream&
 646:/usr/include/c++/9/sstream ****       operator=(basic_ostringstream&& __rhs)
 647:/usr/include/c++/9/sstream ****       {
 648:/usr/include/c++/9/sstream **** 	__ostream_type::operator=(std::move(__rhs));
 649:/usr/include/c++/9/sstream **** 	_M_stringbuf = std::move(__rhs._M_stringbuf);
 650:/usr/include/c++/9/sstream **** 	return *this;
 651:/usr/include/c++/9/sstream ****       }
 652:/usr/include/c++/9/sstream **** 
 653:/usr/include/c++/9/sstream ****       void
 654:/usr/include/c++/9/sstream ****       swap(basic_ostringstream& __rhs)
 655:/usr/include/c++/9/sstream ****       {
 656:/usr/include/c++/9/sstream **** 	__ostream_type::swap(__rhs);
 657:/usr/include/c++/9/sstream **** 	_M_stringbuf.swap(__rhs._M_stringbuf);
 658:/usr/include/c++/9/sstream ****       }
 659:/usr/include/c++/9/sstream **** #endif
 660:/usr/include/c++/9/sstream **** 
 661:/usr/include/c++/9/sstream ****       // Members:
 662:/usr/include/c++/9/sstream ****       /**
 663:/usr/include/c++/9/sstream ****        *  @brief  Accessing the underlying buffer.
 664:/usr/include/c++/9/sstream ****        *  @return  The current basic_stringbuf buffer.
 665:/usr/include/c++/9/sstream ****        *
 666:/usr/include/c++/9/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 667:/usr/include/c++/9/sstream ****       */
 668:/usr/include/c++/9/sstream ****       __stringbuf_type*
 669:/usr/include/c++/9/sstream ****       rdbuf() const
 670:/usr/include/c++/9/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 671:/usr/include/c++/9/sstream **** 
 672:/usr/include/c++/9/sstream ****       /**
 673:/usr/include/c++/9/sstream ****        *  @brief  Copying out the string buffer.
 674:/usr/include/c++/9/sstream ****        *  @return  @c rdbuf()->str()
 675:/usr/include/c++/9/sstream ****       */
 676:/usr/include/c++/9/sstream ****       __string_type
 677:/usr/include/c++/9/sstream ****       str() const
 3869              		.loc 12 677 7 is_stmt 1 view .LVU795
 3870              	.LBB5357:
 3871              	.LBI5357:
 178:/usr/include/c++/9/sstream ****       {
 3872              		.loc 12 178 7 view .LVU796
 3873              	.LBB5358:
 3874              	.LBB5359:
 3875              	.LBI5359:
2301:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
2302:/usr/include/c++/9/bits/basic_string.h **** 
2303:/usr/include/c++/9/bits/basic_string.h ****       /**
2304:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
2305:/usr/include/c++/9/bits/basic_string.h ****        *
2306:/usr/include/c++/9/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
2307:/usr/include/c++/9/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
2308:/usr/include/c++/9/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
2309:/usr/include/c++/9/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
2310:/usr/include/c++/9/bits/basic_string.h ****       */
2311:/usr/include/c++/9/bits/basic_string.h ****       const _CharT*
2312:/usr/include/c++/9/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
2313:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
2314:/usr/include/c++/9/bits/basic_string.h **** 
2315:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2316:/usr/include/c++/9/bits/basic_string.h ****       /**
2317:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
2318:/usr/include/c++/9/bits/basic_string.h ****        *
2319:/usr/include/c++/9/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
2320:/usr/include/c++/9/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
2321:/usr/include/c++/9/bits/basic_string.h ****       */
2322:/usr/include/c++/9/bits/basic_string.h ****       _CharT*
2323:/usr/include/c++/9/bits/basic_string.h ****       data() noexcept
2324:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
2325:/usr/include/c++/9/bits/basic_string.h **** #endif
2326:/usr/include/c++/9/bits/basic_string.h **** 
2327:/usr/include/c++/9/bits/basic_string.h ****       /**
2328:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
2329:/usr/include/c++/9/bits/basic_string.h ****       */
2330:/usr/include/c++/9/bits/basic_string.h ****       allocator_type
2331:/usr/include/c++/9/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 3876              		.loc 2 2331 7 view .LVU797
 3877              	.LBB5360:
 3878              	.LBI5360:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3879              		.loc 5 141 7 view .LVU798
 3880              	.LBB5361:
 3881              	.LBI5361:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3882              		.loc 4 83 7 view .LVU799
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3883              		.loc 4 83 7 is_stmt 0 view .LVU800
 3884              	.LBE5361:
 3885              	.LBE5360:
 3886              	.LBE5359:
 3887              	.LBB5362:
 3888              	.LBI5362:
 440:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 3889              		.loc 2 440 7 is_stmt 1 view .LVU801
 3890              	.LBB5363:
 3891              	.LBI5363:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 3892              		.loc 2 190 7 view .LVU802
 3893              	.LBE5363:
 3894              	.LBE5362:
 3895              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 3896              		.loc 12 181 2 is_stmt 0 view .LVU803
 3897 017d 488B4424 		movq	80(%rsp), %rax	# MEM[(char_type * *)&ss + 48B], _40
 3897      50
 3898              	.LBB5379:
 3899              	.LBB5365:
 3900              	.LBB5364:
 3901              	# /usr/include/c++/9/bits/basic_string.h:193: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 3902              		.loc 2 193 51 view .LVU804
 3903 0182 498D5C24 		leaq	16(%r12), %rbx	#, _39
 3903      10
 3904              	.LVL202:
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 3905              		.loc 2 193 51 view .LVU805
 3906              	.LBE5364:
 3907              	.LBE5365:
 3908              	.LBB5366:
 3909              	.LBI5366:
 156:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 3910              		.loc 2 156 2 is_stmt 1 view .LVU806
 3911              	.LBB5367:
 3912              	.LBB5368:
 3913              	.LBI5368:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3914              		.loc 5 141 7 view .LVU807
 3915              	.LBB5369:
 3916              	.LBI5369:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3917              		.loc 4 83 7 view .LVU808
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3918              		.loc 4 83 7 is_stmt 0 view .LVU809
 3919              	.LBE5369:
 3920              	.LBE5368:
 3921              	.LBE5367:
 3922              	.LBE5366:
 3923              	.LBB5371:
 3924              	.LBB5372:
 3925              	.LBB5373:
 3926              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 3927              		.loc 2 183 9 view .LVU810
 3928 0187 49C74424 		movq	$0, 8(%r12)	#, MEM[(size_type *)_6(D) + 8B]
 3928      08000000 
 3928      00
 3929              	.LBE5373:
 3930              	.LBE5372:
 3931              	.LBE5371:
 3932              	.LBB5377:
 3933              	.LBB5370:
 3934              	# /usr/include/c++/9/bits/basic_string.h:157: 	: allocator_type(__a), _M_p(__dat) { }
 157:/usr/include/c++/9/bits/basic_string.h **** 
 3935              		.loc 2 157 35 view .LVU811
 3936 0190 49891C24 		movq	%rbx, (%r12)	# _39, MEM[(struct _Alloc_hider *)_6(D)]._M_p
 3937              	.LVL203:
 157:/usr/include/c++/9/bits/basic_string.h **** 
 3938              		.loc 2 157 35 view .LVU812
 3939              	.LBE5370:
 3940              	.LBE5377:
 3941              	.LBB5378:
 3942              	.LBI5371:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 3943              		.loc 2 214 7 is_stmt 1 view .LVU813
 3944              	.LBB5374:
 3945              	.LBI5372:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 3946              		.loc 2 182 7 view .LVU814
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 3947              		.loc 2 182 7 is_stmt 0 view .LVU815
 3948              	.LBE5374:
 3949              	.LBB5375:
 3950              	.LBI5375:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 3951              		.loc 8 299 7 is_stmt 1 view .LVU816
 3952              	.LBB5376:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3953              		.loc 8 300 9 view .LVU817
 3954              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3955              		.loc 8 300 14 is_stmt 0 view .LVU818
 3956 0194 41C64424 		movb	$0, 16(%r12)	#, MEM[(char_type &)_6(D) + 16]
 3956      1000
 3957              	.LVL204:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 3958              		.loc 8 300 14 view .LVU819
 3959              	.LBE5376:
 3960              	.LBE5375:
 3961              	.LBE5378:
 3962              	.LBE5379:
 3963              	.LBB5380:
 3964              	.LBI5380:
 3965              		.loc 5 153 7 is_stmt 1 view .LVU820
 3966              	.LBB5381:
 3967              	.LBI5381:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3968              		.loc 4 89 7 view .LVU821
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 3969              		.loc 4 89 7 is_stmt 0 view .LVU822
 3970              	.LBE5381:
 3971              	.LBE5380:
 3972              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 3973              		.loc 12 181 2 view .LVU823
 3974 019a 4885C0   		testq	%rax, %rax	# _40
 3975 019d 0F840D01 		je	.L116	#,
 3975      0000
 3976              	.LVL205:
 3977              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 3978              		.loc 12 184 23 view .LVU824
 3979 01a3 4C8B4424 		movq	64(%rsp), %r8	# MEM[(char_type * *)&ss + 32B], _41
 3979      40
 3980              	.LVL206:
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 3981              		.loc 12 184 23 view .LVU825
 3982 01a8 488B4C24 		movq	72(%rsp), %rcx	# MEM[(char_type * *)&ss + 40B], pretmp_56
 3982      48
 3983              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 3984              		.loc 12 184 6 view .LVU826
 3985 01ad 4C39C0   		cmpq	%r8, %rax	# _41, _40
 3986 01b0 0F87BA00 		ja	.L133	#,
 3986      0000
 3987              	.LVL207:
 3988              	.LBB5382:
 3989              	.LBI5382:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 3990              		.loc 2 1470 9 is_stmt 1 view .LVU827
 3991              	.LBB5383:
 3992              	.LBI5383:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 3993              		.loc 2 842 7 view .LVU828
 3994              	.LBB5384:
 3995              	.LBI5384:
 3996              		.file 17 "/usr/include/c++/9/bits/stl_iterator.h"
   1:/usr/include/c++/9/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/9/bits/stl_iterator.h **** 
   3:/usr/include/c++/9/bits/stl_iterator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/stl_iterator.h **** //
   5:/usr/include/c++/9/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/9/bits/stl_iterator.h **** 
  11:/usr/include/c++/9/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/stl_iterator.h **** 
  16:/usr/include/c++/9/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/stl_iterator.h **** 
  20:/usr/include/c++/9/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/stl_iterator.h **** 
  25:/usr/include/c++/9/bits/stl_iterator.h **** /*
  26:/usr/include/c++/9/bits/stl_iterator.h ****  *
  27:/usr/include/c++/9/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/9/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/9/bits/stl_iterator.h ****  *
  30:/usr/include/c++/9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/9/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/9/bits/stl_iterator.h ****  *
  38:/usr/include/c++/9/bits/stl_iterator.h ****  *
  39:/usr/include/c++/9/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/9/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/9/bits/stl_iterator.h ****  *
  42:/usr/include/c++/9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/9/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/9/bits/stl_iterator.h ****  */
  50:/usr/include/c++/9/bits/stl_iterator.h **** 
  51:/usr/include/c++/9/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/9/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/9/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/9/bits/stl_iterator.h ****  *
  55:/usr/include/c++/9/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/9/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/9/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/9/bits/stl_iterator.h ****  */
  59:/usr/include/c++/9/bits/stl_iterator.h **** 
  60:/usr/include/c++/9/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/9/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/9/bits/stl_iterator.h **** 
  63:/usr/include/c++/9/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/9/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/9/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/9/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/9/bits/stl_iterator.h **** 
  68:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
  69:/usr/include/c++/9/bits/stl_iterator.h **** # include <type_traits>
  70:/usr/include/c++/9/bits/stl_iterator.h **** #endif
  71:/usr/include/c++/9/bits/stl_iterator.h **** 
  72:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201703L
  73:/usr/include/c++/9/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  74:/usr/include/c++/9/bits/stl_iterator.h **** #endif
  75:/usr/include/c++/9/bits/stl_iterator.h **** 
  76:/usr/include/c++/9/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  77:/usr/include/c++/9/bits/stl_iterator.h **** {
  78:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  79:/usr/include/c++/9/bits/stl_iterator.h **** 
  80:/usr/include/c++/9/bits/stl_iterator.h ****   /**
  81:/usr/include/c++/9/bits/stl_iterator.h ****    * @addtogroup iterators
  82:/usr/include/c++/9/bits/stl_iterator.h ****    * @{
  83:/usr/include/c++/9/bits/stl_iterator.h ****    */
  84:/usr/include/c++/9/bits/stl_iterator.h **** 
  85:/usr/include/c++/9/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  86:/usr/include/c++/9/bits/stl_iterator.h ****   /**
  87:/usr/include/c++/9/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  88:/usr/include/c++/9/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  89:/usr/include/c++/9/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  90:/usr/include/c++/9/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  91:/usr/include/c++/9/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  92:/usr/include/c++/9/bits/stl_iterator.h ****    *  @code
  93:/usr/include/c++/9/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  94:/usr/include/c++/9/bits/stl_iterator.h ****    *  @endcode
  95:/usr/include/c++/9/bits/stl_iterator.h ****    *
  96:/usr/include/c++/9/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  97:/usr/include/c++/9/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  98:/usr/include/c++/9/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  99:/usr/include/c++/9/bits/stl_iterator.h ****    *
 100:/usr/include/c++/9/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 101:/usr/include/c++/9/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 102:/usr/include/c++/9/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
 103:/usr/include/c++/9/bits/stl_iterator.h ****   */
 104:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 105:/usr/include/c++/9/bits/stl_iterator.h ****     class reverse_iterator
 106:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 107:/usr/include/c++/9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 108:/usr/include/c++/9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 109:/usr/include/c++/9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 110:/usr/include/c++/9/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 111:/usr/include/c++/9/bits/stl_iterator.h ****     {
 112:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 113:/usr/include/c++/9/bits/stl_iterator.h ****       _Iterator current;
 114:/usr/include/c++/9/bits/stl_iterator.h **** 
 115:/usr/include/c++/9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 116:/usr/include/c++/9/bits/stl_iterator.h **** 
 117:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 118:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 119:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 120:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 121:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 122:/usr/include/c++/9/bits/stl_iterator.h **** 
 123:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/9/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 125:/usr/include/c++/9/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 126:/usr/include/c++/9/bits/stl_iterator.h ****       */
 127:/usr/include/c++/9/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 128:/usr/include/c++/9/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 129:/usr/include/c++/9/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 130:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 131:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 132:/usr/include/c++/9/bits/stl_iterator.h **** 
 133:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 134:/usr/include/c++/9/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 135:/usr/include/c++/9/bits/stl_iterator.h ****       */
 136:/usr/include/c++/9/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 137:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 138:/usr/include/c++/9/bits/stl_iterator.h **** 
 139:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 140:/usr/include/c++/9/bits/stl_iterator.h ****        *  The copy constructor is normal.
 141:/usr/include/c++/9/bits/stl_iterator.h ****       */
 142:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 143:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 144:/usr/include/c++/9/bits/stl_iterator.h ****       : current(__x.current) { }
 145:/usr/include/c++/9/bits/stl_iterator.h **** 
 146:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 147:/usr/include/c++/9/bits/stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 148:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 149:/usr/include/c++/9/bits/stl_iterator.h **** 
 150:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/9/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 152:/usr/include/c++/9/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 153:/usr/include/c++/9/bits/stl_iterator.h ****       */
 154:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Iter>
 155:/usr/include/c++/9/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 156:/usr/include/c++/9/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 157:/usr/include/c++/9/bits/stl_iterator.h **** 	: current(__x.base()) { }
 158:/usr/include/c++/9/bits/stl_iterator.h **** 
 159:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 160:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 161:/usr/include/c++/9/bits/stl_iterator.h ****       */
 162:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 163:/usr/include/c++/9/bits/stl_iterator.h ****       base() const
 164:/usr/include/c++/9/bits/stl_iterator.h ****       { return current; }
 165:/usr/include/c++/9/bits/stl_iterator.h **** 
 166:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 167:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 168:/usr/include/c++/9/bits/stl_iterator.h ****        *
 169:/usr/include/c++/9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 170:/usr/include/c++/9/bits/stl_iterator.h ****        *
 171:/usr/include/c++/9/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 172:/usr/include/c++/9/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 173:/usr/include/c++/9/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 174:/usr/include/c++/9/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 175:/usr/include/c++/9/bits/stl_iterator.h ****       */
 176:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 177:/usr/include/c++/9/bits/stl_iterator.h ****       operator*() const
 178:/usr/include/c++/9/bits/stl_iterator.h ****       {
 179:/usr/include/c++/9/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 180:/usr/include/c++/9/bits/stl_iterator.h **** 	return *--__tmp;
 181:/usr/include/c++/9/bits/stl_iterator.h ****       }
 182:/usr/include/c++/9/bits/stl_iterator.h **** 
 183:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 184:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 185:/usr/include/c++/9/bits/stl_iterator.h ****        *
 186:/usr/include/c++/9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 187:/usr/include/c++/9/bits/stl_iterator.h ****       */
 188:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 189:/usr/include/c++/9/bits/stl_iterator.h ****       operator->() const
 190:/usr/include/c++/9/bits/stl_iterator.h ****       {
 191:/usr/include/c++/9/bits/stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 192:/usr/include/c++/9/bits/stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 193:/usr/include/c++/9/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 194:/usr/include/c++/9/bits/stl_iterator.h **** 	--__tmp;
 195:/usr/include/c++/9/bits/stl_iterator.h **** 	return _S_to_pointer(__tmp);
 196:/usr/include/c++/9/bits/stl_iterator.h ****       }
 197:/usr/include/c++/9/bits/stl_iterator.h **** 
 198:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 199:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  @c *this
 200:/usr/include/c++/9/bits/stl_iterator.h ****        *
 201:/usr/include/c++/9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 202:/usr/include/c++/9/bits/stl_iterator.h ****       */
 203:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 204:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 205:/usr/include/c++/9/bits/stl_iterator.h ****       {
 206:/usr/include/c++/9/bits/stl_iterator.h **** 	--current;
 207:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 208:/usr/include/c++/9/bits/stl_iterator.h ****       }
 209:/usr/include/c++/9/bits/stl_iterator.h **** 
 210:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 211:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 212:/usr/include/c++/9/bits/stl_iterator.h ****        *
 213:/usr/include/c++/9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 214:/usr/include/c++/9/bits/stl_iterator.h ****       */
 215:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 216:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 217:/usr/include/c++/9/bits/stl_iterator.h ****       {
 218:/usr/include/c++/9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 219:/usr/include/c++/9/bits/stl_iterator.h **** 	--current;
 220:/usr/include/c++/9/bits/stl_iterator.h **** 	return __tmp;
 221:/usr/include/c++/9/bits/stl_iterator.h ****       }
 222:/usr/include/c++/9/bits/stl_iterator.h **** 
 223:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 224:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  @c *this
 225:/usr/include/c++/9/bits/stl_iterator.h ****        *
 226:/usr/include/c++/9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 227:/usr/include/c++/9/bits/stl_iterator.h ****       */
 228:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 229:/usr/include/c++/9/bits/stl_iterator.h ****       operator--()
 230:/usr/include/c++/9/bits/stl_iterator.h ****       {
 231:/usr/include/c++/9/bits/stl_iterator.h **** 	++current;
 232:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 233:/usr/include/c++/9/bits/stl_iterator.h ****       }
 234:/usr/include/c++/9/bits/stl_iterator.h **** 
 235:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 236:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 237:/usr/include/c++/9/bits/stl_iterator.h ****        *
 238:/usr/include/c++/9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 239:/usr/include/c++/9/bits/stl_iterator.h ****       */
 240:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 241:/usr/include/c++/9/bits/stl_iterator.h ****       operator--(int)
 242:/usr/include/c++/9/bits/stl_iterator.h ****       {
 243:/usr/include/c++/9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 244:/usr/include/c++/9/bits/stl_iterator.h **** 	++current;
 245:/usr/include/c++/9/bits/stl_iterator.h **** 	return __tmp;
 246:/usr/include/c++/9/bits/stl_iterator.h ****       }
 247:/usr/include/c++/9/bits/stl_iterator.h **** 
 248:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 249:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/c++/9/bits/stl_iterator.h ****        *
 251:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/c++/9/bits/stl_iterator.h ****       */
 253:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 254:/usr/include/c++/9/bits/stl_iterator.h ****       operator+(difference_type __n) const
 255:/usr/include/c++/9/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 256:/usr/include/c++/9/bits/stl_iterator.h **** 
 257:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 258:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  *this
 259:/usr/include/c++/9/bits/stl_iterator.h ****        *
 260:/usr/include/c++/9/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 261:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/9/bits/stl_iterator.h ****       */
 263:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 264:/usr/include/c++/9/bits/stl_iterator.h ****       operator+=(difference_type __n)
 265:/usr/include/c++/9/bits/stl_iterator.h ****       {
 266:/usr/include/c++/9/bits/stl_iterator.h **** 	current -= __n;
 267:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/c++/9/bits/stl_iterator.h ****       }
 269:/usr/include/c++/9/bits/stl_iterator.h **** 
 270:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 271:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 272:/usr/include/c++/9/bits/stl_iterator.h ****        *
 273:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/c++/9/bits/stl_iterator.h ****       */
 275:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 276:/usr/include/c++/9/bits/stl_iterator.h ****       operator-(difference_type __n) const
 277:/usr/include/c++/9/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 278:/usr/include/c++/9/bits/stl_iterator.h **** 
 279:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 280:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  *this
 281:/usr/include/c++/9/bits/stl_iterator.h ****        *
 282:/usr/include/c++/9/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 283:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 284:/usr/include/c++/9/bits/stl_iterator.h ****       */
 285:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 286:/usr/include/c++/9/bits/stl_iterator.h ****       operator-=(difference_type __n)
 287:/usr/include/c++/9/bits/stl_iterator.h ****       {
 288:/usr/include/c++/9/bits/stl_iterator.h **** 	current += __n;
 289:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 290:/usr/include/c++/9/bits/stl_iterator.h ****       }
 291:/usr/include/c++/9/bits/stl_iterator.h **** 
 292:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 293:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 294:/usr/include/c++/9/bits/stl_iterator.h ****        *
 295:/usr/include/c++/9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 296:/usr/include/c++/9/bits/stl_iterator.h ****       */
 297:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 298:/usr/include/c++/9/bits/stl_iterator.h ****       operator[](difference_type __n) const
 299:/usr/include/c++/9/bits/stl_iterator.h ****       { return *(*this + __n); }
 300:/usr/include/c++/9/bits/stl_iterator.h **** 
 301:/usr/include/c++/9/bits/stl_iterator.h ****     private:
 302:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Tp>
 303:/usr/include/c++/9/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 304:/usr/include/c++/9/bits/stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 305:/usr/include/c++/9/bits/stl_iterator.h ****         { return __p; }
 306:/usr/include/c++/9/bits/stl_iterator.h **** 
 307:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Tp>
 308:/usr/include/c++/9/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 309:/usr/include/c++/9/bits/stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 310:/usr/include/c++/9/bits/stl_iterator.h ****         { return __t.operator->(); }
 311:/usr/include/c++/9/bits/stl_iterator.h ****     };
 312:/usr/include/c++/9/bits/stl_iterator.h **** 
 313:/usr/include/c++/9/bits/stl_iterator.h ****   //@{
 314:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 315:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 316:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 317:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  A simple bool.
 318:/usr/include/c++/9/bits/stl_iterator.h ****    *
 319:/usr/include/c++/9/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 320:/usr/include/c++/9/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 321:/usr/include/c++/9/bits/stl_iterator.h ****    *
 322:/usr/include/c++/9/bits/stl_iterator.h ****   */
 323:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 324:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 325:/usr/include/c++/9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 326:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 327:/usr/include/c++/9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 328:/usr/include/c++/9/bits/stl_iterator.h **** 
 329:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 330:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 331:/usr/include/c++/9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 332:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 333:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 334:/usr/include/c++/9/bits/stl_iterator.h **** 
 335:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 336:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 337:/usr/include/c++/9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 338:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 339:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x == __y); }
 340:/usr/include/c++/9/bits/stl_iterator.h **** 
 341:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 342:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 343:/usr/include/c++/9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 344:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 345:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y < __x; }
 346:/usr/include/c++/9/bits/stl_iterator.h **** 
 347:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 348:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 349:/usr/include/c++/9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 350:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 351:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__y < __x); }
 352:/usr/include/c++/9/bits/stl_iterator.h **** 
 353:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 354:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 355:/usr/include/c++/9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 356:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 357:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x < __y); }
 358:/usr/include/c++/9/bits/stl_iterator.h **** 
 359:/usr/include/c++/9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 360:/usr/include/c++/9/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 361:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 362:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 363:/usr/include/c++/9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 364:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 365:/usr/include/c++/9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 366:/usr/include/c++/9/bits/stl_iterator.h **** 
 367:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 368:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 369:/usr/include/c++/9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 370:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 371:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 372:/usr/include/c++/9/bits/stl_iterator.h **** 
 373:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 374:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 375:/usr/include/c++/9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 376:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 377:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x == __y); }
 378:/usr/include/c++/9/bits/stl_iterator.h **** 
 379:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 380:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 381:/usr/include/c++/9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 382:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 383:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y < __x; }
 384:/usr/include/c++/9/bits/stl_iterator.h **** 
 385:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 386:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 387:/usr/include/c++/9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 388:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 389:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__y < __x); }
 390:/usr/include/c++/9/bits/stl_iterator.h **** 
 391:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 392:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 393:/usr/include/c++/9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 394:/usr/include/c++/9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 395:/usr/include/c++/9/bits/stl_iterator.h ****     { return !(__x < __y); }
 396:/usr/include/c++/9/bits/stl_iterator.h ****   //@}
 397:/usr/include/c++/9/bits/stl_iterator.h **** 
 398:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 399:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 400:/usr/include/c++/9/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 401:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 402:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 403:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 404:/usr/include/c++/9/bits/stl_iterator.h **** 
 405:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 406:/usr/include/c++/9/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 407:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 408:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 409:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 410:/usr/include/c++/9/bits/stl_iterator.h **** #else
 411:/usr/include/c++/9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 412:/usr/include/c++/9/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 413:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 414:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 415:/usr/include/c++/9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 416:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 417:/usr/include/c++/9/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 418:/usr/include/c++/9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 419:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 420:/usr/include/c++/9/bits/stl_iterator.h **** 
 421:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 422:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 423:/usr/include/c++/9/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 424:/usr/include/c++/9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 425:/usr/include/c++/9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 426:/usr/include/c++/9/bits/stl_iterator.h **** 
 427:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 428:/usr/include/c++/9/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 429:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 430:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 431:/usr/include/c++/9/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 432:/usr/include/c++/9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 433:/usr/include/c++/9/bits/stl_iterator.h **** 
 434:/usr/include/c++/9/bits/stl_iterator.h **** # if __cplusplus > 201103L
 435:/usr/include/c++/9/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 436:/usr/include/c++/9/bits/stl_iterator.h **** 
 437:/usr/include/c++/9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 438:/usr/include/c++/9/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 439:/usr/include/c++/9/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 440:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 441:/usr/include/c++/9/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 442:/usr/include/c++/9/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 443:/usr/include/c++/9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 444:/usr/include/c++/9/bits/stl_iterator.h **** # endif
 445:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 446:/usr/include/c++/9/bits/stl_iterator.h **** 
 447:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 448:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 449:/usr/include/c++/9/bits/stl_iterator.h ****     auto
 450:/usr/include/c++/9/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 451:/usr/include/c++/9/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 452:/usr/include/c++/9/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 453:/usr/include/c++/9/bits/stl_iterator.h **** 
 454:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 455:/usr/include/c++/9/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 456:/usr/include/c++/9/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 457:/usr/include/c++/9/bits/stl_iterator.h ****     { };
 458:/usr/include/c++/9/bits/stl_iterator.h **** 
 459:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator>
 460:/usr/include/c++/9/bits/stl_iterator.h ****     auto
 461:/usr/include/c++/9/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 462:/usr/include/c++/9/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 463:/usr/include/c++/9/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 464:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 465:/usr/include/c++/9/bits/stl_iterator.h **** 
 466:/usr/include/c++/9/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 467:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 468:/usr/include/c++/9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 469:/usr/include/c++/9/bits/stl_iterator.h ****    *
 470:/usr/include/c++/9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 471:/usr/include/c++/9/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 472:/usr/include/c++/9/bits/stl_iterator.h ****    *  push_back.
 473:/usr/include/c++/9/bits/stl_iterator.h ****    *
 474:/usr/include/c++/9/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 475:/usr/include/c++/9/bits/stl_iterator.h ****    *  save typing.
 476:/usr/include/c++/9/bits/stl_iterator.h ****   */
 477:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 478:/usr/include/c++/9/bits/stl_iterator.h ****     class back_insert_iterator
 479:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 480:/usr/include/c++/9/bits/stl_iterator.h ****     {
 481:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 482:/usr/include/c++/9/bits/stl_iterator.h ****       _Container* container;
 483:/usr/include/c++/9/bits/stl_iterator.h **** 
 484:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 485:/usr/include/c++/9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 486:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Container          container_type;
 487:/usr/include/c++/9/bits/stl_iterator.h **** 
 488:/usr/include/c++/9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 489:/usr/include/c++/9/bits/stl_iterator.h ****       explicit
 490:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 491:/usr/include/c++/9/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 492:/usr/include/c++/9/bits/stl_iterator.h **** 
 493:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 494:/usr/include/c++/9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 495:/usr/include/c++/9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 496:/usr/include/c++/9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 497:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 498:/usr/include/c++/9/bits/stl_iterator.h ****        *
 499:/usr/include/c++/9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 500:/usr/include/c++/9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 501:/usr/include/c++/9/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 502:/usr/include/c++/9/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 503:/usr/include/c++/9/bits/stl_iterator.h ****       */
 504:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 505:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 506:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 507:/usr/include/c++/9/bits/stl_iterator.h ****       {
 508:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_back(__value);
 509:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 510:/usr/include/c++/9/bits/stl_iterator.h ****       }
 511:/usr/include/c++/9/bits/stl_iterator.h **** #else
 512:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 513:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 514:/usr/include/c++/9/bits/stl_iterator.h ****       {
 515:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_back(__value);
 516:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 517:/usr/include/c++/9/bits/stl_iterator.h ****       }
 518:/usr/include/c++/9/bits/stl_iterator.h **** 
 519:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 520:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 521:/usr/include/c++/9/bits/stl_iterator.h ****       {
 522:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 523:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 524:/usr/include/c++/9/bits/stl_iterator.h ****       }
 525:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 526:/usr/include/c++/9/bits/stl_iterator.h **** 
 527:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.
 528:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 529:/usr/include/c++/9/bits/stl_iterator.h ****       operator*()
 530:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 531:/usr/include/c++/9/bits/stl_iterator.h **** 
 532:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 533:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator&
 534:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 535:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 536:/usr/include/c++/9/bits/stl_iterator.h **** 
 537:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 538:/usr/include/c++/9/bits/stl_iterator.h ****       back_insert_iterator
 539:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 540:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 541:/usr/include/c++/9/bits/stl_iterator.h ****     };
 542:/usr/include/c++/9/bits/stl_iterator.h **** 
 543:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 544:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 545:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 546:/usr/include/c++/9/bits/stl_iterator.h ****    *
 547:/usr/include/c++/9/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 548:/usr/include/c++/9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 549:/usr/include/c++/9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 550:/usr/include/c++/9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 551:/usr/include/c++/9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 552:/usr/include/c++/9/bits/stl_iterator.h ****    *  types for you.
 553:/usr/include/c++/9/bits/stl_iterator.h ****   */
 554:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 555:/usr/include/c++/9/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 556:/usr/include/c++/9/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 557:/usr/include/c++/9/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 558:/usr/include/c++/9/bits/stl_iterator.h **** 
 559:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 560:/usr/include/c++/9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 561:/usr/include/c++/9/bits/stl_iterator.h ****    *
 562:/usr/include/c++/9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 563:/usr/include/c++/9/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 564:/usr/include/c++/9/bits/stl_iterator.h ****    *  push_front.
 565:/usr/include/c++/9/bits/stl_iterator.h ****    *
 566:/usr/include/c++/9/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 567:/usr/include/c++/9/bits/stl_iterator.h ****    *  save typing.
 568:/usr/include/c++/9/bits/stl_iterator.h ****   */
 569:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 570:/usr/include/c++/9/bits/stl_iterator.h ****     class front_insert_iterator
 571:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 572:/usr/include/c++/9/bits/stl_iterator.h ****     {
 573:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 574:/usr/include/c++/9/bits/stl_iterator.h ****       _Container* container;
 575:/usr/include/c++/9/bits/stl_iterator.h **** 
 576:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 577:/usr/include/c++/9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 578:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Container          container_type;
 579:/usr/include/c++/9/bits/stl_iterator.h **** 
 580:/usr/include/c++/9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 581:/usr/include/c++/9/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 582:/usr/include/c++/9/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 583:/usr/include/c++/9/bits/stl_iterator.h **** 
 584:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 585:/usr/include/c++/9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 586:/usr/include/c++/9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 587:/usr/include/c++/9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 588:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 589:/usr/include/c++/9/bits/stl_iterator.h ****        *
 590:/usr/include/c++/9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 591:/usr/include/c++/9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 592:/usr/include/c++/9/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 593:/usr/include/c++/9/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 594:/usr/include/c++/9/bits/stl_iterator.h ****       */
 595:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 596:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 597:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 598:/usr/include/c++/9/bits/stl_iterator.h ****       {
 599:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_front(__value);
 600:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 601:/usr/include/c++/9/bits/stl_iterator.h ****       }
 602:/usr/include/c++/9/bits/stl_iterator.h **** #else
 603:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 604:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 605:/usr/include/c++/9/bits/stl_iterator.h ****       {
 606:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_front(__value);
 607:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 608:/usr/include/c++/9/bits/stl_iterator.h ****       }
 609:/usr/include/c++/9/bits/stl_iterator.h **** 
 610:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 611:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 612:/usr/include/c++/9/bits/stl_iterator.h ****       {
 613:/usr/include/c++/9/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 614:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 615:/usr/include/c++/9/bits/stl_iterator.h ****       }
 616:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 617:/usr/include/c++/9/bits/stl_iterator.h **** 
 618:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.
 619:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 620:/usr/include/c++/9/bits/stl_iterator.h ****       operator*()
 621:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 622:/usr/include/c++/9/bits/stl_iterator.h **** 
 623:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 624:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator&
 625:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 626:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 627:/usr/include/c++/9/bits/stl_iterator.h **** 
 628:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 629:/usr/include/c++/9/bits/stl_iterator.h ****       front_insert_iterator
 630:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 631:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 632:/usr/include/c++/9/bits/stl_iterator.h ****     };
 633:/usr/include/c++/9/bits/stl_iterator.h **** 
 634:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 635:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 636:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 637:/usr/include/c++/9/bits/stl_iterator.h ****    *
 638:/usr/include/c++/9/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 639:/usr/include/c++/9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 640:/usr/include/c++/9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 641:/usr/include/c++/9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 642:/usr/include/c++/9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 643:/usr/include/c++/9/bits/stl_iterator.h ****    *  types for you.
 644:/usr/include/c++/9/bits/stl_iterator.h ****   */
 645:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 646:/usr/include/c++/9/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 647:/usr/include/c++/9/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 648:/usr/include/c++/9/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 649:/usr/include/c++/9/bits/stl_iterator.h **** 
 650:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 651:/usr/include/c++/9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 652:/usr/include/c++/9/bits/stl_iterator.h ****    *
 653:/usr/include/c++/9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 654:/usr/include/c++/9/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 655:/usr/include/c++/9/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 656:/usr/include/c++/9/bits/stl_iterator.h ****    *  position.
 657:/usr/include/c++/9/bits/stl_iterator.h ****    *
 658:/usr/include/c++/9/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 659:/usr/include/c++/9/bits/stl_iterator.h ****    *  %iterator's position.)
 660:/usr/include/c++/9/bits/stl_iterator.h ****    *
 661:/usr/include/c++/9/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 662:/usr/include/c++/9/bits/stl_iterator.h ****    *  save typing.
 663:/usr/include/c++/9/bits/stl_iterator.h ****   */
 664:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container>
 665:/usr/include/c++/9/bits/stl_iterator.h ****     class insert_iterator
 666:/usr/include/c++/9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 667:/usr/include/c++/9/bits/stl_iterator.h ****     {
 668:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 669:/usr/include/c++/9/bits/stl_iterator.h ****       _Container* container;
 670:/usr/include/c++/9/bits/stl_iterator.h ****       typename _Container::iterator iter;
 671:/usr/include/c++/9/bits/stl_iterator.h **** 
 672:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 673:/usr/include/c++/9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 674:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Container          container_type;
 675:/usr/include/c++/9/bits/stl_iterator.h **** 
 676:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 677:/usr/include/c++/9/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 678:/usr/include/c++/9/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 679:/usr/include/c++/9/bits/stl_iterator.h ****       */
 680:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 681:/usr/include/c++/9/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 682:/usr/include/c++/9/bits/stl_iterator.h **** 
 683:/usr/include/c++/9/bits/stl_iterator.h ****       /**
 684:/usr/include/c++/9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 685:/usr/include/c++/9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 686:/usr/include/c++/9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 687:/usr/include/c++/9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 688:/usr/include/c++/9/bits/stl_iterator.h ****        *
 689:/usr/include/c++/9/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 690:/usr/include/c++/9/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 691:/usr/include/c++/9/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 692:/usr/include/c++/9/bits/stl_iterator.h ****        *
 693:/usr/include/c++/9/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 694:/usr/include/c++/9/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 695:/usr/include/c++/9/bits/stl_iterator.h ****        *  @code
 696:/usr/include/c++/9/bits/stl_iterator.h ****        *     // vector v contains A and Z
 697:/usr/include/c++/9/bits/stl_iterator.h ****        *
 698:/usr/include/c++/9/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 699:/usr/include/c++/9/bits/stl_iterator.h ****        *     i = 1;
 700:/usr/include/c++/9/bits/stl_iterator.h ****        *     i = 2;
 701:/usr/include/c++/9/bits/stl_iterator.h ****        *     i = 3;
 702:/usr/include/c++/9/bits/stl_iterator.h ****        *
 703:/usr/include/c++/9/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 704:/usr/include/c++/9/bits/stl_iterator.h ****        *  @endcode
 705:/usr/include/c++/9/bits/stl_iterator.h ****       */
 706:/usr/include/c++/9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 707:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 708:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 709:/usr/include/c++/9/bits/stl_iterator.h ****       {
 710:/usr/include/c++/9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 711:/usr/include/c++/9/bits/stl_iterator.h **** 	++iter;
 712:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 713:/usr/include/c++/9/bits/stl_iterator.h ****       }
 714:/usr/include/c++/9/bits/stl_iterator.h **** #else
 715:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 716:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 717:/usr/include/c++/9/bits/stl_iterator.h ****       {
 718:/usr/include/c++/9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 719:/usr/include/c++/9/bits/stl_iterator.h **** 	++iter;
 720:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 721:/usr/include/c++/9/bits/stl_iterator.h ****       }
 722:/usr/include/c++/9/bits/stl_iterator.h **** 
 723:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 724:/usr/include/c++/9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 725:/usr/include/c++/9/bits/stl_iterator.h ****       {
 726:/usr/include/c++/9/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 727:/usr/include/c++/9/bits/stl_iterator.h **** 	++iter;
 728:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 729:/usr/include/c++/9/bits/stl_iterator.h ****       }
 730:/usr/include/c++/9/bits/stl_iterator.h **** #endif
 731:/usr/include/c++/9/bits/stl_iterator.h **** 
 732:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.
 733:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 734:/usr/include/c++/9/bits/stl_iterator.h ****       operator*()
 735:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 736:/usr/include/c++/9/bits/stl_iterator.h **** 
 737:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 738:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 739:/usr/include/c++/9/bits/stl_iterator.h ****       operator++()
 740:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 741:/usr/include/c++/9/bits/stl_iterator.h **** 
 742:/usr/include/c++/9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 743:/usr/include/c++/9/bits/stl_iterator.h ****       insert_iterator&
 744:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int)
 745:/usr/include/c++/9/bits/stl_iterator.h ****       { return *this; }
 746:/usr/include/c++/9/bits/stl_iterator.h ****     };
 747:/usr/include/c++/9/bits/stl_iterator.h **** 
 748:/usr/include/c++/9/bits/stl_iterator.h ****   /**
 749:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 750:/usr/include/c++/9/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 751:/usr/include/c++/9/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 752:/usr/include/c++/9/bits/stl_iterator.h ****    *
 753:/usr/include/c++/9/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 754:/usr/include/c++/9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 755:/usr/include/c++/9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 756:/usr/include/c++/9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 757:/usr/include/c++/9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 758:/usr/include/c++/9/bits/stl_iterator.h ****    *  types for you.
 759:/usr/include/c++/9/bits/stl_iterator.h ****   */
 760:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 761:/usr/include/c++/9/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 762:/usr/include/c++/9/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 763:/usr/include/c++/9/bits/stl_iterator.h ****     {
 764:/usr/include/c++/9/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 765:/usr/include/c++/9/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 766:/usr/include/c++/9/bits/stl_iterator.h ****     }
 767:/usr/include/c++/9/bits/stl_iterator.h **** 
 768:/usr/include/c++/9/bits/stl_iterator.h ****   // @} group iterators
 769:/usr/include/c++/9/bits/stl_iterator.h **** 
 770:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 771:/usr/include/c++/9/bits/stl_iterator.h **** } // namespace
 772:/usr/include/c++/9/bits/stl_iterator.h **** 
 773:/usr/include/c++/9/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 774:/usr/include/c++/9/bits/stl_iterator.h **** {
 775:/usr/include/c++/9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 776:/usr/include/c++/9/bits/stl_iterator.h **** 
 777:/usr/include/c++/9/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 778:/usr/include/c++/9/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 779:/usr/include/c++/9/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 780:/usr/include/c++/9/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 781:/usr/include/c++/9/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 782:/usr/include/c++/9/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 783:/usr/include/c++/9/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 784:/usr/include/c++/9/bits/stl_iterator.h ****   using std::iterator_traits;
 785:/usr/include/c++/9/bits/stl_iterator.h ****   using std::iterator;
 786:/usr/include/c++/9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 787:/usr/include/c++/9/bits/stl_iterator.h ****     class __normal_iterator
 788:/usr/include/c++/9/bits/stl_iterator.h ****     {
 789:/usr/include/c++/9/bits/stl_iterator.h ****     protected:
 790:/usr/include/c++/9/bits/stl_iterator.h ****       _Iterator _M_current;
 791:/usr/include/c++/9/bits/stl_iterator.h **** 
 792:/usr/include/c++/9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 793:/usr/include/c++/9/bits/stl_iterator.h **** 
 794:/usr/include/c++/9/bits/stl_iterator.h ****     public:
 795:/usr/include/c++/9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 796:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 797:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 798:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 799:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 800:/usr/include/c++/9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 801:/usr/include/c++/9/bits/stl_iterator.h **** 
 802:/usr/include/c++/9/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 803:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 804:/usr/include/c++/9/bits/stl_iterator.h **** 
 805:/usr/include/c++/9/bits/stl_iterator.h ****       explicit
 806:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 3997              		.loc 17 806 7 view .LVU829
 3998              		.loc 17 806 7 is_stmt 0 view .LVU830
 3999              	.LBE5384:
 4000              	.LBE5383:
 4001              	.LBB5385:
 4002              	.LBI5385:
 807:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 808:/usr/include/c++/9/bits/stl_iterator.h **** 
 809:/usr/include/c++/9/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 810:/usr/include/c++/9/bits/stl_iterator.h ****       template<typename _Iter>
 811:/usr/include/c++/9/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 4003              		.loc 17 811 9 is_stmt 1 view .LVU831
 4004              	.LBB5386:
 4005              	.LBI5386:
 812:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 813:/usr/include/c++/9/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 814:/usr/include/c++/9/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 815:/usr/include/c++/9/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 816:/usr/include/c++/9/bits/stl_iterator.h **** 
 817:/usr/include/c++/9/bits/stl_iterator.h ****       // Forward iterator requirements
 818:/usr/include/c++/9/bits/stl_iterator.h ****       reference
 819:/usr/include/c++/9/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 820:/usr/include/c++/9/bits/stl_iterator.h ****       { return *_M_current; }
 821:/usr/include/c++/9/bits/stl_iterator.h **** 
 822:/usr/include/c++/9/bits/stl_iterator.h ****       pointer
 823:/usr/include/c++/9/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 824:/usr/include/c++/9/bits/stl_iterator.h ****       { return _M_current; }
 825:/usr/include/c++/9/bits/stl_iterator.h **** 
 826:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 827:/usr/include/c++/9/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 828:/usr/include/c++/9/bits/stl_iterator.h ****       {
 829:/usr/include/c++/9/bits/stl_iterator.h **** 	++_M_current;
 830:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 831:/usr/include/c++/9/bits/stl_iterator.h ****       }
 832:/usr/include/c++/9/bits/stl_iterator.h **** 
 833:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 834:/usr/include/c++/9/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 835:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 836:/usr/include/c++/9/bits/stl_iterator.h **** 
 837:/usr/include/c++/9/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 838:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 839:/usr/include/c++/9/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 840:/usr/include/c++/9/bits/stl_iterator.h ****       {
 841:/usr/include/c++/9/bits/stl_iterator.h **** 	--_M_current;
 842:/usr/include/c++/9/bits/stl_iterator.h **** 	return *this;
 843:/usr/include/c++/9/bits/stl_iterator.h ****       }
 844:/usr/include/c++/9/bits/stl_iterator.h **** 
 845:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 846:/usr/include/c++/9/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 847:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 848:/usr/include/c++/9/bits/stl_iterator.h **** 
 849:/usr/include/c++/9/bits/stl_iterator.h ****       // Random access iterator requirements
 850:/usr/include/c++/9/bits/stl_iterator.h ****       reference
 851:/usr/include/c++/9/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 852:/usr/include/c++/9/bits/stl_iterator.h ****       { return _M_current[__n]; }
 853:/usr/include/c++/9/bits/stl_iterator.h **** 
 854:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 855:/usr/include/c++/9/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 856:/usr/include/c++/9/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 857:/usr/include/c++/9/bits/stl_iterator.h **** 
 858:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 859:/usr/include/c++/9/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 860:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 861:/usr/include/c++/9/bits/stl_iterator.h **** 
 862:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator&
 863:/usr/include/c++/9/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 864:/usr/include/c++/9/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 865:/usr/include/c++/9/bits/stl_iterator.h **** 
 866:/usr/include/c++/9/bits/stl_iterator.h ****       __normal_iterator
 867:/usr/include/c++/9/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 868:/usr/include/c++/9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 869:/usr/include/c++/9/bits/stl_iterator.h **** 
 870:/usr/include/c++/9/bits/stl_iterator.h ****       const _Iterator&
 871:/usr/include/c++/9/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 4006              		.loc 17 871 7 view .LVU832
 4007              		.loc 17 871 7 is_stmt 0 view .LVU833
 4008              	.LBE5386:
 4009              	.LBE5385:
 4010              	.LBB5387:
 4011              	.LBI5387:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 4012              		.loc 2 826 7 is_stmt 1 view .LVU834
 4013              	.LBB5388:
 4014              	.LBI5388:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4015              		.loc 17 806 7 view .LVU835
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4016              		.loc 17 806 7 is_stmt 0 view .LVU836
 4017              	.LBE5388:
 4018              	.LBE5387:
 4019              	.LBB5389:
 4020              	.LBI5389:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 4021              		.loc 17 811 9 is_stmt 1 view .LVU837
 4022              	.LBB5390:
 4023              	.LBI5390:
 4024              		.loc 17 871 7 view .LVU838
 4025              		.loc 17 871 7 is_stmt 0 view .LVU839
 4026              	.LBE5390:
 4027              	.LBE5389:
 4028              	.LBB5391:
 4029              	.LBI5391:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 4030              		.loc 2 2123 7 is_stmt 1 view .LVU840
 4031              	.LBB5392:
 4032              	.LBB5393:
 4033              	.LBI5393:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 4034              		.loc 2 826 7 view .LVU841
 4035              	.LBB5394:
 4036              	.LBI5394:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4037              		.loc 17 806 7 view .LVU842
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4038              		.loc 17 806 7 is_stmt 0 view .LVU843
 4039              	.LBE5394:
 4040              	.LBE5393:
 4041              	.LBB5395:
 4042              	.LBI5395:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 4043              		.loc 2 1936 7 is_stmt 1 view .LVU844
 4044              	.LBB5396:
 4045              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 4046              		.loc 2 1941 38 is_stmt 0 view .LVU845
 4047 01b6 4929C8   		subq	%rcx, %r8	# pretmp_56,
 4048              	.LVL208:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 4049              		.loc 2 1941 38 view .LVU846
 4050 01b9 31D2     		xorl	%edx, %edx	#
 4051 01bb 31F6     		xorl	%esi, %esi	#
 4052 01bd 4C89E7   		movq	%r12, %rdi	# <retval>,
 4053              	.LEHB3:
 4054 01c0 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 4054      00
 4055              	.LVL209:
 4056              	.L118:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 4057              		.loc 2 1941 38 view .LVU847
 4058              	.LBE5396:
 4059              	.LBE5395:
 4060              	.LBE5392:
 4061              	.LBE5391:
 4062              	.LBE5382:
 4063              	.LBE5358:
 4064              	.LBE5357:
 4065              	.LBE5356:
 4066              	.LBB5434:
 4067              	.LBI5434:
 629:/usr/include/c++/9/sstream ****       { }
 4068              		.loc 12 629 7 is_stmt 1 view .LVU848
 4069              	.LBB5435:
 4070              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 4071              		.loc 12 630 9 is_stmt 0 view .LVU849
 4072 01c5 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp231
 4072      000000
 4073 01cc C5FA7E15 		vmovq	.LC1(%rip), %xmm2	#, tmp232
 4073      00000000 
 4074              	.LBB5436:
 4075              	.LBB5437:
 4076              	.LBB5438:
 4077              	.LBB5439:
 4078              	.LBB5440:
 4079              	.LBB5441:
 4080              	.LBB5442:
 4081              	.LBB5443:
 4082              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 4083              		.loc 2 222 26 view .LVU850
 4084 01d4 488B7C24 		movq	112(%rsp), %rdi	# MEM[(char * *)&ss + 80B], _65
 4084      70
 4085              	.LBE5443:
 4086              	.LBE5442:
 4087              	.LBE5441:
 4088              	.LBE5440:
 4089              	.LBE5439:
 4090              	.LBE5438:
 4091              	.LBE5437:
 4092              	.LBE5436:
 4093              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 4094              		.loc 12 630 9 view .LVU851
 4095 01d9 48898424 		movq	%rax, 144(%rsp)	# tmp231, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 4095      90000000 
 4096              	.LVL210:
 4097              	.LBB5462:
 4098              	.LBI5436:
  65:/usr/include/c++/9/sstream ****     {
 4099              		.loc 12 65 11 is_stmt 1 view .LVU852
 4100              	.LBE5462:
 4101              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 4102              		.loc 12 630 9 is_stmt 0 view .LVU853
 4103 01e1 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp233
 4103      000000
 4104 01e8 C4E3E922 		vpinsrq	$1, %rax, %xmm2, %xmm0	# tmp233, tmp232, tmp174
 4104      C001
 4105 01ee C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp174, MEM[(int (*) () * *)&ss]
 4105      2420
 4106              	.LVL211:
 4107              	.LBB5463:
 4108              	.LBB5461:
 4109              	.LBB5458:
 4110              	.LBI5438:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 4111              		.loc 2 657 7 is_stmt 1 view .LVU854
 4112              	.LBB5457:
 4113              	.LBB5453:
 4114              	.LBI5440:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 4115              		.loc 2 229 7 view .LVU855
 4116              	.LBB5452:
 4117              	.LBB5446:
 4118              	.LBI5442:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4119              		.loc 2 221 7 view .LVU856
 4120              	.LBB5445:
 4121              	.LBB5444:
 4122              	.LBI5444:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 4123              		.loc 2 200 7 view .LVU857
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 4124              		.loc 2 200 7 is_stmt 0 view .LVU858
 4125              	.LBE5444:
 4126              	.LBE5445:
 4127              	.LBE5446:
 4128              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4129              		.loc 2 231 2 view .LVU859
 4130 01f4 483B7C24 		cmpq	8(%rsp), %rdi	# %sfp, _65
 4130      08
 4131 01f9 7405     		je	.L120	#,
 4132              	.LVL212:
 4133              	.LBB5447:
 4134              	.LBI5447:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 4135              		.loc 2 236 7 is_stmt 1 view .LVU860
 4136              	.LBB5448:
 4137              	.LBB5449:
 4138              	.LBI5449:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 4139              		.loc 3 469 7 view .LVU861
 4140              	.LBB5450:
 4141              	.LBI5450:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 4142              		.loc 4 119 7 view .LVU862
 4143              	.LBB5451:
 4144              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 4145              		.loc 4 128 19 is_stmt 0 view .LVU863
 4146 01fb E8000000 		call	_ZdlPv@PLT	#
 4146      00
 4147              	.LVL213:
 4148              	.L120:
 4149              		.loc 4 128 19 view .LVU864
 4150              	.LBE5451:
 4151              	.LBE5450:
 4152              	.LBE5449:
 4153              	.LBE5448:
 4154              	.LBE5447:
 4155              	.LBE5452:
 4156              	.LBE5453:
 4157              	.LBB5454:
 4158              	.LBI5454:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 4159              		.loc 2 150 14 is_stmt 1 view .LVU865
 4160              	.LBB5455:
 4161              	.LBI5455:
 4162              		.loc 5 153 7 view .LVU866
 4163              	.LBB5456:
 4164              	.LBI5456:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 4165              		.loc 4 89 7 view .LVU867
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 4166              		.loc 4 89 7 is_stmt 0 view .LVU868
 4167              	.LBE5456:
 4168              	.LBE5455:
 4169              	.LBE5454:
 4170              	.LBE5457:
 4171              	.LBE5458:
 4172              	.LBB5459:
 4173              	.LBI5459:
 204:/usr/include/c++/9/streambuf ****       { }
 4174              		.loc 13 204 7 is_stmt 1 view .LVU869
 4175              	.LBB5460:
 4176              	# /usr/include/c++/9/streambuf:205:       { }
 205:/usr/include/c++/9/streambuf **** 
 4177              		.loc 13 205 9 is_stmt 0 view .LVU870
 4178 0200 488B7C24 		movq	16(%rsp), %rdi	# %sfp,
 4178      10
 4179 0205 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp235
 4179      000000
 4180 020c 48894424 		movq	%rax, 40(%rsp)	# tmp235, MEM[(struct basic_streambuf *)&ss + 8B]._vptr.basic_streambuf
 4180      28
 4181 0211 E8000000 		call	_ZNSt6localeD1Ev@PLT	#
 4181      00
 4182              	.LVL214:
 205:/usr/include/c++/9/streambuf **** 
 4183              		.loc 13 205 9 view .LVU871
 4184              	.LBE5460:
 4185              	.LBE5459:
 4186              	.LBE5461:
 4187              	.LBE5463:
 4188              	.LBB5464:
 4189              	.LBI5464:
  93:/usr/include/c++/9/ostream **** 
 4190              		.loc 16 93 7 is_stmt 1 view .LVU872
 4191              	.LBB5465:
 4192              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 4193              		.loc 16 93 26 is_stmt 0 view .LVU873
 4194 0216 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 4194      000000
 4195 021d 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 4195      000000
 4196              	.LBE5465:
 4197              	.LBE5464:
 4198              	.LBB5467:
 4199              	.LBB5468:
 4200              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4201              		.loc 15 282 22 view .LVU874
 4202 0224 4C89EF   		movq	%r13, %rdi	# tmp199,
 4203              	.LBE5468:
 4204              	.LBE5467:
 4205              	.LBB5470:
 4206              	.LBB5466:
 4207              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 4208              		.loc 16 93 26 view .LVU875
 4209 0227 48894424 		movq	%rax, 32(%rsp)	# tmp236, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 4209      20
 4210 022c 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_19 + -24B], MEM[(long int *)_19 + -24B]
 4211 0230 48894C04 		movq	%rcx, 32(%rsp,%rax)	# tmp238, _62->D.34155._vptr.ios_base
 4211      20
 4212              	.LVL215:
  93:/usr/include/c++/9/ostream **** 
 4213              		.loc 16 93 26 view .LVU876
 4214              	.LBE5466:
 4215              	.LBE5470:
 4216              	.LBB5471:
 4217              	.LBI5467:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4218              		.loc 15 282 7 is_stmt 1 view .LVU877
 4219              	.LBB5469:
 4220              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4221              		.loc 15 282 22 is_stmt 0 view .LVU878
 4222 0235 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp239
 4222      000000
 4223 023c 48898424 		movq	%rax, 144(%rsp)	# tmp239, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 4223      90000000 
 4224 0244 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 4224      00
 4225              	.LVL216:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4226              		.loc 15 282 22 view .LVU879
 4227              	.LBE5469:
 4228              	.LBE5471:
 4229              	.LBE5435:
 4230              	.LBE5434:
 4231              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
  53:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return ss.str();
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
 4232              		.loc 14 54 3 view .LVU880
 4233 0249 488B8424 		movq	408(%rsp), %rax	# D.445011, tmp210
 4233      98010000 
 4234 0251 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp210
 4234      25280000 
 4234      00
 4235 025a 7566     		jne	.L134	#,
 4236 025c 488D65D8 		leaq	-40(%rbp), %rsp	#,
 4237              	.LVL217:
 4238              		.loc 14 54 3 view .LVU881
 4239 0260 4C89E0   		movq	%r12, %rax	# <retval>,
 4240 0263 5B       		popq	%rbx	#
 4241 0264 415C     		popq	%r12	#
 4242              	.LVL218:
 4243              		.loc 14 54 3 view .LVU882
 4244 0266 415D     		popq	%r13	#
 4245 0268 415E     		popq	%r14	#
 4246 026a 415F     		popq	%r15	#
 4247              	.LVL219:
 4248              		.loc 14 54 3 view .LVU883
 4249 026c 5D       		popq	%rbp	#
 4250              		.cfi_remember_state
 4251              		.cfi_def_cfa 7, 8
 4252              	.LVL220:
 4253              		.loc 14 54 3 view .LVU884
 4254 026d C3       		ret	
 4255              	.LVL221:
 4256 026e 6690     		.p2align 4,,10
 4257              		.p2align 3
 4258              	.L133:
 4259              		.cfi_restore_state
 4260              	.LBB5472:
 4261              	.LBB5431:
 4262              	.LBB5428:
 4263              	.LBB5397:
 4264              	.LBI5397:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 4265              		.loc 2 1470 9 is_stmt 1 view .LVU885
 4266              	.LBB5398:
 4267              	.LBI5398:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 4268              		.loc 2 842 7 view .LVU886
 4269              	.LBB5399:
 4270              	.LBI5399:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4271              		.loc 17 806 7 view .LVU887
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4272              		.loc 17 806 7 is_stmt 0 view .LVU888
 4273              	.LBE5399:
 4274              	.LBE5398:
 4275              	.LBB5400:
 4276              	.LBI5400:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 4277              		.loc 17 811 9 is_stmt 1 view .LVU889
 4278              	.LBB5401:
 4279              	.LBI5401:
 4280              		.loc 17 871 7 view .LVU890
 4281              		.loc 17 871 7 is_stmt 0 view .LVU891
 4282              	.LBE5401:
 4283              	.LBE5400:
 4284              	.LBB5402:
 4285              	.LBI5402:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 4286              		.loc 2 826 7 is_stmt 1 view .LVU892
 4287              	.LBB5403:
 4288              	.LBI5403:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4289              		.loc 17 806 7 view .LVU893
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4290              		.loc 17 806 7 is_stmt 0 view .LVU894
 4291              	.LBE5403:
 4292              	.LBE5402:
 4293              	.LBB5404:
 4294              	.LBI5404:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 4295              		.loc 17 811 9 is_stmt 1 view .LVU895
 4296              	.LBB5405:
 4297              	.LBI5405:
 4298              		.loc 17 871 7 view .LVU896
 4299              		.loc 17 871 7 is_stmt 0 view .LVU897
 4300              	.LBE5405:
 4301              	.LBE5404:
 4302              	.LBB5406:
 4303              	.LBI5406:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 4304              		.loc 2 2123 7 is_stmt 1 view .LVU898
 4305              	.LBB5407:
 4306              	.LBB5408:
 4307              	.LBI5408:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 4308              		.loc 2 826 7 view .LVU899
 4309              	.LBB5409:
 4310              	.LBI5409:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4311              		.loc 17 806 7 view .LVU900
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4312              		.loc 17 806 7 is_stmt 0 view .LVU901
 4313              	.LBE5409:
 4314              	.LBE5408:
 4315              	.LBB5410:
 4316              	.LBI5410:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 4317              		.loc 2 1936 7 is_stmt 1 view .LVU902
 4318              	.LBB5411:
 4319              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 4320              		.loc 2 1941 38 is_stmt 0 view .LVU903
 4321 0270 4829C8   		subq	%rcx, %rax	# pretmp_56, _40
 4322              	.LVL222:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 4323              		.loc 2 1941 38 view .LVU904
 4324 0273 31D2     		xorl	%edx, %edx	#
 4325 0275 31F6     		xorl	%esi, %esi	#
 4326 0277 4C89E7   		movq	%r12, %rdi	# <retval>,
 4327 027a 4989C0   		movq	%rax, %r8	# _40,
 4328 027d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 4328      00
 4329              	.LVL223:
 4330              	.LEHE3:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 4331              		.loc 2 1941 38 view .LVU905
 4332 0282 E93EFFFF 		jmp	.L118	#
 4332      FF
 4333              	.LVL224:
 4334 0287 660F1F84 		.p2align 4,,10
 4334      00000000 
 4334      00
 4335              		.p2align 3
 4336              	.L132:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 4337              		.loc 2 1941 38 view .LVU906
 4338              	.LBE5411:
 4339              	.LBE5410:
 4340              	.LBE5407:
 4341              	.LBE5406:
 4342              	.LBE5397:
 4343              	.LBE5428:
 4344              	.LBE5431:
 4345              	.LBE5472:
 4346              	.LBB5473:
 4347              	.LBB5355:
 4348              	.LBB5354:
 4349              	.LBB5351:
 4350              	.LBB5350:
 4351              	.LBB5344:
 4352              	.LBI5344:
 565:/usr/include/c++/9/ostream ****     {
 4353              		.loc 16 565 5 is_stmt 1 view .LVU907
 4354              	.LBB5345:
 4355              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 4356              		.loc 16 568 2 is_stmt 0 view .LVU908
 4357 0290 488B4424 		movq	32(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 4357      20
 4358 0295 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_32 + -24B], _35
 4359 0299 4C01FF   		addq	%r15, %rdi	# tmp194, _35
 4360              	.LVL225:
 4361              	.LBB5346:
 4362              	.LBI5346:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 4363              		.loc 15 157 7 is_stmt 1 view .LVU909
 4364              	.LBB5347:
 4365              	.LBB5348:
 4366              	.LBI5348:
 4367              		.file 18 "/usr/include/c++/9/bits/ios_base.h"
   1:/usr/include/c++/9/bits/ios_base.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/9/bits/ios_base.h **** 
   3:/usr/include/c++/9/bits/ios_base.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/ios_base.h **** //
   5:/usr/include/c++/9/bits/ios_base.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/ios_base.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/ios_base.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/ios_base.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/ios_base.h **** // any later version.
  10:/usr/include/c++/9/bits/ios_base.h **** 
  11:/usr/include/c++/9/bits/ios_base.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/ios_base.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/ios_base.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/ios_base.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/ios_base.h **** 
  16:/usr/include/c++/9/bits/ios_base.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/ios_base.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/ios_base.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/ios_base.h **** 
  20:/usr/include/c++/9/bits/ios_base.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/ios_base.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/ios_base.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/ios_base.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/ios_base.h **** 
  25:/usr/include/c++/9/bits/ios_base.h **** /** @file bits/ios_base.h
  26:/usr/include/c++/9/bits/ios_base.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/ios_base.h ****  *  Do not attempt to use it directly. @headername{ios}
  28:/usr/include/c++/9/bits/ios_base.h ****  */
  29:/usr/include/c++/9/bits/ios_base.h **** 
  30:/usr/include/c++/9/bits/ios_base.h **** //
  31:/usr/include/c++/9/bits/ios_base.h **** // ISO C++ 14882: 27.4  Iostreams base classes
  32:/usr/include/c++/9/bits/ios_base.h **** //
  33:/usr/include/c++/9/bits/ios_base.h **** 
  34:/usr/include/c++/9/bits/ios_base.h **** #ifndef _IOS_BASE_H
  35:/usr/include/c++/9/bits/ios_base.h **** #define _IOS_BASE_H 1
  36:/usr/include/c++/9/bits/ios_base.h **** 
  37:/usr/include/c++/9/bits/ios_base.h **** #pragma GCC system_header
  38:/usr/include/c++/9/bits/ios_base.h **** 
  39:/usr/include/c++/9/bits/ios_base.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/9/bits/ios_base.h **** #include <bits/localefwd.h>
  41:/usr/include/c++/9/bits/ios_base.h **** #include <bits/locale_classes.h>
  42:/usr/include/c++/9/bits/ios_base.h **** 
  43:/usr/include/c++/9/bits/ios_base.h **** #if __cplusplus < 201103L
  44:/usr/include/c++/9/bits/ios_base.h **** # include <stdexcept>
  45:/usr/include/c++/9/bits/ios_base.h **** #else
  46:/usr/include/c++/9/bits/ios_base.h **** # include <system_error>
  47:/usr/include/c++/9/bits/ios_base.h **** #endif
  48:/usr/include/c++/9/bits/ios_base.h **** 
  49:/usr/include/c++/9/bits/ios_base.h **** namespace std _GLIBCXX_VISIBILITY(default)
  50:/usr/include/c++/9/bits/ios_base.h **** {
  51:/usr/include/c++/9/bits/ios_base.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  52:/usr/include/c++/9/bits/ios_base.h **** 
  53:/usr/include/c++/9/bits/ios_base.h ****   // The following definitions of bitmask types are enums, not ints,
  54:/usr/include/c++/9/bits/ios_base.h ****   // as permitted (but not required) in the standard, in order to provide
  55:/usr/include/c++/9/bits/ios_base.h ****   // better type safety in iostream calls.  A side effect is that in C++98
  56:/usr/include/c++/9/bits/ios_base.h ****   // expressions involving them are not compile-time constants.
  57:/usr/include/c++/9/bits/ios_base.h ****   enum _Ios_Fmtflags 
  58:/usr/include/c++/9/bits/ios_base.h ****     { 
  59:/usr/include/c++/9/bits/ios_base.h ****       _S_boolalpha 	= 1L << 0,
  60:/usr/include/c++/9/bits/ios_base.h ****       _S_dec 		= 1L << 1,
  61:/usr/include/c++/9/bits/ios_base.h ****       _S_fixed 		= 1L << 2,
  62:/usr/include/c++/9/bits/ios_base.h ****       _S_hex 		= 1L << 3,
  63:/usr/include/c++/9/bits/ios_base.h ****       _S_internal 	= 1L << 4,
  64:/usr/include/c++/9/bits/ios_base.h ****       _S_left 		= 1L << 5,
  65:/usr/include/c++/9/bits/ios_base.h ****       _S_oct 		= 1L << 6,
  66:/usr/include/c++/9/bits/ios_base.h ****       _S_right 		= 1L << 7,
  67:/usr/include/c++/9/bits/ios_base.h ****       _S_scientific 	= 1L << 8,
  68:/usr/include/c++/9/bits/ios_base.h ****       _S_showbase 	= 1L << 9,
  69:/usr/include/c++/9/bits/ios_base.h ****       _S_showpoint 	= 1L << 10,
  70:/usr/include/c++/9/bits/ios_base.h ****       _S_showpos 	= 1L << 11,
  71:/usr/include/c++/9/bits/ios_base.h ****       _S_skipws 	= 1L << 12,
  72:/usr/include/c++/9/bits/ios_base.h ****       _S_unitbuf 	= 1L << 13,
  73:/usr/include/c++/9/bits/ios_base.h ****       _S_uppercase 	= 1L << 14,
  74:/usr/include/c++/9/bits/ios_base.h ****       _S_adjustfield 	= _S_left | _S_right | _S_internal,
  75:/usr/include/c++/9/bits/ios_base.h ****       _S_basefield 	= _S_dec | _S_oct | _S_hex,
  76:/usr/include/c++/9/bits/ios_base.h ****       _S_floatfield 	= _S_scientific | _S_fixed,
  77:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_fmtflags_end = 1L << 16,
  78:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_fmtflags_max = __INT_MAX__,
  79:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_fmtflags_min = ~__INT_MAX__
  80:/usr/include/c++/9/bits/ios_base.h ****     };
  81:/usr/include/c++/9/bits/ios_base.h **** 
  82:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  83:/usr/include/c++/9/bits/ios_base.h ****   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  84:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  85:/usr/include/c++/9/bits/ios_base.h **** 
  86:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  87:/usr/include/c++/9/bits/ios_base.h ****   operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  88:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }
  89:/usr/include/c++/9/bits/ios_base.h **** 
  90:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  91:/usr/include/c++/9/bits/ios_base.h ****   operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  92:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }
  93:/usr/include/c++/9/bits/ios_base.h **** 
  94:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  95:/usr/include/c++/9/bits/ios_base.h ****   operator~(_Ios_Fmtflags __a)
  96:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Fmtflags(~static_cast<int>(__a)); }
  97:/usr/include/c++/9/bits/ios_base.h **** 
  98:/usr/include/c++/9/bits/ios_base.h ****   inline const _Ios_Fmtflags&
  99:/usr/include/c++/9/bits/ios_base.h ****   operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 100:/usr/include/c++/9/bits/ios_base.h ****   { return __a = __a | __b; }
 101:/usr/include/c++/9/bits/ios_base.h **** 
 102:/usr/include/c++/9/bits/ios_base.h ****   inline const _Ios_Fmtflags&
 103:/usr/include/c++/9/bits/ios_base.h ****   operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 104:/usr/include/c++/9/bits/ios_base.h ****   { return __a = __a & __b; }
 105:/usr/include/c++/9/bits/ios_base.h **** 
 106:/usr/include/c++/9/bits/ios_base.h ****   inline const _Ios_Fmtflags&
 107:/usr/include/c++/9/bits/ios_base.h ****   operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 108:/usr/include/c++/9/bits/ios_base.h ****   { return __a = __a ^ __b; }
 109:/usr/include/c++/9/bits/ios_base.h **** 
 110:/usr/include/c++/9/bits/ios_base.h **** 
 111:/usr/include/c++/9/bits/ios_base.h ****   enum _Ios_Openmode 
 112:/usr/include/c++/9/bits/ios_base.h ****     { 
 113:/usr/include/c++/9/bits/ios_base.h ****       _S_app 		= 1L << 0,
 114:/usr/include/c++/9/bits/ios_base.h ****       _S_ate 		= 1L << 1,
 115:/usr/include/c++/9/bits/ios_base.h ****       _S_bin 		= 1L << 2,
 116:/usr/include/c++/9/bits/ios_base.h ****       _S_in 		= 1L << 3,
 117:/usr/include/c++/9/bits/ios_base.h ****       _S_out 		= 1L << 4,
 118:/usr/include/c++/9/bits/ios_base.h ****       _S_trunc 		= 1L << 5,
 119:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_openmode_end = 1L << 16,
 120:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_openmode_max = __INT_MAX__,
 121:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_openmode_min = ~__INT_MAX__
 122:/usr/include/c++/9/bits/ios_base.h ****     };
 123:/usr/include/c++/9/bits/ios_base.h **** 
 124:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 125:/usr/include/c++/9/bits/ios_base.h ****   operator&(_Ios_Openmode __a, _Ios_Openmode __b)
 126:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }
 127:/usr/include/c++/9/bits/ios_base.h **** 
 128:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 129:/usr/include/c++/9/bits/ios_base.h ****   operator|(_Ios_Openmode __a, _Ios_Openmode __b)
 130:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
 131:/usr/include/c++/9/bits/ios_base.h **** 
 132:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 133:/usr/include/c++/9/bits/ios_base.h ****   operator^(_Ios_Openmode __a, _Ios_Openmode __b)
 134:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }
 135:/usr/include/c++/9/bits/ios_base.h **** 
 136:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 137:/usr/include/c++/9/bits/ios_base.h ****   operator~(_Ios_Openmode __a)
 138:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Openmode(~static_cast<int>(__a)); }
 139:/usr/include/c++/9/bits/ios_base.h **** 
 140:/usr/include/c++/9/bits/ios_base.h ****   inline const _Ios_Openmode&
 141:/usr/include/c++/9/bits/ios_base.h ****   operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
 142:/usr/include/c++/9/bits/ios_base.h ****   { return __a = __a | __b; }
 143:/usr/include/c++/9/bits/ios_base.h **** 
 144:/usr/include/c++/9/bits/ios_base.h ****   inline const _Ios_Openmode&
 145:/usr/include/c++/9/bits/ios_base.h ****   operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
 146:/usr/include/c++/9/bits/ios_base.h ****   { return __a = __a & __b; }
 147:/usr/include/c++/9/bits/ios_base.h **** 
 148:/usr/include/c++/9/bits/ios_base.h ****   inline const _Ios_Openmode&
 149:/usr/include/c++/9/bits/ios_base.h ****   operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
 150:/usr/include/c++/9/bits/ios_base.h ****   { return __a = __a ^ __b; }
 151:/usr/include/c++/9/bits/ios_base.h **** 
 152:/usr/include/c++/9/bits/ios_base.h **** 
 153:/usr/include/c++/9/bits/ios_base.h ****   enum _Ios_Iostate
 154:/usr/include/c++/9/bits/ios_base.h ****     { 
 155:/usr/include/c++/9/bits/ios_base.h ****       _S_goodbit 		= 0,
 156:/usr/include/c++/9/bits/ios_base.h ****       _S_badbit 		= 1L << 0,
 157:/usr/include/c++/9/bits/ios_base.h ****       _S_eofbit 		= 1L << 1,
 158:/usr/include/c++/9/bits/ios_base.h ****       _S_failbit		= 1L << 2,
 159:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_iostate_end = 1L << 16,
 160:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_iostate_max = __INT_MAX__,
 161:/usr/include/c++/9/bits/ios_base.h ****       _S_ios_iostate_min = ~__INT_MAX__
 162:/usr/include/c++/9/bits/ios_base.h ****     };
 163:/usr/include/c++/9/bits/ios_base.h **** 
 164:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 165:/usr/include/c++/9/bits/ios_base.h ****   operator&(_Ios_Iostate __a, _Ios_Iostate __b)
 166:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
 167:/usr/include/c++/9/bits/ios_base.h **** 
 168:/usr/include/c++/9/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 169:/usr/include/c++/9/bits/ios_base.h ****   operator|(_Ios_Iostate __a, _Ios_Iostate __b)
 4368              		.loc 18 169 3 view .LVU910
 4369              	.LBB5349:
 170:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 4370              		.loc 18 170 5 view .LVU911
 4371              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 4372              		.loc 18 170 70 is_stmt 0 view .LVU912
 4373 029c 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_35 + 32B], tmp162
 4374 029f 83CE01   		orl	$1, %esi	#, tmp162
 4375              	.LEHB4:
 4376              	.LBE5349:
 4377              	.LBE5348:
 4378              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 4379              		.loc 15 158 9 view .LVU913
 4380 02a2 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 4380      00
 4381              	.LVL226:
 4382              	.LEHE4:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 4383              		.loc 15 158 9 view .LVU914
 4384 02a7 E9C7FEFF 		jmp	.L115	#
 4384      FF
 4385              	.LVL227:
 4386 02ac 0F1F4000 		.p2align 4,,10
 4387              		.p2align 3
 4388              	.L116:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 4389              		.loc 15 158 9 view .LVU915
 4390              	.LBE5347:
 4391              	.LBE5346:
 4392              	.LBE5345:
 4393              	.LBE5344:
 4394              	.LBE5350:
 4395              	.LBE5351:
 4396              	.LBE5354:
 4397              	.LBE5355:
 4398              	.LBE5473:
 4399              	.LBB5474:
 4400              	.LBB5432:
 4401              	.LBB5429:
 4402              	.LBB5412:
 4403              	.LBI5412:
 665:/usr/include/c++/9/bits/basic_string.h ****       {
 4404              		.loc 2 665 7 is_stmt 1 view .LVU916
 4405              	.LBB5413:
 4406              	.LBI5413:
1364:/usr/include/c++/9/bits/basic_string.h ****       {
 4407              		.loc 2 1364 7 view .LVU917
 4408              	.LBB5414:
 4409              	# /usr/include/c++/9/bits/basic_string.h:1366: 	this->_M_assign(__str);
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 4410              		.loc 2 1366 2 is_stmt 0 view .LVU918
 4411 02b0 488D7424 		leaq	112(%rsp), %rsi	#, tmp172
 4411      70
 4412              	.LVL228:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 4413              		.loc 2 1366 2 view .LVU919
 4414 02b5 4C89E7   		movq	%r12, %rdi	# <retval>,
 4415              	.LEHB5:
 4416 02b8 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT	#
 4416      00
 4417              	.LVL229:
 4418              	.LEHE5:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 4419              		.loc 2 1366 2 view .LVU920
 4420 02bd E903FFFF 		jmp	.L118	#
 4420      FF
 4421              	.LVL230:
 4422              	.L134:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 4423              		.loc 2 1366 2 view .LVU921
 4424              	.LBE5414:
 4425              	.LBE5413:
 4426              	.LBE5412:
 4427              	.LBE5429:
 4428              	.LBE5432:
 4429              	.LBE5474:
 4430              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
 4431              		.loc 14 54 3 view .LVU922
 4432 02c2 E8000000 		call	__stack_chk_fail@PLT	#
 4432      00
 4433              	.LVL231:
 4434              	.L125:
 4435              		.loc 14 54 3 view .LVU923
 4436 02c7 F30F1EFA 		endbr64	
 4437 02cb 4989C5   		movq	%rax, %r13	# tmp208, tmp178
 4438 02ce EB1A     		jmp	.L123	#
 4439              	.LVL232:
 4440              	.L127:
 4441              		.loc 14 54 3 view .LVU924
 4442 02d0 F30F1EFA 		endbr64	
 4443 02d4 4889C3   		movq	%rax, %rbx	# tmp204, tmp150
 4444              	.LVL233:
 4445              		.loc 14 54 3 view .LVU925
 4446 02d7 EB24     		jmp	.L112	#
 4447              	.LVL234:
 4448              	.L121:
 4449              	.LBB5475:
 4450              	.LBB5433:
 4451              	.LBB5430:
 4452              	.LBB5415:
 4453              	.LBI5415:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 4454              		.loc 2 657 7 is_stmt 1 view .LVU926
 4455              	.LBB5416:
 4456              	.LBI5416:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 4457              		.loc 2 229 7 view .LVU927
 4458              	.LBB5417:
 4459              	.LBB5418:
 4460              	.LBI5418:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4461              		.loc 2 221 7 view .LVU928
 4462              	.LBB5419:
 4463              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 4464              		.loc 2 222 26 is_stmt 0 view .LVU929
 4465 02d9 498B3C24 		movq	(%r12), %rdi	# MEM[(char * *)_6(D)], _48
 4466              	.LVL235:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 4467              		.loc 2 222 26 view .LVU930
 4468              	.LBE5419:
 4469              	.LBE5418:
 4470              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4471              		.loc 2 231 2 view .LVU931
 4472 02dd 4839FB   		cmpq	%rdi, %rbx	# _48, _39
 4473 02e0 7408     		je	.L123	#,
 4474              	.LVL236:
 4475              	.LBB5420:
 4476              	.LBI5420:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 4477              		.loc 2 236 7 is_stmt 1 view .LVU932
 4478              	.LBB5421:
 4479              	.LBB5422:
 4480              	.LBI5422:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 4481              		.loc 3 469 7 view .LVU933
 4482              	.LBB5423:
 4483              	.LBI5423:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 4484              		.loc 4 119 7 view .LVU934
 4485              	.LBB5424:
 4486              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 4487              		.loc 4 128 19 is_stmt 0 view .LVU935
 4488 02e2 C5F877   		vzeroupper
 4489 02e5 E8000000 		call	_ZdlPv@PLT	#
 4489      00
 4490              	.LVL237:
 4491              		.loc 4 128 19 view .LVU936
 4492              	.LBE5424:
 4493              	.LBE5423:
 4494              	.LBE5422:
 4495              	.LBE5421:
 4496              	.LBE5420:
 4497              	.LBE5417:
 4498              	.LBE5416:
 4499              	.LBB5425:
 4500              	.LBI5425:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 4501              		.loc 2 150 14 is_stmt 1 view .LVU937
 4502              	.LBB5426:
 4503              	.LBI5426:
 4504              		.loc 5 153 7 view .LVU938
 4505              	.LBB5427:
 4506              	.LBI5427:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 4507              		.loc 4 89 7 view .LVU939
 4508              	.L123:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 4509              		.loc 4 89 7 is_stmt 0 view .LVU940
 4510              	.LBE5427:
 4511              	.LBE5426:
 4512              	.LBE5425:
 4513              	.LBE5415:
 4514              	.LBE5430:
 4515              	.LBE5433:
 4516              	.LBE5475:
 4517              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:51:     std::ostringstream ss;
  51:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     _str(ss, args...);
 4518              		.loc 14 51 24 view .LVU941
 4519 02ea 4C89FF   		movq	%r15, %rdi	# tmp194,
 4520 02ed C5F877   		vzeroupper
 4521 02f0 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 4521      00
 4522              	.LVL238:
 4523 02f5 4C89EF   		movq	%r13, %rdi	# tmp178,
 4524              	.LEHB6:
 4525 02f8 E8000000 		call	_Unwind_Resume@PLT	#
 4525      00
 4526              	.LVL239:
 4527              	.L112:
 4528              	.LBB5476:
 4529              	.LBB5333:
 4530              	.LBB5331:
 4531              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 4532              		.loc 12 584 53 view .LVU942
 4533 02fd 4C89F7   		movq	%r14, %rdi	# tmp196,
 4534 0300 C5F877   		vzeroupper
 4535 0303 E8000000 		call	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev	#
 4535      00
 4536              	.LVL240:
 4537              	.LBB5326:
 4538              	.LBI5326:
  93:/usr/include/c++/9/ostream **** 
 4539              		.loc 16 93 7 is_stmt 1 view .LVU943
 4540              	.LBB5327:
 4541              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 4542              		.loc 16 93 26 is_stmt 0 view .LVU944
 4543 0308 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 4543      000000
 4544 030f 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 4544      000000
 4545 0316 48894424 		movq	%rax, 32(%rsp)	# tmp223, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 4545      20
 4546 031b 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_19 + -24B], MEM[(long int *)_19 + -24B]
 4547 031f 48894C04 		movq	%rcx, 32(%rsp,%rax)	# tmp225, *_31.D.34155._vptr.ios_base
 4547      20
 4548              	.LVL241:
 4549              	.L113:
  93:/usr/include/c++/9/ostream **** 
 4550              		.loc 16 93 26 view .LVU945
 4551              	.LBE5327:
 4552              	.LBE5326:
 4553              	.LBB5328:
 4554              	.LBI5328:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4555              		.loc 15 282 7 is_stmt 1 view .LVU946
 4556              	.LBB5329:
 4557              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4558              		.loc 15 282 22 is_stmt 0 view .LVU947
 4559 0324 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp226
 4559      000000
 4560 032b 4C89EF   		movq	%r13, %rdi	# tmp199,
 4561 032e 48898424 		movq	%rax, 144(%rsp)	# tmp226, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 4561      90000000 
 4562 0336 C5F877   		vzeroupper
 4563 0339 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 4563      00
 4564              	.LVL242:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4565              		.loc 15 282 22 view .LVU948
 4566 033e 4889DF   		movq	%rbx, %rdi	# tmp154,
 4567 0341 E8000000 		call	_Unwind_Resume@PLT	#
 4567      00
 4568              	.LVL243:
 4569              	.LEHE6:
 4570              	.L126:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4571              		.loc 15 282 22 view .LVU949
 4572 0346 F30F1EFA 		endbr64	
 4573 034a 4889C3   		movq	%rax, %rbx	# tmp205, tmp154
 4574              	.LVL244:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4575              		.loc 15 282 22 view .LVU950
 4576 034d EBD5     		jmp	.L113	#
 4577              	.LVL245:
 4578              	.L128:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 4579              		.loc 15 282 22 view .LVU951
 4580 034f F30F1EFA 		endbr64	
 4581 0353 4989C5   		movq	%rax, %r13	# tmp207, tmp179
 4582 0356 EB81     		jmp	.L121	#
 4583              	.LBE5329:
 4584              	.LBE5328:
 4585              	.LBE5331:
 4586              	.LBE5333:
 4587              	.LBE5476:
 4588              		.cfi_endproc
 4589              	.LFE11993:
 4590              		.globl	__gxx_personality_v0
 4591              		.section	.gcc_except_table._ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_,"aG",@progb
 4592              	.LLSDA11993:
 4593 0000 FF       		.byte	0xff
 4594 0001 FF       		.byte	0xff
 4595 0002 01       		.byte	0x1
 4596 0003 2A       		.uleb128 .LLSDACSE11993-.LLSDACSB11993
 4597              	.LLSDACSB11993:
 4598 0004 AE01     		.uleb128 .LEHB0-.LFB11993
 4599 0006 05       		.uleb128 .LEHE0-.LEHB0
 4600 0007 C606     		.uleb128 .L126-.LFB11993
 4601 0009 00       		.uleb128 0
 4602 000a C702     		.uleb128 .LEHB1-.LFB11993
 4603 000c 05       		.uleb128 .LEHE1-.LEHB1
 4604 000d D005     		.uleb128 .L127-.LFB11993
 4605 000f 00       		.uleb128 0
 4606 0010 EE02     		.uleb128 .LEHB2-.LFB11993
 4607 0012 0F       		.uleb128 .LEHE2-.LEHB2
 4608 0013 C705     		.uleb128 .L125-.LFB11993
 4609 0015 00       		.uleb128 0
 4610 0016 C003     		.uleb128 .LEHB3-.LFB11993
 4611 0018 C201     		.uleb128 .LEHE3-.LEHB3
 4612 001a CF06     		.uleb128 .L128-.LFB11993
 4613 001c 00       		.uleb128 0
 4614 001d A205     		.uleb128 .LEHB4-.LFB11993
 4615 001f 05       		.uleb128 .LEHE4-.LEHB4
 4616 0020 C705     		.uleb128 .L125-.LFB11993
 4617 0022 00       		.uleb128 0
 4618 0023 B805     		.uleb128 .LEHB5-.LFB11993
 4619 0025 05       		.uleb128 .LEHE5-.LEHB5
 4620 0026 CF06     		.uleb128 .L128-.LFB11993
 4621 0028 00       		.uleb128 0
 4622 0029 F805     		.uleb128 .LEHB6-.LFB11993
 4623 002b 4E       		.uleb128 .LEHE6-.LEHB6
 4624 002c 00       		.uleb128 0
 4625 002d 00       		.uleb128 0
 4626              	.LLSDACSE11993:
 4627              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_,"axG",@progbits,_ZN3c10
 4629              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4630              		.p2align 4
 4631              		.weak	_ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4ca
 4633              	_ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4callERKS3
 4634              	.LVL246:
 4635              	.LFB11994:
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 4636              		.loc 14 50 22 is_stmt 1 view -0
 4637              		.cfi_startproc
 4638              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4639              		.cfi_lsda 0x1b,.LLSDA11994
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 4640              		.loc 14 50 22 is_stmt 0 view .LVU953
 4641 0000 F30F1EFA 		endbr64	
 4642 0004 55       		pushq	%rbp	#
 4643              		.cfi_def_cfa_offset 16
 4644              		.cfi_offset 6, -16
 4645 0005 4889E5   		movq	%rsp, %rbp	#,
 4646              		.cfi_def_cfa_register 6
 4647 0008 4157     		pushq	%r15	#
 4648 000a 4156     		pushq	%r14	#
 4649 000c 4155     		pushq	%r13	#
 4650 000e 4154     		pushq	%r12	#
 4651              		.cfi_offset 15, -24
 4652              		.cfi_offset 14, -32
 4653              		.cfi_offset 13, -40
 4654              		.cfi_offset 12, -48
 4655 0010 4989FC   		movq	%rdi, %r12	# tmp204, <retval>
 4656 0013 53       		pushq	%rbx	#
 4657              		.cfi_offset 3, -56
 4658 0014 4889D3   		movq	%rdx, %rbx	# tmp206, args#1
 4659 0017 4883E4E0 		andq	$-32, %rsp	#,
 4660 001b 4881ECA0 		subq	$416, %rsp	#,
 4660      010000
 4661              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 4662              		.loc 14 50 22 view .LVU954
 4663 0022 48897424 		movq	%rsi, 24(%rsp)	# tmp205, %sfp
 4663      18
 4664              	.LBB5638:
 4665              	.LBB5639:
 4666              	.LBB5640:
 4667              	.LBB5641:
 4668              	.LBB5642:
 4669              	.LBB5643:
 4670              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 4671              		.loc 15 462 59 view .LVU955
 4672 0027 4C8DAC24 		leaq	144(%rsp), %r13	#, tmp199
 4672      90000000 
 4673 002f 4C8D7C24 		leaq	32(%rsp), %r15	#, tmp202
 4673      20
 4674 0034 4C89EF   		movq	%r13, %rdi	# tmp199,
 4675              	.LVL247:
 4676              		.loc 15 462 59 view .LVU956
 4677              	.LBE5643:
 4678              	.LBE5642:
 4679              	.LBE5641:
 4680              	.LBE5640:
 4681              	.LBE5639:
 4682              	.LBE5638:
 4683              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 4684              		.loc 14 50 22 view .LVU957
 4685 0037 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp212
 4685      25280000 
 4685      00
 4686 0040 48898424 		movq	%rax, 408(%rsp)	# tmp212, D.445218
 4686      98010000 
 4687 0048 31C0     		xorl	%eax, %eax	# tmp212
 4688              	.LVL248:
 4689              	.LBB5722:
 4690              	.LBI5638:
 583:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 4691              		.loc 12 583 7 is_stmt 1 view .LVU958
 4692              	.LBB5720:
 4693              	.LBB5718:
 4694              	.LBB5654:
 4695              	.LBI5641:
 460:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 4696              		.loc 15 460 7 view .LVU959
 4697              	.LBB5649:
 4698              	.LBB5644:
 4699              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 4700              		.loc 15 462 59 is_stmt 0 view .LVU960
 4701 004a E8000000 		call	_ZNSt8ios_baseC2Ev@PLT	#
 4701      00
 4702              	.LVL249:
 4703              		.loc 15 462 59 view .LVU961
 4704 004f 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp214
 4704      000000
 4705 0056 C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp129
 4706              	.LBE5644:
 4707              	.LBE5649:
 4708              	.LBE5654:
 4709              	.LBB5655:
 4710              	.LBB5656:
 4711              	.LBB5657:
 4712              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 4713              		.loc 16 391 9 view .LVU962
 4714 005a 31F6     		xorl	%esi, %esi	#
 4715              	.LBE5657:
 4716              	.LBE5656:
 4717              	.LBE5655:
 4718              	.LBB5664:
 4719              	.LBB5650:
 4720              	.LBB5645:
 4721              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 4722              		.loc 15 462 59 view .LVU963
 4723 005c 48898424 		movq	%rax, 144(%rsp)	# tmp214, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 4723      90000000 
 4724 0064 31C0     		xorl	%eax, %eax	#
 4725 0066 C4E37D39 		vextracti128	$0x1, %ymm0, 392(%rsp)	# tmp129, MEM[(void *)&ss + 344B]
 4725      84248801 
 4725      000001
 4726              	.LVL250:
 4727              		.loc 15 462 59 view .LVU964
 4728              	.LBE5645:
 4729              	.LBE5650:
 4730              	.LBE5664:
 4731              	.LBB5665:
 4732              	.LBI5655:
 390:/usr/include/c++/9/ostream ****       { this->init(0); }
 4733              		.loc 16 390 7 is_stmt 1 view .LVU965
 4734              	.LBE5665:
 4735              	.LBB5666:
 4736              	.LBB5651:
 4737              	.LBB5646:
 4738              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 4739              		.loc 15 462 59 is_stmt 0 view .LVU966
 4740 0071 66898424 		movw	%ax, 368(%rsp)	#, MEM[(void *)&ss + 336B]
 4740      70010000 
 4741              	.LBE5646:
 4742              	.LBE5651:
 4743              	.LBE5666:
 4744              	.LBB5667:
 4745              	.LBB5661:
 4746              	.LBB5658:
 4747              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 4748              		.loc 16 391 7 view .LVU967
 4749 0079 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 4749      000000
 4750              	.LBE5658:
 4751              	.LBE5661:
 4752              	.LBE5667:
 4753              	.LBB5668:
 4754              	.LBB5652:
 4755              	.LBB5647:
 4756              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 4757              		.loc 15 462 59 view .LVU968
 4758 0080 C5F81184 		vmovups	%xmm0, 376(%rsp)	# tmp129, MEM[(void *)&ss + 344B]
 4758      24780100 
 4758      00
 4759              	.LBE5647:
 4760              	.LBE5652:
 4761              	.LBE5668:
 4762              	.LBB5669:
 4763              	.LBB5662:
 4764              	.LBB5659:
 4765              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 4766              		.loc 16 391 7 view .LVU969
 4767 0089 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_21 + -24B], _24
 4768 008d 48894424 		movq	%rax, 32(%rsp)	# tmp215, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 4768      20
 4769 0092 488B0500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const v
 4769      000000
 4770              	.LBE5659:
 4771              	.LBE5662:
 4772              	.LBE5669:
 4773              	.LBB5670:
 4774              	.LBB5653:
 4775              	.LBB5648:
 4776              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 4777              		.loc 15 462 59 view .LVU970
 4778 0099 48C78424 		movq	$0, 360(%rsp)	#, MEM[(struct basic_ios *)&ss + 112B]._M_tie
 4778      68010000 
 4778      00000000 
 4779              	.LBE5648:
 4780              	.LBE5653:
 4781              	.LBE5670:
 4782              	.LBB5671:
 4783              	.LBB5663:
 4784              	.LBB5660:
 4785              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 4786              		.loc 16 391 7 view .LVU971
 4787 00a5 4C01FF   		addq	%r15, %rdi	# tmp202, _24
 4788 00a8 488907   		movq	%rax, (%rdi)	# tmp218, *_24.D.34155._vptr.ios_base
 4789              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 4790              		.loc 16 391 9 view .LVU972
 4791 00ab C5F877   		vzeroupper
 4792              	.LEHB7:
 4793 00ae E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 4793      00
 4794              	.LVL251:
 4795              	.LEHE7:
 391:/usr/include/c++/9/ostream **** 
 4796              		.loc 16 391 9 view .LVU973
 4797              	.LBE5660:
 4798              	.LBE5663:
 4799              	.LBE5671:
 4800              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 4801              		.loc 12 584 53 view .LVU974
 4802 00b3 C5FA7E0D 		vmovq	.LC1(%rip), %xmm1	#, tmp220
 4802      00000000 
 4803 00bb 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp219
 4803      000000
 4804              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 4805              		.loc 12 585 9 view .LVU975
 4806 00c2 4C8D7424 		leaq	40(%rsp), %r14	#, tmp203
 4806      28
 4807              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 4808              		.loc 12 584 53 view .LVU976
 4809 00c7 48898424 		movq	%rax, 144(%rsp)	# tmp219, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 4809      90000000 
 4810              	.LVL252:
 4811              	.LBB5672:
 4812              	.LBI5672:
 111:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 4813              		.loc 12 111 7 is_stmt 1 view .LVU977
 4814              	.LBB5673:
 4815              	.LBB5674:
 4816              	.LBB5675:
 4817              	.LBI5675:
 470:/usr/include/c++/9/streambuf ****       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
 4818              		.loc 13 470 7 view .LVU978
 4819              	.LBE5675:
 4820              	.LBE5674:
 4821              	.LBE5673:
 4822              	.LBE5672:
 4823              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 4824              		.loc 12 584 53 is_stmt 0 view .LVU979
 4825 00cf 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp221
 4825      000000
 4826 00d6 C4E3F122 		vpinsrq	$1, %rax, %xmm1, %xmm0	# tmp221, tmp220, tmp135
 4826      C001
 4827              	.LBB5711:
 4828              	.LBB5708:
 4829              	.LBB5705:
 4830              	.LBB5680:
 4831              	.LBB5676:
 4832              	.LBB5677:
 4833              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 4834              		.loc 13 473 29 view .LVU980
 4835 00dc 488D4424 		leaq	96(%rsp), %rax	#, tmp201
 4835      60
 4836 00e1 4889C7   		movq	%rax, %rdi	# tmp201,
 4837              	.LBE5677:
 4838              	.LBE5676:
 4839              	.LBE5680:
 4840              	.LBE5705:
 4841              	.LBE5708:
 4842              	.LBE5711:
 4843              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 4844              		.loc 12 584 53 view .LVU981
 4845 00e4 C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp135, MEM[(int (*) () * *)&ss]
 4845      2420
 4846              	.LBB5712:
 4847              	.LBB5709:
 4848              	.LBB5706:
 4849              	.LBB5681:
 4850              	.LBB5679:
 4851              	.LBB5678:
 4852              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 4853              		.loc 13 473 29 view .LVU982
 4854 00ea C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp137
 4855 00ee 48894424 		movq	%rax, 8(%rsp)	# tmp201, %sfp
 4855      08
 4856 00f3 C5F82944 		vmovaps	%xmm0, 48(%rsp)	# tmp137, MEM[(char_type * *)&ss + 16B]
 4856      2430
 4857 00f9 C5F82944 		vmovaps	%xmm0, 64(%rsp)	# tmp137, MEM[(char_type * *)&ss + 32B]
 4857      2440
 4858 00ff C5F82944 		vmovaps	%xmm0, 80(%rsp)	# tmp137, MEM[(char_type * *)&ss + 48B]
 4858      2450
 4859 0105 E8000000 		call	_ZNSt6localeC1Ev@PLT	#
 4859      00
 4860              	.LVL253:
 4861              		.loc 13 473 29 view .LVU983
 4862              	.LBE5678:
 4863              	.LBE5679:
 4864              	.LBE5681:
 4865              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 4866              		.loc 12 112 56 view .LVU984
 4867 010a 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp223
 4867      000000
 4868              	.LBE5706:
 4869              	.LBE5709:
 4870              	.LBE5712:
 4871              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 4872              		.loc 12 585 9 view .LVU985
 4873 0111 4C89F6   		movq	%r14, %rsi	# tmp203,
 4874 0114 4C89EF   		movq	%r13, %rdi	# tmp199,
 4875              	.LBB5713:
 4876              	.LBB5710:
 4877              	.LBB5707:
 4878              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 4879              		.loc 12 112 56 view .LVU986
 4880 0117 48894424 		movq	%rax, 40(%rsp)	# tmp223, MEM[(struct basic_stringbuf *)&ss + 8B].D.48380._vptr.basic_streambu
 4880      28
 4881              	.LBB5682:
 4882              	.LBB5683:
 4883              	.LBB5684:
 4884              	.LBB5685:
 4885              	.LBB5686:
 4886              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 4887              		.loc 2 160 46 view .LVU987
 4888 011c 488D8424 		leaq	128(%rsp), %rax	#, tmp196
 4888      80000000 
 4889              	.LBE5686:
 4890              	.LBE5685:
 4891              	.LBE5684:
 4892              	.LBE5683:
 4893              	.LBE5682:
 4894              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 4895              		.loc 12 112 56 view .LVU988
 4896 0124 C7442468 		movl	$16, 104(%rsp)	#, MEM[(struct basic_stringbuf *)&ss + 8B]._M_mode
 4896      10000000 
 4897              	.LVL254:
 4898              	.LBB5704:
 4899              	.LBI5682:
 431:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 4900              		.loc 2 431 7 is_stmt 1 view .LVU989
 4901              	.LBB5703:
 4902              	.LBB5692:
 4903              	.LBI5692:
 138:/usr/include/c++/9/bits/allocator.h **** 
 4904              		.loc 5 138 7 view .LVU990
 4905              	.LBB5693:
 4906              	.LBI5693:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 4907              		.loc 4 80 7 view .LVU991
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 4908              		.loc 4 80 7 is_stmt 0 view .LVU992
 4909              	.LBE5693:
 4910              	.LBE5692:
 4911              	.LBB5694:
 4912              	.LBI5694:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 4913              		.loc 2 190 7 is_stmt 1 view .LVU993
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 4914              		.loc 2 190 7 is_stmt 0 view .LVU994
 4915              	.LBE5694:
 4916              	.LBB5695:
 4917              	.LBI5684:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 4918              		.loc 2 159 2 is_stmt 1 view .LVU995
 4919              	.LBB5691:
 4920              	.LBB5690:
 4921              	.LBB5687:
 4922              	.LBI5687:
 4923              		.loc 11 99 5 view .LVU996
 4924              		.loc 11 99 5 is_stmt 0 view .LVU997
 4925              	.LBE5687:
 4926              	.LBB5688:
 4927              	.LBI5688:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 4928              		.loc 5 141 7 is_stmt 1 view .LVU998
 4929              	.LBB5689:
 4930              	.LBI5689:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 4931              		.loc 4 83 7 view .LVU999
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 4932              		.loc 4 83 7 is_stmt 0 view .LVU1000
 4933              	.LBE5689:
 4934              	.LBE5688:
 4935              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 4936              		.loc 2 160 46 view .LVU1001
 4937 012c 48894424 		movq	%rax, 16(%rsp)	# tmp196, %sfp
 4937      10
 4938 0131 48894424 		movq	%rax, 112(%rsp)	# tmp196, MEM[(struct _Alloc_hider *)&ss + 80B]._M_p
 4938      70
 4939              	.LVL255:
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 4940              		.loc 2 160 46 view .LVU1002
 4941              	.LBE5690:
 4942              	.LBE5691:
 4943              	.LBE5695:
 4944              	.LBB5696:
 4945              	.LBI5696:
 4946              		.loc 5 153 7 is_stmt 1 view .LVU1003
 4947              	.LBB5697:
 4948              	.LBI5697:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 4949              		.loc 4 89 7 view .LVU1004
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 4950              		.loc 4 89 7 is_stmt 0 view .LVU1005
 4951              	.LBE5697:
 4952              	.LBE5696:
 4953              	.LBB5698:
 4954              	.LBI5698:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 4955              		.loc 2 214 7 is_stmt 1 view .LVU1006
 4956              	.LBB5699:
 4957              	.LBI5699:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 4958              		.loc 2 182 7 view .LVU1007
 4959              	.LBB5700:
 4960              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 4961              		.loc 2 183 9 is_stmt 0 view .LVU1008
 4962 0136 48C74424 		movq	$0, 120(%rsp)	#, MEM[(size_type *)&ss + 88B]
 4962      78000000 
 4962      00
 4963              	.LVL256:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 4964              		.loc 2 183 9 view .LVU1009
 4965              	.LBE5700:
 4966              	.LBE5699:
 4967              	.LBB5701:
 4968              	.LBI5701:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 4969              		.loc 8 299 7 is_stmt 1 view .LVU1010
 4970              	.LBB5702:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 4971              		.loc 8 300 9 view .LVU1011
 4972              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 4973              		.loc 8 300 14 is_stmt 0 view .LVU1012
 4974 013f C6842480 		movb	$0, 128(%rsp)	#, MEM[(char_type &)&ss + 96]
 4974      00000000 
 4975              	.LVL257:
 4976              	.LEHB8:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 4977              		.loc 8 300 14 view .LVU1013
 4978              	.LBE5702:
 4979              	.LBE5701:
 4980              	.LBE5698:
 4981              	.LBE5703:
 4982              	.LBE5704:
 4983              	.LBE5707:
 4984              	.LBE5710:
 4985              	.LBE5713:
 4986              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 4987              		.loc 12 585 9 view .LVU1014
 4988 0147 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 4988      00
 4989              	.LVL258:
 4990              	.LEHE8:
 585:/usr/include/c++/9/sstream **** 
 4991              		.loc 12 585 9 view .LVU1015
 4992              	.LBE5718:
 4993              	.LBE5720:
 4994              	.LBE5722:
 4995              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:52:     _str(ss, args...);
  52:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return ss.str();
 4996              		.loc 14 52 9 view .LVU1016
 4997 014c 488B4424 		movq	24(%rsp), %rax	# %sfp, args#0
 4997      18
 4998 0151 4C8B30   		movq	(%rax), %r14	# *args#0_4(D), _10
 4999              	.LVL259:
 5000              	.LBB5723:
 5001              	.LBI5723:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 5002              		.loc 14 44 22 is_stmt 1 view .LVU1017
 5003              	.LBB5724:
 5004              	.LBI5724:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 5005              		.loc 14 38 22 view .LVU1018
 5006              	.LBB5725:
 5007              	.LBI5725:
 565:/usr/include/c++/9/ostream ****     {
 5008              		.loc 16 565 5 view .LVU1019
 5009              	.LBB5726:
 5010              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 5011              		.loc 16 567 7 is_stmt 0 view .LVU1020
 5012 0154 4D85F6   		testq	%r14, %r14	# _10
 5013 0157 0F843301 		je	.L157	#,
 5013      0000
 5014              	.LVL260:
 5015              	.LBB5727:
 5016              	.LBI5727:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 5017              		.loc 8 329 7 is_stmt 1 view .LVU1021
 5018              	.LBB5728:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 5019              		.loc 8 335 2 view .LVU1022
 5020              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 5021              		.loc 8 335 25 is_stmt 0 view .LVU1023
 5022 015d 4C89F7   		movq	%r14, %rdi	# _10,
 5023 0160 E8000000 		call	strlen@PLT	#
 5023      00
 5024              	.LVL261:
 5025              	.LBE5728:
 5026              	.LBE5727:
 5027              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 5028              		.loc 16 570 18 view .LVU1024
 5029 0165 4C89F6   		movq	%r14, %rsi	# _10,
 5030 0168 4C89FF   		movq	%r15, %rdi	# tmp202,
 5031              	.LBB5730:
 5032              	.LBB5729:
 5033              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 5034              		.loc 8 335 25 view .LVU1025
 5035 016b 4889C2   		movq	%rax, %rdx	# tmp209, tmp167
 5036              	.LVL262:
 5037              	.LEHB9:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 5038              		.loc 8 335 25 view .LVU1026
 5039              	.LBE5729:
 5040              	.LBE5730:
 5041              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 5042              		.loc 16 570 18 view .LVU1027
 5043 016e E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 5043      00
 5044              	.LVL263:
 5045              	.L140:
 5046              		.loc 16 570 18 view .LVU1028
 5047              	.LBE5726:
 5048              	.LBE5725:
 5049              	.LBE5724:
 5050              	.LBB5739:
 5051              	.LBI5739:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 5052              		.loc 14 38 22 is_stmt 1 view .LVU1029
 5053              	.LBB5740:
 5054              	.LBI5740:
2332:/usr/include/c++/9/bits/basic_string.h ****       { return _M_get_allocator(); }
2333:/usr/include/c++/9/bits/basic_string.h **** 
2334:/usr/include/c++/9/bits/basic_string.h ****       /**
2335:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a C substring.
2336:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
2337:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2338:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
2339:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2340:/usr/include/c++/9/bits/basic_string.h ****        *
2341:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
2342:/usr/include/c++/9/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2343:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2344:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
2345:/usr/include/c++/9/bits/basic_string.h ****       */
2346:/usr/include/c++/9/bits/basic_string.h ****       size_type
2347:/usr/include/c++/9/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
2348:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2349:/usr/include/c++/9/bits/basic_string.h **** 
2350:/usr/include/c++/9/bits/basic_string.h ****       /**
2351:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a string.
2352:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to locate.
2353:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2354:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2355:/usr/include/c++/9/bits/basic_string.h ****        *
2356:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
2357:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
2358:/usr/include/c++/9/bits/basic_string.h ****        *  found, returns npos.
2359:/usr/include/c++/9/bits/basic_string.h ****       */
2360:/usr/include/c++/9/bits/basic_string.h ****       size_type
2361:/usr/include/c++/9/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
2362:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2363:/usr/include/c++/9/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
2364:/usr/include/c++/9/bits/basic_string.h **** 
2365:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2366:/usr/include/c++/9/bits/basic_string.h ****       /**
2367:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a string_view.
2368:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2369:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2370:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2371:/usr/include/c++/9/bits/basic_string.h ****       */
2372:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2373:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2374:/usr/include/c++/9/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
2375:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2376:/usr/include/c++/9/bits/basic_string.h **** 	{
2377:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2378:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
2379:/usr/include/c++/9/bits/basic_string.h **** 	}
2380:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2381:/usr/include/c++/9/bits/basic_string.h **** 
2382:/usr/include/c++/9/bits/basic_string.h ****       /**
2383:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a C string.
2384:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
2385:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2386:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2387:/usr/include/c++/9/bits/basic_string.h ****        *
2388:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
2389:/usr/include/c++/9/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
2390:/usr/include/c++/9/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2391:/usr/include/c++/9/bits/basic_string.h ****       */
2392:/usr/include/c++/9/bits/basic_string.h ****       size_type
2393:/usr/include/c++/9/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2394:/usr/include/c++/9/bits/basic_string.h ****       {
2395:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2396:/usr/include/c++/9/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
2397:/usr/include/c++/9/bits/basic_string.h ****       }
2398:/usr/include/c++/9/bits/basic_string.h **** 
2399:/usr/include/c++/9/bits/basic_string.h ****       /**
2400:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character.
2401:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
2402:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2403:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2404:/usr/include/c++/9/bits/basic_string.h ****        *
2405:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
2406:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2407:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
2408:/usr/include/c++/9/bits/basic_string.h ****       */
2409:/usr/include/c++/9/bits/basic_string.h ****       size_type
2410:/usr/include/c++/9/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
2411:/usr/include/c++/9/bits/basic_string.h **** 
2412:/usr/include/c++/9/bits/basic_string.h ****       /**
2413:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a string.
2414:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to locate.
2415:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2416:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2417:/usr/include/c++/9/bits/basic_string.h ****        *
2418:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
2419:/usr/include/c++/9/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
2420:/usr/include/c++/9/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2421:/usr/include/c++/9/bits/basic_string.h ****       */
2422:/usr/include/c++/9/bits/basic_string.h ****       size_type
2423:/usr/include/c++/9/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
2424:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2425:/usr/include/c++/9/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
2426:/usr/include/c++/9/bits/basic_string.h **** 
2427:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2428:/usr/include/c++/9/bits/basic_string.h ****       /**
2429:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
2430:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2431:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2432:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2433:/usr/include/c++/9/bits/basic_string.h ****       */
2434:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2435:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2436:/usr/include/c++/9/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
2437:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2438:/usr/include/c++/9/bits/basic_string.h **** 	{
2439:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2440:/usr/include/c++/9/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
2441:/usr/include/c++/9/bits/basic_string.h **** 	}
2442:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2443:/usr/include/c++/9/bits/basic_string.h **** 
2444:/usr/include/c++/9/bits/basic_string.h ****       /**
2445:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
2446:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
2447:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2448:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2449:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2450:/usr/include/c++/9/bits/basic_string.h ****        *
2451:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
2452:/usr/include/c++/9/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2453:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2454:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
2455:/usr/include/c++/9/bits/basic_string.h ****       */
2456:/usr/include/c++/9/bits/basic_string.h ****       size_type
2457:/usr/include/c++/9/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
2458:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2459:/usr/include/c++/9/bits/basic_string.h **** 
2460:/usr/include/c++/9/bits/basic_string.h ****       /**
2461:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a C string.
2462:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
2463:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2464:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2465:/usr/include/c++/9/bits/basic_string.h ****        *
2466:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2467:/usr/include/c++/9/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2468:/usr/include/c++/9/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2469:/usr/include/c++/9/bits/basic_string.h ****       */
2470:/usr/include/c++/9/bits/basic_string.h ****       size_type
2471:/usr/include/c++/9/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2472:/usr/include/c++/9/bits/basic_string.h ****       {
2473:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2474:/usr/include/c++/9/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2475:/usr/include/c++/9/bits/basic_string.h ****       }
2476:/usr/include/c++/9/bits/basic_string.h **** 
2477:/usr/include/c++/9/bits/basic_string.h ****       /**
2478:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character.
2479:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
2480:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2481:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2482:/usr/include/c++/9/bits/basic_string.h ****        *
2483:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2484:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2485:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
2486:/usr/include/c++/9/bits/basic_string.h ****       */
2487:/usr/include/c++/9/bits/basic_string.h ****       size_type
2488:/usr/include/c++/9/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2489:/usr/include/c++/9/bits/basic_string.h **** 
2490:/usr/include/c++/9/bits/basic_string.h ****       /**
2491:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2492:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2493:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2494:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2495:/usr/include/c++/9/bits/basic_string.h ****        *
2496:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2497:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2498:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2499:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
2500:/usr/include/c++/9/bits/basic_string.h ****       */
2501:/usr/include/c++/9/bits/basic_string.h ****       size_type
2502:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2503:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2504:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2505:/usr/include/c++/9/bits/basic_string.h **** 
2506:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2507:/usr/include/c++/9/bits/basic_string.h ****       /**
2508:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
2509:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2510:/usr/include/c++/9/bits/basic_string.h ****        *                characters to locate.
2511:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2512:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2513:/usr/include/c++/9/bits/basic_string.h ****       */
2514:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2515:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2516:/usr/include/c++/9/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
2517:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2518:/usr/include/c++/9/bits/basic_string.h **** 	{
2519:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2520:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
2521:/usr/include/c++/9/bits/basic_string.h **** 	}
2522:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2523:/usr/include/c++/9/bits/basic_string.h **** 
2524:/usr/include/c++/9/bits/basic_string.h ****       /**
2525:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2526:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2527:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2528:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2529:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2530:/usr/include/c++/9/bits/basic_string.h ****        *
2531:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2532:/usr/include/c++/9/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2533:/usr/include/c++/9/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2534:/usr/include/c++/9/bits/basic_string.h ****        *  returns npos.
2535:/usr/include/c++/9/bits/basic_string.h ****       */
2536:/usr/include/c++/9/bits/basic_string.h ****       size_type
2537:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
2538:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2539:/usr/include/c++/9/bits/basic_string.h **** 
2540:/usr/include/c++/9/bits/basic_string.h ****       /**
2541:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2542:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2543:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2544:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2545:/usr/include/c++/9/bits/basic_string.h ****        *
2546:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2547:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2548:/usr/include/c++/9/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2549:/usr/include/c++/9/bits/basic_string.h ****       */
2550:/usr/include/c++/9/bits/basic_string.h ****       size_type
2551:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2552:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2553:/usr/include/c++/9/bits/basic_string.h ****       {
2554:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2555:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2556:/usr/include/c++/9/bits/basic_string.h ****       }
2557:/usr/include/c++/9/bits/basic_string.h **** 
2558:/usr/include/c++/9/bits/basic_string.h ****       /**
2559:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character.
2560:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
2561:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2562:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2563:/usr/include/c++/9/bits/basic_string.h ****        *
2564:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2565:/usr/include/c++/9/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2566:/usr/include/c++/9/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2567:/usr/include/c++/9/bits/basic_string.h ****        *
2568:/usr/include/c++/9/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2569:/usr/include/c++/9/bits/basic_string.h ****       */
2570:/usr/include/c++/9/bits/basic_string.h ****       size_type
2571:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2572:/usr/include/c++/9/bits/basic_string.h ****       { return this->find(__c, __pos); }
2573:/usr/include/c++/9/bits/basic_string.h **** 
2574:/usr/include/c++/9/bits/basic_string.h ****       /**
2575:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2576:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2577:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2578:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2579:/usr/include/c++/9/bits/basic_string.h ****        *
2580:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2581:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2582:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2583:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
2584:/usr/include/c++/9/bits/basic_string.h ****       */
2585:/usr/include/c++/9/bits/basic_string.h ****       size_type
2586:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2587:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2588:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2589:/usr/include/c++/9/bits/basic_string.h **** 
2590:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2591:/usr/include/c++/9/bits/basic_string.h ****       /**
2592:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2593:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2594:/usr/include/c++/9/bits/basic_string.h ****        *                characters to locate.
2595:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2596:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2597:/usr/include/c++/9/bits/basic_string.h ****       */
2598:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2599:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2600:/usr/include/c++/9/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
2601:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2602:/usr/include/c++/9/bits/basic_string.h **** 	{
2603:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2604:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
2605:/usr/include/c++/9/bits/basic_string.h **** 	}
2606:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2607:/usr/include/c++/9/bits/basic_string.h **** 
2608:/usr/include/c++/9/bits/basic_string.h ****       /**
2609:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2610:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2611:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2612:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2613:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2614:/usr/include/c++/9/bits/basic_string.h ****        *
2615:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2616:/usr/include/c++/9/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2617:/usr/include/c++/9/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2618:/usr/include/c++/9/bits/basic_string.h ****        *  returns npos.
2619:/usr/include/c++/9/bits/basic_string.h ****       */
2620:/usr/include/c++/9/bits/basic_string.h ****       size_type
2621:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
2622:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2623:/usr/include/c++/9/bits/basic_string.h **** 
2624:/usr/include/c++/9/bits/basic_string.h ****       /**
2625:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2626:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2627:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2628:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2629:/usr/include/c++/9/bits/basic_string.h ****        *
2630:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2631:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2632:/usr/include/c++/9/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2633:/usr/include/c++/9/bits/basic_string.h ****       */
2634:/usr/include/c++/9/bits/basic_string.h ****       size_type
2635:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2636:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2637:/usr/include/c++/9/bits/basic_string.h ****       {
2638:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2639:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2640:/usr/include/c++/9/bits/basic_string.h ****       }
2641:/usr/include/c++/9/bits/basic_string.h **** 
2642:/usr/include/c++/9/bits/basic_string.h ****       /**
2643:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character.
2644:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
2645:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2646:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2647:/usr/include/c++/9/bits/basic_string.h ****        *
2648:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2649:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2650:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
2651:/usr/include/c++/9/bits/basic_string.h ****        *
2652:/usr/include/c++/9/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
2653:/usr/include/c++/9/bits/basic_string.h ****       */
2654:/usr/include/c++/9/bits/basic_string.h ****       size_type
2655:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2656:/usr/include/c++/9/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2657:/usr/include/c++/9/bits/basic_string.h **** 
2658:/usr/include/c++/9/bits/basic_string.h ****       /**
2659:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2660:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2661:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2662:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2663:/usr/include/c++/9/bits/basic_string.h ****        *
2664:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2665:/usr/include/c++/9/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2666:/usr/include/c++/9/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2667:/usr/include/c++/9/bits/basic_string.h ****       */
2668:/usr/include/c++/9/bits/basic_string.h ****       size_type
2669:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2670:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2671:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2672:/usr/include/c++/9/bits/basic_string.h **** 
2673:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2674:/usr/include/c++/9/bits/basic_string.h ****       /**
2675:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
2676:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  A object convertible to string_view containing
2677:/usr/include/c++/9/bits/basic_string.h ****        *                characters to avoid.
2678:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2679:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2680:/usr/include/c++/9/bits/basic_string.h ****        */
2681:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2682:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2683:/usr/include/c++/9/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
2684:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2685:/usr/include/c++/9/bits/basic_string.h **** 	{
2686:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2687:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
2688:/usr/include/c++/9/bits/basic_string.h **** 	}
2689:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2690:/usr/include/c++/9/bits/basic_string.h **** 
2691:/usr/include/c++/9/bits/basic_string.h ****       /**
2692:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2693:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2694:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2695:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2696:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2697:/usr/include/c++/9/bits/basic_string.h ****        *
2698:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2699:/usr/include/c++/9/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2700:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2701:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
2702:/usr/include/c++/9/bits/basic_string.h ****       */
2703:/usr/include/c++/9/bits/basic_string.h ****       size_type
2704:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2705:/usr/include/c++/9/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
2706:/usr/include/c++/9/bits/basic_string.h **** 
2707:/usr/include/c++/9/bits/basic_string.h ****       /**
2708:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2709:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2710:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2711:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2712:/usr/include/c++/9/bits/basic_string.h ****        *
2713:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2714:/usr/include/c++/9/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2715:/usr/include/c++/9/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2716:/usr/include/c++/9/bits/basic_string.h ****       */
2717:/usr/include/c++/9/bits/basic_string.h ****       size_type
2718:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2719:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2720:/usr/include/c++/9/bits/basic_string.h ****       {
2721:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2722:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2723:/usr/include/c++/9/bits/basic_string.h ****       }
2724:/usr/include/c++/9/bits/basic_string.h **** 
2725:/usr/include/c++/9/bits/basic_string.h ****       /**
2726:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a different character.
2727:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to avoid.
2728:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2729:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
2730:/usr/include/c++/9/bits/basic_string.h ****        *
2731:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
2732:/usr/include/c++/9/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2733:/usr/include/c++/9/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2734:/usr/include/c++/9/bits/basic_string.h ****       */
2735:/usr/include/c++/9/bits/basic_string.h ****       size_type
2736:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2737:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2738:/usr/include/c++/9/bits/basic_string.h **** 
2739:/usr/include/c++/9/bits/basic_string.h ****       /**
2740:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2741:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2742:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2743:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2744:/usr/include/c++/9/bits/basic_string.h ****        *
2745:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2746:/usr/include/c++/9/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2747:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2748:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
2749:/usr/include/c++/9/bits/basic_string.h ****       */
2750:/usr/include/c++/9/bits/basic_string.h ****       size_type
2751:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2752:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2753:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2754:/usr/include/c++/9/bits/basic_string.h **** 
2755:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2756:/usr/include/c++/9/bits/basic_string.h ****       /**
2757:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
2758:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2759:/usr/include/c++/9/bits/basic_string.h ****        *                characters to avoid.
2760:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2761:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2762:/usr/include/c++/9/bits/basic_string.h ****        */
2763:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2764:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2765:/usr/include/c++/9/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
2766:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2767:/usr/include/c++/9/bits/basic_string.h **** 	{
2768:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2769:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
2770:/usr/include/c++/9/bits/basic_string.h **** 	}
2771:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2772:/usr/include/c++/9/bits/basic_string.h **** 
2773:/usr/include/c++/9/bits/basic_string.h ****       /**
2774:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2775:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2776:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2777:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2778:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2779:/usr/include/c++/9/bits/basic_string.h ****        *
2780:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2781:/usr/include/c++/9/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2782:/usr/include/c++/9/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2783:/usr/include/c++/9/bits/basic_string.h ****        *  returns npos.
2784:/usr/include/c++/9/bits/basic_string.h ****       */
2785:/usr/include/c++/9/bits/basic_string.h ****       size_type
2786:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2787:/usr/include/c++/9/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
2788:/usr/include/c++/9/bits/basic_string.h ****       /**
2789:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2790:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2791:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2792:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2793:/usr/include/c++/9/bits/basic_string.h ****        *
2794:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2795:/usr/include/c++/9/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2796:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2797:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
2798:/usr/include/c++/9/bits/basic_string.h ****       */
2799:/usr/include/c++/9/bits/basic_string.h ****       size_type
2800:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2801:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2802:/usr/include/c++/9/bits/basic_string.h ****       {
2803:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2804:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2805:/usr/include/c++/9/bits/basic_string.h ****       }
2806:/usr/include/c++/9/bits/basic_string.h **** 
2807:/usr/include/c++/9/bits/basic_string.h ****       /**
2808:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2809:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to avoid.
2810:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2811:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
2812:/usr/include/c++/9/bits/basic_string.h ****        *
2813:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2814:/usr/include/c++/9/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2815:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
2816:/usr/include/c++/9/bits/basic_string.h ****       */
2817:/usr/include/c++/9/bits/basic_string.h ****       size_type
2818:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2819:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2820:/usr/include/c++/9/bits/basic_string.h **** 
2821:/usr/include/c++/9/bits/basic_string.h ****       /**
2822:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Get a substring.
2823:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2824:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2825:/usr/include/c++/9/bits/basic_string.h ****        *  @return  The new string.
2826:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2827:/usr/include/c++/9/bits/basic_string.h ****        *
2828:/usr/include/c++/9/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2829:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2830:/usr/include/c++/9/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2831:/usr/include/c++/9/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2832:/usr/include/c++/9/bits/basic_string.h ****       */
2833:/usr/include/c++/9/bits/basic_string.h ****       basic_string
2834:/usr/include/c++/9/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2835:/usr/include/c++/9/bits/basic_string.h ****       { return basic_string(*this,
2836:/usr/include/c++/9/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2837:/usr/include/c++/9/bits/basic_string.h **** 
2838:/usr/include/c++/9/bits/basic_string.h ****       /**
2839:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string.
2840:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to compare against.
2841:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2842:/usr/include/c++/9/bits/basic_string.h ****        *
2843:/usr/include/c++/9/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2844:/usr/include/c++/9/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2845:/usr/include/c++/9/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
2846:/usr/include/c++/9/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2847:/usr/include/c++/9/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2848:/usr/include/c++/9/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2849:/usr/include/c++/9/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2850:/usr/include/c++/9/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2851:/usr/include/c++/9/bits/basic_string.h ****       */
2852:/usr/include/c++/9/bits/basic_string.h ****       int
2853:/usr/include/c++/9/bits/basic_string.h ****       compare(const basic_string& __str) const
2854:/usr/include/c++/9/bits/basic_string.h ****       {
2855:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __size = this->size();
2856:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __osize = __str.size();
2857:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2858:/usr/include/c++/9/bits/basic_string.h **** 
2859:/usr/include/c++/9/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2860:/usr/include/c++/9/bits/basic_string.h **** 	if (!__r)
2861:/usr/include/c++/9/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2862:/usr/include/c++/9/bits/basic_string.h **** 	return __r;
2863:/usr/include/c++/9/bits/basic_string.h ****       }
2864:/usr/include/c++/9/bits/basic_string.h **** 
2865:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
2866:/usr/include/c++/9/bits/basic_string.h ****       /**
2867:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2868:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
2869:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2870:/usr/include/c++/9/bits/basic_string.h ****        */
2871:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2872:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, int>
2873:/usr/include/c++/9/bits/basic_string.h **** 	compare(const _Tp& __svt) const
2874:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2875:/usr/include/c++/9/bits/basic_string.h **** 	{
2876:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2877:/usr/include/c++/9/bits/basic_string.h **** 	  const size_type __size = this->size();
2878:/usr/include/c++/9/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
2879:/usr/include/c++/9/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
2880:/usr/include/c++/9/bits/basic_string.h **** 
2881:/usr/include/c++/9/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
2882:/usr/include/c++/9/bits/basic_string.h **** 	  if (!__r)
2883:/usr/include/c++/9/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
2884:/usr/include/c++/9/bits/basic_string.h **** 	  return __r;
2885:/usr/include/c++/9/bits/basic_string.h **** 	}
2886:/usr/include/c++/9/bits/basic_string.h **** 
2887:/usr/include/c++/9/bits/basic_string.h ****       /**
2888:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2889:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
2890:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
2891:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2892:/usr/include/c++/9/bits/basic_string.h ****        *                against.
2893:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2894:/usr/include/c++/9/bits/basic_string.h ****        */
2895:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2896:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, int>
2897:/usr/include/c++/9/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
2898:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2899:/usr/include/c++/9/bits/basic_string.h **** 	{
2900:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2901:/usr/include/c++/9/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
2902:/usr/include/c++/9/bits/basic_string.h **** 	}
2903:/usr/include/c++/9/bits/basic_string.h **** 
2904:/usr/include/c++/9/bits/basic_string.h ****       /**
2905:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2906:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
2907:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
2908:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2909:/usr/include/c++/9/bits/basic_string.h ****        *                against.
2910:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
2911:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
2912:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2913:/usr/include/c++/9/bits/basic_string.h ****        */
2914:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
2915:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, int>
2916:/usr/include/c++/9/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
2917:/usr/include/c++/9/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
2918:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2919:/usr/include/c++/9/bits/basic_string.h **** 	{
2920:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2921:/usr/include/c++/9/bits/basic_string.h **** 	  return __sv_type(*this)
2922:/usr/include/c++/9/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
2923:/usr/include/c++/9/bits/basic_string.h **** 	}
2924:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
2925:/usr/include/c++/9/bits/basic_string.h **** 
2926:/usr/include/c++/9/bits/basic_string.h ****       /**
2927:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2928:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2929:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2930:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to compare against.
2931:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2932:/usr/include/c++/9/bits/basic_string.h ****        *
2933:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2934:/usr/include/c++/9/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2935:/usr/include/c++/9/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2936:/usr/include/c++/9/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2937:/usr/include/c++/9/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2938:/usr/include/c++/9/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2939:/usr/include/c++/9/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2940:/usr/include/c++/9/bits/basic_string.h ****        *  strings by calling
2941:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2942:/usr/include/c++/9/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2943:/usr/include/c++/9/bits/basic_string.h ****        *  the shorter one is ordered first.
2944:/usr/include/c++/9/bits/basic_string.h ****       */
2945:/usr/include/c++/9/bits/basic_string.h ****       int
2946:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2947:/usr/include/c++/9/bits/basic_string.h **** 
2948:/usr/include/c++/9/bits/basic_string.h ****       /**
2949:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2950:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2951:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2952:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to compare against.
2953:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2954:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
2955:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2956:/usr/include/c++/9/bits/basic_string.h ****        *
2957:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2958:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2959:/usr/include/c++/9/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
2960:/usr/include/c++/9/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
2961:/usr/include/c++/9/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2962:/usr/include/c++/9/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2963:/usr/include/c++/9/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2964:/usr/include/c++/9/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2965:/usr/include/c++/9/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2966:/usr/include/c++/9/bits/basic_string.h ****        *  calling
2967:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2968:/usr/include/c++/9/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2969:/usr/include/c++/9/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2970:/usr/include/c++/9/bits/basic_string.h ****       */
2971:/usr/include/c++/9/bits/basic_string.h ****       int
2972:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2973:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
2974:/usr/include/c++/9/bits/basic_string.h **** 
2975:/usr/include/c++/9/bits/basic_string.h ****       /**
2976:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a C string.
2977:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to compare against.
2978:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2979:/usr/include/c++/9/bits/basic_string.h ****        *
2980:/usr/include/c++/9/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2981:/usr/include/c++/9/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2982:/usr/include/c++/9/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2983:/usr/include/c++/9/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2984:/usr/include/c++/9/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2985:/usr/include/c++/9/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2986:/usr/include/c++/9/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2987:/usr/include/c++/9/bits/basic_string.h ****        *  ordered first.
2988:/usr/include/c++/9/bits/basic_string.h ****       */
2989:/usr/include/c++/9/bits/basic_string.h ****       int
2990:/usr/include/c++/9/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
2991:/usr/include/c++/9/bits/basic_string.h **** 
2992:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2993:/usr/include/c++/9/bits/basic_string.h ****       // 5 String::compare specification questionable
2994:/usr/include/c++/9/bits/basic_string.h ****       /**
2995:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2996:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2997:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2998:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to compare against.
2999:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
3000:/usr/include/c++/9/bits/basic_string.h ****        *
3001:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
3002:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
3003:/usr/include/c++/9/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
3004:/usr/include/c++/9/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
3005:/usr/include/c++/9/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
3006:/usr/include/c++/9/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
3007:/usr/include/c++/9/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
3008:/usr/include/c++/9/bits/basic_string.h ****        *  function then compares the two string by calling
3009:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
3010:/usr/include/c++/9/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3011:/usr/include/c++/9/bits/basic_string.h ****        *  one is ordered first.
3012:/usr/include/c++/9/bits/basic_string.h ****       */
3013:/usr/include/c++/9/bits/basic_string.h ****       int
3014:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
3015:/usr/include/c++/9/bits/basic_string.h **** 
3016:/usr/include/c++/9/bits/basic_string.h ****       /**
3017:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
3018:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
3019:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
3020:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  character %array to compare against.
3021:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
3022:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
3023:/usr/include/c++/9/bits/basic_string.h ****        *
3024:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
3025:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
3026:/usr/include/c++/9/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
3027:/usr/include/c++/9/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
3028:/usr/include/c++/9/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
3029:/usr/include/c++/9/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
3030:/usr/include/c++/9/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
3031:/usr/include/c++/9/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
3032:/usr/include/c++/9/bits/basic_string.h ****        *  function then compares the two strings by calling
3033:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
3034:/usr/include/c++/9/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3035:/usr/include/c++/9/bits/basic_string.h ****        *  one is ordered first.
3036:/usr/include/c++/9/bits/basic_string.h ****        *
3037:/usr/include/c++/9/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
3038:/usr/include/c++/9/bits/basic_string.h ****        *  no special meaning.
3039:/usr/include/c++/9/bits/basic_string.h ****       */
3040:/usr/include/c++/9/bits/basic_string.h ****       int
3041:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
3042:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2) const;
3043:/usr/include/c++/9/bits/basic_string.h **** 
3044:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus > 201703L
3045:/usr/include/c++/9/bits/basic_string.h ****       bool
3046:/usr/include/c++/9/bits/basic_string.h ****       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept
3047:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3048:/usr/include/c++/9/bits/basic_string.h **** 
3049:/usr/include/c++/9/bits/basic_string.h ****       bool
3050:/usr/include/c++/9/bits/basic_string.h ****       starts_with(_CharT __x) const noexcept
3051:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3052:/usr/include/c++/9/bits/basic_string.h **** 
3053:/usr/include/c++/9/bits/basic_string.h ****       bool
3054:/usr/include/c++/9/bits/basic_string.h ****       starts_with(const _CharT* __x) const noexcept
3055:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3056:/usr/include/c++/9/bits/basic_string.h **** 
3057:/usr/include/c++/9/bits/basic_string.h ****       bool
3058:/usr/include/c++/9/bits/basic_string.h ****       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept
3059:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3060:/usr/include/c++/9/bits/basic_string.h **** 
3061:/usr/include/c++/9/bits/basic_string.h ****       bool
3062:/usr/include/c++/9/bits/basic_string.h ****       ends_with(_CharT __x) const noexcept
3063:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3064:/usr/include/c++/9/bits/basic_string.h **** 
3065:/usr/include/c++/9/bits/basic_string.h ****       bool
3066:/usr/include/c++/9/bits/basic_string.h ****       ends_with(const _CharT* __x) const noexcept
3067:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3068:/usr/include/c++/9/bits/basic_string.h **** #endif // C++20
3069:/usr/include/c++/9/bits/basic_string.h **** 
3070:/usr/include/c++/9/bits/basic_string.h ****       // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:
3071:/usr/include/c++/9/bits/basic_string.h ****       template<typename, typename, typename> friend class basic_stringbuf;
3072:/usr/include/c++/9/bits/basic_string.h ****     };
3073:/usr/include/c++/9/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
3074:/usr/include/c++/9/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
3075:/usr/include/c++/9/bits/basic_string.h ****   // Reference-counted COW string implentation
3076:/usr/include/c++/9/bits/basic_string.h **** 
3077:/usr/include/c++/9/bits/basic_string.h ****   /**
3078:/usr/include/c++/9/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
3079:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
3080:/usr/include/c++/9/bits/basic_string.h ****    *
3081:/usr/include/c++/9/bits/basic_string.h ****    *  @ingroup strings
3082:/usr/include/c++/9/bits/basic_string.h ****    *  @ingroup sequences
3083:/usr/include/c++/9/bits/basic_string.h ****    *
3084:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _CharT  Type of character
3085:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
3086:/usr/include/c++/9/bits/basic_string.h ****    *                   char_traits<_CharT>.
3087:/usr/include/c++/9/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
3088:/usr/include/c++/9/bits/basic_string.h ****    *
3089:/usr/include/c++/9/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
3090:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
3091:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
3092:/usr/include/c++/9/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
3093:/usr/include/c++/9/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
3094:/usr/include/c++/9/bits/basic_string.h ****    *
3095:/usr/include/c++/9/bits/basic_string.h ****    *  @doctodo
3096:/usr/include/c++/9/bits/basic_string.h ****    *
3097:/usr/include/c++/9/bits/basic_string.h ****    *
3098:/usr/include/c++/9/bits/basic_string.h ****    *  Documentation?  What's that?
3099:/usr/include/c++/9/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
3100:/usr/include/c++/9/bits/basic_string.h ****    *
3101:/usr/include/c++/9/bits/basic_string.h ****    *  A string looks like this:
3102:/usr/include/c++/9/bits/basic_string.h ****    *
3103:/usr/include/c++/9/bits/basic_string.h ****    *  @code
3104:/usr/include/c++/9/bits/basic_string.h ****    *                                        [_Rep]
3105:/usr/include/c++/9/bits/basic_string.h ****    *                                        _M_length
3106:/usr/include/c++/9/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
3107:/usr/include/c++/9/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
3108:/usr/include/c++/9/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
3109:/usr/include/c++/9/bits/basic_string.h ****    *  @endcode
3110:/usr/include/c++/9/bits/basic_string.h ****    *
3111:/usr/include/c++/9/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
3112:/usr/include/c++/9/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
3113:/usr/include/c++/9/bits/basic_string.h ****    *  pointer to the header.
3114:/usr/include/c++/9/bits/basic_string.h ****    *
3115:/usr/include/c++/9/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
3116:/usr/include/c++/9/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
3117:/usr/include/c++/9/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
3118:/usr/include/c++/9/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
3119:/usr/include/c++/9/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
3120:/usr/include/c++/9/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
3121:/usr/include/c++/9/bits/basic_string.h ****    *  object at the front.
3122:/usr/include/c++/9/bits/basic_string.h ****    *
3123:/usr/include/c++/9/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
3124:/usr/include/c++/9/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
3125:/usr/include/c++/9/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
3126:/usr/include/c++/9/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
3127:/usr/include/c++/9/bits/basic_string.h ****    *  string length.)
3128:/usr/include/c++/9/bits/basic_string.h ****    *
3129:/usr/include/c++/9/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
3130:/usr/include/c++/9/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
3131:/usr/include/c++/9/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
3132:/usr/include/c++/9/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
3133:/usr/include/c++/9/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
3134:/usr/include/c++/9/bits/basic_string.h ****    *
3135:/usr/include/c++/9/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
3136:/usr/include/c++/9/bits/basic_string.h ****    *  for a C++ string implementation.
3137:/usr/include/c++/9/bits/basic_string.h ****   */
3138:/usr/include/c++/9/bits/basic_string.h ****   // 21.3  Template class basic_string
3139:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
3140:/usr/include/c++/9/bits/basic_string.h ****     class basic_string
3141:/usr/include/c++/9/bits/basic_string.h ****     {
3142:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
3143:/usr/include/c++/9/bits/basic_string.h **** 
3144:/usr/include/c++/9/bits/basic_string.h ****       // Types:
3145:/usr/include/c++/9/bits/basic_string.h ****     public:
3146:/usr/include/c++/9/bits/basic_string.h ****       typedef _Traits					    traits_type;
3147:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
3148:/usr/include/c++/9/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
3149:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
3150:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
3151:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus < 201103L
3152:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
3153:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
3154:/usr/include/c++/9/bits/basic_string.h **** #else
3155:/usr/include/c++/9/bits/basic_string.h ****       typedef value_type&				    reference;
3156:/usr/include/c++/9/bits/basic_string.h ****       typedef const value_type&				    const_reference;
3157:/usr/include/c++/9/bits/basic_string.h **** #endif
3158:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
3159:/usr/include/c++/9/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
3160:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
3161:/usr/include/c++/9/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
3162:/usr/include/c++/9/bits/basic_string.h ****                                                             const_iterator;
3163:/usr/include/c++/9/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
3164:/usr/include/c++/9/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
3165:/usr/include/c++/9/bits/basic_string.h **** 
3166:/usr/include/c++/9/bits/basic_string.h ****     protected:
3167:/usr/include/c++/9/bits/basic_string.h ****       // type used for positions in insert, erase etc.
3168:/usr/include/c++/9/bits/basic_string.h ****       typedef iterator __const_iterator;
3169:/usr/include/c++/9/bits/basic_string.h **** 
3170:/usr/include/c++/9/bits/basic_string.h ****     private:
3171:/usr/include/c++/9/bits/basic_string.h ****       // _Rep: string representation
3172:/usr/include/c++/9/bits/basic_string.h ****       //   Invariants:
3173:/usr/include/c++/9/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
3174:/usr/include/c++/9/bits/basic_string.h ****       //      must be kept null-terminated.
3175:/usr/include/c++/9/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
3176:/usr/include/c++/9/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
3177:/usr/include/c++/9/bits/basic_string.h ****       //   3. _M_refcount has three states:
3178:/usr/include/c++/9/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
3179:/usr/include/c++/9/bits/basic_string.h ****       //       0: one reference, non-const.
3180:/usr/include/c++/9/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
3181:/usr/include/c++/9/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
3182:/usr/include/c++/9/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
3183:/usr/include/c++/9/bits/basic_string.h ****       //      empty string representation needs no constructor.
3184:/usr/include/c++/9/bits/basic_string.h **** 
3185:/usr/include/c++/9/bits/basic_string.h ****       struct _Rep_base
3186:/usr/include/c++/9/bits/basic_string.h ****       {
3187:/usr/include/c++/9/bits/basic_string.h **** 	size_type		_M_length;
3188:/usr/include/c++/9/bits/basic_string.h **** 	size_type		_M_capacity;
3189:/usr/include/c++/9/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
3190:/usr/include/c++/9/bits/basic_string.h ****       };
3191:/usr/include/c++/9/bits/basic_string.h **** 
3192:/usr/include/c++/9/bits/basic_string.h ****       struct _Rep : _Rep_base
3193:/usr/include/c++/9/bits/basic_string.h ****       {
3194:/usr/include/c++/9/bits/basic_string.h **** 	// Types:
3195:/usr/include/c++/9/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
3196:/usr/include/c++/9/bits/basic_string.h **** 
3197:/usr/include/c++/9/bits/basic_string.h **** 	// (Public) Data members:
3198:/usr/include/c++/9/bits/basic_string.h **** 
3199:/usr/include/c++/9/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
3200:/usr/include/c++/9/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
3201:/usr/include/c++/9/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
3202:/usr/include/c++/9/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
3203:/usr/include/c++/9/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
3204:/usr/include/c++/9/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
3205:/usr/include/c++/9/bits/basic_string.h **** 	// look like this:
3206:/usr/include/c++/9/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
3207:/usr/include/c++/9/bits/basic_string.h **** 	// Solving for m:
3208:/usr/include/c++/9/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
3209:/usr/include/c++/9/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
3210:/usr/include/c++/9/bits/basic_string.h **** 	static const size_type	_S_max_size;
3211:/usr/include/c++/9/bits/basic_string.h **** 	static const _CharT	_S_terminal;
3212:/usr/include/c++/9/bits/basic_string.h **** 
3213:/usr/include/c++/9/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
3214:/usr/include/c++/9/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
3215:/usr/include/c++/9/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
3216:/usr/include/c++/9/bits/basic_string.h **** 
3217:/usr/include/c++/9/bits/basic_string.h ****         static _Rep&
3218:/usr/include/c++/9/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
3219:/usr/include/c++/9/bits/basic_string.h ****         { 
3220:/usr/include/c++/9/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
3221:/usr/include/c++/9/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
3222:/usr/include/c++/9/bits/basic_string.h **** 	  // be reasonably safe in this case.
3223:/usr/include/c++/9/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
3224:/usr/include/c++/9/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
3225:/usr/include/c++/9/bits/basic_string.h **** 	}
3226:/usr/include/c++/9/bits/basic_string.h **** 
3227:/usr/include/c++/9/bits/basic_string.h ****         bool
3228:/usr/include/c++/9/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
3229:/usr/include/c++/9/bits/basic_string.h ****         {
3230:/usr/include/c++/9/bits/basic_string.h **** #if defined(__GTHREADS)
3231:/usr/include/c++/9/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3232:/usr/include/c++/9/bits/basic_string.h ****           // so we need to use an atomic load. However, _M_is_leaked
3233:/usr/include/c++/9/bits/basic_string.h ****           // predicate does not change concurrently (i.e. the string is either
3234:/usr/include/c++/9/bits/basic_string.h ****           // leaked or not), so a relaxed load is enough.
3235:/usr/include/c++/9/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;
3236:/usr/include/c++/9/bits/basic_string.h **** #else
3237:/usr/include/c++/9/bits/basic_string.h ****           return this->_M_refcount < 0;
3238:/usr/include/c++/9/bits/basic_string.h **** #endif
3239:/usr/include/c++/9/bits/basic_string.h ****         }
3240:/usr/include/c++/9/bits/basic_string.h **** 
3241:/usr/include/c++/9/bits/basic_string.h ****         bool
3242:/usr/include/c++/9/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
3243:/usr/include/c++/9/bits/basic_string.h **** 	{
3244:/usr/include/c++/9/bits/basic_string.h **** #if defined(__GTHREADS)
3245:/usr/include/c++/9/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3246:/usr/include/c++/9/bits/basic_string.h ****           // so we need to use an atomic load. Another thread can drop last
3247:/usr/include/c++/9/bits/basic_string.h ****           // but one reference concurrently with this check, so we need this
3248:/usr/include/c++/9/bits/basic_string.h ****           // load to be acquire to synchronize with release fetch_and_add in
3249:/usr/include/c++/9/bits/basic_string.h ****           // _M_dispose.
3250:/usr/include/c++/9/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;
3251:/usr/include/c++/9/bits/basic_string.h **** #else
3252:/usr/include/c++/9/bits/basic_string.h ****           return this->_M_refcount > 0;
3253:/usr/include/c++/9/bits/basic_string.h **** #endif
3254:/usr/include/c++/9/bits/basic_string.h ****         }
3255:/usr/include/c++/9/bits/basic_string.h **** 
3256:/usr/include/c++/9/bits/basic_string.h ****         void
3257:/usr/include/c++/9/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
3258:/usr/include/c++/9/bits/basic_string.h ****         { this->_M_refcount = -1; }
3259:/usr/include/c++/9/bits/basic_string.h **** 
3260:/usr/include/c++/9/bits/basic_string.h ****         void
3261:/usr/include/c++/9/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
3262:/usr/include/c++/9/bits/basic_string.h ****         { this->_M_refcount = 0; }
3263:/usr/include/c++/9/bits/basic_string.h **** 
3264:/usr/include/c++/9/bits/basic_string.h **** 	void
3265:/usr/include/c++/9/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
3266:/usr/include/c++/9/bits/basic_string.h **** 	{
3267:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3268:/usr/include/c++/9/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3269:/usr/include/c++/9/bits/basic_string.h **** #endif
3270:/usr/include/c++/9/bits/basic_string.h **** 	    {
3271:/usr/include/c++/9/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
3272:/usr/include/c++/9/bits/basic_string.h **** 	      this->_M_length = __n;
3273:/usr/include/c++/9/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
3274:/usr/include/c++/9/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
3275:/usr/include/c++/9/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
3276:/usr/include/c++/9/bits/basic_string.h **** 	    }
3277:/usr/include/c++/9/bits/basic_string.h **** 	}
3278:/usr/include/c++/9/bits/basic_string.h **** 
3279:/usr/include/c++/9/bits/basic_string.h **** 	_CharT*
3280:/usr/include/c++/9/bits/basic_string.h **** 	_M_refdata() throw()
3281:/usr/include/c++/9/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
3282:/usr/include/c++/9/bits/basic_string.h **** 
3283:/usr/include/c++/9/bits/basic_string.h **** 	_CharT*
3284:/usr/include/c++/9/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
3285:/usr/include/c++/9/bits/basic_string.h **** 	{
3286:/usr/include/c++/9/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
3287:/usr/include/c++/9/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
3288:/usr/include/c++/9/bits/basic_string.h **** 	}
3289:/usr/include/c++/9/bits/basic_string.h **** 
3290:/usr/include/c++/9/bits/basic_string.h **** 	// Create & Destroy
3291:/usr/include/c++/9/bits/basic_string.h **** 	static _Rep*
3292:/usr/include/c++/9/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
3293:/usr/include/c++/9/bits/basic_string.h **** 
3294:/usr/include/c++/9/bits/basic_string.h **** 	void
3295:/usr/include/c++/9/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
3296:/usr/include/c++/9/bits/basic_string.h **** 	{
3297:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3298:/usr/include/c++/9/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3299:/usr/include/c++/9/bits/basic_string.h **** #endif
3300:/usr/include/c++/9/bits/basic_string.h **** 	    {
3301:/usr/include/c++/9/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
3302:/usr/include/c++/9/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
3303:/usr/include/c++/9/bits/basic_string.h ****               // Decrement of _M_refcount is acq_rel, because:
3304:/usr/include/c++/9/bits/basic_string.h ****               // - all but last decrements need to release to synchronize with
3305:/usr/include/c++/9/bits/basic_string.h ****               //   the last decrement that will delete the object.
3306:/usr/include/c++/9/bits/basic_string.h ****               // - the last decrement needs to acquire to synchronize with
3307:/usr/include/c++/9/bits/basic_string.h ****               //   all the previous decrements.
3308:/usr/include/c++/9/bits/basic_string.h ****               // - last but one decrement needs to release to synchronize with
3309:/usr/include/c++/9/bits/basic_string.h ****               //   the acquire load in _M_is_shared that will conclude that
3310:/usr/include/c++/9/bits/basic_string.h ****               //   the object is not shared anymore.
3311:/usr/include/c++/9/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
3312:/usr/include/c++/9/bits/basic_string.h **** 							 -1) <= 0)
3313:/usr/include/c++/9/bits/basic_string.h **** 		{
3314:/usr/include/c++/9/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
3315:/usr/include/c++/9/bits/basic_string.h **** 		  _M_destroy(__a);
3316:/usr/include/c++/9/bits/basic_string.h **** 		}
3317:/usr/include/c++/9/bits/basic_string.h **** 	    }
3318:/usr/include/c++/9/bits/basic_string.h **** 	}  // XXX MT
3319:/usr/include/c++/9/bits/basic_string.h **** 
3320:/usr/include/c++/9/bits/basic_string.h **** 	void
3321:/usr/include/c++/9/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
3322:/usr/include/c++/9/bits/basic_string.h **** 
3323:/usr/include/c++/9/bits/basic_string.h **** 	_CharT*
3324:/usr/include/c++/9/bits/basic_string.h **** 	_M_refcopy() throw()
3325:/usr/include/c++/9/bits/basic_string.h **** 	{
3326:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3327:/usr/include/c++/9/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3328:/usr/include/c++/9/bits/basic_string.h **** #endif
3329:/usr/include/c++/9/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
3330:/usr/include/c++/9/bits/basic_string.h **** 	  return _M_refdata();
3331:/usr/include/c++/9/bits/basic_string.h **** 	}  // XXX MT
3332:/usr/include/c++/9/bits/basic_string.h **** 
3333:/usr/include/c++/9/bits/basic_string.h **** 	_CharT*
3334:/usr/include/c++/9/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
3335:/usr/include/c++/9/bits/basic_string.h ****       };
3336:/usr/include/c++/9/bits/basic_string.h **** 
3337:/usr/include/c++/9/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
3338:/usr/include/c++/9/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
3339:/usr/include/c++/9/bits/basic_string.h ****       {
3340:/usr/include/c++/9/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
3341:/usr/include/c++/9/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
3342:/usr/include/c++/9/bits/basic_string.h **** 
3343:/usr/include/c++/9/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
3344:/usr/include/c++/9/bits/basic_string.h ****       };
3345:/usr/include/c++/9/bits/basic_string.h **** 
3346:/usr/include/c++/9/bits/basic_string.h ****     public:
3347:/usr/include/c++/9/bits/basic_string.h ****       // Data Members (public):
3348:/usr/include/c++/9/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
3349:/usr/include/c++/9/bits/basic_string.h ****       // size that the allocator can hold.
3350:/usr/include/c++/9/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
3351:/usr/include/c++/9/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
3352:/usr/include/c++/9/bits/basic_string.h **** 
3353:/usr/include/c++/9/bits/basic_string.h ****     private:
3354:/usr/include/c++/9/bits/basic_string.h ****       // Data Members (private):
3355:/usr/include/c++/9/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
3356:/usr/include/c++/9/bits/basic_string.h **** 
3357:/usr/include/c++/9/bits/basic_string.h ****       _CharT*
3358:/usr/include/c++/9/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
3359:/usr/include/c++/9/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
3360:/usr/include/c++/9/bits/basic_string.h **** 
3361:/usr/include/c++/9/bits/basic_string.h ****       _CharT*
3362:/usr/include/c++/9/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
3363:/usr/include/c++/9/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
3364:/usr/include/c++/9/bits/basic_string.h **** 
3365:/usr/include/c++/9/bits/basic_string.h ****       _Rep*
3366:/usr/include/c++/9/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
3367:/usr/include/c++/9/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
3368:/usr/include/c++/9/bits/basic_string.h **** 
3369:/usr/include/c++/9/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
3370:/usr/include/c++/9/bits/basic_string.h ****       // but they do not call _M_leak.
3371:/usr/include/c++/9/bits/basic_string.h ****       iterator
3372:/usr/include/c++/9/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
3373:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
3374:/usr/include/c++/9/bits/basic_string.h **** 
3375:/usr/include/c++/9/bits/basic_string.h ****       iterator
3376:/usr/include/c++/9/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
3377:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
3378:/usr/include/c++/9/bits/basic_string.h **** 
3379:/usr/include/c++/9/bits/basic_string.h ****       void
3380:/usr/include/c++/9/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
3381:/usr/include/c++/9/bits/basic_string.h ****       {
3382:/usr/include/c++/9/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
3383:/usr/include/c++/9/bits/basic_string.h **** 	  _M_leak_hard();
3384:/usr/include/c++/9/bits/basic_string.h ****       }
3385:/usr/include/c++/9/bits/basic_string.h **** 
3386:/usr/include/c++/9/bits/basic_string.h ****       size_type
3387:/usr/include/c++/9/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
3388:/usr/include/c++/9/bits/basic_string.h ****       {
3389:/usr/include/c++/9/bits/basic_string.h **** 	if (__pos > this->size())
3390:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
3391:/usr/include/c++/9/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
3392:/usr/include/c++/9/bits/basic_string.h **** 				   __s, __pos, this->size());
3393:/usr/include/c++/9/bits/basic_string.h **** 	return __pos;
3394:/usr/include/c++/9/bits/basic_string.h ****       }
3395:/usr/include/c++/9/bits/basic_string.h **** 
3396:/usr/include/c++/9/bits/basic_string.h ****       void
3397:/usr/include/c++/9/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
3398:/usr/include/c++/9/bits/basic_string.h ****       {
3399:/usr/include/c++/9/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
3400:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
3401:/usr/include/c++/9/bits/basic_string.h ****       }
3402:/usr/include/c++/9/bits/basic_string.h **** 
3403:/usr/include/c++/9/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
3404:/usr/include/c++/9/bits/basic_string.h ****       size_type
3405:/usr/include/c++/9/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
3406:/usr/include/c++/9/bits/basic_string.h ****       {
3407:/usr/include/c++/9/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
3408:/usr/include/c++/9/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
3409:/usr/include/c++/9/bits/basic_string.h ****       }
3410:/usr/include/c++/9/bits/basic_string.h **** 
3411:/usr/include/c++/9/bits/basic_string.h ****       // True if _Rep and source do not overlap.
3412:/usr/include/c++/9/bits/basic_string.h ****       bool
3413:/usr/include/c++/9/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
3414:/usr/include/c++/9/bits/basic_string.h ****       {
3415:/usr/include/c++/9/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
3416:/usr/include/c++/9/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
3417:/usr/include/c++/9/bits/basic_string.h ****       }
3418:/usr/include/c++/9/bits/basic_string.h **** 
3419:/usr/include/c++/9/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
3420:/usr/include/c++/9/bits/basic_string.h ****       // traits_type::copy/move/assign.
3421:/usr/include/c++/9/bits/basic_string.h ****       static void
3422:/usr/include/c++/9/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3423:/usr/include/c++/9/bits/basic_string.h ****       {
3424:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
3425:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3426:/usr/include/c++/9/bits/basic_string.h **** 	else
3427:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
3428:/usr/include/c++/9/bits/basic_string.h ****       }
3429:/usr/include/c++/9/bits/basic_string.h **** 
3430:/usr/include/c++/9/bits/basic_string.h ****       static void
3431:/usr/include/c++/9/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3432:/usr/include/c++/9/bits/basic_string.h ****       {
3433:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
3434:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3435:/usr/include/c++/9/bits/basic_string.h **** 	else
3436:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
3437:/usr/include/c++/9/bits/basic_string.h ****       }
3438:/usr/include/c++/9/bits/basic_string.h **** 
3439:/usr/include/c++/9/bits/basic_string.h ****       static void
3440:/usr/include/c++/9/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
3441:/usr/include/c++/9/bits/basic_string.h ****       {
3442:/usr/include/c++/9/bits/basic_string.h **** 	if (__n == 1)
3443:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
3444:/usr/include/c++/9/bits/basic_string.h **** 	else
3445:/usr/include/c++/9/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
3446:/usr/include/c++/9/bits/basic_string.h ****       }
3447:/usr/include/c++/9/bits/basic_string.h **** 
3448:/usr/include/c++/9/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
3449:/usr/include/c++/9/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
3450:/usr/include/c++/9/bits/basic_string.h ****       template<class _Iterator>
3451:/usr/include/c++/9/bits/basic_string.h ****         static void
3452:/usr/include/c++/9/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
3453:/usr/include/c++/9/bits/basic_string.h ****         {
3454:/usr/include/c++/9/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
3455:/usr/include/c++/9/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
3456:/usr/include/c++/9/bits/basic_string.h **** 	}
3457:/usr/include/c++/9/bits/basic_string.h **** 
3458:/usr/include/c++/9/bits/basic_string.h ****       static void
3459:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
3460:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3461:/usr/include/c++/9/bits/basic_string.h **** 
3462:/usr/include/c++/9/bits/basic_string.h ****       static void
3463:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
3464:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3465:/usr/include/c++/9/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3466:/usr/include/c++/9/bits/basic_string.h **** 
3467:/usr/include/c++/9/bits/basic_string.h ****       static void
3468:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
3469:/usr/include/c++/9/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3470:/usr/include/c++/9/bits/basic_string.h **** 
3471:/usr/include/c++/9/bits/basic_string.h ****       static void
3472:/usr/include/c++/9/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
3473:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3474:/usr/include/c++/9/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3475:/usr/include/c++/9/bits/basic_string.h **** 
3476:/usr/include/c++/9/bits/basic_string.h ****       static int
3477:/usr/include/c++/9/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
3478:/usr/include/c++/9/bits/basic_string.h ****       {
3479:/usr/include/c++/9/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
3480:/usr/include/c++/9/bits/basic_string.h **** 
3481:/usr/include/c++/9/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
3482:/usr/include/c++/9/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
3483:/usr/include/c++/9/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
3484:/usr/include/c++/9/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
3485:/usr/include/c++/9/bits/basic_string.h **** 	else
3486:/usr/include/c++/9/bits/basic_string.h **** 	  return int(__d);
3487:/usr/include/c++/9/bits/basic_string.h ****       }
3488:/usr/include/c++/9/bits/basic_string.h **** 
3489:/usr/include/c++/9/bits/basic_string.h ****       void
3490:/usr/include/c++/9/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
3491:/usr/include/c++/9/bits/basic_string.h **** 
3492:/usr/include/c++/9/bits/basic_string.h ****       void
3493:/usr/include/c++/9/bits/basic_string.h ****       _M_leak_hard();
3494:/usr/include/c++/9/bits/basic_string.h **** 
3495:/usr/include/c++/9/bits/basic_string.h ****       static _Rep&
3496:/usr/include/c++/9/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
3497:/usr/include/c++/9/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
3498:/usr/include/c++/9/bits/basic_string.h **** 
3499:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
3500:/usr/include/c++/9/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
3501:/usr/include/c++/9/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
3502:/usr/include/c++/9/bits/basic_string.h **** 
3503:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, typename _Res>
3504:/usr/include/c++/9/bits/basic_string.h **** 	using _If_sv = enable_if_t<
3505:/usr/include/c++/9/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
3506:/usr/include/c++/9/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
3507:/usr/include/c++/9/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
3508:/usr/include/c++/9/bits/basic_string.h **** 	  _Res>;
3509:/usr/include/c++/9/bits/basic_string.h **** 
3510:/usr/include/c++/9/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
3511:/usr/include/c++/9/bits/basic_string.h ****       static __sv_type
3512:/usr/include/c++/9/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
3513:/usr/include/c++/9/bits/basic_string.h ****       { return __svt; }
3514:/usr/include/c++/9/bits/basic_string.h **** 
3515:/usr/include/c++/9/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
3516:/usr/include/c++/9/bits/basic_string.h ****       // allows to add an internal constructor that does not
3517:/usr/include/c++/9/bits/basic_string.h ****       // participate in overload resolution when a string_view
3518:/usr/include/c++/9/bits/basic_string.h ****       // is provided.
3519:/usr/include/c++/9/bits/basic_string.h ****       struct __sv_wrapper
3520:/usr/include/c++/9/bits/basic_string.h ****       {
3521:/usr/include/c++/9/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
3522:/usr/include/c++/9/bits/basic_string.h **** 	__sv_type _M_sv;
3523:/usr/include/c++/9/bits/basic_string.h ****       };
3524:/usr/include/c++/9/bits/basic_string.h **** 
3525:/usr/include/c++/9/bits/basic_string.h ****       /**
3526:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
3527:/usr/include/c++/9/bits/basic_string.h ****        *          wrapper.
3528:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
3529:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3530:/usr/include/c++/9/bits/basic_string.h ****        */
3531:/usr/include/c++/9/bits/basic_string.h ****       explicit
3532:/usr/include/c++/9/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
3533:/usr/include/c++/9/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
3534:/usr/include/c++/9/bits/basic_string.h **** #endif
3535:/usr/include/c++/9/bits/basic_string.h **** 
3536:/usr/include/c++/9/bits/basic_string.h ****     public:
3537:/usr/include/c++/9/bits/basic_string.h ****       // Construct/copy/destroy:
3538:/usr/include/c++/9/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
3539:/usr/include/c++/9/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
3540:/usr/include/c++/9/bits/basic_string.h **** 
3541:/usr/include/c++/9/bits/basic_string.h ****       /**
3542:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
3543:/usr/include/c++/9/bits/basic_string.h ****        */
3544:/usr/include/c++/9/bits/basic_string.h ****       basic_string()
3545:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3546:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3547:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc())
3548:/usr/include/c++/9/bits/basic_string.h **** #else
3549:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc())
3550:/usr/include/c++/9/bits/basic_string.h **** #endif
3551:/usr/include/c++/9/bits/basic_string.h ****       { }
3552:/usr/include/c++/9/bits/basic_string.h **** 
3553:/usr/include/c++/9/bits/basic_string.h ****       /**
3554:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
3555:/usr/include/c++/9/bits/basic_string.h ****        */
3556:/usr/include/c++/9/bits/basic_string.h ****       explicit
3557:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _Alloc& __a);
3558:/usr/include/c++/9/bits/basic_string.h **** 
3559:/usr/include/c++/9/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
3560:/usr/include/c++/9/bits/basic_string.h ****       /**
3561:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
3562:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
3563:/usr/include/c++/9/bits/basic_string.h ****        */
3564:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str);
3565:/usr/include/c++/9/bits/basic_string.h **** 
3566:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
3567:/usr/include/c++/9/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
3568:/usr/include/c++/9/bits/basic_string.h ****       /**
3569:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3570:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
3571:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3572:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3573:/usr/include/c++/9/bits/basic_string.h ****        */
3574:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3575:/usr/include/c++/9/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3576:/usr/include/c++/9/bits/basic_string.h **** 
3577:/usr/include/c++/9/bits/basic_string.h ****       /**
3578:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3579:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
3580:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3581:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3582:/usr/include/c++/9/bits/basic_string.h ****        */
3583:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3584:/usr/include/c++/9/bits/basic_string.h **** 		   size_type __n);
3585:/usr/include/c++/9/bits/basic_string.h ****       /**
3586:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3587:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
3588:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3589:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3590:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3591:/usr/include/c++/9/bits/basic_string.h ****        */
3592:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3593:/usr/include/c++/9/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
3594:/usr/include/c++/9/bits/basic_string.h **** 
3595:/usr/include/c++/9/bits/basic_string.h ****       /**
3596:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
3597:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source character %array.
3598:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3599:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3600:/usr/include/c++/9/bits/basic_string.h ****        *
3601:/usr/include/c++/9/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
3602:/usr/include/c++/9/bits/basic_string.h ****        *  has no special meaning.
3603:/usr/include/c++/9/bits/basic_string.h ****        */
3604:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
3605:/usr/include/c++/9/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3606:/usr/include/c++/9/bits/basic_string.h ****       /**
3607:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
3608:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source C string.
3609:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3610:/usr/include/c++/9/bits/basic_string.h ****        */
3611:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
3612:/usr/include/c++/9/bits/basic_string.h ****       /**
3613:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
3614:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters.
3615:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __c  Character to use.
3616:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3617:/usr/include/c++/9/bits/basic_string.h ****        */
3618:/usr/include/c++/9/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
3619:/usr/include/c++/9/bits/basic_string.h **** 
3620:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
3621:/usr/include/c++/9/bits/basic_string.h ****       /**
3622:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Move construct string.
3623:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
3624:/usr/include/c++/9/bits/basic_string.h ****        *
3625:/usr/include/c++/9/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
3626:/usr/include/c++/9/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3627:/usr/include/c++/9/bits/basic_string.h ****        **/
3628:/usr/include/c++/9/bits/basic_string.h ****       basic_string(basic_string&& __str)
3629:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3630:/usr/include/c++/9/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
3631:/usr/include/c++/9/bits/basic_string.h **** #endif
3632:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(std::move(__str._M_dataplus))
3633:/usr/include/c++/9/bits/basic_string.h ****       {
3634:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3635:/usr/include/c++/9/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
3636:/usr/include/c++/9/bits/basic_string.h **** #else
3637:/usr/include/c++/9/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
3638:/usr/include/c++/9/bits/basic_string.h **** #endif
3639:/usr/include/c++/9/bits/basic_string.h ****       }
3640:/usr/include/c++/9/bits/basic_string.h **** 
3641:/usr/include/c++/9/bits/basic_string.h ****       /**
3642:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
3643:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
3644:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3645:/usr/include/c++/9/bits/basic_string.h ****        */
3646:/usr/include/c++/9/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
3647:/usr/include/c++/9/bits/basic_string.h **** 
3648:/usr/include/c++/9/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
3649:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(__str._M_rep()->_M_grab(__a, __str.get_allocator()), __a)
3650:/usr/include/c++/9/bits/basic_string.h ****       { }
3651:/usr/include/c++/9/bits/basic_string.h **** 
3652:/usr/include/c++/9/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
3653:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(__str._M_data(), __a)
3654:/usr/include/c++/9/bits/basic_string.h ****       {
3655:/usr/include/c++/9/bits/basic_string.h **** 	if (__a == __str.get_allocator())
3656:/usr/include/c++/9/bits/basic_string.h **** 	  {
3657:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3658:/usr/include/c++/9/bits/basic_string.h **** 	    __str._M_data(_S_empty_rep()._M_refdata());
3659:/usr/include/c++/9/bits/basic_string.h **** #else
3660:/usr/include/c++/9/bits/basic_string.h **** 	    __str._M_data(_S_construct(size_type(), _CharT(), __a));
3661:/usr/include/c++/9/bits/basic_string.h **** #endif
3662:/usr/include/c++/9/bits/basic_string.h **** 	  }
3663:/usr/include/c++/9/bits/basic_string.h **** 	else
3664:/usr/include/c++/9/bits/basic_string.h **** 	  _M_dataplus._M_p = _S_construct(__str.begin(), __str.end(), __a);
3665:/usr/include/c++/9/bits/basic_string.h ****       }
3666:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
3667:/usr/include/c++/9/bits/basic_string.h **** 
3668:/usr/include/c++/9/bits/basic_string.h ****       /**
3669:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
3670:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __beg  Start of range.
3671:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __end  End of range.
3672:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3673:/usr/include/c++/9/bits/basic_string.h ****        */
3674:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
3675:/usr/include/c++/9/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
3676:/usr/include/c++/9/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
3677:/usr/include/c++/9/bits/basic_string.h **** 
3678:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
3679:/usr/include/c++/9/bits/basic_string.h ****       /**
3680:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
3681:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
3682:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
3683:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
3684:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a   Allocator to use.
3685:/usr/include/c++/9/bits/basic_string.h ****        */
3686:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3687:/usr/include/c++/9/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
3688:/usr/include/c++/9/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
3689:/usr/include/c++/9/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
3690:/usr/include/c++/9/bits/basic_string.h **** 
3691:/usr/include/c++/9/bits/basic_string.h ****       /**
3692:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
3693:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
3694:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3695:/usr/include/c++/9/bits/basic_string.h ****        */
3696:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3697:/usr/include/c++/9/bits/basic_string.h **** 	explicit
3698:/usr/include/c++/9/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
3699:/usr/include/c++/9/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
3700:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
3701:/usr/include/c++/9/bits/basic_string.h **** 
3702:/usr/include/c++/9/bits/basic_string.h ****       /**
3703:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Destroy the string instance.
3704:/usr/include/c++/9/bits/basic_string.h ****        */
3705:/usr/include/c++/9/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
3706:/usr/include/c++/9/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
3707:/usr/include/c++/9/bits/basic_string.h **** 
3708:/usr/include/c++/9/bits/basic_string.h ****       /**
3709:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
3710:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
3711:/usr/include/c++/9/bits/basic_string.h ****        */
3712:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
3713:/usr/include/c++/9/bits/basic_string.h ****       operator=(const basic_string& __str)
3714:/usr/include/c++/9/bits/basic_string.h ****       { return this->assign(__str); }
3715:/usr/include/c++/9/bits/basic_string.h **** 
3716:/usr/include/c++/9/bits/basic_string.h ****       /**
3717:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
3718:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
3719:/usr/include/c++/9/bits/basic_string.h ****        */
3720:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
3721:/usr/include/c++/9/bits/basic_string.h ****       operator=(const _CharT* __s) 
3722:/usr/include/c++/9/bits/basic_string.h ****       { return this->assign(__s); }
3723:/usr/include/c++/9/bits/basic_string.h **** 
3724:/usr/include/c++/9/bits/basic_string.h ****       /**
3725:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
3726:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __c  Source character.
3727:/usr/include/c++/9/bits/basic_string.h ****        *
3728:/usr/include/c++/9/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
3729:/usr/include/c++/9/bits/basic_string.h ****        *  (*this)[0] == @a c.
3730:/usr/include/c++/9/bits/basic_string.h ****        */
3731:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
3732:/usr/include/c++/9/bits/basic_string.h ****       operator=(_CharT __c) 
3733:/usr/include/c++/9/bits/basic_string.h ****       { 
3734:/usr/include/c++/9/bits/basic_string.h **** 	this->assign(1, __c); 
3735:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
3736:/usr/include/c++/9/bits/basic_string.h ****       }
3737:/usr/include/c++/9/bits/basic_string.h **** 
3738:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
3739:/usr/include/c++/9/bits/basic_string.h ****       /**
3740:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
3741:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string.
3742:/usr/include/c++/9/bits/basic_string.h ****        *
3743:/usr/include/c++/9/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
3744:/usr/include/c++/9/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
3745:/usr/include/c++/9/bits/basic_string.h ****        **/
3746:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
3747:/usr/include/c++/9/bits/basic_string.h ****       operator=(basic_string&& __str)
3748:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value)
3749:/usr/include/c++/9/bits/basic_string.h ****       {
3750:/usr/include/c++/9/bits/basic_string.h **** 	// NB: DR 1204.
3751:/usr/include/c++/9/bits/basic_string.h **** 	this->swap(__str);
3752:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
3753:/usr/include/c++/9/bits/basic_string.h ****       }
3754:/usr/include/c++/9/bits/basic_string.h **** 
3755:/usr/include/c++/9/bits/basic_string.h ****       /**
3756:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
3757:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
3758:/usr/include/c++/9/bits/basic_string.h ****        */
3759:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
3760:/usr/include/c++/9/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
3761:/usr/include/c++/9/bits/basic_string.h ****       {
3762:/usr/include/c++/9/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3763:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
3764:/usr/include/c++/9/bits/basic_string.h ****       }
3765:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
3766:/usr/include/c++/9/bits/basic_string.h **** 
3767:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
3768:/usr/include/c++/9/bits/basic_string.h ****       /**
3769:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
3770:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __svt An object convertible to  string_view.
3771:/usr/include/c++/9/bits/basic_string.h ****        */
3772:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
3773:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
3774:/usr/include/c++/9/bits/basic_string.h **** 	operator=(const _Tp& __svt)
3775:/usr/include/c++/9/bits/basic_string.h **** 	{ return this->assign(__svt); }
3776:/usr/include/c++/9/bits/basic_string.h **** 
3777:/usr/include/c++/9/bits/basic_string.h ****       /**
3778:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Convert to a string_view.
3779:/usr/include/c++/9/bits/basic_string.h ****        *  @return A string_view.
3780:/usr/include/c++/9/bits/basic_string.h ****        */
3781:/usr/include/c++/9/bits/basic_string.h ****       operator __sv_type() const noexcept
3782:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(data(), size()); }
3783:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
3784:/usr/include/c++/9/bits/basic_string.h **** 
3785:/usr/include/c++/9/bits/basic_string.h ****       // Iterators:
3786:/usr/include/c++/9/bits/basic_string.h ****       /**
3787:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3788:/usr/include/c++/9/bits/basic_string.h ****        *  the %string.  Unshares the string.
3789:/usr/include/c++/9/bits/basic_string.h ****        */
3790:/usr/include/c++/9/bits/basic_string.h ****       iterator
3791:/usr/include/c++/9/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3792:/usr/include/c++/9/bits/basic_string.h ****       {
3793:/usr/include/c++/9/bits/basic_string.h **** 	_M_leak();
3794:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(_M_data());
3795:/usr/include/c++/9/bits/basic_string.h ****       }
3796:/usr/include/c++/9/bits/basic_string.h **** 
3797:/usr/include/c++/9/bits/basic_string.h ****       /**
3798:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3799:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.
3800:/usr/include/c++/9/bits/basic_string.h ****        */
3801:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
3802:/usr/include/c++/9/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3803:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3804:/usr/include/c++/9/bits/basic_string.h **** 
3805:/usr/include/c++/9/bits/basic_string.h ****       /**
3806:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3807:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3808:/usr/include/c++/9/bits/basic_string.h ****        */
3809:/usr/include/c++/9/bits/basic_string.h ****       iterator
3810:/usr/include/c++/9/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3811:/usr/include/c++/9/bits/basic_string.h ****       {
3812:/usr/include/c++/9/bits/basic_string.h **** 	_M_leak();
3813:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3814:/usr/include/c++/9/bits/basic_string.h ****       }
3815:/usr/include/c++/9/bits/basic_string.h **** 
3816:/usr/include/c++/9/bits/basic_string.h ****       /**
3817:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3818:/usr/include/c++/9/bits/basic_string.h ****        *  last character in the %string.
3819:/usr/include/c++/9/bits/basic_string.h ****        */
3820:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
3821:/usr/include/c++/9/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3822:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3823:/usr/include/c++/9/bits/basic_string.h **** 
3824:/usr/include/c++/9/bits/basic_string.h ****       /**
3825:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3826:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3827:/usr/include/c++/9/bits/basic_string.h ****        *  order.  Unshares the string.
3828:/usr/include/c++/9/bits/basic_string.h ****        */
3829:/usr/include/c++/9/bits/basic_string.h ****       reverse_iterator
3830:/usr/include/c++/9/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3831:/usr/include/c++/9/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3832:/usr/include/c++/9/bits/basic_string.h **** 
3833:/usr/include/c++/9/bits/basic_string.h ****       /**
3834:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3835:/usr/include/c++/9/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3836:/usr/include/c++/9/bits/basic_string.h ****        *  reverse element order.
3837:/usr/include/c++/9/bits/basic_string.h ****        */
3838:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
3839:/usr/include/c++/9/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3840:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3841:/usr/include/c++/9/bits/basic_string.h **** 
3842:/usr/include/c++/9/bits/basic_string.h ****       /**
3843:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
3844:/usr/include/c++/9/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3845:/usr/include/c++/9/bits/basic_string.h ****        *  element order.  Unshares the string.
3846:/usr/include/c++/9/bits/basic_string.h ****        */
3847:/usr/include/c++/9/bits/basic_string.h ****       reverse_iterator
3848:/usr/include/c++/9/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3849:/usr/include/c++/9/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3850:/usr/include/c++/9/bits/basic_string.h **** 
3851:/usr/include/c++/9/bits/basic_string.h ****       /**
3852:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3853:/usr/include/c++/9/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3854:/usr/include/c++/9/bits/basic_string.h ****        *  is done in reverse element order.
3855:/usr/include/c++/9/bits/basic_string.h ****        */
3856:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
3857:/usr/include/c++/9/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3858:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3859:/usr/include/c++/9/bits/basic_string.h **** 
3860:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
3861:/usr/include/c++/9/bits/basic_string.h ****       /**
3862:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3863:/usr/include/c++/9/bits/basic_string.h ****        *  character in the %string.
3864:/usr/include/c++/9/bits/basic_string.h ****        */
3865:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
3866:/usr/include/c++/9/bits/basic_string.h ****       cbegin() const noexcept
3867:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3868:/usr/include/c++/9/bits/basic_string.h **** 
3869:/usr/include/c++/9/bits/basic_string.h ****       /**
3870:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3871:/usr/include/c++/9/bits/basic_string.h ****        *  last character in the %string.
3872:/usr/include/c++/9/bits/basic_string.h ****        */
3873:/usr/include/c++/9/bits/basic_string.h ****       const_iterator
3874:/usr/include/c++/9/bits/basic_string.h ****       cend() const noexcept
3875:/usr/include/c++/9/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3876:/usr/include/c++/9/bits/basic_string.h **** 
3877:/usr/include/c++/9/bits/basic_string.h ****       /**
3878:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3879:/usr/include/c++/9/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3880:/usr/include/c++/9/bits/basic_string.h ****        *  reverse element order.
3881:/usr/include/c++/9/bits/basic_string.h ****        */
3882:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
3883:/usr/include/c++/9/bits/basic_string.h ****       crbegin() const noexcept
3884:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3885:/usr/include/c++/9/bits/basic_string.h **** 
3886:/usr/include/c++/9/bits/basic_string.h ****       /**
3887:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3888:/usr/include/c++/9/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3889:/usr/include/c++/9/bits/basic_string.h ****        *  is done in reverse element order.
3890:/usr/include/c++/9/bits/basic_string.h ****        */
3891:/usr/include/c++/9/bits/basic_string.h ****       const_reverse_iterator
3892:/usr/include/c++/9/bits/basic_string.h ****       crend() const noexcept
3893:/usr/include/c++/9/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3894:/usr/include/c++/9/bits/basic_string.h **** #endif
3895:/usr/include/c++/9/bits/basic_string.h **** 
3896:/usr/include/c++/9/bits/basic_string.h ****     public:
3897:/usr/include/c++/9/bits/basic_string.h ****       // Capacity:
3898:/usr/include/c++/9/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3899:/usr/include/c++/9/bits/basic_string.h ****       ///  null-termination.
3900:/usr/include/c++/9/bits/basic_string.h ****       size_type
3901:/usr/include/c++/9/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3902:/usr/include/c++/9/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3903:/usr/include/c++/9/bits/basic_string.h **** 
3904:/usr/include/c++/9/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3905:/usr/include/c++/9/bits/basic_string.h ****       ///  null-termination.
3906:/usr/include/c++/9/bits/basic_string.h ****       size_type
3907:/usr/include/c++/9/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3908:/usr/include/c++/9/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3909:/usr/include/c++/9/bits/basic_string.h **** 
3910:/usr/include/c++/9/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3911:/usr/include/c++/9/bits/basic_string.h ****       size_type
3912:/usr/include/c++/9/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3913:/usr/include/c++/9/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3914:/usr/include/c++/9/bits/basic_string.h **** 
3915:/usr/include/c++/9/bits/basic_string.h ****       /**
3916:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3917:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3918:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3919:/usr/include/c++/9/bits/basic_string.h ****        *
3920:/usr/include/c++/9/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3921:/usr/include/c++/9/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3922:/usr/include/c++/9/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3923:/usr/include/c++/9/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3924:/usr/include/c++/9/bits/basic_string.h ****        */
3925:/usr/include/c++/9/bits/basic_string.h ****       void
3926:/usr/include/c++/9/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3927:/usr/include/c++/9/bits/basic_string.h **** 
3928:/usr/include/c++/9/bits/basic_string.h ****       /**
3929:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3930:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3931:/usr/include/c++/9/bits/basic_string.h ****        *
3932:/usr/include/c++/9/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3933:/usr/include/c++/9/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3934:/usr/include/c++/9/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3935:/usr/include/c++/9/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3936:/usr/include/c++/9/bits/basic_string.h ****        *  setting them to 0.
3937:/usr/include/c++/9/bits/basic_string.h ****        */
3938:/usr/include/c++/9/bits/basic_string.h ****       void
3939:/usr/include/c++/9/bits/basic_string.h ****       resize(size_type __n)
3940:/usr/include/c++/9/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3941:/usr/include/c++/9/bits/basic_string.h **** 
3942:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
3943:/usr/include/c++/9/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3944:/usr/include/c++/9/bits/basic_string.h ****       void
3945:/usr/include/c++/9/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3946:/usr/include/c++/9/bits/basic_string.h ****       {
3947:/usr/include/c++/9/bits/basic_string.h **** #if __cpp_exceptions
3948:/usr/include/c++/9/bits/basic_string.h **** 	if (capacity() > size())
3949:/usr/include/c++/9/bits/basic_string.h **** 	  {
3950:/usr/include/c++/9/bits/basic_string.h **** 	    try
3951:/usr/include/c++/9/bits/basic_string.h **** 	      { reserve(0); }
3952:/usr/include/c++/9/bits/basic_string.h **** 	    catch(...)
3953:/usr/include/c++/9/bits/basic_string.h **** 	      { }
3954:/usr/include/c++/9/bits/basic_string.h **** 	  }
3955:/usr/include/c++/9/bits/basic_string.h **** #endif
3956:/usr/include/c++/9/bits/basic_string.h ****       }
3957:/usr/include/c++/9/bits/basic_string.h **** #endif
3958:/usr/include/c++/9/bits/basic_string.h **** 
3959:/usr/include/c++/9/bits/basic_string.h ****       /**
3960:/usr/include/c++/9/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3961:/usr/include/c++/9/bits/basic_string.h ****        *  before needing to allocate more memory.
3962:/usr/include/c++/9/bits/basic_string.h ****        */
3963:/usr/include/c++/9/bits/basic_string.h ****       size_type
3964:/usr/include/c++/9/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3965:/usr/include/c++/9/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
3966:/usr/include/c++/9/bits/basic_string.h **** 
3967:/usr/include/c++/9/bits/basic_string.h ****       /**
3968:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3969:/usr/include/c++/9/bits/basic_string.h ****        *          characters.
3970:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3971:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3972:/usr/include/c++/9/bits/basic_string.h ****        *
3973:/usr/include/c++/9/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3974:/usr/include/c++/9/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3975:/usr/include/c++/9/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3976:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
3977:/usr/include/c++/9/bits/basic_string.h ****        *
3978:/usr/include/c++/9/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3979:/usr/include/c++/9/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3980:/usr/include/c++/9/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3981:/usr/include/c++/9/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3982:/usr/include/c++/9/bits/basic_string.h ****        *  data.
3983:/usr/include/c++/9/bits/basic_string.h ****        */
3984:/usr/include/c++/9/bits/basic_string.h ****       void
3985:/usr/include/c++/9/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
3986:/usr/include/c++/9/bits/basic_string.h **** 
3987:/usr/include/c++/9/bits/basic_string.h ****       /**
3988:/usr/include/c++/9/bits/basic_string.h ****        *  Erases the string, making it empty.
3989:/usr/include/c++/9/bits/basic_string.h ****        */
3990:/usr/include/c++/9/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3991:/usr/include/c++/9/bits/basic_string.h ****       void
3992:/usr/include/c++/9/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
3993:/usr/include/c++/9/bits/basic_string.h ****       {
3994:/usr/include/c++/9/bits/basic_string.h **** 	if (_M_rep()->_M_is_shared())
3995:/usr/include/c++/9/bits/basic_string.h **** 	  {
3996:/usr/include/c++/9/bits/basic_string.h **** 	    _M_rep()->_M_dispose(this->get_allocator());
3997:/usr/include/c++/9/bits/basic_string.h **** 	    _M_data(_S_empty_rep()._M_refdata());
3998:/usr/include/c++/9/bits/basic_string.h **** 	  }
3999:/usr/include/c++/9/bits/basic_string.h **** 	else
4000:/usr/include/c++/9/bits/basic_string.h **** 	  _M_rep()->_M_set_length_and_sharable(0);
4001:/usr/include/c++/9/bits/basic_string.h ****       }
4002:/usr/include/c++/9/bits/basic_string.h **** #else
4003:/usr/include/c++/9/bits/basic_string.h ****       // PR 56166: this should not throw.
4004:/usr/include/c++/9/bits/basic_string.h ****       void
4005:/usr/include/c++/9/bits/basic_string.h ****       clear()
4006:/usr/include/c++/9/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
4007:/usr/include/c++/9/bits/basic_string.h **** #endif
4008:/usr/include/c++/9/bits/basic_string.h **** 
4009:/usr/include/c++/9/bits/basic_string.h ****       /**
4010:/usr/include/c++/9/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
4011:/usr/include/c++/9/bits/basic_string.h ****        *  <code>*this == ""</code>.
4012:/usr/include/c++/9/bits/basic_string.h ****        */
4013:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
4014:/usr/include/c++/9/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
4015:/usr/include/c++/9/bits/basic_string.h ****       { return this->size() == 0; }
4016:/usr/include/c++/9/bits/basic_string.h **** 
4017:/usr/include/c++/9/bits/basic_string.h ****       // Element access:
4018:/usr/include/c++/9/bits/basic_string.h ****       /**
4019:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
4020:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
4021:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
4022:/usr/include/c++/9/bits/basic_string.h ****        *
4023:/usr/include/c++/9/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
4024:/usr/include/c++/9/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
4025:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
4026:/usr/include/c++/9/bits/basic_string.h ****        *  see at().)
4027:/usr/include/c++/9/bits/basic_string.h ****        */
4028:/usr/include/c++/9/bits/basic_string.h ****       const_reference
4029:/usr/include/c++/9/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
4030:/usr/include/c++/9/bits/basic_string.h ****       {
4031:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
4032:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__pos];
4033:/usr/include/c++/9/bits/basic_string.h ****       }
4034:/usr/include/c++/9/bits/basic_string.h **** 
4035:/usr/include/c++/9/bits/basic_string.h ****       /**
4036:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
4037:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
4038:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read/write reference to the character.
4039:/usr/include/c++/9/bits/basic_string.h ****        *
4040:/usr/include/c++/9/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
4041:/usr/include/c++/9/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
4042:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
4043:/usr/include/c++/9/bits/basic_string.h ****        *  see at().)  Unshares the string.
4044:/usr/include/c++/9/bits/basic_string.h ****        */
4045:/usr/include/c++/9/bits/basic_string.h ****       reference
4046:/usr/include/c++/9/bits/basic_string.h ****       operator[](size_type __pos)
4047:/usr/include/c++/9/bits/basic_string.h ****       {
4048:/usr/include/c++/9/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
4049:/usr/include/c++/9/bits/basic_string.h **** 	// and in C++11 mode.
4050:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
4051:/usr/include/c++/9/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
4052:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
4053:/usr/include/c++/9/bits/basic_string.h **** 	_M_leak();
4054:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__pos];
4055:/usr/include/c++/9/bits/basic_string.h ****       }
4056:/usr/include/c++/9/bits/basic_string.h **** 
4057:/usr/include/c++/9/bits/basic_string.h ****       /**
4058:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
4059:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n The index of the character to access.
4060:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
4061:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
4062:/usr/include/c++/9/bits/basic_string.h ****        *
4063:/usr/include/c++/9/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4064:/usr/include/c++/9/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4065:/usr/include/c++/9/bits/basic_string.h ****        *  throws out_of_range if the check fails.
4066:/usr/include/c++/9/bits/basic_string.h ****        */
4067:/usr/include/c++/9/bits/basic_string.h ****       const_reference
4068:/usr/include/c++/9/bits/basic_string.h ****       at(size_type __n) const
4069:/usr/include/c++/9/bits/basic_string.h ****       {
4070:/usr/include/c++/9/bits/basic_string.h **** 	if (__n >= this->size())
4071:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4072:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4073:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu)"),
4074:/usr/include/c++/9/bits/basic_string.h **** 				   __n, this->size());
4075:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__n];
4076:/usr/include/c++/9/bits/basic_string.h ****       }
4077:/usr/include/c++/9/bits/basic_string.h **** 
4078:/usr/include/c++/9/bits/basic_string.h ****       /**
4079:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
4080:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n The index of the character to access.
4081:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Read/write reference to the character.
4082:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
4083:/usr/include/c++/9/bits/basic_string.h ****        *
4084:/usr/include/c++/9/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4085:/usr/include/c++/9/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4086:/usr/include/c++/9/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
4087:/usr/include/c++/9/bits/basic_string.h ****        *  unsharing the string.
4088:/usr/include/c++/9/bits/basic_string.h ****        */
4089:/usr/include/c++/9/bits/basic_string.h ****       reference
4090:/usr/include/c++/9/bits/basic_string.h ****       at(size_type __n)
4091:/usr/include/c++/9/bits/basic_string.h ****       {
4092:/usr/include/c++/9/bits/basic_string.h **** 	if (__n >= size())
4093:/usr/include/c++/9/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4094:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4095:/usr/include/c++/9/bits/basic_string.h **** 				       "(which is %zu)"),
4096:/usr/include/c++/9/bits/basic_string.h **** 				   __n, this->size());
4097:/usr/include/c++/9/bits/basic_string.h **** 	_M_leak();
4098:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data()[__n];
4099:/usr/include/c++/9/bits/basic_string.h ****       }
4100:/usr/include/c++/9/bits/basic_string.h **** 
4101:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
4102:/usr/include/c++/9/bits/basic_string.h ****       /**
4103:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
4104:/usr/include/c++/9/bits/basic_string.h ****        *  element of the %string.
4105:/usr/include/c++/9/bits/basic_string.h ****        */
4106:/usr/include/c++/9/bits/basic_string.h ****       reference
4107:/usr/include/c++/9/bits/basic_string.h ****       front()
4108:/usr/include/c++/9/bits/basic_string.h ****       {
4109:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4110:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](0);
4111:/usr/include/c++/9/bits/basic_string.h ****       }
4112:/usr/include/c++/9/bits/basic_string.h **** 
4113:/usr/include/c++/9/bits/basic_string.h ****       /**
4114:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
4115:/usr/include/c++/9/bits/basic_string.h ****        *  element of the %string.
4116:/usr/include/c++/9/bits/basic_string.h ****        */
4117:/usr/include/c++/9/bits/basic_string.h ****       const_reference
4118:/usr/include/c++/9/bits/basic_string.h ****       front() const noexcept
4119:/usr/include/c++/9/bits/basic_string.h ****       {
4120:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4121:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](0);
4122:/usr/include/c++/9/bits/basic_string.h ****       }
4123:/usr/include/c++/9/bits/basic_string.h **** 
4124:/usr/include/c++/9/bits/basic_string.h ****       /**
4125:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
4126:/usr/include/c++/9/bits/basic_string.h ****        *  element of the %string.
4127:/usr/include/c++/9/bits/basic_string.h ****        */
4128:/usr/include/c++/9/bits/basic_string.h ****       reference
4129:/usr/include/c++/9/bits/basic_string.h ****       back()
4130:/usr/include/c++/9/bits/basic_string.h ****       {
4131:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4132:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](this->size() - 1);
4133:/usr/include/c++/9/bits/basic_string.h ****       }
4134:/usr/include/c++/9/bits/basic_string.h **** 
4135:/usr/include/c++/9/bits/basic_string.h ****       /**
4136:/usr/include/c++/9/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
4137:/usr/include/c++/9/bits/basic_string.h ****        *  last element of the %string.
4138:/usr/include/c++/9/bits/basic_string.h ****        */
4139:/usr/include/c++/9/bits/basic_string.h ****       const_reference
4140:/usr/include/c++/9/bits/basic_string.h ****       back() const noexcept
4141:/usr/include/c++/9/bits/basic_string.h ****       {
4142:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4143:/usr/include/c++/9/bits/basic_string.h **** 	return operator[](this->size() - 1);
4144:/usr/include/c++/9/bits/basic_string.h ****       }
4145:/usr/include/c++/9/bits/basic_string.h **** #endif
4146:/usr/include/c++/9/bits/basic_string.h **** 
4147:/usr/include/c++/9/bits/basic_string.h ****       // Modifiers:
4148:/usr/include/c++/9/bits/basic_string.h ****       /**
4149:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string to this string.
4150:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to append.
4151:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4152:/usr/include/c++/9/bits/basic_string.h ****        */
4153:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4154:/usr/include/c++/9/bits/basic_string.h ****       operator+=(const basic_string& __str)
4155:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__str); }
4156:/usr/include/c++/9/bits/basic_string.h **** 
4157:/usr/include/c++/9/bits/basic_string.h ****       /**
4158:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a C string.
4159:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to append.
4160:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4161:/usr/include/c++/9/bits/basic_string.h ****        */
4162:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4163:/usr/include/c++/9/bits/basic_string.h ****       operator+=(const _CharT* __s)
4164:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__s); }
4165:/usr/include/c++/9/bits/basic_string.h **** 
4166:/usr/include/c++/9/bits/basic_string.h ****       /**
4167:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a character.
4168:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to append.
4169:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4170:/usr/include/c++/9/bits/basic_string.h ****        */
4171:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4172:/usr/include/c++/9/bits/basic_string.h ****       operator+=(_CharT __c)
4173:/usr/include/c++/9/bits/basic_string.h ****       { 
4174:/usr/include/c++/9/bits/basic_string.h **** 	this->push_back(__c);
4175:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
4176:/usr/include/c++/9/bits/basic_string.h ****       }
4177:/usr/include/c++/9/bits/basic_string.h **** 
4178:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
4179:/usr/include/c++/9/bits/basic_string.h ****       /**
4180:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4181:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
4182:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4183:/usr/include/c++/9/bits/basic_string.h ****        */
4184:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4185:/usr/include/c++/9/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
4186:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4187:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
4188:/usr/include/c++/9/bits/basic_string.h **** 
4189:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
4190:/usr/include/c++/9/bits/basic_string.h ****       /**
4191:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string_view.
4192:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4193:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4194:/usr/include/c++/9/bits/basic_string.h ****        */
4195:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
4196:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4197:/usr/include/c++/9/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
4198:/usr/include/c++/9/bits/basic_string.h **** 	{ return this->append(__svt); }
4199:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
4200:/usr/include/c++/9/bits/basic_string.h **** 
4201:/usr/include/c++/9/bits/basic_string.h ****       /**
4202:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string to this string.
4203:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to append.
4204:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4205:/usr/include/c++/9/bits/basic_string.h ****        */
4206:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4207:/usr/include/c++/9/bits/basic_string.h ****       append(const basic_string& __str);
4208:/usr/include/c++/9/bits/basic_string.h **** 
4209:/usr/include/c++/9/bits/basic_string.h ****       /**
4210:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a substring.
4211:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to append.
4212:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
4213:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4214:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4215:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
4216:/usr/include/c++/9/bits/basic_string.h ****        *
4217:/usr/include/c++/9/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
4218:/usr/include/c++/9/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
4219:/usr/include/c++/9/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
4220:/usr/include/c++/9/bits/basic_string.h ****        *  remainder of @a __str is appended.
4221:/usr/include/c++/9/bits/basic_string.h ****        */
4222:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4223:/usr/include/c++/9/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos);
4224:/usr/include/c++/9/bits/basic_string.h **** 
4225:/usr/include/c++/9/bits/basic_string.h ****       /**
4226:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a C substring.
4227:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to append.
4228:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4229:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4230:/usr/include/c++/9/bits/basic_string.h ****        */
4231:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4232:/usr/include/c++/9/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
4233:/usr/include/c++/9/bits/basic_string.h **** 
4234:/usr/include/c++/9/bits/basic_string.h ****       /**
4235:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a C string.
4236:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to append.
4237:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4238:/usr/include/c++/9/bits/basic_string.h ****        */
4239:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4240:/usr/include/c++/9/bits/basic_string.h ****       append(const _CharT* __s)
4241:/usr/include/c++/9/bits/basic_string.h ****       {
4242:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4243:/usr/include/c++/9/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
4244:/usr/include/c++/9/bits/basic_string.h ****       }
4245:/usr/include/c++/9/bits/basic_string.h **** 
4246:/usr/include/c++/9/bits/basic_string.h ****       /**
4247:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append multiple characters.
4248:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4249:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to use.
4250:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4251:/usr/include/c++/9/bits/basic_string.h ****        *
4252:/usr/include/c++/9/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
4253:/usr/include/c++/9/bits/basic_string.h ****        */
4254:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4255:/usr/include/c++/9/bits/basic_string.h ****       append(size_type __n, _CharT __c);
4256:/usr/include/c++/9/bits/basic_string.h **** 
4257:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
4258:/usr/include/c++/9/bits/basic_string.h ****       /**
4259:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4260:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
4261:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4262:/usr/include/c++/9/bits/basic_string.h ****        */
4263:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4264:/usr/include/c++/9/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
4265:/usr/include/c++/9/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4266:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
4267:/usr/include/c++/9/bits/basic_string.h **** 
4268:/usr/include/c++/9/bits/basic_string.h ****       /**
4269:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a range of characters.
4270:/usr/include/c++/9/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4271:/usr/include/c++/9/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4272:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4273:/usr/include/c++/9/bits/basic_string.h ****        *
4274:/usr/include/c++/9/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
4275:/usr/include/c++/9/bits/basic_string.h ****        */
4276:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
4277:/usr/include/c++/9/bits/basic_string.h ****         basic_string&
4278:/usr/include/c++/9/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
4279:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
4280:/usr/include/c++/9/bits/basic_string.h **** 
4281:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
4282:/usr/include/c++/9/bits/basic_string.h ****       /**
4283:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a string_view.
4284:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4285:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4286:/usr/include/c++/9/bits/basic_string.h ****        */
4287:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
4288:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4289:/usr/include/c++/9/bits/basic_string.h **** 	append(const _Tp& __svt)
4290:/usr/include/c++/9/bits/basic_string.h **** 	{
4291:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4292:/usr/include/c++/9/bits/basic_string.h **** 	  return this->append(__sv.data(), __sv.size());
4293:/usr/include/c++/9/bits/basic_string.h **** 	}
4294:/usr/include/c++/9/bits/basic_string.h **** 
4295:/usr/include/c++/9/bits/basic_string.h ****       /**
4296:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
4297:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended
4298:/usr/include/c++/9/bits/basic_string.h ****        *               from.
4299:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
4300:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
4301:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4302:/usr/include/c++/9/bits/basic_string.h ****        */
4303:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
4304:/usr/include/c++/9/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4305:/usr/include/c++/9/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
4306:/usr/include/c++/9/bits/basic_string.h **** 	{
4307:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4308:/usr/include/c++/9/bits/basic_string.h **** 	  return append(__sv.data()
4309:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
4310:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
4311:/usr/include/c++/9/bits/basic_string.h **** 	}
4312:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
4313:/usr/include/c++/9/bits/basic_string.h **** 
4314:/usr/include/c++/9/bits/basic_string.h ****       /**
4315:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Append a single character.
4316:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to append.
4317:/usr/include/c++/9/bits/basic_string.h ****        */
4318:/usr/include/c++/9/bits/basic_string.h ****       void
4319:/usr/include/c++/9/bits/basic_string.h ****       push_back(_CharT __c)
4320:/usr/include/c++/9/bits/basic_string.h ****       { 
4321:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
4322:/usr/include/c++/9/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
4323:/usr/include/c++/9/bits/basic_string.h **** 	  this->reserve(__len);
4324:/usr/include/c++/9/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
4325:/usr/include/c++/9/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
4326:/usr/include/c++/9/bits/basic_string.h ****       }
4327:/usr/include/c++/9/bits/basic_string.h **** 
4328:/usr/include/c++/9/bits/basic_string.h ****       /**
4329:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4330:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string to use.
4331:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4332:/usr/include/c++/9/bits/basic_string.h ****        */
4333:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4334:/usr/include/c++/9/bits/basic_string.h ****       assign(const basic_string& __str);
4335:/usr/include/c++/9/bits/basic_string.h **** 
4336:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
4337:/usr/include/c++/9/bits/basic_string.h ****       /**
4338:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4339:/usr/include/c++/9/bits/basic_string.h ****        *  @param  __str  Source string to use.
4340:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4341:/usr/include/c++/9/bits/basic_string.h ****        *
4342:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
4343:/usr/include/c++/9/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
4344:/usr/include/c++/9/bits/basic_string.h ****        */
4345:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4346:/usr/include/c++/9/bits/basic_string.h ****       assign(basic_string&& __str)
4347:/usr/include/c++/9/bits/basic_string.h ****       noexcept(allocator_traits<_Alloc>::is_always_equal::value)
4348:/usr/include/c++/9/bits/basic_string.h ****       {
4349:/usr/include/c++/9/bits/basic_string.h **** 	this->swap(__str);
4350:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
4351:/usr/include/c++/9/bits/basic_string.h ****       }
4352:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
4353:/usr/include/c++/9/bits/basic_string.h **** 
4354:/usr/include/c++/9/bits/basic_string.h ****       /**
4355:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
4356:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to use.
4357:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
4358:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4359:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4360:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
4361:/usr/include/c++/9/bits/basic_string.h ****        *
4362:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
4363:/usr/include/c++/9/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
4364:/usr/include/c++/9/bits/basic_string.h ****        *  is larger than the number of available characters in @a
4365:/usr/include/c++/9/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
4366:/usr/include/c++/9/bits/basic_string.h ****        */
4367:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4368:/usr/include/c++/9/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
4369:/usr/include/c++/9/bits/basic_string.h ****       { return this->assign(__str._M_data()
4370:/usr/include/c++/9/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
4371:/usr/include/c++/9/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
4372:/usr/include/c++/9/bits/basic_string.h **** 
4373:/usr/include/c++/9/bits/basic_string.h ****       /**
4374:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to a C substring.
4375:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to use.
4376:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4377:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4378:/usr/include/c++/9/bits/basic_string.h ****        *
4379:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
4380:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
4381:/usr/include/c++/9/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
4382:/usr/include/c++/9/bits/basic_string.h ****        */
4383:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4384:/usr/include/c++/9/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
4385:/usr/include/c++/9/bits/basic_string.h **** 
4386:/usr/include/c++/9/bits/basic_string.h ****       /**
4387:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
4388:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to use.
4389:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4390:/usr/include/c++/9/bits/basic_string.h ****        *
4391:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
4392:/usr/include/c++/9/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
4393:/usr/include/c++/9/bits/basic_string.h ****        *  function returns.
4394:/usr/include/c++/9/bits/basic_string.h ****        */
4395:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4396:/usr/include/c++/9/bits/basic_string.h ****       assign(const _CharT* __s)
4397:/usr/include/c++/9/bits/basic_string.h ****       {
4398:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4399:/usr/include/c++/9/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
4400:/usr/include/c++/9/bits/basic_string.h ****       }
4401:/usr/include/c++/9/bits/basic_string.h **** 
4402:/usr/include/c++/9/bits/basic_string.h ****       /**
4403:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
4404:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
4405:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to use.
4406:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4407:/usr/include/c++/9/bits/basic_string.h ****        *
4408:/usr/include/c++/9/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
4409:/usr/include/c++/9/bits/basic_string.h ****        *  character @a __c.
4410:/usr/include/c++/9/bits/basic_string.h ****        */
4411:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4412:/usr/include/c++/9/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
4413:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
4414:/usr/include/c++/9/bits/basic_string.h **** 
4415:/usr/include/c++/9/bits/basic_string.h ****       /**
4416:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
4417:/usr/include/c++/9/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4418:/usr/include/c++/9/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4419:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4420:/usr/include/c++/9/bits/basic_string.h ****        *
4421:/usr/include/c++/9/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
4422:/usr/include/c++/9/bits/basic_string.h ****       */
4423:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
4424:/usr/include/c++/9/bits/basic_string.h ****         basic_string&
4425:/usr/include/c++/9/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
4426:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
4427:/usr/include/c++/9/bits/basic_string.h **** 
4428:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
4429:/usr/include/c++/9/bits/basic_string.h ****       /**
4430:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
4431:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
4432:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4433:/usr/include/c++/9/bits/basic_string.h ****        */
4434:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4435:/usr/include/c++/9/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
4436:/usr/include/c++/9/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
4437:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
4438:/usr/include/c++/9/bits/basic_string.h **** 
4439:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
4440:/usr/include/c++/9/bits/basic_string.h ****       /**
4441:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value from a string_view.
4442:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt The source object convertible to string_view.
4443:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4444:/usr/include/c++/9/bits/basic_string.h ****        */
4445:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
4446:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4447:/usr/include/c++/9/bits/basic_string.h **** 	assign(const _Tp& __svt)
4448:/usr/include/c++/9/bits/basic_string.h **** 	{
4449:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4450:/usr/include/c++/9/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
4451:/usr/include/c++/9/bits/basic_string.h **** 	}
4452:/usr/include/c++/9/bits/basic_string.h **** 
4453:/usr/include/c++/9/bits/basic_string.h ****       /**
4454:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
4455:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
4456:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
4457:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
4458:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4459:/usr/include/c++/9/bits/basic_string.h ****        */
4460:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
4461:/usr/include/c++/9/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4462:/usr/include/c++/9/bits/basic_string.h ****         assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
4463:/usr/include/c++/9/bits/basic_string.h **** 	{
4464:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4465:/usr/include/c++/9/bits/basic_string.h **** 	  return assign(__sv.data()
4466:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
4467:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
4468:/usr/include/c++/9/bits/basic_string.h **** 	}
4469:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
4470:/usr/include/c++/9/bits/basic_string.h **** 
4471:/usr/include/c++/9/bits/basic_string.h ****       /**
4472:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4473:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4474:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4475:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to insert.
4476:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4477:/usr/include/c++/9/bits/basic_string.h ****        *
4478:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
4479:/usr/include/c++/9/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
4480:/usr/include/c++/9/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4481:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4482:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
4483:/usr/include/c++/9/bits/basic_string.h ****       */
4484:/usr/include/c++/9/bits/basic_string.h ****       void
4485:/usr/include/c++/9/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
4486:/usr/include/c++/9/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
4487:/usr/include/c++/9/bits/basic_string.h **** 
4488:/usr/include/c++/9/bits/basic_string.h ****       /**
4489:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a range of characters.
4490:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4491:/usr/include/c++/9/bits/basic_string.h ****        *  @param __beg  Start of range.
4492:/usr/include/c++/9/bits/basic_string.h ****        *  @param __end  End of range.
4493:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4494:/usr/include/c++/9/bits/basic_string.h ****        *
4495:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
4496:/usr/include/c++/9/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4497:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4498:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
4499:/usr/include/c++/9/bits/basic_string.h ****       */
4500:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
4501:/usr/include/c++/9/bits/basic_string.h ****         void
4502:/usr/include/c++/9/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
4503:/usr/include/c++/9/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
4504:/usr/include/c++/9/bits/basic_string.h **** 
4505:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
4506:/usr/include/c++/9/bits/basic_string.h ****       /**
4507:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
4508:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4509:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4510:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4511:/usr/include/c++/9/bits/basic_string.h ****        */
4512:/usr/include/c++/9/bits/basic_string.h ****       void
4513:/usr/include/c++/9/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
4514:/usr/include/c++/9/bits/basic_string.h ****       {
4515:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4516:/usr/include/c++/9/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
4517:/usr/include/c++/9/bits/basic_string.h ****       }
4518:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
4519:/usr/include/c++/9/bits/basic_string.h **** 
4520:/usr/include/c++/9/bits/basic_string.h ****       /**
4521:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert value of a string.
4522:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4523:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to insert.
4524:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4525:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4526:/usr/include/c++/9/bits/basic_string.h ****        *
4527:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
4528:/usr/include/c++/9/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4529:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4530:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
4531:/usr/include/c++/9/bits/basic_string.h ****       */
4532:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4533:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
4534:/usr/include/c++/9/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
4535:/usr/include/c++/9/bits/basic_string.h **** 
4536:/usr/include/c++/9/bits/basic_string.h ****       /**
4537:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a substring.
4538:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4539:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  The string to insert.
4540:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
4541:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4542:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4543:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4544:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
4545:/usr/include/c++/9/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
4546:/usr/include/c++/9/bits/basic_string.h ****        *
4547:/usr/include/c++/9/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
4548:/usr/include/c++/9/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
4549:/usr/include/c++/9/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
4550:/usr/include/c++/9/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
4551:/usr/include/c++/9/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
4552:/usr/include/c++/9/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4553:/usr/include/c++/9/bits/basic_string.h ****       */
4554:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4555:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
4556:/usr/include/c++/9/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
4557:/usr/include/c++/9/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
4558:/usr/include/c++/9/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
4559:/usr/include/c++/9/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
4560:/usr/include/c++/9/bits/basic_string.h **** 
4561:/usr/include/c++/9/bits/basic_string.h ****       /**
4562:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a C substring.
4563:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4564:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to insert.
4565:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
4566:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4567:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4568:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4569:/usr/include/c++/9/bits/basic_string.h ****        *  string.
4570:/usr/include/c++/9/bits/basic_string.h ****        *
4571:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
4572:/usr/include/c++/9/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
4573:/usr/include/c++/9/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
4574:/usr/include/c++/9/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
4575:/usr/include/c++/9/bits/basic_string.h ****        *  doesn't change if an error is thrown.
4576:/usr/include/c++/9/bits/basic_string.h ****       */
4577:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4578:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
4579:/usr/include/c++/9/bits/basic_string.h **** 
4580:/usr/include/c++/9/bits/basic_string.h ****       /**
4581:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a C string.
4582:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4583:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  The C string to insert.
4584:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4585:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4586:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4587:/usr/include/c++/9/bits/basic_string.h ****        *  string.
4588:/usr/include/c++/9/bits/basic_string.h ****        *
4589:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
4590:/usr/include/c++/9/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
4591:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
4592:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
4593:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
4594:/usr/include/c++/9/bits/basic_string.h ****       */
4595:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4596:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
4597:/usr/include/c++/9/bits/basic_string.h ****       {
4598:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4599:/usr/include/c++/9/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
4600:/usr/include/c++/9/bits/basic_string.h ****       }
4601:/usr/include/c++/9/bits/basic_string.h **** 
4602:/usr/include/c++/9/bits/basic_string.h ****       /**
4603:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4604:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
4605:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4606:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to insert.
4607:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4608:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4609:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4610:/usr/include/c++/9/bits/basic_string.h ****        *  string.
4611:/usr/include/c++/9/bits/basic_string.h ****        *
4612:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
4613:/usr/include/c++/9/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
4614:/usr/include/c++/9/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
4615:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4616:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
4617:/usr/include/c++/9/bits/basic_string.h ****       */
4618:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4619:/usr/include/c++/9/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
4620:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
4621:/usr/include/c++/9/bits/basic_string.h **** 			      size_type(0), __n, __c); }
4622:/usr/include/c++/9/bits/basic_string.h **** 
4623:/usr/include/c++/9/bits/basic_string.h ****       /**
4624:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert one character.
4625:/usr/include/c++/9/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
4626:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  The character to insert.
4627:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
4628:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4629:/usr/include/c++/9/bits/basic_string.h ****        *
4630:/usr/include/c++/9/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
4631:/usr/include/c++/9/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
4632:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
4633:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4634:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
4635:/usr/include/c++/9/bits/basic_string.h ****       */
4636:/usr/include/c++/9/bits/basic_string.h ****       iterator
4637:/usr/include/c++/9/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
4638:/usr/include/c++/9/bits/basic_string.h ****       {
4639:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4640:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
4641:/usr/include/c++/9/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
4642:/usr/include/c++/9/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4643:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4644:/usr/include/c++/9/bits/basic_string.h ****       }
4645:/usr/include/c++/9/bits/basic_string.h **** 
4646:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
4647:/usr/include/c++/9/bits/basic_string.h ****       /**
4648:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a string_view.
4649:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4650:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
4651:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4652:/usr/include/c++/9/bits/basic_string.h ****       */
4653:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
4654:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4655:/usr/include/c++/9/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
4656:/usr/include/c++/9/bits/basic_string.h **** 	{
4657:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4658:/usr/include/c++/9/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
4659:/usr/include/c++/9/bits/basic_string.h **** 	}
4660:/usr/include/c++/9/bits/basic_string.h **** 
4661:/usr/include/c++/9/bits/basic_string.h ****       /**
4662:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Insert a string_view.
4663:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4664:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
4665:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
4666:/usr/include/c++/9/bits/basic_string.h ****        *  from.
4667:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
4668:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4669:/usr/include/c++/9/bits/basic_string.h ****       */
4670:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
4671:/usr/include/c++/9/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4672:/usr/include/c++/9/bits/basic_string.h ****         insert(size_type __pos1, const _Tp& __svt,
4673:/usr/include/c++/9/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
4674:/usr/include/c++/9/bits/basic_string.h **** 	{
4675:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4676:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0), __sv.data()
4677:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
4678:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
4679:/usr/include/c++/9/bits/basic_string.h **** 	}
4680:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
4681:/usr/include/c++/9/bits/basic_string.h **** 
4682:/usr/include/c++/9/bits/basic_string.h ****       /**
4683:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove characters.
4684:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
4685:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
4686:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4687:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4688:/usr/include/c++/9/bits/basic_string.h ****        *  string.
4689:/usr/include/c++/9/bits/basic_string.h ****        *
4690:/usr/include/c++/9/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
4691:/usr/include/c++/9/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
4692:/usr/include/c++/9/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
4693:/usr/include/c++/9/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
4694:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4695:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
4696:/usr/include/c++/9/bits/basic_string.h ****       */
4697:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4698:/usr/include/c++/9/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
4699:/usr/include/c++/9/bits/basic_string.h ****       { 
4700:/usr/include/c++/9/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
4701:/usr/include/c++/9/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
4702:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
4703:/usr/include/c++/9/bits/basic_string.h ****       }
4704:/usr/include/c++/9/bits/basic_string.h **** 
4705:/usr/include/c++/9/bits/basic_string.h ****       /**
4706:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove one character.
4707:/usr/include/c++/9/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
4708:/usr/include/c++/9/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
4709:/usr/include/c++/9/bits/basic_string.h ****        *
4710:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
4711:/usr/include/c++/9/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
4712:/usr/include/c++/9/bits/basic_string.h ****       */
4713:/usr/include/c++/9/bits/basic_string.h ****       iterator
4714:/usr/include/c++/9/bits/basic_string.h ****       erase(iterator __position)
4715:/usr/include/c++/9/bits/basic_string.h ****       {
4716:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
4717:/usr/include/c++/9/bits/basic_string.h **** 				 && __position < _M_iend());
4718:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
4719:/usr/include/c++/9/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
4720:/usr/include/c++/9/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4721:/usr/include/c++/9/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4722:/usr/include/c++/9/bits/basic_string.h ****       }
4723:/usr/include/c++/9/bits/basic_string.h **** 
4724:/usr/include/c++/9/bits/basic_string.h ****       /**
4725:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove a range of characters.
4726:/usr/include/c++/9/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
4727:/usr/include/c++/9/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
4728:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
4729:/usr/include/c++/9/bits/basic_string.h ****        *
4730:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
4731:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
4732:/usr/include/c++/9/bits/basic_string.h ****       */
4733:/usr/include/c++/9/bits/basic_string.h ****       iterator
4734:/usr/include/c++/9/bits/basic_string.h ****       erase(iterator __first, iterator __last);
4735:/usr/include/c++/9/bits/basic_string.h ****  
4736:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
4737:/usr/include/c++/9/bits/basic_string.h ****       /**
4738:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Remove the last character.
4739:/usr/include/c++/9/bits/basic_string.h ****        *
4740:/usr/include/c++/9/bits/basic_string.h ****        *  The string must be non-empty.
4741:/usr/include/c++/9/bits/basic_string.h ****        */
4742:/usr/include/c++/9/bits/basic_string.h ****       void
4743:/usr/include/c++/9/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
4744:/usr/include/c++/9/bits/basic_string.h ****       {
4745:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4746:/usr/include/c++/9/bits/basic_string.h **** 	erase(size() - 1, 1);
4747:/usr/include/c++/9/bits/basic_string.h ****       }
4748:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
4749:/usr/include/c++/9/bits/basic_string.h **** 
4750:/usr/include/c++/9/bits/basic_string.h ****       /**
4751:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4752:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4753:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
4754:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to insert.
4755:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4756:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4757:/usr/include/c++/9/bits/basic_string.h ****        *  string.
4758:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4759:/usr/include/c++/9/bits/basic_string.h ****        *
4760:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
4761:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
4762:/usr/include/c++/9/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4763:/usr/include/c++/9/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
4764:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
4765:/usr/include/c++/9/bits/basic_string.h ****        *  error is thrown.
4766:/usr/include/c++/9/bits/basic_string.h ****       */
4767:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4768:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
4769:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
4770:/usr/include/c++/9/bits/basic_string.h **** 
4771:/usr/include/c++/9/bits/basic_string.h ****       /**
4772:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4773:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
4774:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4775:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to insert.
4776:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
4777:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
4778:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4779:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
4780:/usr/include/c++/9/bits/basic_string.h ****        *  __str.size().
4781:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4782:/usr/include/c++/9/bits/basic_string.h ****        *
4783:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
4784:/usr/include/c++/9/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
4785:/usr/include/c++/9/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
4786:/usr/include/c++/9/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
4787:/usr/include/c++/9/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
4788:/usr/include/c++/9/bits/basic_string.h ****       */
4789:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4790:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
4791:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
4792:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
4793:/usr/include/c++/9/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
4794:/usr/include/c++/9/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
4795:/usr/include/c++/9/bits/basic_string.h **** 
4796:/usr/include/c++/9/bits/basic_string.h ****       /**
4797:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
4798:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4799:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4800:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to insert.
4801:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
4802:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4803:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
4804:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4805:/usr/include/c++/9/bits/basic_string.h ****        *
4806:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4807:/usr/include/c++/9/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
4808:/usr/include/c++/9/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
4809:/usr/include/c++/9/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
4810:/usr/include/c++/9/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
4811:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4812:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.
4813:/usr/include/c++/9/bits/basic_string.h ****       */
4814:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4815:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
4816:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2);
4817:/usr/include/c++/9/bits/basic_string.h **** 
4818:/usr/include/c++/9/bits/basic_string.h ****       /**
4819:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
4820:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4821:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4822:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to insert.
4823:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4824:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
4825:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4826:/usr/include/c++/9/bits/basic_string.h ****        *
4827:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4828:/usr/include/c++/9/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
4829:/usr/include/c++/9/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
4830:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
4831:/usr/include/c++/9/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4832:/usr/include/c++/9/bits/basic_string.h ****        *  change if an error is thrown.
4833:/usr/include/c++/9/bits/basic_string.h ****       */
4834:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4835:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
4836:/usr/include/c++/9/bits/basic_string.h ****       {
4837:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4838:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
4839:/usr/include/c++/9/bits/basic_string.h ****       }
4840:/usr/include/c++/9/bits/basic_string.h **** 
4841:/usr/include/c++/9/bits/basic_string.h ****       /**
4842:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
4843:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4844:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4845:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
4846:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to insert.
4847:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4848:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
4849:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4850:/usr/include/c++/9/bits/basic_string.h ****        *
4851:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
4852:/usr/include/c++/9/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
4853:/usr/include/c++/9/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4854:/usr/include/c++/9/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
4855:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4856:/usr/include/c++/9/bits/basic_string.h ****        *  is thrown.
4857:/usr/include/c++/9/bits/basic_string.h ****       */
4858:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4859:/usr/include/c++/9/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
4860:/usr/include/c++/9/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
4861:/usr/include/c++/9/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
4862:/usr/include/c++/9/bits/basic_string.h **** 
4863:/usr/include/c++/9/bits/basic_string.h ****       /**
4864:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
4865:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4866:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4867:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String value to insert.
4868:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4869:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4870:/usr/include/c++/9/bits/basic_string.h ****        *
4871:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4872:/usr/include/c++/9/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
4873:/usr/include/c++/9/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
4874:/usr/include/c++/9/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
4875:/usr/include/c++/9/bits/basic_string.h ****       */
4876:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4877:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
4878:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
4879:/usr/include/c++/9/bits/basic_string.h **** 
4880:/usr/include/c++/9/bits/basic_string.h ****       /**
4881:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
4882:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4883:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4884:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string value to insert.
4885:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
4886:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4887:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4888:/usr/include/c++/9/bits/basic_string.h ****        *
4889:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4890:/usr/include/c++/9/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
4891:/usr/include/c++/9/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4892:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4893:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
4894:/usr/include/c++/9/bits/basic_string.h ****       */
4895:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4896:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
4897:/usr/include/c++/9/bits/basic_string.h ****       {
4898:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4899:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4900:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
4901:/usr/include/c++/9/bits/basic_string.h ****       }
4902:/usr/include/c++/9/bits/basic_string.h **** 
4903:/usr/include/c++/9/bits/basic_string.h ****       /**
4904:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
4905:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4906:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4907:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string value to insert.
4908:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4909:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4910:/usr/include/c++/9/bits/basic_string.h ****        *
4911:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4912:/usr/include/c++/9/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
4913:/usr/include/c++/9/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4914:/usr/include/c++/9/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4915:/usr/include/c++/9/bits/basic_string.h ****       */
4916:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4917:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
4918:/usr/include/c++/9/bits/basic_string.h ****       {
4919:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4920:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
4921:/usr/include/c++/9/bits/basic_string.h ****       }
4922:/usr/include/c++/9/bits/basic_string.h **** 
4923:/usr/include/c++/9/bits/basic_string.h ****       /**
4924:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4925:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4926:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4927:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4928:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to insert.
4929:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4930:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4931:/usr/include/c++/9/bits/basic_string.h ****        *
4932:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4933:/usr/include/c++/9/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4934:/usr/include/c++/9/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4935:/usr/include/c++/9/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4936:/usr/include/c++/9/bits/basic_string.h ****       */
4937:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4938:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4939:/usr/include/c++/9/bits/basic_string.h ****       {
4940:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4941:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4942:/usr/include/c++/9/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4943:/usr/include/c++/9/bits/basic_string.h ****       }
4944:/usr/include/c++/9/bits/basic_string.h **** 
4945:/usr/include/c++/9/bits/basic_string.h ****       /**
4946:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4947:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4948:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4949:/usr/include/c++/9/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4950:/usr/include/c++/9/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4951:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
4952:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4953:/usr/include/c++/9/bits/basic_string.h ****        *
4954:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4955:/usr/include/c++/9/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4956:/usr/include/c++/9/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4957:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4958:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
4959:/usr/include/c++/9/bits/basic_string.h ****       */
4960:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
4961:/usr/include/c++/9/bits/basic_string.h ****         basic_string&
4962:/usr/include/c++/9/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4963:/usr/include/c++/9/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4964:/usr/include/c++/9/bits/basic_string.h ****         {
4965:/usr/include/c++/9/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4966:/usr/include/c++/9/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4967:/usr/include/c++/9/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4968:/usr/include/c++/9/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4969:/usr/include/c++/9/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4970:/usr/include/c++/9/bits/basic_string.h **** 	}
4971:/usr/include/c++/9/bits/basic_string.h **** 
4972:/usr/include/c++/9/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4973:/usr/include/c++/9/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4974:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4975:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4976:/usr/include/c++/9/bits/basic_string.h ****       {
4977:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4978:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4979:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4980:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4981:/usr/include/c++/9/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4982:/usr/include/c++/9/bits/basic_string.h ****       }
4983:/usr/include/c++/9/bits/basic_string.h **** 
4984:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4985:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4986:/usr/include/c++/9/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
4987:/usr/include/c++/9/bits/basic_string.h ****       {
4988:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4989:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4990:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4991:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4992:/usr/include/c++/9/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4993:/usr/include/c++/9/bits/basic_string.h ****       }
4994:/usr/include/c++/9/bits/basic_string.h **** 
4995:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
4996:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4997:/usr/include/c++/9/bits/basic_string.h ****       {
4998:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4999:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= _M_iend());
5000:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
5001:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
5002:/usr/include/c++/9/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
5003:/usr/include/c++/9/bits/basic_string.h ****       }
5004:/usr/include/c++/9/bits/basic_string.h **** 
5005:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
5006:/usr/include/c++/9/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
5007:/usr/include/c++/9/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
5008:/usr/include/c++/9/bits/basic_string.h ****       {
5009:/usr/include/c++/9/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
5010:/usr/include/c++/9/bits/basic_string.h **** 				 && __i2 <= _M_iend());
5011:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
5012:/usr/include/c++/9/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
5013:/usr/include/c++/9/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
5014:/usr/include/c++/9/bits/basic_string.h ****       }
5015:/usr/include/c++/9/bits/basic_string.h **** 
5016:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
5017:/usr/include/c++/9/bits/basic_string.h ****       /**
5018:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
5019:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
5020:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
5021:/usr/include/c++/9/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
5022:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
5023:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
5024:/usr/include/c++/9/bits/basic_string.h ****        *
5025:/usr/include/c++/9/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
5026:/usr/include/c++/9/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
5027:/usr/include/c++/9/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
5028:/usr/include/c++/9/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
5029:/usr/include/c++/9/bits/basic_string.h ****        *  thrown.
5030:/usr/include/c++/9/bits/basic_string.h ****       */
5031:/usr/include/c++/9/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
5032:/usr/include/c++/9/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
5033:/usr/include/c++/9/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
5034:/usr/include/c++/9/bits/basic_string.h **** #endif // C++11
5035:/usr/include/c++/9/bits/basic_string.h **** 
5036:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5037:/usr/include/c++/9/bits/basic_string.h ****       /**
5038:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5039:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  The position to replace at.
5040:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
5041:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
5042:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
5043:/usr/include/c++/9/bits/basic_string.h ****       */
5044:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5045:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
5046:/usr/include/c++/9/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
5047:/usr/include/c++/9/bits/basic_string.h **** 	{
5048:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5049:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
5050:/usr/include/c++/9/bits/basic_string.h **** 	}
5051:/usr/include/c++/9/bits/basic_string.h **** 
5052:/usr/include/c++/9/bits/basic_string.h ****       /**
5053:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5054:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
5055:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
5056:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
5057:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
5058:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
5059:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
5060:/usr/include/c++/9/bits/basic_string.h ****       */
5061:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5062:/usr/include/c++/9/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
5063:/usr/include/c++/9/bits/basic_string.h ****         replace(size_type __pos1, size_type __n1, const _Tp& __svt,
5064:/usr/include/c++/9/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
5065:/usr/include/c++/9/bits/basic_string.h **** 	{
5066:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5067:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
5068:/usr/include/c++/9/bits/basic_string.h **** 	      __sv.data()
5069:/usr/include/c++/9/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
5070:/usr/include/c++/9/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
5071:/usr/include/c++/9/bits/basic_string.h **** 	}
5072:/usr/include/c++/9/bits/basic_string.h **** 
5073:/usr/include/c++/9/bits/basic_string.h ****       /**
5074:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5075:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
5076:/usr/include/c++/9/bits/basic_string.h ****           to replace at.
5077:/usr/include/c++/9/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
5078:/usr/include/c++/9/bits/basic_string.h ****           for the replace.
5079:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
5080:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Reference to this string.
5081:/usr/include/c++/9/bits/basic_string.h ****       */
5082:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5083:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
5084:/usr/include/c++/9/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
5085:/usr/include/c++/9/bits/basic_string.h **** 	{
5086:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5087:/usr/include/c++/9/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
5088:/usr/include/c++/9/bits/basic_string.h **** 	}
5089:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5090:/usr/include/c++/9/bits/basic_string.h **** 
5091:/usr/include/c++/9/bits/basic_string.h ****     private:
5092:/usr/include/c++/9/bits/basic_string.h ****       template<class _Integer>
5093:/usr/include/c++/9/bits/basic_string.h **** 	basic_string&
5094:/usr/include/c++/9/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
5095:/usr/include/c++/9/bits/basic_string.h **** 			    _Integer __val, __true_type)
5096:/usr/include/c++/9/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
5097:/usr/include/c++/9/bits/basic_string.h **** 
5098:/usr/include/c++/9/bits/basic_string.h ****       template<class _InputIterator>
5099:/usr/include/c++/9/bits/basic_string.h **** 	basic_string&
5100:/usr/include/c++/9/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
5101:/usr/include/c++/9/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
5102:/usr/include/c++/9/bits/basic_string.h **** 
5103:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
5104:/usr/include/c++/9/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
5105:/usr/include/c++/9/bits/basic_string.h **** 		     _CharT __c);
5106:/usr/include/c++/9/bits/basic_string.h **** 
5107:/usr/include/c++/9/bits/basic_string.h ****       basic_string&
5108:/usr/include/c++/9/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
5109:/usr/include/c++/9/bits/basic_string.h **** 		      size_type __n2);
5110:/usr/include/c++/9/bits/basic_string.h **** 
5111:/usr/include/c++/9/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
5112:/usr/include/c++/9/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
5113:/usr/include/c++/9/bits/basic_string.h ****       template<class _InIterator>
5114:/usr/include/c++/9/bits/basic_string.h ****         static _CharT*
5115:/usr/include/c++/9/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
5116:/usr/include/c++/9/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
5117:/usr/include/c++/9/bits/basic_string.h **** 	{
5118:/usr/include/c++/9/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
5119:/usr/include/c++/9/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
5120:/usr/include/c++/9/bits/basic_string.h **** 	}
5121:/usr/include/c++/9/bits/basic_string.h **** 
5122:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5123:/usr/include/c++/9/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
5124:/usr/include/c++/9/bits/basic_string.h ****       template<class _Integer>
5125:/usr/include/c++/9/bits/basic_string.h ****         static _CharT*
5126:/usr/include/c++/9/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
5127:/usr/include/c++/9/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
5128:/usr/include/c++/9/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
5129:/usr/include/c++/9/bits/basic_string.h **** 				    __end, __a); }
5130:/usr/include/c++/9/bits/basic_string.h **** 
5131:/usr/include/c++/9/bits/basic_string.h ****       static _CharT*
5132:/usr/include/c++/9/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
5133:/usr/include/c++/9/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
5134:/usr/include/c++/9/bits/basic_string.h **** 
5135:/usr/include/c++/9/bits/basic_string.h ****       template<class _InIterator>
5136:/usr/include/c++/9/bits/basic_string.h ****         static _CharT*
5137:/usr/include/c++/9/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
5138:/usr/include/c++/9/bits/basic_string.h **** 	{
5139:/usr/include/c++/9/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
5140:/usr/include/c++/9/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
5141:/usr/include/c++/9/bits/basic_string.h ****         }
5142:/usr/include/c++/9/bits/basic_string.h **** 
5143:/usr/include/c++/9/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
5144:/usr/include/c++/9/bits/basic_string.h ****       template<class _InIterator>
5145:/usr/include/c++/9/bits/basic_string.h ****         static _CharT*
5146:/usr/include/c++/9/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
5147:/usr/include/c++/9/bits/basic_string.h **** 		      input_iterator_tag);
5148:/usr/include/c++/9/bits/basic_string.h **** 
5149:/usr/include/c++/9/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
5150:/usr/include/c++/9/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
5151:/usr/include/c++/9/bits/basic_string.h ****       template<class _FwdIterator>
5152:/usr/include/c++/9/bits/basic_string.h ****         static _CharT*
5153:/usr/include/c++/9/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
5154:/usr/include/c++/9/bits/basic_string.h **** 		     forward_iterator_tag);
5155:/usr/include/c++/9/bits/basic_string.h **** 
5156:/usr/include/c++/9/bits/basic_string.h ****       static _CharT*
5157:/usr/include/c++/9/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
5158:/usr/include/c++/9/bits/basic_string.h **** 
5159:/usr/include/c++/9/bits/basic_string.h ****     public:
5160:/usr/include/c++/9/bits/basic_string.h **** 
5161:/usr/include/c++/9/bits/basic_string.h ****       /**
5162:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Copy substring into C string.
5163:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to copy value into.
5164:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
5165:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
5166:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Number of characters actually copied
5167:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5168:/usr/include/c++/9/bits/basic_string.h ****        *
5169:/usr/include/c++/9/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
5170:/usr/include/c++/9/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
5171:/usr/include/c++/9/bits/basic_string.h ****        *  out_of_range is thrown.
5172:/usr/include/c++/9/bits/basic_string.h ****       */
5173:/usr/include/c++/9/bits/basic_string.h ****       size_type
5174:/usr/include/c++/9/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
5175:/usr/include/c++/9/bits/basic_string.h **** 
5176:/usr/include/c++/9/bits/basic_string.h ****       /**
5177:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Swap contents with another string.
5178:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  String to swap with.
5179:/usr/include/c++/9/bits/basic_string.h ****        *
5180:/usr/include/c++/9/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
5181:/usr/include/c++/9/bits/basic_string.h ****        *  time.
5182:/usr/include/c++/9/bits/basic_string.h ****       */
5183:/usr/include/c++/9/bits/basic_string.h ****       void
5184:/usr/include/c++/9/bits/basic_string.h ****       swap(basic_string& __s)
5185:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value);
5186:/usr/include/c++/9/bits/basic_string.h **** 
5187:/usr/include/c++/9/bits/basic_string.h ****       // String operations:
5188:/usr/include/c++/9/bits/basic_string.h ****       /**
5189:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
5190:/usr/include/c++/9/bits/basic_string.h ****        *
5191:/usr/include/c++/9/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
5192:/usr/include/c++/9/bits/basic_string.h ****        *  happen.
5193:/usr/include/c++/9/bits/basic_string.h ****       */
5194:/usr/include/c++/9/bits/basic_string.h ****       const _CharT*
5195:/usr/include/c++/9/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
5196:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
5197:/usr/include/c++/9/bits/basic_string.h **** 
5198:/usr/include/c++/9/bits/basic_string.h ****       /**
5199:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
5200:/usr/include/c++/9/bits/basic_string.h ****        *
5201:/usr/include/c++/9/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
5202:/usr/include/c++/9/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
5203:/usr/include/c++/9/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
5204:/usr/include/c++/9/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
5205:/usr/include/c++/9/bits/basic_string.h ****       */
5206:/usr/include/c++/9/bits/basic_string.h ****       const _CharT*
5207:/usr/include/c++/9/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
5208:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
5209:/usr/include/c++/9/bits/basic_string.h **** 
5210:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5211:/usr/include/c++/9/bits/basic_string.h ****       /**
5212:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
5213:/usr/include/c++/9/bits/basic_string.h ****        *
5214:/usr/include/c++/9/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
5215:/usr/include/c++/9/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
5216:/usr/include/c++/9/bits/basic_string.h ****       */
5217:/usr/include/c++/9/bits/basic_string.h ****       _CharT*
5218:/usr/include/c++/9/bits/basic_string.h ****       data() noexcept
5219:/usr/include/c++/9/bits/basic_string.h ****       {
5220:/usr/include/c++/9/bits/basic_string.h **** 	_M_leak();
5221:/usr/include/c++/9/bits/basic_string.h **** 	return _M_data();
5222:/usr/include/c++/9/bits/basic_string.h ****       }
5223:/usr/include/c++/9/bits/basic_string.h **** #endif
5224:/usr/include/c++/9/bits/basic_string.h **** 
5225:/usr/include/c++/9/bits/basic_string.h ****       /**
5226:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
5227:/usr/include/c++/9/bits/basic_string.h ****       */
5228:/usr/include/c++/9/bits/basic_string.h ****       allocator_type
5229:/usr/include/c++/9/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
5230:/usr/include/c++/9/bits/basic_string.h ****       { return _M_dataplus; }
5231:/usr/include/c++/9/bits/basic_string.h **** 
5232:/usr/include/c++/9/bits/basic_string.h ****       /**
5233:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a C substring.
5234:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
5235:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5236:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
5237:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5238:/usr/include/c++/9/bits/basic_string.h ****        *
5239:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
5240:/usr/include/c++/9/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5241:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5242:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
5243:/usr/include/c++/9/bits/basic_string.h ****       */
5244:/usr/include/c++/9/bits/basic_string.h ****       size_type
5245:/usr/include/c++/9/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
5246:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5247:/usr/include/c++/9/bits/basic_string.h **** 
5248:/usr/include/c++/9/bits/basic_string.h ****       /**
5249:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a string.
5250:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to locate.
5251:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5252:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5253:/usr/include/c++/9/bits/basic_string.h ****        *
5254:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
5255:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
5256:/usr/include/c++/9/bits/basic_string.h ****        *  found, returns npos.
5257:/usr/include/c++/9/bits/basic_string.h ****       */
5258:/usr/include/c++/9/bits/basic_string.h ****       size_type
5259:/usr/include/c++/9/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
5260:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5261:/usr/include/c++/9/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
5262:/usr/include/c++/9/bits/basic_string.h **** 
5263:/usr/include/c++/9/bits/basic_string.h ****       /**
5264:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a C string.
5265:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
5266:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5267:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5268:/usr/include/c++/9/bits/basic_string.h ****        *
5269:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
5270:/usr/include/c++/9/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
5271:/usr/include/c++/9/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5272:/usr/include/c++/9/bits/basic_string.h ****       */
5273:/usr/include/c++/9/bits/basic_string.h ****       size_type
5274:/usr/include/c++/9/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5275:/usr/include/c++/9/bits/basic_string.h ****       {
5276:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5277:/usr/include/c++/9/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
5278:/usr/include/c++/9/bits/basic_string.h ****       }
5279:/usr/include/c++/9/bits/basic_string.h **** 
5280:/usr/include/c++/9/bits/basic_string.h ****       /**
5281:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character.
5282:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
5283:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5284:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5285:/usr/include/c++/9/bits/basic_string.h ****        *
5286:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
5287:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5288:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
5289:/usr/include/c++/9/bits/basic_string.h ****       */
5290:/usr/include/c++/9/bits/basic_string.h ****       size_type
5291:/usr/include/c++/9/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
5292:/usr/include/c++/9/bits/basic_string.h **** 
5293:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5294:/usr/include/c++/9/bits/basic_string.h ****       /**
5295:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a string_view.
5296:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5297:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5298:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5299:/usr/include/c++/9/bits/basic_string.h ****       */
5300:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5301:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5302:/usr/include/c++/9/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
5303:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5304:/usr/include/c++/9/bits/basic_string.h **** 	{
5305:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5306:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
5307:/usr/include/c++/9/bits/basic_string.h **** 	}
5308:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5309:/usr/include/c++/9/bits/basic_string.h **** 
5310:/usr/include/c++/9/bits/basic_string.h ****       /**
5311:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a string.
5312:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to locate.
5313:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5314:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5315:/usr/include/c++/9/bits/basic_string.h ****        *
5316:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
5317:/usr/include/c++/9/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
5318:/usr/include/c++/9/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5319:/usr/include/c++/9/bits/basic_string.h ****       */
5320:/usr/include/c++/9/bits/basic_string.h ****       size_type
5321:/usr/include/c++/9/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
5322:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5323:/usr/include/c++/9/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
5324:/usr/include/c++/9/bits/basic_string.h **** 
5325:/usr/include/c++/9/bits/basic_string.h ****       /**
5326:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
5327:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
5328:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5329:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5330:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5331:/usr/include/c++/9/bits/basic_string.h ****        *
5332:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
5333:/usr/include/c++/9/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5334:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5335:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
5336:/usr/include/c++/9/bits/basic_string.h ****       */
5337:/usr/include/c++/9/bits/basic_string.h ****       size_type
5338:/usr/include/c++/9/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
5339:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5340:/usr/include/c++/9/bits/basic_string.h **** 
5341:/usr/include/c++/9/bits/basic_string.h ****       /**
5342:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a C string.
5343:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to locate.
5344:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
5345:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
5346:/usr/include/c++/9/bits/basic_string.h ****        *
5347:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
5348:/usr/include/c++/9/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
5349:/usr/include/c++/9/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
5350:/usr/include/c++/9/bits/basic_string.h ****       */
5351:/usr/include/c++/9/bits/basic_string.h ****       size_type
5352:/usr/include/c++/9/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5353:/usr/include/c++/9/bits/basic_string.h ****       {
5354:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5355:/usr/include/c++/9/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
5356:/usr/include/c++/9/bits/basic_string.h ****       }
5357:/usr/include/c++/9/bits/basic_string.h **** 
5358:/usr/include/c++/9/bits/basic_string.h ****       /**
5359:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character.
5360:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
5361:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5362:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5363:/usr/include/c++/9/bits/basic_string.h ****        *
5364:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5365:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5366:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
5367:/usr/include/c++/9/bits/basic_string.h ****       */
5368:/usr/include/c++/9/bits/basic_string.h ****       size_type
5369:/usr/include/c++/9/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
5370:/usr/include/c++/9/bits/basic_string.h **** 
5371:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5372:/usr/include/c++/9/bits/basic_string.h ****       /**
5373:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
5374:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5375:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5376:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5377:/usr/include/c++/9/bits/basic_string.h ****       */
5378:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5379:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5380:/usr/include/c++/9/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
5381:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5382:/usr/include/c++/9/bits/basic_string.h **** 	{
5383:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5384:/usr/include/c++/9/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
5385:/usr/include/c++/9/bits/basic_string.h **** 	}
5386:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5387:/usr/include/c++/9/bits/basic_string.h **** 
5388:/usr/include/c++/9/bits/basic_string.h ****       /**
5389:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of string.
5390:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5391:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5392:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5393:/usr/include/c++/9/bits/basic_string.h ****        *
5394:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5395:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5396:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5397:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
5398:/usr/include/c++/9/bits/basic_string.h ****       */
5399:/usr/include/c++/9/bits/basic_string.h ****       size_type
5400:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
5401:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5402:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
5403:/usr/include/c++/9/bits/basic_string.h **** 
5404:/usr/include/c++/9/bits/basic_string.h ****       /**
5405:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
5406:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5407:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5408:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5409:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5410:/usr/include/c++/9/bits/basic_string.h ****        *
5411:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5412:/usr/include/c++/9/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5413:/usr/include/c++/9/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5414:/usr/include/c++/9/bits/basic_string.h ****        *  returns npos.
5415:/usr/include/c++/9/bits/basic_string.h ****       */
5416:/usr/include/c++/9/bits/basic_string.h ****       size_type
5417:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
5418:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5419:/usr/include/c++/9/bits/basic_string.h **** 
5420:/usr/include/c++/9/bits/basic_string.h ****       /**
5421:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
5422:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5423:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5424:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5425:/usr/include/c++/9/bits/basic_string.h ****        *
5426:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5427:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5428:/usr/include/c++/9/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5429:/usr/include/c++/9/bits/basic_string.h ****       */
5430:/usr/include/c++/9/bits/basic_string.h ****       size_type
5431:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
5432:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5433:/usr/include/c++/9/bits/basic_string.h ****       {
5434:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5435:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
5436:/usr/include/c++/9/bits/basic_string.h ****       }
5437:/usr/include/c++/9/bits/basic_string.h **** 
5438:/usr/include/c++/9/bits/basic_string.h ****       /**
5439:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character.
5440:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
5441:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5442:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5443:/usr/include/c++/9/bits/basic_string.h ****        *
5444:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
5445:/usr/include/c++/9/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
5446:/usr/include/c++/9/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
5447:/usr/include/c++/9/bits/basic_string.h ****        *
5448:/usr/include/c++/9/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
5449:/usr/include/c++/9/bits/basic_string.h ****       */
5450:/usr/include/c++/9/bits/basic_string.h ****       size_type
5451:/usr/include/c++/9/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5452:/usr/include/c++/9/bits/basic_string.h ****       { return this->find(__c, __pos); }
5453:/usr/include/c++/9/bits/basic_string.h **** 
5454:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5455:/usr/include/c++/9/bits/basic_string.h ****       /**
5456:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
5457:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5458:/usr/include/c++/9/bits/basic_string.h ****        *                characters to locate.
5459:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5460:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5461:/usr/include/c++/9/bits/basic_string.h ****       */
5462:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5463:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5464:/usr/include/c++/9/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
5465:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5466:/usr/include/c++/9/bits/basic_string.h **** 	{
5467:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5468:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
5469:/usr/include/c++/9/bits/basic_string.h **** 	}
5470:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5471:/usr/include/c++/9/bits/basic_string.h **** 
5472:/usr/include/c++/9/bits/basic_string.h ****       /**
5473:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5474:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5475:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5476:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5477:/usr/include/c++/9/bits/basic_string.h ****        *
5478:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5479:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5480:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5481:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
5482:/usr/include/c++/9/bits/basic_string.h ****       */
5483:/usr/include/c++/9/bits/basic_string.h ****       size_type
5484:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
5485:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5486:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
5487:/usr/include/c++/9/bits/basic_string.h **** 
5488:/usr/include/c++/9/bits/basic_string.h ****       /**
5489:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
5490:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5491:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5492:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5493:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5494:/usr/include/c++/9/bits/basic_string.h ****        *
5495:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5496:/usr/include/c++/9/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5497:/usr/include/c++/9/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5498:/usr/include/c++/9/bits/basic_string.h ****        *  returns npos.
5499:/usr/include/c++/9/bits/basic_string.h ****       */
5500:/usr/include/c++/9/bits/basic_string.h ****       size_type
5501:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
5502:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5503:/usr/include/c++/9/bits/basic_string.h **** 
5504:/usr/include/c++/9/bits/basic_string.h ****       /**
5505:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
5506:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5507:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5508:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5509:/usr/include/c++/9/bits/basic_string.h ****        *
5510:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5511:/usr/include/c++/9/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5512:/usr/include/c++/9/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5513:/usr/include/c++/9/bits/basic_string.h ****       */
5514:/usr/include/c++/9/bits/basic_string.h ****       size_type
5515:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
5516:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5517:/usr/include/c++/9/bits/basic_string.h ****       {
5518:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5519:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
5520:/usr/include/c++/9/bits/basic_string.h ****       }
5521:/usr/include/c++/9/bits/basic_string.h **** 
5522:/usr/include/c++/9/bits/basic_string.h ****       /**
5523:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character.
5524:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to locate.
5525:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5526:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5527:/usr/include/c++/9/bits/basic_string.h ****        *
5528:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5529:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5530:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
5531:/usr/include/c++/9/bits/basic_string.h ****        *
5532:/usr/include/c++/9/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
5533:/usr/include/c++/9/bits/basic_string.h ****       */
5534:/usr/include/c++/9/bits/basic_string.h ****       size_type
5535:/usr/include/c++/9/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5536:/usr/include/c++/9/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
5537:/usr/include/c++/9/bits/basic_string.h **** 
5538:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5539:/usr/include/c++/9/bits/basic_string.h ****       /**
5540:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5541:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5542:/usr/include/c++/9/bits/basic_string.h ****        *                characters to locate.
5543:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5544:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5545:/usr/include/c++/9/bits/basic_string.h ****       */
5546:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5547:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5548:/usr/include/c++/9/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
5549:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5550:/usr/include/c++/9/bits/basic_string.h **** 	{
5551:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5552:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
5553:/usr/include/c++/9/bits/basic_string.h **** 	}
5554:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5555:/usr/include/c++/9/bits/basic_string.h **** 
5556:/usr/include/c++/9/bits/basic_string.h ****       /**
5557:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
5558:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5559:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5560:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5561:/usr/include/c++/9/bits/basic_string.h ****        *
5562:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
5563:/usr/include/c++/9/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
5564:/usr/include/c++/9/bits/basic_string.h ****        *  was found.  If not found, returns npos.
5565:/usr/include/c++/9/bits/basic_string.h ****       */
5566:/usr/include/c++/9/bits/basic_string.h ****       size_type
5567:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
5568:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5569:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
5570:/usr/include/c++/9/bits/basic_string.h **** 
5571:/usr/include/c++/9/bits/basic_string.h ****       /**
5572:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
5573:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5574:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5575:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
5576:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5577:/usr/include/c++/9/bits/basic_string.h ****        *
5578:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5579:/usr/include/c++/9/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
5580:/usr/include/c++/9/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5581:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
5582:/usr/include/c++/9/bits/basic_string.h ****       */
5583:/usr/include/c++/9/bits/basic_string.h ****       size_type
5584:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
5585:/usr/include/c++/9/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
5586:/usr/include/c++/9/bits/basic_string.h **** 
5587:/usr/include/c++/9/bits/basic_string.h ****       /**
5588:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
5589:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5590:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5591:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5592:/usr/include/c++/9/bits/basic_string.h ****        *
5593:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5594:/usr/include/c++/9/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
5595:/usr/include/c++/9/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5596:/usr/include/c++/9/bits/basic_string.h ****       */
5597:/usr/include/c++/9/bits/basic_string.h ****       size_type
5598:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
5599:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5600:/usr/include/c++/9/bits/basic_string.h ****       {
5601:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5602:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
5603:/usr/include/c++/9/bits/basic_string.h ****       }
5604:/usr/include/c++/9/bits/basic_string.h **** 
5605:/usr/include/c++/9/bits/basic_string.h ****       /**
5606:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a different character.
5607:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to avoid.
5608:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5609:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5610:/usr/include/c++/9/bits/basic_string.h ****        *
5611:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
5612:/usr/include/c++/9/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
5613:/usr/include/c++/9/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
5614:/usr/include/c++/9/bits/basic_string.h ****       */
5615:/usr/include/c++/9/bits/basic_string.h ****       size_type
5616:/usr/include/c++/9/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
5617:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5618:/usr/include/c++/9/bits/basic_string.h **** 
5619:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5620:/usr/include/c++/9/bits/basic_string.h ****       /**
5621:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
5622:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5623:/usr/include/c++/9/bits/basic_string.h ****        *                characters to avoid.
5624:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5625:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of first occurrence.
5626:/usr/include/c++/9/bits/basic_string.h ****        */
5627:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5628:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5629:/usr/include/c++/9/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
5630:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5631:/usr/include/c++/9/bits/basic_string.h **** 	{
5632:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5633:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
5634:/usr/include/c++/9/bits/basic_string.h **** 	}
5635:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5636:/usr/include/c++/9/bits/basic_string.h **** 
5637:/usr/include/c++/9/bits/basic_string.h ****       /**
5638:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
5639:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5640:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5641:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5642:/usr/include/c++/9/bits/basic_string.h ****        *
5643:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5644:/usr/include/c++/9/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
5645:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5646:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
5647:/usr/include/c++/9/bits/basic_string.h ****       */
5648:/usr/include/c++/9/bits/basic_string.h ****       size_type
5649:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
5650:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5651:/usr/include/c++/9/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
5652:/usr/include/c++/9/bits/basic_string.h **** 
5653:/usr/include/c++/9/bits/basic_string.h ****       /**
5654:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
5655:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5656:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5657:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
5658:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5659:/usr/include/c++/9/bits/basic_string.h ****        *
5660:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
5661:/usr/include/c++/9/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
5662:/usr/include/c++/9/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
5663:/usr/include/c++/9/bits/basic_string.h ****        *  returns npos.
5664:/usr/include/c++/9/bits/basic_string.h ****       */
5665:/usr/include/c++/9/bits/basic_string.h ****       size_type
5666:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
5667:/usr/include/c++/9/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
5668:/usr/include/c++/9/bits/basic_string.h ****       /**
5669:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
5670:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5671:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5672:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5673:/usr/include/c++/9/bits/basic_string.h ****        *
5674:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5675:/usr/include/c++/9/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
5676:/usr/include/c++/9/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5677:/usr/include/c++/9/bits/basic_string.h ****        *  npos.
5678:/usr/include/c++/9/bits/basic_string.h ****       */
5679:/usr/include/c++/9/bits/basic_string.h ****       size_type
5680:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
5681:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5682:/usr/include/c++/9/bits/basic_string.h ****       {
5683:/usr/include/c++/9/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5684:/usr/include/c++/9/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
5685:/usr/include/c++/9/bits/basic_string.h ****       }
5686:/usr/include/c++/9/bits/basic_string.h **** 
5687:/usr/include/c++/9/bits/basic_string.h ****       /**
5688:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a different character.
5689:/usr/include/c++/9/bits/basic_string.h ****        *  @param __c  Character to avoid.
5690:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5691:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5692:/usr/include/c++/9/bits/basic_string.h ****        *
5693:/usr/include/c++/9/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
5694:/usr/include/c++/9/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
5695:/usr/include/c++/9/bits/basic_string.h ****        *  found.  If not found, returns npos.
5696:/usr/include/c++/9/bits/basic_string.h ****       */
5697:/usr/include/c++/9/bits/basic_string.h ****       size_type
5698:/usr/include/c++/9/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
5699:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5700:/usr/include/c++/9/bits/basic_string.h **** 
5701:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5702:/usr/include/c++/9/bits/basic_string.h ****       /**
5703:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
5704:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5705:/usr/include/c++/9/bits/basic_string.h ****        *                characters to avoid.
5706:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5707:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Index of last occurrence.
5708:/usr/include/c++/9/bits/basic_string.h ****        */
5709:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5710:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5711:/usr/include/c++/9/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
5712:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5713:/usr/include/c++/9/bits/basic_string.h **** 	{
5714:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5715:/usr/include/c++/9/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
5716:/usr/include/c++/9/bits/basic_string.h **** 	}
5717:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5718:/usr/include/c++/9/bits/basic_string.h **** 
5719:/usr/include/c++/9/bits/basic_string.h ****       /**
5720:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Get a substring.
5721:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
5722:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
5723:/usr/include/c++/9/bits/basic_string.h ****        *  @return  The new string.
5724:/usr/include/c++/9/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5725:/usr/include/c++/9/bits/basic_string.h ****        *
5726:/usr/include/c++/9/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
5727:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
5728:/usr/include/c++/9/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
5729:/usr/include/c++/9/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
5730:/usr/include/c++/9/bits/basic_string.h ****       */
5731:/usr/include/c++/9/bits/basic_string.h ****       basic_string
5732:/usr/include/c++/9/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
5733:/usr/include/c++/9/bits/basic_string.h ****       { return basic_string(*this,
5734:/usr/include/c++/9/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
5735:/usr/include/c++/9/bits/basic_string.h **** 
5736:/usr/include/c++/9/bits/basic_string.h ****       /**
5737:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string.
5738:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to compare against.
5739:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5740:/usr/include/c++/9/bits/basic_string.h ****        *
5741:/usr/include/c++/9/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
5742:/usr/include/c++/9/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
5743:/usr/include/c++/9/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
5744:/usr/include/c++/9/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
5745:/usr/include/c++/9/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
5746:/usr/include/c++/9/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
5747:/usr/include/c++/9/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5748:/usr/include/c++/9/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5749:/usr/include/c++/9/bits/basic_string.h ****       */
5750:/usr/include/c++/9/bits/basic_string.h ****       int
5751:/usr/include/c++/9/bits/basic_string.h ****       compare(const basic_string& __str) const
5752:/usr/include/c++/9/bits/basic_string.h ****       {
5753:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __size = this->size();
5754:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __osize = __str.size();
5755:/usr/include/c++/9/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
5756:/usr/include/c++/9/bits/basic_string.h **** 
5757:/usr/include/c++/9/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
5758:/usr/include/c++/9/bits/basic_string.h **** 	if (!__r)
5759:/usr/include/c++/9/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
5760:/usr/include/c++/9/bits/basic_string.h **** 	return __r;
5761:/usr/include/c++/9/bits/basic_string.h ****       }
5762:/usr/include/c++/9/bits/basic_string.h **** 
5763:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201703L
5764:/usr/include/c++/9/bits/basic_string.h ****       /**
5765:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5766:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
5767:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5768:/usr/include/c++/9/bits/basic_string.h ****        */
5769:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5770:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, int>
5771:/usr/include/c++/9/bits/basic_string.h **** 	compare(const _Tp& __svt) const
5772:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5773:/usr/include/c++/9/bits/basic_string.h **** 	{
5774:/usr/include/c++/9/bits/basic_string.h **** 	   __sv_type __sv = __svt;
5775:/usr/include/c++/9/bits/basic_string.h **** 	  const size_type __size = this->size();
5776:/usr/include/c++/9/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
5777:/usr/include/c++/9/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
5778:/usr/include/c++/9/bits/basic_string.h **** 
5779:/usr/include/c++/9/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
5780:/usr/include/c++/9/bits/basic_string.h **** 	  if (!__r)
5781:/usr/include/c++/9/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
5782:/usr/include/c++/9/bits/basic_string.h **** 	  return __r;
5783:/usr/include/c++/9/bits/basic_string.h **** 	}
5784:/usr/include/c++/9/bits/basic_string.h **** 
5785:/usr/include/c++/9/bits/basic_string.h ****       /**
5786:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5787:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
5788:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
5789:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
5790:/usr/include/c++/9/bits/basic_string.h ****        *                against.
5791:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5792:/usr/include/c++/9/bits/basic_string.h ****        */
5793:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5794:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, int>
5795:/usr/include/c++/9/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
5796:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5797:/usr/include/c++/9/bits/basic_string.h **** 	{
5798:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5799:/usr/include/c++/9/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
5800:/usr/include/c++/9/bits/basic_string.h **** 	}
5801:/usr/include/c++/9/bits/basic_string.h **** 
5802:/usr/include/c++/9/bits/basic_string.h ****       /**
5803:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5804:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
5805:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
5806:/usr/include/c++/9/bits/basic_string.h ****        *  @param __svt   An object convertible to string_view to compare
5807:/usr/include/c++/9/bits/basic_string.h ****        *                 against.
5808:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
5809:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
5810:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5811:/usr/include/c++/9/bits/basic_string.h ****        */
5812:/usr/include/c++/9/bits/basic_string.h ****       template<typename _Tp>
5813:/usr/include/c++/9/bits/basic_string.h **** 	_If_sv<_Tp, int>
5814:/usr/include/c++/9/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
5815:/usr/include/c++/9/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
5816:/usr/include/c++/9/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5817:/usr/include/c++/9/bits/basic_string.h **** 	{
5818:/usr/include/c++/9/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5819:/usr/include/c++/9/bits/basic_string.h **** 	  return __sv_type(*this)
5820:/usr/include/c++/9/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
5821:/usr/include/c++/9/bits/basic_string.h **** 	}
5822:/usr/include/c++/9/bits/basic_string.h **** #endif // C++17
5823:/usr/include/c++/9/bits/basic_string.h **** 
5824:/usr/include/c++/9/bits/basic_string.h ****       /**
5825:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring to a string.
5826:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5827:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
5828:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to compare against.
5829:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5830:/usr/include/c++/9/bits/basic_string.h ****        *
5831:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
5832:/usr/include/c++/9/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
5833:/usr/include/c++/9/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
5834:/usr/include/c++/9/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
5835:/usr/include/c++/9/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
5836:/usr/include/c++/9/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
5837:/usr/include/c++/9/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
5838:/usr/include/c++/9/bits/basic_string.h ****        *  strings by calling
5839:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
5840:/usr/include/c++/9/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
5841:/usr/include/c++/9/bits/basic_string.h ****        *  the shorter one is ordered first.
5842:/usr/include/c++/9/bits/basic_string.h ****       */
5843:/usr/include/c++/9/bits/basic_string.h ****       int
5844:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
5845:/usr/include/c++/9/bits/basic_string.h **** 
5846:/usr/include/c++/9/bits/basic_string.h ****       /**
5847:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
5848:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
5849:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5850:/usr/include/c++/9/bits/basic_string.h ****        *  @param __str  String to compare against.
5851:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
5852:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
5853:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5854:/usr/include/c++/9/bits/basic_string.h ****        *
5855:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5856:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
5857:/usr/include/c++/9/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
5858:/usr/include/c++/9/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
5859:/usr/include/c++/9/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
5860:/usr/include/c++/9/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
5861:/usr/include/c++/9/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
5862:/usr/include/c++/9/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
5863:/usr/include/c++/9/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
5864:/usr/include/c++/9/bits/basic_string.h ****        *  calling
5865:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
5866:/usr/include/c++/9/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5867:/usr/include/c++/9/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5868:/usr/include/c++/9/bits/basic_string.h ****       */
5869:/usr/include/c++/9/bits/basic_string.h ****       int
5870:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
5871:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
5872:/usr/include/c++/9/bits/basic_string.h **** 
5873:/usr/include/c++/9/bits/basic_string.h ****       /**
5874:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare to a C string.
5875:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to compare against.
5876:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5877:/usr/include/c++/9/bits/basic_string.h ****        *
5878:/usr/include/c++/9/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
5879:/usr/include/c++/9/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
5880:/usr/include/c++/9/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
5881:/usr/include/c++/9/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
5882:/usr/include/c++/9/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
5883:/usr/include/c++/9/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
5884:/usr/include/c++/9/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
5885:/usr/include/c++/9/bits/basic_string.h ****        *  ordered first.
5886:/usr/include/c++/9/bits/basic_string.h ****       */
5887:/usr/include/c++/9/bits/basic_string.h ****       int
5888:/usr/include/c++/9/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
5889:/usr/include/c++/9/bits/basic_string.h **** 
5890:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5891:/usr/include/c++/9/bits/basic_string.h ****       // 5 String::compare specification questionable
5892:/usr/include/c++/9/bits/basic_string.h ****       /**
5893:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
5894:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5895:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5896:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  C string to compare against.
5897:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5898:/usr/include/c++/9/bits/basic_string.h ****        *
5899:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5900:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
5901:/usr/include/c++/9/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
5902:/usr/include/c++/9/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
5903:/usr/include/c++/9/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
5904:/usr/include/c++/9/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
5905:/usr/include/c++/9/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
5906:/usr/include/c++/9/bits/basic_string.h ****        *  function then compares the two string by calling
5907:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
5908:/usr/include/c++/9/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5909:/usr/include/c++/9/bits/basic_string.h ****        *  one is ordered first.
5910:/usr/include/c++/9/bits/basic_string.h ****       */
5911:/usr/include/c++/9/bits/basic_string.h ****       int
5912:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
5913:/usr/include/c++/9/bits/basic_string.h **** 
5914:/usr/include/c++/9/bits/basic_string.h ****       /**
5915:/usr/include/c++/9/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
5916:/usr/include/c++/9/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5917:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5918:/usr/include/c++/9/bits/basic_string.h ****        *  @param __s  character %array to compare against.
5919:/usr/include/c++/9/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
5920:/usr/include/c++/9/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5921:/usr/include/c++/9/bits/basic_string.h ****        *
5922:/usr/include/c++/9/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5923:/usr/include/c++/9/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
5924:/usr/include/c++/9/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
5925:/usr/include/c++/9/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
5926:/usr/include/c++/9/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
5927:/usr/include/c++/9/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
5928:/usr/include/c++/9/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
5929:/usr/include/c++/9/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
5930:/usr/include/c++/9/bits/basic_string.h ****        *  function then compares the two strings by calling
5931:/usr/include/c++/9/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
5932:/usr/include/c++/9/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5933:/usr/include/c++/9/bits/basic_string.h ****        *  one is ordered first.
5934:/usr/include/c++/9/bits/basic_string.h ****        *
5935:/usr/include/c++/9/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
5936:/usr/include/c++/9/bits/basic_string.h ****        *  no special meaning.
5937:/usr/include/c++/9/bits/basic_string.h ****       */
5938:/usr/include/c++/9/bits/basic_string.h ****       int
5939:/usr/include/c++/9/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
5940:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2) const;
5941:/usr/include/c++/9/bits/basic_string.h **** 
5942:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus > 201703L
5943:/usr/include/c++/9/bits/basic_string.h ****       bool
5944:/usr/include/c++/9/bits/basic_string.h ****       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept
5945:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5946:/usr/include/c++/9/bits/basic_string.h **** 
5947:/usr/include/c++/9/bits/basic_string.h ****       bool
5948:/usr/include/c++/9/bits/basic_string.h ****       starts_with(_CharT __x) const noexcept
5949:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5950:/usr/include/c++/9/bits/basic_string.h **** 
5951:/usr/include/c++/9/bits/basic_string.h ****       bool
5952:/usr/include/c++/9/bits/basic_string.h ****       starts_with(const _CharT* __x) const noexcept
5953:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5954:/usr/include/c++/9/bits/basic_string.h **** 
5955:/usr/include/c++/9/bits/basic_string.h ****       bool
5956:/usr/include/c++/9/bits/basic_string.h ****       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept
5957:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5958:/usr/include/c++/9/bits/basic_string.h **** 
5959:/usr/include/c++/9/bits/basic_string.h ****       bool
5960:/usr/include/c++/9/bits/basic_string.h ****       ends_with(_CharT __x) const noexcept
5961:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5962:/usr/include/c++/9/bits/basic_string.h **** 
5963:/usr/include/c++/9/bits/basic_string.h ****       bool
5964:/usr/include/c++/9/bits/basic_string.h ****       ends_with(const _CharT* __x) const noexcept
5965:/usr/include/c++/9/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5966:/usr/include/c++/9/bits/basic_string.h **** #endif // C++20
5967:/usr/include/c++/9/bits/basic_string.h **** 
5968:/usr/include/c++/9/bits/basic_string.h **** # ifdef _GLIBCXX_TM_TS_INTERNAL
5969:/usr/include/c++/9/bits/basic_string.h ****       friend void
5970:/usr/include/c++/9/bits/basic_string.h ****       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,
5971:/usr/include/c++/9/bits/basic_string.h **** 					    void* exc);
5972:/usr/include/c++/9/bits/basic_string.h ****       friend const char*
5973:/usr/include/c++/9/bits/basic_string.h ****       ::_txnal_cow_string_c_str(const void *that);
5974:/usr/include/c++/9/bits/basic_string.h ****       friend void
5975:/usr/include/c++/9/bits/basic_string.h ****       ::_txnal_cow_string_D1(void *that);
5976:/usr/include/c++/9/bits/basic_string.h ****       friend void
5977:/usr/include/c++/9/bits/basic_string.h ****       ::_txnal_cow_string_D1_commit(void *that);
5978:/usr/include/c++/9/bits/basic_string.h **** # endif
5979:/usr/include/c++/9/bits/basic_string.h ****   };
5980:/usr/include/c++/9/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
5981:/usr/include/c++/9/bits/basic_string.h **** 
5982:/usr/include/c++/9/bits/basic_string.h **** #if __cpp_deduction_guides >= 201606
5983:/usr/include/c++/9/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
5984:/usr/include/c++/9/bits/basic_string.h ****   template<typename _InputIterator, typename _CharT
5985:/usr/include/c++/9/bits/basic_string.h **** 	     = typename iterator_traits<_InputIterator>::value_type,
5986:/usr/include/c++/9/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5987:/usr/include/c++/9/bits/basic_string.h **** 	   typename = _RequireInputIter<_InputIterator>,
5988:/usr/include/c++/9/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5989:/usr/include/c++/9/bits/basic_string.h ****     basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
5990:/usr/include/c++/9/bits/basic_string.h ****       -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
5991:/usr/include/c++/9/bits/basic_string.h **** 
5992:/usr/include/c++/9/bits/basic_string.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
5993:/usr/include/c++/9/bits/basic_string.h ****   // 3075. basic_string needs deduction guides from basic_string_view
5994:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
5995:/usr/include/c++/9/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5996:/usr/include/c++/9/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5997:/usr/include/c++/9/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
5998:/usr/include/c++/9/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
5999:/usr/include/c++/9/bits/basic_string.h **** 
6000:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
6001:/usr/include/c++/9/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
6002:/usr/include/c++/9/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
6003:/usr/include/c++/9/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>,
6004:/usr/include/c++/9/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
6005:/usr/include/c++/9/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
6006:/usr/include/c++/9/bits/basic_string.h **** 		 const _Allocator& = _Allocator())
6007:/usr/include/c++/9/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
6008:/usr/include/c++/9/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
6009:/usr/include/c++/9/bits/basic_string.h **** #endif
6010:/usr/include/c++/9/bits/basic_string.h **** 
6011:/usr/include/c++/9/bits/basic_string.h ****   // operator+
6012:/usr/include/c++/9/bits/basic_string.h ****   /**
6013:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Concatenate two strings.
6014:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6015:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Last string.
6016:/usr/include/c++/9/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
6017:/usr/include/c++/9/bits/basic_string.h ****    */
6018:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6019:/usr/include/c++/9/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
6020:/usr/include/c++/9/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6021:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6022:/usr/include/c++/9/bits/basic_string.h ****     {
6023:/usr/include/c++/9/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
6024:/usr/include/c++/9/bits/basic_string.h ****       __str.append(__rhs);
6025:/usr/include/c++/9/bits/basic_string.h ****       return __str;
6026:/usr/include/c++/9/bits/basic_string.h ****     }
6027:/usr/include/c++/9/bits/basic_string.h **** 
6028:/usr/include/c++/9/bits/basic_string.h ****   /**
6029:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
6030:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6031:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Last string.
6032:/usr/include/c++/9/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
6033:/usr/include/c++/9/bits/basic_string.h ****    */
6034:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6035:/usr/include/c++/9/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
6036:/usr/include/c++/9/bits/basic_string.h ****     operator+(const _CharT* __lhs,
6037:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
6038:/usr/include/c++/9/bits/basic_string.h **** 
6039:/usr/include/c++/9/bits/basic_string.h ****   /**
6040:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Concatenate character and string.
6041:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6042:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Last string.
6043:/usr/include/c++/9/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
6044:/usr/include/c++/9/bits/basic_string.h ****    */
6045:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6046:/usr/include/c++/9/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
6047:/usr/include/c++/9/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
6048:/usr/include/c++/9/bits/basic_string.h **** 
6049:/usr/include/c++/9/bits/basic_string.h ****   /**
6050:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
6051:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6052:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Last string.
6053:/usr/include/c++/9/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
6054:/usr/include/c++/9/bits/basic_string.h ****    */
6055:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6056:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6057:/usr/include/c++/9/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6058:/usr/include/c++/9/bits/basic_string.h **** 	      const _CharT* __rhs)
6059:/usr/include/c++/9/bits/basic_string.h ****     {
6060:/usr/include/c++/9/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
6061:/usr/include/c++/9/bits/basic_string.h ****       __str.append(__rhs);
6062:/usr/include/c++/9/bits/basic_string.h ****       return __str;
6063:/usr/include/c++/9/bits/basic_string.h ****     }
6064:/usr/include/c++/9/bits/basic_string.h **** 
6065:/usr/include/c++/9/bits/basic_string.h ****   /**
6066:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Concatenate string and character.
6067:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6068:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Last string.
6069:/usr/include/c++/9/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
6070:/usr/include/c++/9/bits/basic_string.h ****    */
6071:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6072:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6073:/usr/include/c++/9/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
6074:/usr/include/c++/9/bits/basic_string.h ****     {
6075:/usr/include/c++/9/bits/basic_string.h ****       typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
6076:/usr/include/c++/9/bits/basic_string.h ****       typedef typename __string_type::size_type		__size_type;
6077:/usr/include/c++/9/bits/basic_string.h ****       __string_type __str(__lhs);
6078:/usr/include/c++/9/bits/basic_string.h ****       __str.append(__size_type(1), __rhs);
6079:/usr/include/c++/9/bits/basic_string.h ****       return __str;
6080:/usr/include/c++/9/bits/basic_string.h ****     }
6081:/usr/include/c++/9/bits/basic_string.h **** 
6082:/usr/include/c++/9/bits/basic_string.h **** #if __cplusplus >= 201103L
6083:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6084:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6085:/usr/include/c++/9/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6086:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6087:/usr/include/c++/9/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
6088:/usr/include/c++/9/bits/basic_string.h **** 
6089:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6090:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6091:/usr/include/c++/9/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6092:/usr/include/c++/9/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6093:/usr/include/c++/9/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
6094:/usr/include/c++/9/bits/basic_string.h **** 
6095:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6096:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6097:/usr/include/c++/9/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6098:/usr/include/c++/9/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6099:/usr/include/c++/9/bits/basic_string.h ****     {
6100:/usr/include/c++/9/bits/basic_string.h ****       const auto __size = __lhs.size() + __rhs.size();
6101:/usr/include/c++/9/bits/basic_string.h ****       const bool __cond = (__size > __lhs.capacity()
6102:/usr/include/c++/9/bits/basic_string.h **** 			   && __size <= __rhs.capacity());
6103:/usr/include/c++/9/bits/basic_string.h ****       return __cond ? std::move(__rhs.insert(0, __lhs))
6104:/usr/include/c++/9/bits/basic_string.h **** 	            : std::move(__lhs.append(__rhs));
6105:/usr/include/c++/9/bits/basic_string.h ****     }
6106:/usr/include/c++/9/bits/basic_string.h **** 
6107:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6108:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6109:/usr/include/c++/9/bits/basic_string.h ****     operator+(const _CharT* __lhs,
6110:/usr/include/c++/9/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6111:/usr/include/c++/9/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
6112:/usr/include/c++/9/bits/basic_string.h **** 
6113:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6114:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6115:/usr/include/c++/9/bits/basic_string.h ****     operator+(_CharT __lhs,
6116:/usr/include/c++/9/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6117:/usr/include/c++/9/bits/basic_string.h ****     { return std::move(__rhs.insert(0, 1, __lhs)); }
6118:/usr/include/c++/9/bits/basic_string.h **** 
6119:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6120:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6121:/usr/include/c++/9/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6122:/usr/include/c++/9/bits/basic_string.h **** 	      const _CharT* __rhs)
6123:/usr/include/c++/9/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
6124:/usr/include/c++/9/bits/basic_string.h **** 
6125:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6126:/usr/include/c++/9/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6127:/usr/include/c++/9/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6128:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT __rhs)
6129:/usr/include/c++/9/bits/basic_string.h ****     { return std::move(__lhs.append(1, __rhs)); }
6130:/usr/include/c++/9/bits/basic_string.h **** #endif
6131:/usr/include/c++/9/bits/basic_string.h **** 
6132:/usr/include/c++/9/bits/basic_string.h ****   // operator ==
6133:/usr/include/c++/9/bits/basic_string.h ****   /**
6134:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test equivalence of two strings.
6135:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6136:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Second string.
6137:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
6138:/usr/include/c++/9/bits/basic_string.h ****    */
6139:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6140:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6141:/usr/include/c++/9/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6142:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6143:/usr/include/c++/9/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6144:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
6145:/usr/include/c++/9/bits/basic_string.h **** 
6146:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT>
6147:/usr/include/c++/9/bits/basic_string.h ****     inline
6148:/usr/include/c++/9/bits/basic_string.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
6149:/usr/include/c++/9/bits/basic_string.h ****     operator==(const basic_string<_CharT>& __lhs,
6150:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
6151:/usr/include/c++/9/bits/basic_string.h ****     { return (__lhs.size() == __rhs.size()
6152:/usr/include/c++/9/bits/basic_string.h **** 	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
6153:/usr/include/c++/9/bits/basic_string.h **** 						    __lhs.size())); }
6154:/usr/include/c++/9/bits/basic_string.h **** 
6155:/usr/include/c++/9/bits/basic_string.h ****   /**
6156:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test equivalence of C string and string.
6157:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  C string.
6158:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  String.
6159:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
6160:/usr/include/c++/9/bits/basic_string.h ****    */
6161:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6162:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6163:/usr/include/c++/9/bits/basic_string.h ****     operator==(const _CharT* __lhs,
6164:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6165:/usr/include/c++/9/bits/basic_string.h ****     { return __rhs.compare(__lhs) == 0; }
6166:/usr/include/c++/9/bits/basic_string.h **** 
6167:/usr/include/c++/9/bits/basic_string.h ****   /**
6168:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test equivalence of string and C string.
6169:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  String.
6170:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  C string.
6171:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
6172:/usr/include/c++/9/bits/basic_string.h ****    */
6173:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6174:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6175:/usr/include/c++/9/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6176:/usr/include/c++/9/bits/basic_string.h **** 	       const _CharT* __rhs)
6177:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
6178:/usr/include/c++/9/bits/basic_string.h **** 
6179:/usr/include/c++/9/bits/basic_string.h ****   // operator !=
6180:/usr/include/c++/9/bits/basic_string.h ****   /**
6181:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test difference of two strings.
6182:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6183:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Second string.
6184:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
6185:/usr/include/c++/9/bits/basic_string.h ****    */
6186:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6187:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6188:/usr/include/c++/9/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6189:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6190:/usr/include/c++/9/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6191:/usr/include/c++/9/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6192:/usr/include/c++/9/bits/basic_string.h **** 
6193:/usr/include/c++/9/bits/basic_string.h ****   /**
6194:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test difference of C string and string.
6195:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  C string.
6196:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  String.
6197:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise.
6198:/usr/include/c++/9/bits/basic_string.h ****    */
6199:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6200:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6201:/usr/include/c++/9/bits/basic_string.h ****     operator!=(const _CharT* __lhs,
6202:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6203:/usr/include/c++/9/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6204:/usr/include/c++/9/bits/basic_string.h **** 
6205:/usr/include/c++/9/bits/basic_string.h ****   /**
6206:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test difference of string and C string.
6207:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  String.
6208:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  C string.
6209:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
6210:/usr/include/c++/9/bits/basic_string.h ****    */
6211:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6212:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6213:/usr/include/c++/9/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6214:/usr/include/c++/9/bits/basic_string.h **** 	       const _CharT* __rhs)
6215:/usr/include/c++/9/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6216:/usr/include/c++/9/bits/basic_string.h **** 
6217:/usr/include/c++/9/bits/basic_string.h ****   // operator <
6218:/usr/include/c++/9/bits/basic_string.h ****   /**
6219:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string precedes string.
6220:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6221:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Second string.
6222:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6223:/usr/include/c++/9/bits/basic_string.h ****    */
6224:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6225:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6226:/usr/include/c++/9/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6227:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6228:/usr/include/c++/9/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6229:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
6230:/usr/include/c++/9/bits/basic_string.h **** 
6231:/usr/include/c++/9/bits/basic_string.h ****   /**
6232:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string precedes C string.
6233:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  String.
6234:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  C string.
6235:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6236:/usr/include/c++/9/bits/basic_string.h ****    */
6237:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6238:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6239:/usr/include/c++/9/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6240:/usr/include/c++/9/bits/basic_string.h **** 	      const _CharT* __rhs)
6241:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
6242:/usr/include/c++/9/bits/basic_string.h **** 
6243:/usr/include/c++/9/bits/basic_string.h ****   /**
6244:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if C string precedes string.
6245:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  C string.
6246:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  String.
6247:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6248:/usr/include/c++/9/bits/basic_string.h ****    */
6249:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6250:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6251:/usr/include/c++/9/bits/basic_string.h ****     operator<(const _CharT* __lhs,
6252:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6253:/usr/include/c++/9/bits/basic_string.h ****     { return __rhs.compare(__lhs) > 0; }
6254:/usr/include/c++/9/bits/basic_string.h **** 
6255:/usr/include/c++/9/bits/basic_string.h ****   // operator >
6256:/usr/include/c++/9/bits/basic_string.h ****   /**
6257:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string follows string.
6258:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6259:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Second string.
6260:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6261:/usr/include/c++/9/bits/basic_string.h ****    */
6262:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6263:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6264:/usr/include/c++/9/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6265:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6266:/usr/include/c++/9/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6267:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
6268:/usr/include/c++/9/bits/basic_string.h **** 
6269:/usr/include/c++/9/bits/basic_string.h ****   /**
6270:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string follows C string.
6271:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  String.
6272:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  C string.
6273:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6274:/usr/include/c++/9/bits/basic_string.h ****    */
6275:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6276:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6277:/usr/include/c++/9/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6278:/usr/include/c++/9/bits/basic_string.h **** 	      const _CharT* __rhs)
6279:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
6280:/usr/include/c++/9/bits/basic_string.h **** 
6281:/usr/include/c++/9/bits/basic_string.h ****   /**
6282:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if C string follows string.
6283:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  C string.
6284:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  String.
6285:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6286:/usr/include/c++/9/bits/basic_string.h ****    */
6287:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6288:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6289:/usr/include/c++/9/bits/basic_string.h ****     operator>(const _CharT* __lhs,
6290:/usr/include/c++/9/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6291:/usr/include/c++/9/bits/basic_string.h ****     { return __rhs.compare(__lhs) < 0; }
6292:/usr/include/c++/9/bits/basic_string.h **** 
6293:/usr/include/c++/9/bits/basic_string.h ****   // operator <=
6294:/usr/include/c++/9/bits/basic_string.h ****   /**
6295:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string doesn't follow string.
6296:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6297:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Second string.
6298:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6299:/usr/include/c++/9/bits/basic_string.h ****    */
6300:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6301:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6302:/usr/include/c++/9/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6303:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6304:/usr/include/c++/9/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6305:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
6306:/usr/include/c++/9/bits/basic_string.h **** 
6307:/usr/include/c++/9/bits/basic_string.h ****   /**
6308:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string doesn't follow C string.
6309:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  String.
6310:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  C string.
6311:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6312:/usr/include/c++/9/bits/basic_string.h ****    */
6313:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6314:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6315:/usr/include/c++/9/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6316:/usr/include/c++/9/bits/basic_string.h **** 	       const _CharT* __rhs)
6317:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
6318:/usr/include/c++/9/bits/basic_string.h **** 
6319:/usr/include/c++/9/bits/basic_string.h ****   /**
6320:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if C string doesn't follow string.
6321:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  C string.
6322:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  String.
6323:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6324:/usr/include/c++/9/bits/basic_string.h ****    */
6325:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6326:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6327:/usr/include/c++/9/bits/basic_string.h ****     operator<=(const _CharT* __lhs,
6328:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6329:/usr/include/c++/9/bits/basic_string.h ****     { return __rhs.compare(__lhs) >= 0; }
6330:/usr/include/c++/9/bits/basic_string.h **** 
6331:/usr/include/c++/9/bits/basic_string.h ****   // operator >=
6332:/usr/include/c++/9/bits/basic_string.h ****   /**
6333:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string doesn't precede string.
6334:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6335:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Second string.
6336:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6337:/usr/include/c++/9/bits/basic_string.h ****    */
6338:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6339:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6340:/usr/include/c++/9/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6341:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6342:/usr/include/c++/9/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6343:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
6344:/usr/include/c++/9/bits/basic_string.h **** 
6345:/usr/include/c++/9/bits/basic_string.h ****   /**
6346:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if string doesn't precede C string.
6347:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  String.
6348:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  C string.
6349:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6350:/usr/include/c++/9/bits/basic_string.h ****    */
6351:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6352:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6353:/usr/include/c++/9/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6354:/usr/include/c++/9/bits/basic_string.h **** 	       const _CharT* __rhs)
6355:/usr/include/c++/9/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
6356:/usr/include/c++/9/bits/basic_string.h **** 
6357:/usr/include/c++/9/bits/basic_string.h ****   /**
6358:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Test if C string doesn't precede string.
6359:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  C string.
6360:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  String.
6361:/usr/include/c++/9/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6362:/usr/include/c++/9/bits/basic_string.h ****    */
6363:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6364:/usr/include/c++/9/bits/basic_string.h ****     inline bool
6365:/usr/include/c++/9/bits/basic_string.h ****     operator>=(const _CharT* __lhs,
6366:/usr/include/c++/9/bits/basic_string.h **** 	     const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6367:/usr/include/c++/9/bits/basic_string.h ****     { return __rhs.compare(__lhs) <= 0; }
6368:/usr/include/c++/9/bits/basic_string.h **** 
6369:/usr/include/c++/9/bits/basic_string.h ****   /**
6370:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Swap contents of two strings.
6371:/usr/include/c++/9/bits/basic_string.h ****    *  @param __lhs  First string.
6372:/usr/include/c++/9/bits/basic_string.h ****    *  @param __rhs  Second string.
6373:/usr/include/c++/9/bits/basic_string.h ****    *
6374:/usr/include/c++/9/bits/basic_string.h ****    *  Exchanges the contents of @a __lhs and @a __rhs in constant time.
6375:/usr/include/c++/9/bits/basic_string.h ****    */
6376:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6377:/usr/include/c++/9/bits/basic_string.h ****     inline void
6378:/usr/include/c++/9/bits/basic_string.h ****     swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
6379:/usr/include/c++/9/bits/basic_string.h **** 	 basic_string<_CharT, _Traits, _Alloc>& __rhs)
6380:/usr/include/c++/9/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))
6381:/usr/include/c++/9/bits/basic_string.h ****     { __lhs.swap(__rhs); }
6382:/usr/include/c++/9/bits/basic_string.h **** 
6383:/usr/include/c++/9/bits/basic_string.h **** 
6384:/usr/include/c++/9/bits/basic_string.h ****   /**
6385:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Read stream into a string.
6386:/usr/include/c++/9/bits/basic_string.h ****    *  @param __is  Input stream.
6387:/usr/include/c++/9/bits/basic_string.h ****    *  @param __str  Buffer to store into.
6388:/usr/include/c++/9/bits/basic_string.h ****    *  @return  Reference to the input stream.
6389:/usr/include/c++/9/bits/basic_string.h ****    *
6390:/usr/include/c++/9/bits/basic_string.h ****    *  Stores characters from @a __is into @a __str until whitespace is
6391:/usr/include/c++/9/bits/basic_string.h ****    *  found, the end of the stream is encountered, or str.max_size()
6392:/usr/include/c++/9/bits/basic_string.h ****    *  is reached.  If is.width() is non-zero, that is the limit on the
6393:/usr/include/c++/9/bits/basic_string.h ****    *  number of characters stored into @a __str.  Any previous
6394:/usr/include/c++/9/bits/basic_string.h ****    *  contents of @a __str are erased.
6395:/usr/include/c++/9/bits/basic_string.h ****    */
6396:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6397:/usr/include/c++/9/bits/basic_string.h ****     basic_istream<_CharT, _Traits>&
6398:/usr/include/c++/9/bits/basic_string.h ****     operator>>(basic_istream<_CharT, _Traits>& __is,
6399:/usr/include/c++/9/bits/basic_string.h **** 	       basic_string<_CharT, _Traits, _Alloc>& __str);
6400:/usr/include/c++/9/bits/basic_string.h **** 
6401:/usr/include/c++/9/bits/basic_string.h ****   template<>
6402:/usr/include/c++/9/bits/basic_string.h ****     basic_istream<char>&
6403:/usr/include/c++/9/bits/basic_string.h ****     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
6404:/usr/include/c++/9/bits/basic_string.h **** 
6405:/usr/include/c++/9/bits/basic_string.h ****   /**
6406:/usr/include/c++/9/bits/basic_string.h ****    *  @brief  Write string to a stream.
6407:/usr/include/c++/9/bits/basic_string.h ****    *  @param __os  Output stream.
6408:/usr/include/c++/9/bits/basic_string.h ****    *  @param __str  String to write out.
6409:/usr/include/c++/9/bits/basic_string.h ****    *  @return  Reference to the output stream.
6410:/usr/include/c++/9/bits/basic_string.h ****    *
6411:/usr/include/c++/9/bits/basic_string.h ****    *  Output characters of @a __str into os following the same rules as for
6412:/usr/include/c++/9/bits/basic_string.h ****    *  writing a C string.
6413:/usr/include/c++/9/bits/basic_string.h ****    */
6414:/usr/include/c++/9/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6415:/usr/include/c++/9/bits/basic_string.h ****     inline basic_ostream<_CharT, _Traits>&
6416:/usr/include/c++/9/bits/basic_string.h ****     operator<<(basic_ostream<_CharT, _Traits>& __os,
 5055              		.loc 2 6416 5 view .LVU1030
 5056              	.LBB5741:
 5057              	.LBB5742:
 5058              	.LBI5742:
2312:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
 5059              		.loc 2 2312 7 view .LVU1031
2312:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
 5060              		.loc 2 2312 7 is_stmt 0 view .LVU1032
 5061              	.LBE5742:
 5062              	# /usr/include/c++/9/bits/basic_string.h:6421:       return __ostream_insert(__os, __str.data(), __
6417:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __str)
6418:/usr/include/c++/9/bits/basic_string.h ****     {
6419:/usr/include/c++/9/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
6420:/usr/include/c++/9/bits/basic_string.h ****       // 586. string inserter not a formatted function
6421:/usr/include/c++/9/bits/basic_string.h ****       return __ostream_insert(__os, __str.data(), __str.size());
 5063              		.loc 2 6421 30 view .LVU1033
 5064 0173 488B5308 		movq	8(%rbx), %rdx	# MEM[(long unsigned int *)args#1_5(D) + 8B], MEM[(long unsigned int *)args#1_5
 5065 0177 488B33   		movq	(%rbx), %rsi	# MEM[(char * *)args#1_5(D)],
 5066 017a 4C89FF   		movq	%r15, %rdi	# tmp202,
 5067 017d E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 5067      00
 5068              	.LVL264:
 5069              	.LEHE9:
 5070              		.loc 2 6421 30 view .LVU1034
 5071              	.LBE5741:
 5072              	.LBE5740:
 5073              	.LBE5739:
 5074              	.LBE5723:
 5075              	.LBB5744:
 5076              	.LBI5744:
 5077              		.loc 12 677 7 is_stmt 1 view .LVU1035
 5078              	.LBB5745:
 5079              	.LBI5745:
 178:/usr/include/c++/9/sstream ****       {
 5080              		.loc 12 178 7 view .LVU1036
 5081              	.LBB5746:
 5082              	.LBB5747:
 5083              	.LBI5747:
2331:/usr/include/c++/9/bits/basic_string.h ****       { return _M_get_allocator(); }
 5084              		.loc 2 2331 7 view .LVU1037
 5085              	.LBB5748:
 5086              	.LBI5748:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 5087              		.loc 5 141 7 view .LVU1038
 5088              	.LBB5749:
 5089              	.LBI5749:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 5090              		.loc 4 83 7 view .LVU1039
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 5091              		.loc 4 83 7 is_stmt 0 view .LVU1040
 5092              	.LBE5749:
 5093              	.LBE5748:
 5094              	.LBE5747:
 5095              	.LBB5750:
 5096              	.LBI5750:
 440:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 5097              		.loc 2 440 7 is_stmt 1 view .LVU1041
 5098              	.LBB5751:
 5099              	.LBI5751:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 5100              		.loc 2 190 7 view .LVU1042
 5101              	.LBE5751:
 5102              	.LBE5750:
 5103              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 5104              		.loc 12 181 2 is_stmt 0 view .LVU1043
 5105 0182 488B4424 		movq	80(%rsp), %rax	# MEM[(char_type * *)&ss + 48B], _42
 5105      50
 5106              	.LBB5767:
 5107              	.LBB5753:
 5108              	.LBB5752:
 5109              	# /usr/include/c++/9/bits/basic_string.h:193: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 5110              		.loc 2 193 51 view .LVU1044
 5111 0187 498D5C24 		leaq	16(%r12), %rbx	#, _41
 5111      10
 5112              	.LVL265:
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 5113              		.loc 2 193 51 view .LVU1045
 5114              	.LBE5752:
 5115              	.LBE5753:
 5116              	.LBB5754:
 5117              	.LBI5754:
 156:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 5118              		.loc 2 156 2 is_stmt 1 view .LVU1046
 5119              	.LBB5755:
 5120              	.LBB5756:
 5121              	.LBI5756:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 5122              		.loc 5 141 7 view .LVU1047
 5123              	.LBB5757:
 5124              	.LBI5757:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 5125              		.loc 4 83 7 view .LVU1048
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 5126              		.loc 4 83 7 is_stmt 0 view .LVU1049
 5127              	.LBE5757:
 5128              	.LBE5756:
 5129              	.LBE5755:
 5130              	.LBE5754:
 5131              	.LBB5759:
 5132              	.LBB5760:
 5133              	.LBB5761:
 5134              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 5135              		.loc 2 183 9 view .LVU1050
 5136 018c 49C74424 		movq	$0, 8(%r12)	#, MEM[(size_type *)_6(D) + 8B]
 5136      08000000 
 5136      00
 5137              	.LBE5761:
 5138              	.LBE5760:
 5139              	.LBE5759:
 5140              	.LBB5765:
 5141              	.LBB5758:
 5142              	# /usr/include/c++/9/bits/basic_string.h:157: 	: allocator_type(__a), _M_p(__dat) { }
 157:/usr/include/c++/9/bits/basic_string.h **** 
 5143              		.loc 2 157 35 view .LVU1051
 5144 0195 49891C24 		movq	%rbx, (%r12)	# _41, MEM[(struct _Alloc_hider *)_6(D)]._M_p
 5145              	.LVL266:
 157:/usr/include/c++/9/bits/basic_string.h **** 
 5146              		.loc 2 157 35 view .LVU1052
 5147              	.LBE5758:
 5148              	.LBE5765:
 5149              	.LBB5766:
 5150              	.LBI5759:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 5151              		.loc 2 214 7 is_stmt 1 view .LVU1053
 5152              	.LBB5762:
 5153              	.LBI5760:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 5154              		.loc 2 182 7 view .LVU1054
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 5155              		.loc 2 182 7 is_stmt 0 view .LVU1055
 5156              	.LBE5762:
 5157              	.LBB5763:
 5158              	.LBI5763:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 5159              		.loc 8 299 7 is_stmt 1 view .LVU1056
 5160              	.LBB5764:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 5161              		.loc 8 300 9 view .LVU1057
 5162              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 5163              		.loc 8 300 14 is_stmt 0 view .LVU1058
 5164 0199 41C64424 		movb	$0, 16(%r12)	#, MEM[(char_type &)_6(D) + 16]
 5164      1000
 5165              	.LVL267:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 5166              		.loc 8 300 14 view .LVU1059
 5167              	.LBE5764:
 5168              	.LBE5763:
 5169              	.LBE5766:
 5170              	.LBE5767:
 5171              	.LBB5768:
 5172              	.LBI5768:
 5173              		.loc 5 153 7 is_stmt 1 view .LVU1060
 5174              	.LBB5769:
 5175              	.LBI5769:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 5176              		.loc 4 89 7 view .LVU1061
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 5177              		.loc 4 89 7 is_stmt 0 view .LVU1062
 5178              	.LBE5769:
 5179              	.LBE5768:
 5180              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 5181              		.loc 12 181 2 view .LVU1063
 5182 019f 4885C0   		testq	%rax, %rax	# _42
 5183 01a2 0F840801 		je	.L141	#,
 5183      0000
 5184              	.LVL268:
 5185              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 5186              		.loc 12 184 23 view .LVU1064
 5187 01a8 4C8B4424 		movq	64(%rsp), %r8	# MEM[(char_type * *)&ss + 32B], _43
 5187      40
 5188              	.LVL269:
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 5189              		.loc 12 184 23 view .LVU1065
 5190 01ad 488B4C24 		movq	72(%rsp), %rcx	# MEM[(char_type * *)&ss + 40B], pretmp_28
 5190      48
 5191              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 5192              		.loc 12 184 6 view .LVU1066
 5193 01b2 4C39C0   		cmpq	%r8, %rax	# _43, _42
 5194 01b5 0F87BD00 		ja	.L158	#,
 5194      0000
 5195              	.LVL270:
 5196              	.LBB5770:
 5197              	.LBI5770:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 5198              		.loc 2 1470 9 is_stmt 1 view .LVU1067
 5199              	.LBB5771:
 5200              	.LBI5771:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 5201              		.loc 2 842 7 view .LVU1068
 5202              	.LBB5772:
 5203              	.LBI5772:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5204              		.loc 17 806 7 view .LVU1069
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5205              		.loc 17 806 7 is_stmt 0 view .LVU1070
 5206              	.LBE5772:
 5207              	.LBE5771:
 5208              	.LBB5773:
 5209              	.LBI5773:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 5210              		.loc 17 811 9 is_stmt 1 view .LVU1071
 5211              	.LBB5774:
 5212              	.LBI5774:
 5213              		.loc 17 871 7 view .LVU1072
 5214              		.loc 17 871 7 is_stmt 0 view .LVU1073
 5215              	.LBE5774:
 5216              	.LBE5773:
 5217              	.LBB5775:
 5218              	.LBI5775:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 5219              		.loc 2 826 7 is_stmt 1 view .LVU1074
 5220              	.LBB5776:
 5221              	.LBI5776:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5222              		.loc 17 806 7 view .LVU1075
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5223              		.loc 17 806 7 is_stmt 0 view .LVU1076
 5224              	.LBE5776:
 5225              	.LBE5775:
 5226              	.LBB5777:
 5227              	.LBI5777:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 5228              		.loc 17 811 9 is_stmt 1 view .LVU1077
 5229              	.LBB5778:
 5230              	.LBI5778:
 5231              		.loc 17 871 7 view .LVU1078
 5232              		.loc 17 871 7 is_stmt 0 view .LVU1079
 5233              	.LBE5778:
 5234              	.LBE5777:
 5235              	.LBB5779:
 5236              	.LBI5779:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 5237              		.loc 2 2123 7 is_stmt 1 view .LVU1080
 5238              	.LBB5780:
 5239              	.LBB5781:
 5240              	.LBI5781:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 5241              		.loc 2 826 7 view .LVU1081
 5242              	.LBB5782:
 5243              	.LBI5782:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5244              		.loc 17 806 7 view .LVU1082
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5245              		.loc 17 806 7 is_stmt 0 view .LVU1083
 5246              	.LBE5782:
 5247              	.LBE5781:
 5248              	.LBB5783:
 5249              	.LBI5783:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 5250              		.loc 2 1936 7 is_stmt 1 view .LVU1084
 5251              	.LBB5784:
 5252              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 5253              		.loc 2 1941 38 is_stmt 0 view .LVU1085
 5254 01bb 4929C8   		subq	%rcx, %r8	# pretmp_28,
 5255              	.LVL271:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 5256              		.loc 2 1941 38 view .LVU1086
 5257 01be 31D2     		xorl	%edx, %edx	#
 5258 01c0 31F6     		xorl	%esi, %esi	#
 5259 01c2 4C89E7   		movq	%r12, %rdi	# <retval>,
 5260              	.LEHB10:
 5261 01c5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 5261      00
 5262              	.LVL272:
 5263              	.L143:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 5264              		.loc 2 1941 38 view .LVU1087
 5265              	.LBE5784:
 5266              	.LBE5783:
 5267              	.LBE5780:
 5268              	.LBE5779:
 5269              	.LBE5770:
 5270              	.LBE5746:
 5271              	.LBE5745:
 5272              	.LBE5744:
 5273              	.LBB5822:
 5274              	.LBI5822:
 629:/usr/include/c++/9/sstream ****       { }
 5275              		.loc 12 629 7 is_stmt 1 view .LVU1088
 5276              	.LBB5823:
 5277              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 5278              		.loc 12 630 9 is_stmt 0 view .LVU1089
 5279 01ca 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp234
 5279      000000
 5280 01d1 C5FA7E15 		vmovq	.LC1(%rip), %xmm2	#, tmp235
 5280      00000000 
 5281              	.LBB5824:
 5282              	.LBB5825:
 5283              	.LBB5826:
 5284              	.LBB5827:
 5285              	.LBB5828:
 5286              	.LBB5829:
 5287              	.LBB5830:
 5288              	.LBB5831:
 5289              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 5290              		.loc 2 222 26 view .LVU1090
 5291 01d9 488B7C24 		movq	112(%rsp), %rdi	# MEM[(char * *)&ss + 80B], _67
 5291      70
 5292              	.LBE5831:
 5293              	.LBE5830:
 5294              	.LBE5829:
 5295              	.LBE5828:
 5296              	.LBE5827:
 5297              	.LBE5826:
 5298              	.LBE5825:
 5299              	.LBE5824:
 5300              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 5301              		.loc 12 630 9 view .LVU1091
 5302 01de 48898424 		movq	%rax, 144(%rsp)	# tmp234, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 5302      90000000 
 5303              	.LVL273:
 5304              	.LBB5850:
 5305              	.LBI5824:
  65:/usr/include/c++/9/sstream ****     {
 5306              		.loc 12 65 11 is_stmt 1 view .LVU1092
 5307              	.LBE5850:
 5308              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 5309              		.loc 12 630 9 is_stmt 0 view .LVU1093
 5310 01e6 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp236
 5310      000000
 5311 01ed C4E3E922 		vpinsrq	$1, %rax, %xmm2, %xmm0	# tmp236, tmp235, tmp177
 5311      C001
 5312 01f3 C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp177, MEM[(int (*) () * *)&ss]
 5312      2420
 5313              	.LVL274:
 5314              	.LBB5851:
 5315              	.LBB5849:
 5316              	.LBB5846:
 5317              	.LBI5826:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 5318              		.loc 2 657 7 is_stmt 1 view .LVU1094
 5319              	.LBB5845:
 5320              	.LBB5841:
 5321              	.LBI5828:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 5322              		.loc 2 229 7 view .LVU1095
 5323              	.LBB5840:
 5324              	.LBB5834:
 5325              	.LBI5830:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5326              		.loc 2 221 7 view .LVU1096
 5327              	.LBB5833:
 5328              	.LBB5832:
 5329              	.LBI5832:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 5330              		.loc 2 200 7 view .LVU1097
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 5331              		.loc 2 200 7 is_stmt 0 view .LVU1098
 5332              	.LBE5832:
 5333              	.LBE5833:
 5334              	.LBE5834:
 5335              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5336              		.loc 2 231 2 view .LVU1099
 5337 01f9 483B7C24 		cmpq	16(%rsp), %rdi	# %sfp, _67
 5337      10
 5338 01fe 7405     		je	.L145	#,
 5339              	.LVL275:
 5340              	.LBB5835:
 5341              	.LBI5835:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 5342              		.loc 2 236 7 is_stmt 1 view .LVU1100
 5343              	.LBB5836:
 5344              	.LBB5837:
 5345              	.LBI5837:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 5346              		.loc 3 469 7 view .LVU1101
 5347              	.LBB5838:
 5348              	.LBI5838:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 5349              		.loc 4 119 7 view .LVU1102
 5350              	.LBB5839:
 5351              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 5352              		.loc 4 128 19 is_stmt 0 view .LVU1103
 5353 0200 E8000000 		call	_ZdlPv@PLT	#
 5353      00
 5354              	.LVL276:
 5355              	.L145:
 5356              		.loc 4 128 19 view .LVU1104
 5357              	.LBE5839:
 5358              	.LBE5838:
 5359              	.LBE5837:
 5360              	.LBE5836:
 5361              	.LBE5835:
 5362              	.LBE5840:
 5363              	.LBE5841:
 5364              	.LBB5842:
 5365              	.LBI5842:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 5366              		.loc 2 150 14 is_stmt 1 view .LVU1105
 5367              	.LBB5843:
 5368              	.LBI5843:
 5369              		.loc 5 153 7 view .LVU1106
 5370              	.LBB5844:
 5371              	.LBI5844:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 5372              		.loc 4 89 7 view .LVU1107
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 5373              		.loc 4 89 7 is_stmt 0 view .LVU1108
 5374              	.LBE5844:
 5375              	.LBE5843:
 5376              	.LBE5842:
 5377              	.LBE5845:
 5378              	.LBE5846:
 5379              	.LBB5847:
 5380              	.LBI5847:
 204:/usr/include/c++/9/streambuf ****       { }
 5381              		.loc 13 204 7 is_stmt 1 view .LVU1109
 5382              	.LBB5848:
 5383              	# /usr/include/c++/9/streambuf:205:       { }
 205:/usr/include/c++/9/streambuf **** 
 5384              		.loc 13 205 9 is_stmt 0 view .LVU1110
 5385 0205 488B7C24 		movq	8(%rsp), %rdi	# %sfp,
 5385      08
 5386 020a 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp238
 5386      000000
 5387 0211 48894424 		movq	%rax, 40(%rsp)	# tmp238, MEM[(struct basic_streambuf *)&ss + 8B]._vptr.basic_streambuf
 5387      28
 5388 0216 E8000000 		call	_ZNSt6localeD1Ev@PLT	#
 5388      00
 5389              	.LVL277:
 205:/usr/include/c++/9/streambuf **** 
 5390              		.loc 13 205 9 view .LVU1111
 5391              	.LBE5848:
 5392              	.LBE5847:
 5393              	.LBE5849:
 5394              	.LBE5851:
 5395              	.LBB5852:
 5396              	.LBI5852:
  93:/usr/include/c++/9/ostream **** 
 5397              		.loc 16 93 7 is_stmt 1 view .LVU1112
 5398              	.LBB5853:
 5399              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 5400              		.loc 16 93 26 is_stmt 0 view .LVU1113
 5401 021b 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 5401      000000
 5402 0222 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 5402      000000
 5403              	.LBE5853:
 5404              	.LBE5852:
 5405              	.LBB5855:
 5406              	.LBB5856:
 5407              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5408              		.loc 15 282 22 view .LVU1114
 5409 0229 4C89EF   		movq	%r13, %rdi	# tmp199,
 5410              	.LBE5856:
 5411              	.LBE5855:
 5412              	.LBB5858:
 5413              	.LBB5854:
 5414              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 5415              		.loc 16 93 26 view .LVU1115
 5416 022c 48894424 		movq	%rax, 32(%rsp)	# tmp239, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 5416      20
 5417 0231 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_21 + -24B], MEM[(long int *)_21 + -24B]
 5418 0235 48894C04 		movq	%rcx, 32(%rsp,%rax)	# tmp241, _64->D.34155._vptr.ios_base
 5418      20
 5419              	.LVL278:
  93:/usr/include/c++/9/ostream **** 
 5420              		.loc 16 93 26 view .LVU1116
 5421              	.LBE5854:
 5422              	.LBE5858:
 5423              	.LBB5859:
 5424              	.LBI5855:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5425              		.loc 15 282 7 is_stmt 1 view .LVU1117
 5426              	.LBB5857:
 5427              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5428              		.loc 15 282 22 is_stmt 0 view .LVU1118
 5429 023a 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp242
 5429      000000
 5430 0241 48898424 		movq	%rax, 144(%rsp)	# tmp242, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 5430      90000000 
 5431 0249 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 5431      00
 5432              	.LVL279:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5433              		.loc 15 282 22 view .LVU1119
 5434              	.LBE5857:
 5435              	.LBE5859:
 5436              	.LBE5823:
 5437              	.LBE5822:
 5438              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
 5439              		.loc 14 54 3 view .LVU1120
 5440 024e 488B8424 		movq	408(%rsp), %rax	# D.445218, tmp213
 5440      98010000 
 5441 0256 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp213
 5441      25280000 
 5441      00
 5442 025f 7561     		jne	.L159	#,
 5443 0261 488D65D8 		leaq	-40(%rbp), %rsp	#,
 5444              	.LVL280:
 5445              		.loc 14 54 3 view .LVU1121
 5446 0265 4C89E0   		movq	%r12, %rax	# <retval>,
 5447 0268 5B       		popq	%rbx	#
 5448 0269 415C     		popq	%r12	#
 5449              	.LVL281:
 5450              		.loc 14 54 3 view .LVU1122
 5451 026b 415D     		popq	%r13	#
 5452 026d 415E     		popq	%r14	#
 5453 026f 415F     		popq	%r15	#
 5454              	.LVL282:
 5455              		.loc 14 54 3 view .LVU1123
 5456 0271 5D       		popq	%rbp	#
 5457              		.cfi_remember_state
 5458              		.cfi_def_cfa 7, 8
 5459              	.LVL283:
 5460              		.loc 14 54 3 view .LVU1124
 5461 0272 C3       		ret	
 5462              	.LVL284:
 5463              		.p2align 4,,10
 5464 0273 0F1F4400 		.p2align 3
 5464      00
 5465              	.L158:
 5466              		.cfi_restore_state
 5467              	.LBB5860:
 5468              	.LBB5819:
 5469              	.LBB5816:
 5470              	.LBB5785:
 5471              	.LBI5785:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 5472              		.loc 2 1470 9 is_stmt 1 view .LVU1125
 5473              	.LBB5786:
 5474              	.LBI5786:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 5475              		.loc 2 842 7 view .LVU1126
 5476              	.LBB5787:
 5477              	.LBI5787:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5478              		.loc 17 806 7 view .LVU1127
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5479              		.loc 17 806 7 is_stmt 0 view .LVU1128
 5480              	.LBE5787:
 5481              	.LBE5786:
 5482              	.LBB5788:
 5483              	.LBI5788:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 5484              		.loc 17 811 9 is_stmt 1 view .LVU1129
 5485              	.LBB5789:
 5486              	.LBI5789:
 5487              		.loc 17 871 7 view .LVU1130
 5488              		.loc 17 871 7 is_stmt 0 view .LVU1131
 5489              	.LBE5789:
 5490              	.LBE5788:
 5491              	.LBB5790:
 5492              	.LBI5790:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 5493              		.loc 2 826 7 is_stmt 1 view .LVU1132
 5494              	.LBB5791:
 5495              	.LBI5791:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5496              		.loc 17 806 7 view .LVU1133
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5497              		.loc 17 806 7 is_stmt 0 view .LVU1134
 5498              	.LBE5791:
 5499              	.LBE5790:
 5500              	.LBB5792:
 5501              	.LBI5792:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 5502              		.loc 17 811 9 is_stmt 1 view .LVU1135
 5503              	.LBB5793:
 5504              	.LBI5793:
 5505              		.loc 17 871 7 view .LVU1136
 5506              		.loc 17 871 7 is_stmt 0 view .LVU1137
 5507              	.LBE5793:
 5508              	.LBE5792:
 5509              	.LBB5794:
 5510              	.LBI5794:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 5511              		.loc 2 2123 7 is_stmt 1 view .LVU1138
 5512              	.LBB5795:
 5513              	.LBB5796:
 5514              	.LBI5796:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 5515              		.loc 2 826 7 view .LVU1139
 5516              	.LBB5797:
 5517              	.LBI5797:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5518              		.loc 17 806 7 view .LVU1140
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 5519              		.loc 17 806 7 is_stmt 0 view .LVU1141
 5520              	.LBE5797:
 5521              	.LBE5796:
 5522              	.LBB5798:
 5523              	.LBI5798:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 5524              		.loc 2 1936 7 is_stmt 1 view .LVU1142
 5525              	.LBB5799:
 5526              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 5527              		.loc 2 1941 38 is_stmt 0 view .LVU1143
 5528 0278 4829C8   		subq	%rcx, %rax	# pretmp_28, _42
 5529              	.LVL285:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 5530              		.loc 2 1941 38 view .LVU1144
 5531 027b 31D2     		xorl	%edx, %edx	#
 5532 027d 31F6     		xorl	%esi, %esi	#
 5533 027f 4C89E7   		movq	%r12, %rdi	# <retval>,
 5534 0282 4989C0   		movq	%rax, %r8	# _42,
 5535 0285 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 5535      00
 5536              	.LVL286:
 5537              	.LEHE10:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 5538              		.loc 2 1941 38 view .LVU1145
 5539 028a E93BFFFF 		jmp	.L143	#
 5539      FF
 5540              	.LVL287:
 5541 028f 90       		.p2align 4,,10
 5542              		.p2align 3
 5543              	.L157:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 5544              		.loc 2 1941 38 view .LVU1146
 5545              	.LBE5799:
 5546              	.LBE5798:
 5547              	.LBE5795:
 5548              	.LBE5794:
 5549              	.LBE5785:
 5550              	.LBE5816:
 5551              	.LBE5819:
 5552              	.LBE5860:
 5553              	.LBB5861:
 5554              	.LBB5743:
 5555              	.LBB5738:
 5556              	.LBB5737:
 5557              	.LBB5731:
 5558              	.LBI5731:
 565:/usr/include/c++/9/ostream ****     {
 5559              		.loc 16 565 5 is_stmt 1 view .LVU1147
 5560              	.LBB5732:
 5561              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 5562              		.loc 16 568 2 is_stmt 0 view .LVU1148
 5563 0290 488B4424 		movq	32(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 5563      20
 5564 0295 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_34 + -24B], _37
 5565 0299 4C01FF   		addq	%r15, %rdi	# tmp202, _37
 5566              	.LVL288:
 5567              	.LBB5733:
 5568              	.LBI5733:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 5569              		.loc 15 157 7 is_stmt 1 view .LVU1149
 5570              	.LBB5734:
 5571              	.LBB5735:
 5572              	.LBI5735:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 5573              		.loc 18 169 3 view .LVU1150
 5574              	.LBB5736:
 5575              		.loc 18 170 5 view .LVU1151
 5576              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 5577              		.loc 18 170 70 is_stmt 0 view .LVU1152
 5578 029c 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_37 + 32B], tmp164
 5579 029f 83CE01   		orl	$1, %esi	#, tmp164
 5580              	.LEHB11:
 5581              	.LBE5736:
 5582              	.LBE5735:
 5583              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 5584              		.loc 15 158 9 view .LVU1153
 5585 02a2 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 5585      00
 5586              	.LVL289:
 5587              	.LEHE11:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 5588              		.loc 15 158 9 view .LVU1154
 5589 02a7 E9C7FEFF 		jmp	.L140	#
 5589      FF
 5590              	.LVL290:
 5591 02ac 0F1F4000 		.p2align 4,,10
 5592              		.p2align 3
 5593              	.L141:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 5594              		.loc 15 158 9 view .LVU1155
 5595              	.LBE5734:
 5596              	.LBE5733:
 5597              	.LBE5732:
 5598              	.LBE5731:
 5599              	.LBE5737:
 5600              	.LBE5738:
 5601              	.LBE5743:
 5602              	.LBE5861:
 5603              	.LBB5862:
 5604              	.LBB5820:
 5605              	.LBB5817:
 5606              	.LBB5800:
 5607              	.LBI5800:
 665:/usr/include/c++/9/bits/basic_string.h ****       {
 5608              		.loc 2 665 7 is_stmt 1 view .LVU1156
 5609              	.LBB5801:
 5610              	.LBI5801:
1364:/usr/include/c++/9/bits/basic_string.h ****       {
 5611              		.loc 2 1364 7 view .LVU1157
 5612              	.LBB5802:
 5613              	# /usr/include/c++/9/bits/basic_string.h:1366: 	this->_M_assign(__str);
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 5614              		.loc 2 1366 2 is_stmt 0 view .LVU1158
 5615 02b0 488D7424 		leaq	112(%rsp), %rsi	#, tmp175
 5615      70
 5616              	.LVL291:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 5617              		.loc 2 1366 2 view .LVU1159
 5618 02b5 4C89E7   		movq	%r12, %rdi	# <retval>,
 5619              	.LEHB12:
 5620 02b8 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT	#
 5620      00
 5621              	.LVL292:
 5622              	.LEHE12:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 5623              		.loc 2 1366 2 view .LVU1160
 5624 02bd E908FFFF 		jmp	.L143	#
 5624      FF
 5625              	.LVL293:
 5626              	.L159:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 5627              		.loc 2 1366 2 view .LVU1161
 5628              	.LBE5802:
 5629              	.LBE5801:
 5630              	.LBE5800:
 5631              	.LBE5817:
 5632              	.LBE5820:
 5633              	.LBE5862:
 5634              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
 5635              		.loc 14 54 3 view .LVU1162
 5636 02c2 E8000000 		call	__stack_chk_fail@PLT	#
 5636      00
 5637              	.LVL294:
 5638              	.L150:
 5639              		.loc 14 54 3 view .LVU1163
 5640 02c7 F30F1EFA 		endbr64	
 5641 02cb 4989C5   		movq	%rax, %r13	# tmp211, tmp181
 5642 02ce EB1A     		jmp	.L148	#
 5643              	.LVL295:
 5644              	.L152:
 5645              		.loc 14 54 3 view .LVU1164
 5646 02d0 F30F1EFA 		endbr64	
 5647 02d4 4889C3   		movq	%rax, %rbx	# tmp207, tmp152
 5648              	.LVL296:
 5649              		.loc 14 54 3 view .LVU1165
 5650 02d7 EB24     		jmp	.L137	#
 5651              	.LVL297:
 5652              	.L146:
 5653              	.LBB5863:
 5654              	.LBB5821:
 5655              	.LBB5818:
 5656              	.LBB5803:
 5657              	.LBI5803:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 5658              		.loc 2 657 7 is_stmt 1 view .LVU1166
 5659              	.LBB5804:
 5660              	.LBI5804:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 5661              		.loc 2 229 7 view .LVU1167
 5662              	.LBB5805:
 5663              	.LBB5806:
 5664              	.LBI5806:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5665              		.loc 2 221 7 view .LVU1168
 5666              	.LBB5807:
 5667              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 5668              		.loc 2 222 26 is_stmt 0 view .LVU1169
 5669 02d9 498B3C24 		movq	(%r12), %rdi	# MEM[(char * *)_6(D)], _50
 5670              	.LVL298:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 5671              		.loc 2 222 26 view .LVU1170
 5672              	.LBE5807:
 5673              	.LBE5806:
 5674              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5675              		.loc 2 231 2 view .LVU1171
 5676 02dd 4839FB   		cmpq	%rdi, %rbx	# _50, _41
 5677 02e0 7408     		je	.L148	#,
 5678              	.LVL299:
 5679              	.LBB5808:
 5680              	.LBI5808:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 5681              		.loc 2 236 7 is_stmt 1 view .LVU1172
 5682              	.LBB5809:
 5683              	.LBB5810:
 5684              	.LBI5810:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 5685              		.loc 3 469 7 view .LVU1173
 5686              	.LBB5811:
 5687              	.LBI5811:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 5688              		.loc 4 119 7 view .LVU1174
 5689              	.LBB5812:
 5690              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 5691              		.loc 4 128 19 is_stmt 0 view .LVU1175
 5692 02e2 C5F877   		vzeroupper
 5693 02e5 E8000000 		call	_ZdlPv@PLT	#
 5693      00
 5694              	.LVL300:
 5695              		.loc 4 128 19 view .LVU1176
 5696              	.LBE5812:
 5697              	.LBE5811:
 5698              	.LBE5810:
 5699              	.LBE5809:
 5700              	.LBE5808:
 5701              	.LBE5805:
 5702              	.LBE5804:
 5703              	.LBB5813:
 5704              	.LBI5813:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 5705              		.loc 2 150 14 is_stmt 1 view .LVU1177
 5706              	.LBB5814:
 5707              	.LBI5814:
 5708              		.loc 5 153 7 view .LVU1178
 5709              	.LBB5815:
 5710              	.LBI5815:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 5711              		.loc 4 89 7 view .LVU1179
 5712              	.L148:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 5713              		.loc 4 89 7 is_stmt 0 view .LVU1180
 5714              	.LBE5815:
 5715              	.LBE5814:
 5716              	.LBE5813:
 5717              	.LBE5803:
 5718              	.LBE5818:
 5719              	.LBE5821:
 5720              	.LBE5863:
 5721              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:51:     std::ostringstream ss;
  51:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     _str(ss, args...);
 5722              		.loc 14 51 24 view .LVU1181
 5723 02ea 4C89FF   		movq	%r15, %rdi	# tmp202,
 5724 02ed C5F877   		vzeroupper
 5725 02f0 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 5725      00
 5726              	.LVL301:
 5727 02f5 4C89EF   		movq	%r13, %rdi	# tmp181,
 5728              	.LEHB13:
 5729 02f8 E8000000 		call	_Unwind_Resume@PLT	#
 5729      00
 5730              	.LVL302:
 5731              	.L137:
 5732              	.LBB5864:
 5733              	.LBB5721:
 5734              	.LBB5719:
 5735              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 5736              		.loc 12 584 53 view .LVU1182
 5737 02fd 4C89F7   		movq	%r14, %rdi	# tmp203,
 5738 0300 C5F877   		vzeroupper
 5739 0303 E8000000 		call	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev	#
 5739      00
 5740              	.LVL303:
 5741              	.LBB5714:
 5742              	.LBI5714:
  93:/usr/include/c++/9/ostream **** 
 5743              		.loc 16 93 7 is_stmt 1 view .LVU1183
 5744              	.LBB5715:
 5745              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 5746              		.loc 16 93 26 is_stmt 0 view .LVU1184
 5747 0308 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 5747      000000
 5748 030f 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 5748      000000
 5749 0316 48894424 		movq	%rax, 32(%rsp)	# tmp226, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 5749      20
 5750 031b 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_21 + -24B], MEM[(long int *)_21 + -24B]
 5751 031f 48894C04 		movq	%rcx, 32(%rsp,%rax)	# tmp228, *_33.D.34155._vptr.ios_base
 5751      20
 5752              	.LVL304:
 5753              	.L138:
  93:/usr/include/c++/9/ostream **** 
 5754              		.loc 16 93 26 view .LVU1185
 5755              	.LBE5715:
 5756              	.LBE5714:
 5757              	.LBB5716:
 5758              	.LBI5716:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5759              		.loc 15 282 7 is_stmt 1 view .LVU1186
 5760              	.LBB5717:
 5761              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5762              		.loc 15 282 22 is_stmt 0 view .LVU1187
 5763 0324 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp229
 5763      000000
 5764 032b 4C89EF   		movq	%r13, %rdi	# tmp199,
 5765 032e 48898424 		movq	%rax, 144(%rsp)	# tmp229, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 5765      90000000 
 5766 0336 C5F877   		vzeroupper
 5767 0339 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 5767      00
 5768              	.LVL305:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5769              		.loc 15 282 22 view .LVU1188
 5770 033e 4889DF   		movq	%rbx, %rdi	# tmp156,
 5771 0341 E8000000 		call	_Unwind_Resume@PLT	#
 5771      00
 5772              	.LVL306:
 5773              	.LEHE13:
 5774              	.L151:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5775              		.loc 15 282 22 view .LVU1189
 5776 0346 F30F1EFA 		endbr64	
 5777 034a 4889C3   		movq	%rax, %rbx	# tmp208, tmp156
 5778              	.LVL307:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5779              		.loc 15 282 22 view .LVU1190
 5780 034d EBD5     		jmp	.L138	#
 5781              	.LVL308:
 5782              	.L153:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 5783              		.loc 15 282 22 view .LVU1191
 5784 034f F30F1EFA 		endbr64	
 5785 0353 4989C5   		movq	%rax, %r13	# tmp210, tmp182
 5786 0356 EB81     		jmp	.L146	#
 5787              	.LBE5717:
 5788              	.LBE5716:
 5789              	.LBE5719:
 5790              	.LBE5721:
 5791              	.LBE5864:
 5792              		.cfi_endproc
 5793              	.LFE11994:
 5794              		.section	.gcc_except_table._ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_
 5795              	.LLSDA11994:
 5796 0000 FF       		.byte	0xff
 5797 0001 FF       		.byte	0xff
 5798 0002 01       		.byte	0x1
 5799 0003 2A       		.uleb128 .LLSDACSE11994-.LLSDACSB11994
 5800              	.LLSDACSB11994:
 5801 0004 AE01     		.uleb128 .LEHB7-.LFB11994
 5802 0006 05       		.uleb128 .LEHE7-.LEHB7
 5803 0007 C606     		.uleb128 .L151-.LFB11994
 5804 0009 00       		.uleb128 0
 5805 000a C702     		.uleb128 .LEHB8-.LFB11994
 5806 000c 05       		.uleb128 .LEHE8-.LEHB8
 5807 000d D005     		.uleb128 .L152-.LFB11994
 5808 000f 00       		.uleb128 0
 5809 0010 EE02     		.uleb128 .LEHB9-.LFB11994
 5810 0012 14       		.uleb128 .LEHE9-.LEHB9
 5811 0013 C705     		.uleb128 .L150-.LFB11994
 5812 0015 00       		.uleb128 0
 5813 0016 C503     		.uleb128 .LEHB10-.LFB11994
 5814 0018 C501     		.uleb128 .LEHE10-.LEHB10
 5815 001a CF06     		.uleb128 .L153-.LFB11994
 5816 001c 00       		.uleb128 0
 5817 001d A205     		.uleb128 .LEHB11-.LFB11994
 5818 001f 05       		.uleb128 .LEHE11-.LEHB11
 5819 0020 C705     		.uleb128 .L150-.LFB11994
 5820 0022 00       		.uleb128 0
 5821 0023 B805     		.uleb128 .LEHB12-.LFB11994
 5822 0025 05       		.uleb128 .LEHE12-.LEHB12
 5823 0026 CF06     		.uleb128 .L153-.LFB11994
 5824 0028 00       		.uleb128 0
 5825 0029 F805     		.uleb128 .LEHB13-.LFB11994
 5826 002b 4E       		.uleb128 .LEHE13-.LEHB13
 5827 002c 00       		.uleb128 0
 5828 002d 00       		.uleb128 0
 5829              	.LLSDACSE11994:
 5830              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 5832              		.section	.rodata._ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_.
 5833              	.LC2:
 5834 0000 42466C6F 		.string	"BFloat16"
 5834      61743136 
 5834      00
 5835              	.LC3:
 5836 0009 5155496E 		.string	"QUInt4x2"
 5836      74347832 
 5836      00
 5837              	.LC4:
 5838 0012 554E4B4E 		.string	"UNKNOWN_SCALAR"
 5838      4F574E5F 
 5838      5343414C 
 5838      415200
 5839              	.LC5:
 5840 0021 43686172 		.string	"Char"
 5840      00
 5841              	.LC6:
 5842 0026 42797465 		.string	"Byte"
 5842      00
 5843              	.LC7:
 5844 002b 496E7400 		.string	"Int"
 5845              	.LC8:
 5846 002f 4C6F6E67 		.string	"Long"
 5846      00
 5847              	.LC9:
 5848 0034 48616C66 		.string	"Half"
 5848      00
 5849              	.LC10:
 5850 0039 466C6F61 		.string	"Float"
 5850      7400
 5851              	.LC11:
 5852 003f 446F7562 		.string	"Double"
 5852      6C6500
 5853              	.LC12:
 5854 0046 436F6D70 		.string	"ComplexHalf"
 5854      6C657848 
 5854      616C6600 
 5855              	.LC13:
 5856 0052 436F6D70 		.string	"ComplexFloat"
 5856      6C657846 
 5856      6C6F6174 
 5856      00
 5857              	.LC14:
 5858 005f 436F6D70 		.string	"ComplexDouble"
 5858      6C657844 
 5858      6F75626C 
 5858      6500
 5859              	.LC15:
 5860 006d 426F6F6C 		.string	"Bool"
 5860      00
 5861              	.LC16:
 5862 0072 51496E74 		.string	"QInt8"
 5862      3800
 5863              	.LC17:
 5864 0078 5155496E 		.string	"QUInt8"
 5864      743800
 5865              	.LC18:
 5866 007f 51496E74 		.string	"QInt32"
 5866      333200
 5867              	.LC19:
 5868 0086 53686F72 		.string	"Short"
 5868      7400
 5869              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_,"a
 5870              		.p2align 4
 5871              		.weak	_ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_
 5873              	_ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_:
 5874              	.LVL309:
 5875              	.LFB12256:
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 5876              		.loc 14 50 22 is_stmt 1 view -0
 5877              		.cfi_startproc
 5878              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5879              		.cfi_lsda 0x1b,.LLSDA12256
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 5880              		.loc 14 50 22 is_stmt 0 view .LVU1193
 5881 0000 F30F1EFA 		endbr64	
 5882 0004 55       		pushq	%rbp	#
 5883              		.cfi_def_cfa_offset 16
 5884              		.cfi_offset 6, -16
 5885 0005 4889E5   		movq	%rsp, %rbp	#,
 5886              		.cfi_def_cfa_register 6
 5887 0008 4157     		pushq	%r15	#
 5888 000a 4156     		pushq	%r14	#
 5889 000c 4155     		pushq	%r13	#
 5890 000e 4154     		pushq	%r12	#
 5891              		.cfi_offset 15, -24
 5892              		.cfi_offset 14, -32
 5893              		.cfi_offset 13, -40
 5894              		.cfi_offset 12, -48
 5895 0010 4989FC   		movq	%rdi, %r12	# tmp228, <retval>
 5896 0013 53       		pushq	%rbx	#
 5897              		.cfi_offset 3, -56
 5898 0014 4889D3   		movq	%rdx, %rbx	# tmp230, args#1
 5899 0017 4883E4E0 		andq	$-32, %rsp	#,
 5900 001b 4881ECA0 		subq	$416, %rsp	#,
 5900      010000
 5901              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 5902              		.loc 14 50 22 view .LVU1194
 5903 0022 48897424 		movq	%rsi, 24(%rsp)	# tmp229, %sfp
 5903      18
 5904              	.LBB6055:
 5905              	.LBB6056:
 5906              	.LBB6057:
 5907              	.LBB6058:
 5908              	.LBB6059:
 5909              	.LBB6060:
 5910              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 5911              		.loc 15 462 59 view .LVU1195
 5912 0027 4C8DB424 		leaq	144(%rsp), %r14	#, tmp222
 5912      90000000 
 5913 002f 4C8D6C24 		leaq	32(%rsp), %r13	#, tmp220
 5913      20
 5914              	.LBE6060:
 5915              	.LBE6059:
 5916              	.LBE6058:
 5917              	.LBE6057:
 5918              	.LBE6056:
 5919              	.LBE6055:
 5920              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 5921              		.loc 14 50 22 view .LVU1196
 5922 0034 48894C24 		movq	%rcx, 16(%rsp)	# tmp231, %sfp
 5922      10
 5923              	.LBB6144:
 5924              	.LBB6141:
 5925              	.LBB6138:
 5926              	.LBB6073:
 5927              	.LBB6067:
 5928              	.LBB6061:
 5929              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 5930              		.loc 15 462 59 view .LVU1197
 5931 0039 4C89F7   		movq	%r14, %rdi	# tmp222,
 5932              	.LVL310:
 5933              		.loc 15 462 59 view .LVU1198
 5934              	.LBE6061:
 5935              	.LBE6067:
 5936              	.LBE6073:
 5937              	.LBE6138:
 5938              	.LBE6141:
 5939              	.LBE6144:
 5940              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 5941              		.loc 14 50 22 view .LVU1199
 5942 003c 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp238
 5942      25280000 
 5942      00
 5943 0045 48898424 		movq	%rax, 408(%rsp)	# tmp238, D.445488
 5943      98010000 
 5944 004d 31C0     		xorl	%eax, %eax	# tmp238
 5945              	.LVL311:
 5946              	.LBB6145:
 5947              	.LBI6055:
 583:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 5948              		.loc 12 583 7 is_stmt 1 view .LVU1200
 5949              	.LBB6142:
 5950              	.LBB6139:
 5951              	.LBB6074:
 5952              	.LBI6058:
 460:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 5953              		.loc 15 460 7 view .LVU1201
 5954              	.LBB6068:
 5955              	.LBB6062:
 5956              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 5957              		.loc 15 462 59 is_stmt 0 view .LVU1202
 5958 004f E8000000 		call	_ZNSt8ios_baseC2Ev@PLT	#
 5958      00
 5959              	.LVL312:
 5960              		.loc 15 462 59 view .LVU1203
 5961 0054 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp240
 5961      000000
 5962 005b C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp139
 5963              	.LBE6062:
 5964              	.LBE6068:
 5965              	.LBE6074:
 5966              	.LBB6075:
 5967              	.LBB6076:
 5968              	.LBB6077:
 5969              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 5970              		.loc 16 391 9 view .LVU1204
 5971 005f 31F6     		xorl	%esi, %esi	#
 5972              	.LBE6077:
 5973              	.LBE6076:
 5974              	.LBE6075:
 5975              	.LBB6084:
 5976              	.LBB6069:
 5977              	.LBB6063:
 5978              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 5979              		.loc 15 462 59 view .LVU1205
 5980 0061 48898424 		movq	%rax, 144(%rsp)	# tmp240, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 5980      90000000 
 5981 0069 31C0     		xorl	%eax, %eax	#
 5982 006b C4E37D39 		vextracti128	$0x1, %ymm0, 392(%rsp)	# tmp139, MEM[(void *)&ss + 344B]
 5982      84248801 
 5982      000001
 5983              	.LVL313:
 5984              		.loc 15 462 59 view .LVU1206
 5985              	.LBE6063:
 5986              	.LBE6069:
 5987              	.LBE6084:
 5988              	.LBB6085:
 5989              	.LBI6075:
 390:/usr/include/c++/9/ostream ****       { this->init(0); }
 5990              		.loc 16 390 7 is_stmt 1 view .LVU1207
 5991              	.LBE6085:
 5992              	.LBB6086:
 5993              	.LBB6070:
 5994              	.LBB6064:
 5995              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 5996              		.loc 15 462 59 is_stmt 0 view .LVU1208
 5997 0076 66898424 		movw	%ax, 368(%rsp)	#, MEM[(void *)&ss + 336B]
 5997      70010000 
 5998              	.LBE6064:
 5999              	.LBE6070:
 6000              	.LBE6086:
 6001              	.LBB6087:
 6002              	.LBB6081:
 6003              	.LBB6078:
 6004              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 6005              		.loc 16 391 7 view .LVU1209
 6006 007e 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 6006      000000
 6007              	.LBE6078:
 6008              	.LBE6081:
 6009              	.LBE6087:
 6010              	.LBB6088:
 6011              	.LBB6071:
 6012              	.LBB6065:
 6013              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 6014              		.loc 15 462 59 view .LVU1210
 6015 0085 C5F81184 		vmovups	%xmm0, 376(%rsp)	# tmp139, MEM[(void *)&ss + 344B]
 6015      24780100 
 6015      00
 6016              	.LBE6065:
 6017              	.LBE6071:
 6018              	.LBE6088:
 6019              	.LBB6089:
 6020              	.LBB6082:
 6021              	.LBB6079:
 6022              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 6023              		.loc 16 391 7 view .LVU1211
 6024 008e 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_20 + -24B], _23
 6025 0092 48894424 		movq	%rax, 32(%rsp)	# tmp241, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 6025      20
 6026 0097 488B0500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const v
 6026      000000
 6027              	.LBE6079:
 6028              	.LBE6082:
 6029              	.LBE6089:
 6030              	.LBB6090:
 6031              	.LBB6072:
 6032              	.LBB6066:
 6033              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 6034              		.loc 15 462 59 view .LVU1212
 6035 009e 48C78424 		movq	$0, 360(%rsp)	#, MEM[(struct basic_ios *)&ss + 112B]._M_tie
 6035      68010000 
 6035      00000000 
 6036              	.LBE6066:
 6037              	.LBE6072:
 6038              	.LBE6090:
 6039              	.LBB6091:
 6040              	.LBB6083:
 6041              	.LBB6080:
 6042              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 6043              		.loc 16 391 7 view .LVU1213
 6044 00aa 4C01EF   		addq	%r13, %rdi	# tmp220, _23
 6045 00ad 488907   		movq	%rax, (%rdi)	# tmp244, *_23.D.34155._vptr.ios_base
 6046              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 6047              		.loc 16 391 9 view .LVU1214
 6048 00b0 C5F877   		vzeroupper
 6049              	.LEHB14:
 6050 00b3 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 6050      00
 6051              	.LVL314:
 6052              	.LEHE14:
 391:/usr/include/c++/9/ostream **** 
 6053              		.loc 16 391 9 view .LVU1215
 6054              	.LBE6080:
 6055              	.LBE6083:
 6056              	.LBE6091:
 6057              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 6058              		.loc 12 584 53 view .LVU1216
 6059 00b8 C5FA7E0D 		vmovq	.LC1(%rip), %xmm1	#, tmp246
 6059      00000000 
 6060 00c0 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp245
 6060      000000
 6061              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 6062              		.loc 12 585 9 view .LVU1217
 6063 00c7 4C8D7C24 		leaq	40(%rsp), %r15	#, tmp223
 6063      28
 6064              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 6065              		.loc 12 584 53 view .LVU1218
 6066 00cc 48898424 		movq	%rax, 144(%rsp)	# tmp245, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 6066      90000000 
 6067              	.LVL315:
 6068              	.LBB6092:
 6069              	.LBI6092:
 111:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 6070              		.loc 12 111 7 is_stmt 1 view .LVU1219
 6071              	.LBB6093:
 6072              	.LBB6094:
 6073              	.LBB6095:
 6074              	.LBI6095:
 470:/usr/include/c++/9/streambuf ****       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
 6075              		.loc 13 470 7 view .LVU1220
 6076              	.LBE6095:
 6077              	.LBE6094:
 6078              	.LBE6093:
 6079              	.LBE6092:
 6080              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 6081              		.loc 12 584 53 is_stmt 0 view .LVU1221
 6082 00d4 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp247
 6082      000000
 6083 00db C4E3F122 		vpinsrq	$1, %rax, %xmm1, %xmm0	# tmp247, tmp246, tmp145
 6083      C001
 6084              	.LBB6131:
 6085              	.LBB6128:
 6086              	.LBB6125:
 6087              	.LBB6100:
 6088              	.LBB6096:
 6089              	.LBB6097:
 6090              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 6091              		.loc 13 473 29 view .LVU1222
 6092 00e1 488D4424 		leaq	96(%rsp), %rax	#, tmp226
 6092      60
 6093 00e6 4889C7   		movq	%rax, %rdi	# tmp226,
 6094              	.LBE6097:
 6095              	.LBE6096:
 6096              	.LBE6100:
 6097              	.LBE6125:
 6098              	.LBE6128:
 6099              	.LBE6131:
 6100              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 6101              		.loc 12 584 53 view .LVU1223
 6102 00e9 C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp145, MEM[(int (*) () * *)&ss]
 6102      2420
 6103              	.LBB6132:
 6104              	.LBB6129:
 6105              	.LBB6126:
 6106              	.LBB6101:
 6107              	.LBB6099:
 6108              	.LBB6098:
 6109              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 6110              		.loc 13 473 29 view .LVU1224
 6111 00ef C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp147
 6112 00f3 48890424 		movq	%rax, (%rsp)	# tmp226, %sfp
 6113 00f7 C5F82944 		vmovaps	%xmm0, 48(%rsp)	# tmp147, MEM[(char_type * *)&ss + 16B]
 6113      2430
 6114 00fd C5F82944 		vmovaps	%xmm0, 64(%rsp)	# tmp147, MEM[(char_type * *)&ss + 32B]
 6114      2440
 6115 0103 C5F82944 		vmovaps	%xmm0, 80(%rsp)	# tmp147, MEM[(char_type * *)&ss + 48B]
 6115      2450
 6116 0109 E8000000 		call	_ZNSt6localeC1Ev@PLT	#
 6116      00
 6117              	.LVL316:
 6118              		.loc 13 473 29 view .LVU1225
 6119              	.LBE6098:
 6120              	.LBE6099:
 6121              	.LBE6101:
 6122              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 6123              		.loc 12 112 56 view .LVU1226
 6124 010e 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp249
 6124      000000
 6125              	.LBE6126:
 6126              	.LBE6129:
 6127              	.LBE6132:
 6128              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 6129              		.loc 12 585 9 view .LVU1227
 6130 0115 4C89FE   		movq	%r15, %rsi	# tmp223,
 6131 0118 4C89F7   		movq	%r14, %rdi	# tmp222,
 6132              	.LBB6133:
 6133              	.LBB6130:
 6134              	.LBB6127:
 6135              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 6136              		.loc 12 112 56 view .LVU1228
 6137 011b 48894424 		movq	%rax, 40(%rsp)	# tmp249, MEM[(struct basic_stringbuf *)&ss + 8B].D.48380._vptr.basic_streambu
 6137      28
 6138              	.LBB6102:
 6139              	.LBB6103:
 6140              	.LBB6104:
 6141              	.LBB6105:
 6142              	.LBB6106:
 6143              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 6144              		.loc 2 160 46 view .LVU1229
 6145 0120 488D8424 		leaq	128(%rsp), %rax	#, tmp219
 6145      80000000 
 6146              	.LBE6106:
 6147              	.LBE6105:
 6148              	.LBE6104:
 6149              	.LBE6103:
 6150              	.LBE6102:
 6151              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 6152              		.loc 12 112 56 view .LVU1230
 6153 0128 C7442468 		movl	$16, 104(%rsp)	#, MEM[(struct basic_stringbuf *)&ss + 8B]._M_mode
 6153      10000000 
 6154              	.LVL317:
 6155              	.LBB6124:
 6156              	.LBI6102:
 431:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 6157              		.loc 2 431 7 is_stmt 1 view .LVU1231
 6158              	.LBB6123:
 6159              	.LBB6112:
 6160              	.LBI6112:
 138:/usr/include/c++/9/bits/allocator.h **** 
 6161              		.loc 5 138 7 view .LVU1232
 6162              	.LBB6113:
 6163              	.LBI6113:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 6164              		.loc 4 80 7 view .LVU1233
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 6165              		.loc 4 80 7 is_stmt 0 view .LVU1234
 6166              	.LBE6113:
 6167              	.LBE6112:
 6168              	.LBB6114:
 6169              	.LBI6114:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 6170              		.loc 2 190 7 is_stmt 1 view .LVU1235
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 6171              		.loc 2 190 7 is_stmt 0 view .LVU1236
 6172              	.LBE6114:
 6173              	.LBB6115:
 6174              	.LBI6104:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 6175              		.loc 2 159 2 is_stmt 1 view .LVU1237
 6176              	.LBB6111:
 6177              	.LBB6110:
 6178              	.LBB6107:
 6179              	.LBI6107:
 6180              		.loc 11 99 5 view .LVU1238
 6181              		.loc 11 99 5 is_stmt 0 view .LVU1239
 6182              	.LBE6107:
 6183              	.LBB6108:
 6184              	.LBI6108:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 6185              		.loc 5 141 7 is_stmt 1 view .LVU1240
 6186              	.LBB6109:
 6187              	.LBI6109:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 6188              		.loc 4 83 7 view .LVU1241
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 6189              		.loc 4 83 7 is_stmt 0 view .LVU1242
 6190              	.LBE6109:
 6191              	.LBE6108:
 6192              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 6193              		.loc 2 160 46 view .LVU1243
 6194 0130 48894424 		movq	%rax, 8(%rsp)	# tmp219, %sfp
 6194      08
 6195 0135 48894424 		movq	%rax, 112(%rsp)	# tmp219, MEM[(struct _Alloc_hider *)&ss + 80B]._M_p
 6195      70
 6196              	.LVL318:
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 6197              		.loc 2 160 46 view .LVU1244
 6198              	.LBE6110:
 6199              	.LBE6111:
 6200              	.LBE6115:
 6201              	.LBB6116:
 6202              	.LBI6116:
 6203              		.loc 5 153 7 is_stmt 1 view .LVU1245
 6204              	.LBB6117:
 6205              	.LBI6117:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 6206              		.loc 4 89 7 view .LVU1246
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 6207              		.loc 4 89 7 is_stmt 0 view .LVU1247
 6208              	.LBE6117:
 6209              	.LBE6116:
 6210              	.LBB6118:
 6211              	.LBI6118:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 6212              		.loc 2 214 7 is_stmt 1 view .LVU1248
 6213              	.LBB6119:
 6214              	.LBI6119:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 6215              		.loc 2 182 7 view .LVU1249
 6216              	.LBB6120:
 6217              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 6218              		.loc 2 183 9 is_stmt 0 view .LVU1250
 6219 013a 48C74424 		movq	$0, 120(%rsp)	#, MEM[(size_type *)&ss + 88B]
 6219      78000000 
 6219      00
 6220              	.LVL319:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 6221              		.loc 2 183 9 view .LVU1251
 6222              	.LBE6120:
 6223              	.LBE6119:
 6224              	.LBB6121:
 6225              	.LBI6121:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 6226              		.loc 8 299 7 is_stmt 1 view .LVU1252
 6227              	.LBB6122:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 6228              		.loc 8 300 9 view .LVU1253
 6229              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 6230              		.loc 8 300 14 is_stmt 0 view .LVU1254
 6231 0143 C6842480 		movb	$0, 128(%rsp)	#, MEM[(char_type &)&ss + 96]
 6231      00000000 
 6232              	.LVL320:
 6233              	.LEHB15:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 6234              		.loc 8 300 14 view .LVU1255
 6235              	.LBE6122:
 6236              	.LBE6121:
 6237              	.LBE6118:
 6238              	.LBE6123:
 6239              	.LBE6124:
 6240              	.LBE6127:
 6241              	.LBE6130:
 6242              	.LBE6133:
 6243              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 6244              		.loc 12 585 9 view .LVU1256
 6245 014b E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 6245      00
 6246              	.LVL321:
 6247              	.LEHE15:
 585:/usr/include/c++/9/sstream **** 
 6248              		.loc 12 585 9 view .LVU1257
 6249              	.LBE6139:
 6250              	.LBE6142:
 6251              	.LBE6145:
 6252              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:52:     _str(ss, args...);
  52:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return ss.str();
 6253              		.loc 14 52 9 view .LVU1258
 6254 0150 488B4424 		movq	24(%rsp), %rax	# %sfp, args#0
 6254      18
 6255 0155 4C8B38   		movq	(%rax), %r15	# *args#0_4(D), _11
 6256              	.LVL322:
 6257              	.LBB6146:
 6258              	.LBI6146:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 6259              		.loc 14 44 22 is_stmt 1 view .LVU1259
 6260              	.LBB6147:
 6261              	.LBB6148:
 6262              	.LBI6148:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 6263              		.loc 14 38 22 view .LVU1260
 6264              	.LBB6149:
 6265              	.LBI6149:
 565:/usr/include/c++/9/ostream ****     {
 6266              		.loc 16 565 5 view .LVU1261
 6267              	.LBB6150:
 6268              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 6269              		.loc 16 567 7 is_stmt 0 view .LVU1262
 6270 0158 4D85FF   		testq	%r15, %r15	# _11
 6271 015b 7433     		je	.L204	#,
 6272              	.LVL323:
 6273              	.LBB6151:
 6274              	.LBI6151:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 6275              		.loc 8 329 7 is_stmt 1 view .LVU1263
 6276              	.LBB6152:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6277              		.loc 8 335 2 view .LVU1264
 6278              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6279              		.loc 8 335 25 is_stmt 0 view .LVU1265
 6280 015d 4C89FF   		movq	%r15, %rdi	# _11,
 6281 0160 E8000000 		call	strlen@PLT	#
 6281      00
 6282              	.LVL324:
 6283              	.LBE6152:
 6284              	.LBE6151:
 6285              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 6286              		.loc 16 570 18 view .LVU1266
 6287 0165 4C89FE   		movq	%r15, %rsi	# _11,
 6288 0168 4C89EF   		movq	%r13, %rdi	# tmp220,
 6289              	.LBB6154:
 6290              	.LBB6153:
 6291              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6292              		.loc 8 335 25 view .LVU1267
 6293 016b 4889C2   		movq	%rax, %rdx	# tmp234, tmp177
 6294              	.LVL325:
 6295              	.LEHB16:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6296              		.loc 8 335 25 view .LVU1268
 6297              	.LBE6153:
 6298              	.LBE6154:
 6299              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 6300              		.loc 16 570 18 view .LVU1269
 6301 016e E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 6301      00
 6302              	.LVL326:
 6303              	.L165:
 6304              		.loc 16 570 18 view .LVU1270
 6305              	.LBE6150:
 6306              	.LBE6149:
 6307              	.LBE6148:
 6308              	.LBB6163:
 6309              	.LBI6163:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 6310              		.loc 14 44 22 is_stmt 1 view .LVU1271
 6311              	.LBB6164:
 6312              	.LBB6165:
 6313              	.LBI6165:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 6314              		.loc 14 38 22 view .LVU1272
 6315              	.LBB6166:
 6316              	.LBI6166:
 6317              		.file 19 "/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h"
   1:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/ArrayRef.h>
   4:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/complex.h>
   5:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/Half.h>
   6:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/qint32.h>
   7:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/qint8.h>
   8:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/quint8.h>
   9:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/BFloat16.h>
  10:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/quint4x2.h>
  11:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <c10/util/Optional.h>
  12:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  13:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <complex>
  14:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <cstdint>
  15:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #include <iostream>
  16:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  17:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** namespace c10 {
  18:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  19:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // For the macros below:
  20:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // NB: If you want to macro some code for all non-QInt scalar types (i.e. types
  21:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // with complete information, you probably want one of the
  22:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // AT_FORALL_SCALAR_TYPES / AT_FORALL_SCALAR_TYPES_AND
  23:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // macros below, which are designed to behave similarly to the Dispatch macros
  24:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // with the same name.
  25:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  26:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // NB: Order matters for this macro; it is relied upon in
  27:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // _promoteTypesLookup and the serialization format.
  28:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(_) \
  29:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(uint8_t, Byte) /* 0 */                               \
  30:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int8_t, Char) /* 1 */                                \
  31:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int16_t, Short) /* 2 */                              \
  32:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int, Int) /* 3 */                                    \
  33:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int64_t, Long) /* 4 */                               \
  34:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(at::Half, Half) /* 5 */                              \
  35:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(float, Float) /* 6 */                                \
  36:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(double, Double) /* 7 */                              \
  37:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::complex<c10::Half>, ComplexHalf) /* 8 */        \
  38:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::complex<float>, ComplexFloat) /* 9 */           \
  39:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::complex<double>, ComplexDouble) /* 10 */        \
  40:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(bool, Bool) /* 11 */                                 \
  41:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::qint8, QInt8) /* 12 */                          \
  42:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::quint8, QUInt8) /* 13 */                        \
  43:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::qint32, QInt32) /* 14 */                        \
  44:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(at::BFloat16, BFloat16) /* 15 */                     \
  45:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::quint4x2, QUInt4x2) /* 16 */
  46:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  47:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  48:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // If you want to support ComplexHalf for real, add ComplexHalf
  49:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // into this macro (and change the name).  But beware: convert()
  50:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // doesn't work for all the conversions you need...
  51:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_EXCEPT_COMPLEX_HALF(_) \
  52:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(uint8_t, Byte)                                                 \
  53:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int8_t, Char)                                                  \
  54:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int16_t, Short)                                                \
  55:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int, Int)                                                      \
  56:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int64_t, Long)                                                 \
  57:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(at::Half, Half)                                                \
  58:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(float, Float)                                                  \
  59:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(double, Double)                                                \
  60:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::complex<float>, ComplexFloat)                             \
  61:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::complex<double>, ComplexDouble)                           \
  62:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(bool, Bool)                                                    \
  63:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(at::BFloat16, BFloat16)
  64:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  65:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  66:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** enum class ScalarType : int8_t {
  67:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define DEFINE_ENUM(_1, n) n,
  68:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(DEFINE_ENUM)
  69:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #undef DEFINE_ENUM
  70:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       Undefined,
  71:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   NumOptions
  72:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** };
  73:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  74:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** constexpr uint16_t NumScalarTypes = static_cast<uint16_t>(ScalarType::NumOptions);
  75:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  76:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** namespace impl {
  77:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  78:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // These are used to map ScalarTypes to C++ types.
  79:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  80:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** template <c10::ScalarType N>
  81:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** struct ScalarTypeToCPPType;
  82:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  83:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define SPECIALIZE_ScalarTypeToCPPType(cpp_type, scalar_type)                  \
  84:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** template<>                                                                     \
  85:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** struct ScalarTypeToCPPType<c10::ScalarType::scalar_type> {                     \
  86:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   using type = cpp_type;                                                       \
  87:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****                                                                                \
  88:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   /* This is a workaround for the CUDA bug which prevents */                   \
  89:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   /* ::detail::ScalarTypeToCType<T>::type being used directly due to */        \
  90:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   /* ambiguous reference which can't to be resolved. For some reason it */     \
  91:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   /* cant pick between at::detail and at::cuda::detail. */                     \
  92:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   /* For repro example, please see: */                                         \
  93:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   /* https://gist.github.com/izdeby/952ae7cf256ddb740a73776d39a7e7ba */        \
  94:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   /* TODO: remove once the bug is fixed. */                                    \
  95:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   static type t;                                                               \
  96:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** };
  97:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
  98:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(SPECIALIZE_ScalarTypeToCPPType)
  99:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 100:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #undef SPECIALIZE_ScalarTypeToCPPType
 101:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 102:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** } // namespace impl
 103:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 104:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** template <typename T>
 105:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** struct CppTypeToScalarType;
 106:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 107:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define SPECIALIZE_CppTypeToScalarType(cpp_type, scalar_type) \
 108:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   template<>                                                  \
 109:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   struct CppTypeToScalarType<cpp_type>:                       \
 110:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     std::integral_constant<c10::ScalarType,                   \
 111:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****                            c10::ScalarType::scalar_type>      \
 112:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   {};
 113:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 114:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(SPECIALIZE_CppTypeToScalarType)
 115:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 116:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #undef SPECIALIZE_CppTypeToScalarType
 117:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 118:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_INT_TYPES(_) \
 119:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(uint8_t, Byte)             \
 120:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int8_t, Char)              \
 121:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int16_t, Short)            \
 122:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int, Int)                  \
 123:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int64_t, Long)
 124:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 125:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_SCALAR_TYPES(_) \
 126:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(uint8_t, Byte)                \
 127:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int8_t, Char)                 \
 128:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int16_t, Short)               \
 129:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int, Int)                     \
 130:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int64_t, Long)                \
 131:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(float, Float)                 \
 132:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(double, Double)
 133:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 134:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_SCALAR_TYPES_AND(SCALARTYPE, _)                          \
 135:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(uint8_t, Byte)                                                         \
 136:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int8_t, Char)                                                          \
 137:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int16_t, Short)                                                        \
 138:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int, Int)                                                              \
 139:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int64_t, Long)                                                         \
 140:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(float, Float)                                                          \
 141:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(double, Double)                                                        \
 142:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(decltype(::c10::impl::ScalarTypeToCPPType<::c10::ScalarType::SCALARTYPE>::t), SCALARTYPE)
 143:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 144:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_SCALAR_TYPES_AND2(SCALARTYPE1, SCALARTYPE2, _)                                \
 145:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(uint8_t, Byte)                                                                              \
 146:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int8_t, Char)                                                                               \
 147:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int16_t, Short)                                                                             \
 148:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int, Int)                                                                                   \
 149:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int64_t, Long)                                                                              \
 150:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(float, Float)                                                                               \
 151:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(double, Double)                                                                             \
 152:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(decltype(::c10::impl::ScalarTypeToCPPType<::c10::ScalarType::SCALARTYPE1>::t), SCALARTYPE1) \
 153:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(decltype(::c10::impl::ScalarTypeToCPPType<::c10::ScalarType::SCALARTYPE2>::t), SCALARTYPE2)
 154:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 155:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_SCALAR_TYPES_AND3(SCALARTYPE1, SCALARTYPE2, SCALARTYPE3, _)                   \
 156:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(uint8_t, Byte)                                                                              \
 157:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int8_t, Char)                                                                               \
 158:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int16_t, Short)                                                                             \
 159:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int, Int)                                                                                   \
 160:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(int64_t, Long)                                                                              \
 161:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(float, Float)                                                                               \
 162:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(double, Double)                                                                             \
 163:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(decltype(::c10::impl::ScalarTypeToCPPType<::c10::ScalarType::SCALARTYPE1>::t), SCALARTYPE1) \
 164:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(decltype(::c10::impl::ScalarTypeToCPPType<::c10::ScalarType::SCALARTYPE2>::t), SCALARTYPE2) \
 165:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(decltype(::c10::impl::ScalarTypeToCPPType<::c10::ScalarType::SCALARTYPE3>::t), SCALARTYPE3)
 166:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 167:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_QINT_TYPES(_)  \
 168:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::qint8, QInt8)           \
 169:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::quint8, QUInt8)         \
 170:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::qint32, QInt32)         \
 171:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::quint4x2, QUInt4x2)
 172:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 173:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define AT_FORALL_COMPLEX_TYPES(_)             \
 174:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::complex<float>, ComplexFloat)         \
 175:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   _(c10::complex<double>, ComplexDouble)
 176:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 177:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define DEFINE_CONSTANT(_, name) \
 178:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr ScalarType k##name = ScalarType::name;
 179:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 180:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(DEFINE_CONSTANT)
 181:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #undef DEFINE_CONSTANT
 182:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 183:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline const char* toString(ScalarType t) {
 184:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define DEFINE_CASE(_, name) \
 185:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   case ScalarType::name:     \
 186:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     return #name;
 187:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 188:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   switch (t) {
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(DEFINE_CASE)
 190:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 191:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return "UNKNOWN_SCALAR";
 192:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 193:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #undef DEFINE_CASE
 194:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 195:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 196:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline size_t elementSize(ScalarType t) {
 197:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define CASE_ELEMENTSIZE_CASE(ctype, name) \
 198:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   case ScalarType::name:                   \
 199:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     return sizeof(ctype);
 200:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 201:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   switch (t) {
 202:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(CASE_ELEMENTSIZE_CASE)
 203:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 204:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       AT_ERROR("Unknown ScalarType");
 205:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 206:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #undef CASE_ELEMENTSIZE_CASE
 207:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 208:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 209:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** C10_DEPRECATED_MESSAGE("isIntegralType is deprecated. Please use the overload with 'includeBool' pa
 210:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool isIntegralType(ScalarType t) {
 211:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return (
 212:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::Byte || t == ScalarType::Char || t == ScalarType::Int ||
 213:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::Long || t == ScalarType::Short);
 214:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 215:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 216:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool isIntegralType(ScalarType t, bool includeBool) {
 217:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   bool isIntegral = (
 218:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::Byte || t == ScalarType::Char || t == ScalarType::Int ||
 219:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::Long || t == ScalarType::Short);
 220:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 221:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return includeBool ? isIntegral || (t == ScalarType::Bool) : isIntegral;
 222:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 223:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 224:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool isFloatingType(ScalarType t) {
 225:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return (
 226:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::Double || t == ScalarType::Float ||
 227:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::Half || t == ScalarType::BFloat16);
 228:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 229:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 230:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool isComplexType(ScalarType t) {
 231:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return (
 232:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::ComplexHalf || t == ScalarType::ComplexFloat ||
 233:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       t == ScalarType::ComplexDouble);
 234:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 235:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 236:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool isQIntType(ScalarType t) {
 237:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // Don't forget to extend this when adding new QInt types
 238:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return t == ScalarType:: QInt8 || t == ScalarType::QUInt8 || t == ScalarType::QInt32 || t == Scal
 239:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 240:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 241:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline ScalarType toQIntType(ScalarType t) {
 242:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   switch (t) {
 243:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::Byte:
 244:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::QUInt8;
 245:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::Char:
 246:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::QInt8;
 247:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::Int:
 248:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::QInt32;
 249:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 250:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return t;
 251:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 252:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 253:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 254:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline ScalarType toUnderlying(ScalarType t) {
 255:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   switch (t) {
 256:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::QUInt8:
 257:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::Byte;
 258:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::QInt8:
 259:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::Char;
 260:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::QInt32:
 261:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::Int;
 262:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::QUInt4x2:
 263:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::Byte;
 264:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 265:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return t;
 266:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 267:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 268:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 269:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool isSignedType(ScalarType t) {
 270:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   TORCH_CHECK(!isQIntType(t), "isSignedType not supported for quantized types");
 271:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   #define CASE_SIGNED(ctype, name) \
 272:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::name: \
 273:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return std::numeric_limits<ctype>::is_signed;
 274:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 275:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   switch (t) {
 276:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::ComplexHalf:
 277:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::ComplexFloat:
 278:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::ComplexDouble:
 279:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return true;
 280:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     AT_FORALL_SCALAR_TYPES_AND3(Half, Bool, BFloat16, CASE_SIGNED)
 281:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 282:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       TORCH_CHECK(false, "Unknown ScalarType");
 283:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 284:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   #undef CASE_SIGNED
 285:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 286:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 287:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool isUnderlying(ScalarType type, ScalarType qtype) {
 288:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return type == toUnderlying(qtype);
 289:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 290:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 291:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline ScalarType toValueType(ScalarType t) {
 292:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   switch (t) {
 293:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::ComplexHalf:
 294:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::Half;
 295:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::ComplexFloat:
 296:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::Float;
 297:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::ComplexDouble:
 298:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::Double;
 299:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 300:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return t;
 301:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 302:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 303:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 304:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline ScalarType toComplexType(ScalarType t) {
 305:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   switch (t) {
 306:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::Half:
 307:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::ComplexHalf;
 308:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::Float:
 309:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::ComplexFloat;
 310:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     case ScalarType::Double:
 311:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return ScalarType::ComplexDouble;
 312:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 313:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       TORCH_CHECK(false, "Unknown Complex ScalarType");
 314:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 315:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 316:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 317:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // see tensor_attributes.rst for detailed explanation and examples
 318:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** // of casting rules.
 319:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline bool canCast(const ScalarType from, const ScalarType to) {
 320:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // We disallow complex -> non complex, e.g., float_tensor *= complex is disallowed.
 321:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   if (isComplexType(from) && !isComplexType(to)) {
 322:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     return false;
 323:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 324:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // We disallow float -> integral, e.g., int_tensor *= float is disallowed.
 325:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   if (isFloatingType(from) && isIntegralType(to, false)) {
 326:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     return false;
 327:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 328:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 329:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // Treat bool as a distinct "category," to be consistent with type promotion
 330:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // rules (e.g. `bool_tensor + 5 -> int64_tensor`). If `5` was in the same category
 331:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // as `bool_tensor`, we would not promote.
 332:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // Differing categories implies `bool_tensor += 5` is disallowed.
 333:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   //
 334:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // NB: numpy distinguishes "unsigned" as a category to get the desired
 335:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // `bool_tensor + 5 -> int64_tensor` behavior. We don't, because:
 336:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // * We don't want the performance hit of checking the runtime sign of Scalars.
 337:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // * `uint8_tensor + 5 -> int64_tensor` would be undesirable.
 338:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   if (from != ScalarType::Bool && to == ScalarType::Bool) {
 339:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     return false;
 340:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 341:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return true;
 342:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 343:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 344:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** static inline ScalarType promoteTypes(ScalarType a, ScalarType b) {
 345:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // This is generated according to NumPy's promote_types
 346:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto u1 = ScalarType::Byte;
 347:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto i1 = ScalarType::Char;
 348:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto i2 = ScalarType::Short;
 349:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto i4 = ScalarType::Int;
 350:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto i8 = ScalarType::Long;
 351:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto f2 = ScalarType::Half;
 352:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto f4 = ScalarType::Float;
 353:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto f8 = ScalarType::Double;
 354:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto c2 = ScalarType::ComplexHalf;
 355:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto c4 = ScalarType::ComplexFloat;
 356:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto c8 = ScalarType::ComplexDouble;
 357:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto b1 = ScalarType::Bool;
 358:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto bf = ScalarType::BFloat16;
 359:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   constexpr auto ud = ScalarType::Undefined;
 360:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   if (a == ud || b == ud) {
 361:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     return ScalarType::Undefined;
 362:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 363:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 364:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // For QInt types, we only allow exact match
 365:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   if (isQIntType(a) && a == b) {
 366:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     return a;
 367:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 368:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 369:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   if (isQIntType(a) || isQIntType(b)) {
 370:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     AT_ERROR(
 371:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         "promoteTypes with quantized numbers is not handled yet; figure out what the correct rules 
 372:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         toString(a),
 373:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         " ",
 374:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         toString(b));
 375:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 376:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 377:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // this matrix has to be consistent with AT_FORALL_SCALAR_TYPES_WITH_COMPLEX
 378:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // so that's why we have to add undefined as we are not sure what is the
 379:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   // corrent values for the type promotions in complex type cases.
 380:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   static constexpr ScalarType _promoteTypesLookup[static_cast<int>(
 381:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       ScalarType::NumOptions)][static_cast<int>(ScalarType::NumOptions)] = {
 382:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /*        u1  i1  i2  i4  i8  f2  f4  f8  c2  c4  c8  b1  q1  q2  q3  bf*/
 383:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* u1 */ {u1, i2, i2, i4, i8, f2, f4, f8, ud, c4, c8, u1, ud, ud, ud, bf},
 384:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* i1 */ {i2, i1, i2, i4, i8, f2, f4, f8, ud, c4, c8, i1, ud, ud, ud, bf},
 385:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* i2 */ {i2, i2, i2, i4, i8, f2, f4, f8, ud, c4, c8, i2, ud, ud, ud, bf},
 386:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* i4 */ {i4, i4, i4, i4, i8, f2, f4, f8, ud, c4, c8, i4, ud, ud, ud, bf},
 387:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* i8 */ {i8, i8, i8, i8, i8, f2, f4, f8, ud, c4, c8, i8, ud, ud, ud, bf},
 388:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* f2 */ {f2, f2, f2, f2, f2, f2, f4, f8, ud, c4, c8, f2, ud, ud, ud, f4},
 389:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* f4 */ {f4, f4, f4, f4, f4, f4, f4, f8, ud, c4, c8, f4, ud, ud, ud, f4},
 390:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* f8 */ {f8, f8, f8, f8, f8, f8, f8, f8, ud, c8, c8, f8, ud, ud, ud, f8},
 391:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* c2 */ {ud, ud, ud, ud, ud, ud, ud, ud, c2, c4, c8, ud, ud, ud, ud, ud},
 392:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* c4 */ {c4, c4, c4, c4, c4, c4, c4, c8, c4, c4, c8, c4, ud, ud, ud, c4},
 393:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* c8 */ {c8, c8, c8, c8, c8, c8, c8, c8, c8, c8, c8, c8, ud, ud, ud, c8},
 394:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* b1 */ {u1, i1, i2, i4, i8, f2, f4, f8, ud, c4, c8, b1, ud, ud, ud, bf},
 395:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* q1 */ {ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud},
 396:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* q2 */ {ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud},
 397:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* q3 */ {ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud, ud},
 398:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****         /* bf */ {bf, bf, bf, bf, bf, f4, f4, f8, ud, c4, c8, bf, ud, ud, ud, bf},
 399:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   };
 400:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return _promoteTypesLookup[static_cast<int>(a)][static_cast<int>(b)];
 401:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** }
 402:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** 
 403:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** inline std::ostream& operator<<(
 6318              		.loc 19 403 22 view .LVU1273
 6319              	.LBE6166:
 6320              	.LBE6165:
 6321              	.LBE6164:
 6322              	.LBE6163:
 6323              	.LBE6147:
 6324              	.LBE6146:
 404:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     std::ostream& stream,
 405:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     at::ScalarType scalar_type) {
 406:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   return stream << toString(scalar_type);
 6325              		.loc 19 406 3 view .LVU1274
 6326              	.LBB6221:
 6327              	.LBB6216:
 6328              	.LBB6209:
 6329              	.LBB6203:
 6330              	.LBB6182:
 6331              	.LBB6177:
 6332              	.LBB6167:
 6333              	.LBI6167:
 183:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h **** #define DEFINE_CASE(_, name) \
 6334              		.loc 19 183 27 view .LVU1275
 6335              	.LBB6168:
 188:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(DEFINE_CASE)
 6336              		.loc 19 188 3 view .LVU1276
 6337 0173 803B10   		cmpb	$16, (%rbx)	#, *args#1_5(D)
 6338 0176 0F873E03 		ja	.L166	#,
 6338      0000
 6339 017c 0FB603   		movzbl	(%rbx), %eax	# *args#1_5(D), *args#1_5(D)
 6340 017f 488D1500 		leaq	.L168(%rip), %rdx	#, tmp181
 6340      000000
 6341 0186 48630482 		movslq	(%rdx,%rax,4), %rax	#, tmp183
 6342 018a 4801D0   		addq	%rdx, %rax	# tmp181, tmp184
 6343 018d 3EFFE0   		notrack jmp	*%rax	# tmp184
 6344              		.section	.rodata._ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_,
 6345              		.align 4
 6346              		.align 4
 6347              	.L168:
 6348 0000 00000000 		.long	.L196-.L168
 6349 0004 00000000 		.long	.L183-.L168
 6350 0008 00000000 		.long	.L182-.L168
 6351 000c 00000000 		.long	.L181-.L168
 6352 0010 00000000 		.long	.L180-.L168
 6353 0014 00000000 		.long	.L179-.L168
 6354 0018 00000000 		.long	.L178-.L168
 6355 001c 00000000 		.long	.L177-.L168
 6356 0020 00000000 		.long	.L176-.L168
 6357 0024 00000000 		.long	.L175-.L168
 6358 0028 00000000 		.long	.L174-.L168
 6359 002c 00000000 		.long	.L173-.L168
 6360 0030 00000000 		.long	.L172-.L168
 6361 0034 00000000 		.long	.L171-.L168
 6362 0038 00000000 		.long	.L170-.L168
 6363 003c 00000000 		.long	.L169-.L168
 6364 0040 00000000 		.long	.L167-.L168
 6365              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_,"a
 6366              	.LVL327:
 6367              		.p2align 4,,10
 6368              		.p2align 3
 6369              	.L204:
 188:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(DEFINE_CASE)
 6370              		.loc 19 188 3 is_stmt 0 view .LVU1277
 6371              	.LBE6168:
 6372              	.LBE6167:
 6373              	.LBE6177:
 6374              	.LBE6182:
 6375              	.LBE6203:
 6376              	.LBE6209:
 6377              	.LBB6210:
 6378              	.LBB6162:
 6379              	.LBB6161:
 6380              	.LBB6155:
 6381              	.LBI6155:
 565:/usr/include/c++/9/ostream ****     {
 6382              		.loc 16 565 5 is_stmt 1 view .LVU1278
 6383              	.LBB6156:
 6384              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 6385              		.loc 16 568 2 is_stmt 0 view .LVU1279
 6386 0190 488B4424 		movq	32(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 6386      20
 6387 0195 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_33 + -24B], _36
 6388 0199 4C01EF   		addq	%r13, %rdi	# tmp220, _36
 6389              	.LVL328:
 6390              	.LBB6157:
 6391              	.LBI6157:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 6392              		.loc 15 157 7 is_stmt 1 view .LVU1280
 6393              	.LBB6158:
 6394              	.LBB6159:
 6395              	.LBI6159:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 6396              		.loc 18 169 3 view .LVU1281
 6397              	.LBB6160:
 6398              		.loc 18 170 5 view .LVU1282
 6399              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 6400              		.loc 18 170 70 is_stmt 0 view .LVU1283
 6401 019c 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_36 + 32B], tmp174
 6402 019f 83CE01   		orl	$1, %esi	#, tmp174
 6403              	.LBE6160:
 6404              	.LBE6159:
 6405              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 6406              		.loc 15 158 9 view .LVU1284
 6407 01a2 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 6407      00
 6408              	.LVL329:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 6409              		.loc 15 158 9 view .LVU1285
 6410 01a7 EBCA     		jmp	.L165	#
 6411              	.LVL330:
 6412 01a9 0F1F8000 		.p2align 4,,10
 6412      000000
 6413              		.p2align 3
 6414              	.L182:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 6415              		.loc 15 158 9 view .LVU1286
 6416              	.LBE6158:
 6417              	.LBE6157:
 6418              	.LBE6156:
 6419              	.LBE6155:
 6420              	.LBE6161:
 6421              	.LBE6162:
 6422              	.LBE6210:
 6423              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 6424              		.loc 14 45 14 view .LVU1287
 6425 01b0 BA050000 		movl	$5, %edx	#, prephitmp_47
 6425      00
 6426 01b5 488D3500 		leaq	.LC19(%rip), %rsi	#, _137
 6426      000000
 6427 01bc 0F1F4000 		.p2align 4,,10
 6428              		.p2align 3
 6429              	.L184:
 6430              	.LVL331:
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 6431              		.loc 14 45 14 view .LVU1288
 6432              	.LBE6216:
 6433              	.LBE6221:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6434              		.loc 8 335 2 is_stmt 1 view .LVU1289
 6435              	.LBB6222:
 6436              	.LBB6217:
 6437              	.LBB6211:
 6438              	.LBB6204:
 6439              	.LBB6183:
 6440              	.LBB6178:
 6441              	.LBB6172:
 6442              	.LBB6173:
 6443              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 6444              		.loc 16 570 18 is_stmt 0 view .LVU1290
 6445 01c0 4C89EF   		movq	%r13, %rdi	# tmp220,
 6446 01c3 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 6446      00
 6447              	.LVL332:
 6448              		.loc 16 570 18 view .LVU1291
 6449              	.LBE6173:
 6450              	.LBE6172:
 6451              	.LBE6178:
 6452              	.LBE6183:
 6453              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 6454              		.loc 14 45 14 view .LVU1292
 6455 01c8 488B4424 		movq	16(%rsp), %rax	# %sfp, args#2
 6455      10
 6456 01cd 4C8B38   		movq	(%rax), %r15	# *args#2_6(D), _41
 6457              	.LVL333:
 6458              	.LBB6184:
 6459              	.LBI6184:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 6460              		.loc 14 38 22 is_stmt 1 view .LVU1293
 6461              	.LBB6185:
 6462              	.LBI6185:
 565:/usr/include/c++/9/ostream ****     {
 6463              		.loc 16 565 5 view .LVU1294
 6464              	.LBB6186:
 6465              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 6466              		.loc 16 567 7 is_stmt 0 view .LVU1295
 6467 01d0 4D85FF   		testq	%r15, %r15	# _41
 6468 01d3 0F84AF02 		je	.L205	#,
 6468      0000
 6469              	.LVL334:
 6470              	.LBB6187:
 6471              	.LBI6187:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 6472              		.loc 8 329 7 is_stmt 1 view .LVU1296
 6473              	.LBB6188:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6474              		.loc 8 335 2 view .LVU1297
 6475              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6476              		.loc 8 335 25 is_stmt 0 view .LVU1298
 6477 01d9 4C89FF   		movq	%r15, %rdi	# _41,
 6478 01dc E8000000 		call	strlen@PLT	#
 6478      00
 6479              	.LVL335:
 6480              	.LBE6188:
 6481              	.LBE6187:
 6482              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 6483              		.loc 16 570 18 view .LVU1299
 6484 01e1 4C89FE   		movq	%r15, %rsi	# _41,
 6485 01e4 4C89EF   		movq	%r13, %rdi	# tmp220,
 6486              	.LBB6190:
 6487              	.LBB6189:
 6488              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6489              		.loc 8 335 25 view .LVU1300
 6490 01e7 4889C2   		movq	%rax, %rdx	# tmp235, tmp193
 6491              	.LVL336:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 6492              		.loc 8 335 25 view .LVU1301
 6493              	.LBE6189:
 6494              	.LBE6190:
 6495              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 6496              		.loc 16 570 18 view .LVU1302
 6497 01ea E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 6497      00
 6498              	.LVL337:
 6499              	.LEHE16:
 6500              	.L186:
 6501              		.loc 16 570 18 view .LVU1303
 6502              	.LBE6186:
 6503              	.LBE6185:
 6504              	.LBE6184:
 6505              	.LBE6204:
 6506              	.LBE6211:
 6507              	.LBE6217:
 6508              	.LBE6222:
 6509              	.LBB6223:
 6510              	.LBI6223:
 6511              		.loc 12 677 7 is_stmt 1 view .LVU1304
 6512              	.LBB6224:
 6513              	.LBI6224:
 178:/usr/include/c++/9/sstream ****       {
 6514              		.loc 12 178 7 view .LVU1305
 6515              	.LBB6225:
 6516              	.LBB6226:
 6517              	.LBI6226:
2331:/usr/include/c++/9/bits/basic_string.h ****       { return _M_get_allocator(); }
 6518              		.loc 2 2331 7 view .LVU1306
 6519              	.LBB6227:
 6520              	.LBI6227:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 6521              		.loc 5 141 7 view .LVU1307
 6522              	.LBB6228:
 6523              	.LBI6228:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 6524              		.loc 4 83 7 view .LVU1308
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 6525              		.loc 4 83 7 is_stmt 0 view .LVU1309
 6526              	.LBE6228:
 6527              	.LBE6227:
 6528              	.LBE6226:
 6529              	.LBB6229:
 6530              	.LBI6229:
 440:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 6531              		.loc 2 440 7 is_stmt 1 view .LVU1310
 6532              	.LBB6230:
 6533              	.LBI6230:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 6534              		.loc 2 190 7 view .LVU1311
 6535              	.LBE6230:
 6536              	.LBE6229:
 6537              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 6538              		.loc 12 181 2 is_stmt 0 view .LVU1312
 6539 01ef 488B4424 		movq	80(%rsp), %rax	# MEM[(char_type * *)&ss + 48B], _61
 6539      50
 6540              	.LBB6246:
 6541              	.LBB6232:
 6542              	.LBB6231:
 6543              	# /usr/include/c++/9/bits/basic_string.h:193: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 6544              		.loc 2 193 51 view .LVU1313
 6545 01f4 498D5C24 		leaq	16(%r12), %rbx	#, _60
 6545      10
 6546              	.LVL338:
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 6547              		.loc 2 193 51 view .LVU1314
 6548              	.LBE6231:
 6549              	.LBE6232:
 6550              	.LBB6233:
 6551              	.LBI6233:
 156:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 6552              		.loc 2 156 2 is_stmt 1 view .LVU1315
 6553              	.LBB6234:
 6554              	.LBB6235:
 6555              	.LBI6235:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 6556              		.loc 5 141 7 view .LVU1316
 6557              	.LBB6236:
 6558              	.LBI6236:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 6559              		.loc 4 83 7 view .LVU1317
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 6560              		.loc 4 83 7 is_stmt 0 view .LVU1318
 6561              	.LBE6236:
 6562              	.LBE6235:
 6563              	.LBE6234:
 6564              	.LBE6233:
 6565              	.LBB6238:
 6566              	.LBB6239:
 6567              	.LBB6240:
 6568              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 6569              		.loc 2 183 9 view .LVU1319
 6570 01f9 49C74424 		movq	$0, 8(%r12)	#, MEM[(size_type *)_7(D) + 8B]
 6570      08000000 
 6570      00
 6571              	.LBE6240:
 6572              	.LBE6239:
 6573              	.LBE6238:
 6574              	.LBB6244:
 6575              	.LBB6237:
 6576              	# /usr/include/c++/9/bits/basic_string.h:157: 	: allocator_type(__a), _M_p(__dat) { }
 157:/usr/include/c++/9/bits/basic_string.h **** 
 6577              		.loc 2 157 35 view .LVU1320
 6578 0202 49891C24 		movq	%rbx, (%r12)	# _60, MEM[(struct _Alloc_hider *)_7(D)]._M_p
 6579              	.LVL339:
 157:/usr/include/c++/9/bits/basic_string.h **** 
 6580              		.loc 2 157 35 view .LVU1321
 6581              	.LBE6237:
 6582              	.LBE6244:
 6583              	.LBB6245:
 6584              	.LBI6238:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 6585              		.loc 2 214 7 is_stmt 1 view .LVU1322
 6586              	.LBB6241:
 6587              	.LBI6239:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 6588              		.loc 2 182 7 view .LVU1323
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 6589              		.loc 2 182 7 is_stmt 0 view .LVU1324
 6590              	.LBE6241:
 6591              	.LBB6242:
 6592              	.LBI6242:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 6593              		.loc 8 299 7 is_stmt 1 view .LVU1325
 6594              	.LBB6243:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 6595              		.loc 8 300 9 view .LVU1326
 6596              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 6597              		.loc 8 300 14 is_stmt 0 view .LVU1327
 6598 0206 41C64424 		movb	$0, 16(%r12)	#, MEM[(char_type &)_7(D) + 16]
 6598      1000
 6599              	.LVL340:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 6600              		.loc 8 300 14 view .LVU1328
 6601              	.LBE6243:
 6602              	.LBE6242:
 6603              	.LBE6245:
 6604              	.LBE6246:
 6605              	.LBB6247:
 6606              	.LBI6247:
 6607              		.loc 5 153 7 is_stmt 1 view .LVU1329
 6608              	.LBB6248:
 6609              	.LBI6248:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 6610              		.loc 4 89 7 view .LVU1330
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 6611              		.loc 4 89 7 is_stmt 0 view .LVU1331
 6612              	.LBE6248:
 6613              	.LBE6247:
 6614              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 6615              		.loc 12 181 2 view .LVU1332
 6616 020c 4885C0   		testq	%rax, %rax	# _61
 6617 020f 0F849302 		je	.L187	#,
 6617      0000
 6618              	.LVL341:
 6619              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 6620              		.loc 12 184 23 view .LVU1333
 6621 0215 4C8B4424 		movq	64(%rsp), %r8	# MEM[(char_type * *)&ss + 32B], _62
 6621      40
 6622              	.LVL342:
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 6623              		.loc 12 184 23 view .LVU1334
 6624 021a 488B4C24 		movq	72(%rsp), %rcx	# MEM[(char_type * *)&ss + 40B], pretmp_50
 6624      48
 6625              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 6626              		.loc 12 184 6 view .LVU1335
 6627 021f 4C39C0   		cmpq	%r8, %rax	# _62, _61
 6628 0222 0F864802 		jbe	.L188	#,
 6628      0000
 6629              	.LVL343:
 6630              	.LBB6249:
 6631              	.LBI6249:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 6632              		.loc 2 1470 9 is_stmt 1 view .LVU1336
 6633              	.LBB6250:
 6634              	.LBI6250:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 6635              		.loc 2 842 7 view .LVU1337
 6636              	.LBB6251:
 6637              	.LBI6251:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 6638              		.loc 17 806 7 view .LVU1338
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 6639              		.loc 17 806 7 is_stmt 0 view .LVU1339
 6640              	.LBE6251:
 6641              	.LBE6250:
 6642              	.LBB6252:
 6643              	.LBI6252:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 6644              		.loc 17 811 9 is_stmt 1 view .LVU1340
 6645              	.LBB6253:
 6646              	.LBI6253:
 6647              		.loc 17 871 7 view .LVU1341
 6648              		.loc 17 871 7 is_stmt 0 view .LVU1342
 6649              	.LBE6253:
 6650              	.LBE6252:
 6651              	.LBB6254:
 6652              	.LBI6254:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 6653              		.loc 2 826 7 is_stmt 1 view .LVU1343
 6654              	.LBB6255:
 6655              	.LBI6255:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 6656              		.loc 17 806 7 view .LVU1344
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 6657              		.loc 17 806 7 is_stmt 0 view .LVU1345
 6658              	.LBE6255:
 6659              	.LBE6254:
 6660              	.LBB6256:
 6661              	.LBI6256:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 6662              		.loc 17 811 9 is_stmt 1 view .LVU1346
 6663              	.LBB6257:
 6664              	.LBI6257:
 6665              		.loc 17 871 7 view .LVU1347
 6666              		.loc 17 871 7 is_stmt 0 view .LVU1348
 6667              	.LBE6257:
 6668              	.LBE6256:
 6669              	.LBB6258:
 6670              	.LBI6258:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 6671              		.loc 2 2123 7 is_stmt 1 view .LVU1349
 6672              	.LBB6259:
 6673              	.LBB6260:
 6674              	.LBI6260:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 6675              		.loc 2 826 7 view .LVU1350
 6676              	.LBB6261:
 6677              	.LBI6261:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 6678              		.loc 17 806 7 view .LVU1351
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 6679              		.loc 17 806 7 is_stmt 0 view .LVU1352
 6680              	.LBE6261:
 6681              	.LBE6260:
 6682              	.LBB6262:
 6683              	.LBI6262:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 6684              		.loc 2 1936 7 is_stmt 1 view .LVU1353
 6685              	.LBB6263:
 6686              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 6687              		.loc 2 1941 38 is_stmt 0 view .LVU1354
 6688 0228 4829C8   		subq	%rcx, %rax	# pretmp_50, _61
 6689              	.LVL344:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 6690              		.loc 2 1941 38 view .LVU1355
 6691 022b 31D2     		xorl	%edx, %edx	#
 6692 022d 31F6     		xorl	%esi, %esi	#
 6693 022f 4C89E7   		movq	%r12, %rdi	# <retval>,
 6694 0232 4989C0   		movq	%rax, %r8	# _61,
 6695              	.LEHB17:
 6696 0235 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 6696      00
 6697              	.LVL345:
 6698              	.L189:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 6699              		.loc 2 1941 38 view .LVU1356
 6700              	.LBE6263:
 6701              	.LBE6262:
 6702              	.LBE6259:
 6703              	.LBE6258:
 6704              	.LBE6249:
 6705              	.LBE6225:
 6706              	.LBE6224:
 6707              	.LBE6223:
 6708              	.LBB6301:
 6709              	.LBI6301:
 629:/usr/include/c++/9/sstream ****       { }
 6710              		.loc 12 629 7 is_stmt 1 view .LVU1357
 6711              	.LBB6302:
 6712              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 6713              		.loc 12 630 9 is_stmt 0 view .LVU1358
 6714 023a 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp263
 6714      000000
 6715 0241 C5FA7E15 		vmovq	.LC1(%rip), %xmm2	#, tmp264
 6715      00000000 
 6716              	.LBB6303:
 6717              	.LBB6304:
 6718              	.LBB6305:
 6719              	.LBB6306:
 6720              	.LBB6307:
 6721              	.LBB6308:
 6722              	.LBB6309:
 6723              	.LBB6310:
 6724              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 6725              		.loc 2 222 26 view .LVU1359
 6726 0249 488B7C24 		movq	112(%rsp), %rdi	# MEM[(char * *)&ss + 80B], _86
 6726      70
 6727              	.LBE6310:
 6728              	.LBE6309:
 6729              	.LBE6308:
 6730              	.LBE6307:
 6731              	.LBE6306:
 6732              	.LBE6305:
 6733              	.LBE6304:
 6734              	.LBE6303:
 6735              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 6736              		.loc 12 630 9 view .LVU1360
 6737 024e 48898424 		movq	%rax, 144(%rsp)	# tmp263, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 6737      90000000 
 6738              	.LVL346:
 6739              	.LBB6329:
 6740              	.LBI6303:
  65:/usr/include/c++/9/sstream ****     {
 6741              		.loc 12 65 11 is_stmt 1 view .LVU1361
 6742              	.LBE6329:
 6743              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 6744              		.loc 12 630 9 is_stmt 0 view .LVU1362
 6745 0256 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp265
 6745      000000
 6746 025d C4E3E922 		vpinsrq	$1, %rax, %xmm2, %xmm0	# tmp265, tmp264, tmp201
 6746      C001
 6747 0263 C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp201, MEM[(int (*) () * *)&ss]
 6747      2420
 6748              	.LVL347:
 6749              	.LBB6330:
 6750              	.LBB6328:
 6751              	.LBB6325:
 6752              	.LBI6305:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 6753              		.loc 2 657 7 is_stmt 1 view .LVU1363
 6754              	.LBB6324:
 6755              	.LBB6320:
 6756              	.LBI6307:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 6757              		.loc 2 229 7 view .LVU1364
 6758              	.LBB6319:
 6759              	.LBB6313:
 6760              	.LBI6309:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6761              		.loc 2 221 7 view .LVU1365
 6762              	.LBB6312:
 6763              	.LBB6311:
 6764              	.LBI6311:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 6765              		.loc 2 200 7 view .LVU1366
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 6766              		.loc 2 200 7 is_stmt 0 view .LVU1367
 6767              	.LBE6311:
 6768              	.LBE6312:
 6769              	.LBE6313:
 6770              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 6771              		.loc 2 231 2 view .LVU1368
 6772 0269 483B7C24 		cmpq	8(%rsp), %rdi	# %sfp, _86
 6772      08
 6773 026e 7405     		je	.L191	#,
 6774              	.LVL348:
 6775              	.LBB6314:
 6776              	.LBI6314:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 6777              		.loc 2 236 7 is_stmt 1 view .LVU1369
 6778              	.LBB6315:
 6779              	.LBB6316:
 6780              	.LBI6316:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 6781              		.loc 3 469 7 view .LVU1370
 6782              	.LBB6317:
 6783              	.LBI6317:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 6784              		.loc 4 119 7 view .LVU1371
 6785              	.LBB6318:
 6786              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 6787              		.loc 4 128 19 is_stmt 0 view .LVU1372
 6788 0270 E8000000 		call	_ZdlPv@PLT	#
 6788      00
 6789              	.LVL349:
 6790              	.L191:
 6791              		.loc 4 128 19 view .LVU1373
 6792              	.LBE6318:
 6793              	.LBE6317:
 6794              	.LBE6316:
 6795              	.LBE6315:
 6796              	.LBE6314:
 6797              	.LBE6319:
 6798              	.LBE6320:
 6799              	.LBB6321:
 6800              	.LBI6321:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 6801              		.loc 2 150 14 is_stmt 1 view .LVU1374
 6802              	.LBB6322:
 6803              	.LBI6322:
 6804              		.loc 5 153 7 view .LVU1375
 6805              	.LBB6323:
 6806              	.LBI6323:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 6807              		.loc 4 89 7 view .LVU1376
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 6808              		.loc 4 89 7 is_stmt 0 view .LVU1377
 6809              	.LBE6323:
 6810              	.LBE6322:
 6811              	.LBE6321:
 6812              	.LBE6324:
 6813              	.LBE6325:
 6814              	.LBB6326:
 6815              	.LBI6326:
 204:/usr/include/c++/9/streambuf ****       { }
 6816              		.loc 13 204 7 is_stmt 1 view .LVU1378
 6817              	.LBB6327:
 6818              	# /usr/include/c++/9/streambuf:205:       { }
 205:/usr/include/c++/9/streambuf **** 
 6819              		.loc 13 205 9 is_stmt 0 view .LVU1379
 6820 0275 488B3C24 		movq	(%rsp), %rdi	# %sfp,
 6821 0279 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp267
 6821      000000
 6822 0280 48894424 		movq	%rax, 40(%rsp)	# tmp267, MEM[(struct basic_streambuf *)&ss + 8B]._vptr.basic_streambuf
 6822      28
 6823 0285 E8000000 		call	_ZNSt6localeD1Ev@PLT	#
 6823      00
 6824              	.LVL350:
 205:/usr/include/c++/9/streambuf **** 
 6825              		.loc 13 205 9 view .LVU1380
 6826              	.LBE6327:
 6827              	.LBE6326:
 6828              	.LBE6328:
 6829              	.LBE6330:
 6830              	.LBB6331:
 6831              	.LBI6331:
  93:/usr/include/c++/9/ostream **** 
 6832              		.loc 16 93 7 is_stmt 1 view .LVU1381
 6833              	.LBB6332:
 6834              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 6835              		.loc 16 93 26 is_stmt 0 view .LVU1382
 6836 028a 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 6836      000000
 6837 0291 488B1D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rbx	# MEM[(const v
 6837      000000
 6838              	.LBE6332:
 6839              	.LBE6331:
 6840              	.LBB6334:
 6841              	.LBB6335:
 6842              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 6843              		.loc 15 282 22 view .LVU1383
 6844 0298 4C89F7   		movq	%r14, %rdi	# tmp222,
 6845              	.LBE6335:
 6846              	.LBE6334:
 6847              	.LBB6337:
 6848              	.LBB6333:
 6849              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 6850              		.loc 16 93 26 view .LVU1384
 6851 029b 48894424 		movq	%rax, 32(%rsp)	# tmp268, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 6851      20
 6852 02a0 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_20 + -24B], MEM[(long int *)_20 + -24B]
 6853 02a4 48895C04 		movq	%rbx, 32(%rsp,%rax)	# tmp270, _83->D.34155._vptr.ios_base
 6853      20
 6854              	.LVL351:
  93:/usr/include/c++/9/ostream **** 
 6855              		.loc 16 93 26 view .LVU1385
 6856              	.LBE6333:
 6857              	.LBE6337:
 6858              	.LBB6338:
 6859              	.LBI6334:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 6860              		.loc 15 282 7 is_stmt 1 view .LVU1386
 6861              	.LBB6336:
 6862              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 6863              		.loc 15 282 22 is_stmt 0 view .LVU1387
 6864 02a9 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp271
 6864      000000
 6865 02b0 48898424 		movq	%rax, 144(%rsp)	# tmp271, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 6865      90000000 
 6866 02b8 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 6866      00
 6867              	.LVL352:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 6868              		.loc 15 282 22 view .LVU1388
 6869              	.LBE6336:
 6870              	.LBE6338:
 6871              	.LBE6302:
 6872              	.LBE6301:
 6873              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
 6874              		.loc 14 54 3 view .LVU1389
 6875 02bd 488B8424 		movq	408(%rsp), %rax	# D.445488, tmp239
 6875      98010000 
 6876 02c5 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp239
 6876      25280000 
 6876      00
 6877 02ce 0F85F701 		jne	.L206	#,
 6877      0000
 6878 02d4 488D65D8 		leaq	-40(%rbp), %rsp	#,
 6879              	.LVL353:
 6880              		.loc 14 54 3 view .LVU1390
 6881 02d8 4C89E0   		movq	%r12, %rax	# <retval>,
 6882 02db 5B       		popq	%rbx	#
 6883 02dc 415C     		popq	%r12	#
 6884              	.LVL354:
 6885              		.loc 14 54 3 view .LVU1391
 6886 02de 415D     		popq	%r13	#
 6887              	.LVL355:
 6888              		.loc 14 54 3 view .LVU1392
 6889 02e0 415E     		popq	%r14	#
 6890              	.LVL356:
 6891              		.loc 14 54 3 view .LVU1393
 6892 02e2 415F     		popq	%r15	#
 6893 02e4 5D       		popq	%rbp	#
 6894              		.cfi_remember_state
 6895              		.cfi_def_cfa 7, 8
 6896              	.LVL357:
 6897              		.loc 14 54 3 view .LVU1394
 6898 02e5 C3       		ret	
 6899              	.LVL358:
 6900 02e6 662E0F1F 		.p2align 4,,10
 6900      84000000 
 6900      0000
 6901              		.p2align 3
 6902              	.L196:
 6903              		.cfi_restore_state
 6904              	.LBB6339:
 6905              	.LBB6218:
 6906              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 6907              		.loc 14 45 14 view .LVU1395
 6908 02f0 BA040000 		movl	$4, %edx	#, prephitmp_47
 6908      00
 6909              	.LBB6212:
 6910              	.LBB6205:
 6911              	.LBB6199:
 6912              	.LBB6179:
 6913              	.LBB6174:
 6914              	.LBB6169:
 6915              	# /workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h:189:     AT_FORALL_SCALAR_TYPES_
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6916              		.loc 19 189 5 view .LVU1396
 6917 02f5 488D3500 		leaq	.LC6(%rip), %rsi	#, _137
 6917      000000
 6918 02fc E9BFFEFF 		jmp	.L184	#
 6918      FF
 6919              		.p2align 4,,10
 6920 0301 0F1F8000 		.p2align 3
 6920      000000
 6921              	.L183:
 6922              	.LBE6169:
 6923              	.LBE6174:
 6924              	.LBE6179:
 6925              	.LBE6199:
 6926              	.LBE6205:
 6927              	.LBE6212:
 6928              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 6929              		.loc 14 45 14 view .LVU1397
 6930 0308 BA040000 		movl	$4, %edx	#, prephitmp_47
 6930      00
 6931              	.LBB6213:
 6932              	.LBB6206:
 6933              	.LBB6200:
 6934              	.LBB6180:
 6935              	.LBB6175:
 6936              	.LBB6170:
 6937              	# /workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h:189:     AT_FORALL_SCALAR_TYPES_
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6938              		.loc 19 189 5 view .LVU1398
 6939 030d 488D3500 		leaq	.LC5(%rip), %rsi	#, _137
 6939      000000
 6940 0314 E9A7FEFF 		jmp	.L184	#
 6940      FF
 6941 0319 0F1F8000 		.p2align 4,,10
 6941      000000
 6942              		.p2align 3
 6943              	.L169:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6944              		.loc 19 189 5 is_stmt 1 view .LVU1399
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6945              		.loc 19 189 5 view .LVU1400
 6946 0320 BA080000 		movl	$8, %edx	#, prephitmp_47
 6946      00
 6947 0325 488D3500 		leaq	.LC2(%rip), %rsi	#, _137
 6947      000000
 6948 032c E98FFEFF 		jmp	.L184	#
 6948      FF
 6949              		.p2align 4,,10
 6950 0331 0F1F8000 		.p2align 3
 6950      000000
 6951              	.L167:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6952              		.loc 19 189 5 view .LVU1401
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6953              		.loc 19 189 5 view .LVU1402
 6954 0338 BA080000 		movl	$8, %edx	#, prephitmp_47
 6954      00
 6955 033d 488D3500 		leaq	.LC3(%rip), %rsi	#, _137
 6955      000000
 6956 0344 E977FEFF 		jmp	.L184	#
 6956      FF
 6957 0349 0F1F8000 		.p2align 4,,10
 6957      000000
 6958              		.p2align 3
 6959              	.L173:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6960              		.loc 19 189 5 view .LVU1403
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6961              		.loc 19 189 5 view .LVU1404
 6962 0350 BA040000 		movl	$4, %edx	#, prephitmp_47
 6962      00
 6963 0355 488D3500 		leaq	.LC15(%rip), %rsi	#, _137
 6963      000000
 6964 035c E95FFEFF 		jmp	.L184	#
 6964      FF
 6965              		.p2align 4,,10
 6966 0361 0F1F8000 		.p2align 3
 6966      000000
 6967              	.L172:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6968              		.loc 19 189 5 view .LVU1405
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6969              		.loc 19 189 5 view .LVU1406
 6970 0368 BA050000 		movl	$5, %edx	#, prephitmp_47
 6970      00
 6971 036d 488D3500 		leaq	.LC16(%rip), %rsi	#, _137
 6971      000000
 6972 0374 E947FEFF 		jmp	.L184	#
 6972      FF
 6973 0379 0F1F8000 		.p2align 4,,10
 6973      000000
 6974              		.p2align 3
 6975              	.L171:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6976              		.loc 19 189 5 view .LVU1407
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6977              		.loc 19 189 5 view .LVU1408
 6978 0380 BA060000 		movl	$6, %edx	#, prephitmp_47
 6978      00
 6979 0385 488D3500 		leaq	.LC17(%rip), %rsi	#, _137
 6979      000000
 6980 038c E92FFEFF 		jmp	.L184	#
 6980      FF
 6981              		.p2align 4,,10
 6982 0391 0F1F8000 		.p2align 3
 6982      000000
 6983              	.L170:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6984              		.loc 19 189 5 view .LVU1409
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6985              		.loc 19 189 5 view .LVU1410
 6986 0398 BA060000 		movl	$6, %edx	#, prephitmp_47
 6986      00
 6987 039d 488D3500 		leaq	.LC18(%rip), %rsi	#, _137
 6987      000000
 6988 03a4 E917FEFF 		jmp	.L184	#
 6988      FF
 6989 03a9 0F1F8000 		.p2align 4,,10
 6989      000000
 6990              		.p2align 3
 6991              	.L181:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6992              		.loc 19 189 5 view .LVU1411
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 6993              		.loc 19 189 5 view .LVU1412
 6994 03b0 BA030000 		movl	$3, %edx	#, prephitmp_47
 6994      00
 6995 03b5 488D3500 		leaq	.LC7(%rip), %rsi	#, _137
 6995      000000
 6996 03bc E9FFFDFF 		jmp	.L184	#
 6996      FF
 6997              		.p2align 4,,10
 6998 03c1 0F1F8000 		.p2align 3
 6998      000000
 6999              	.L180:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7000              		.loc 19 189 5 view .LVU1413
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7001              		.loc 19 189 5 view .LVU1414
 7002 03c8 BA040000 		movl	$4, %edx	#, prephitmp_47
 7002      00
 7003 03cd 488D3500 		leaq	.LC8(%rip), %rsi	#, _137
 7003      000000
 7004 03d4 E9E7FDFF 		jmp	.L184	#
 7004      FF
 7005 03d9 0F1F8000 		.p2align 4,,10
 7005      000000
 7006              		.p2align 3
 7007              	.L179:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7008              		.loc 19 189 5 view .LVU1415
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7009              		.loc 19 189 5 view .LVU1416
 7010 03e0 BA040000 		movl	$4, %edx	#, prephitmp_47
 7010      00
 7011 03e5 488D3500 		leaq	.LC9(%rip), %rsi	#, _137
 7011      000000
 7012 03ec E9CFFDFF 		jmp	.L184	#
 7012      FF
 7013              		.p2align 4,,10
 7014 03f1 0F1F8000 		.p2align 3
 7014      000000
 7015              	.L178:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7016              		.loc 19 189 5 view .LVU1417
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7017              		.loc 19 189 5 view .LVU1418
 7018 03f8 BA050000 		movl	$5, %edx	#, prephitmp_47
 7018      00
 7019 03fd 488D3500 		leaq	.LC10(%rip), %rsi	#, _137
 7019      000000
 7020 0404 E9B7FDFF 		jmp	.L184	#
 7020      FF
 7021 0409 0F1F8000 		.p2align 4,,10
 7021      000000
 7022              		.p2align 3
 7023              	.L177:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7024              		.loc 19 189 5 view .LVU1419
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7025              		.loc 19 189 5 view .LVU1420
 7026 0410 BA060000 		movl	$6, %edx	#, prephitmp_47
 7026      00
 7027 0415 488D3500 		leaq	.LC11(%rip), %rsi	#, _137
 7027      000000
 7028 041c E99FFDFF 		jmp	.L184	#
 7028      FF
 7029              		.p2align 4,,10
 7030 0421 0F1F8000 		.p2align 3
 7030      000000
 7031              	.L176:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7032              		.loc 19 189 5 view .LVU1421
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7033              		.loc 19 189 5 view .LVU1422
 7034 0428 BA0B0000 		movl	$11, %edx	#, prephitmp_47
 7034      00
 7035 042d 488D3500 		leaq	.LC12(%rip), %rsi	#, _137
 7035      000000
 7036 0434 E987FDFF 		jmp	.L184	#
 7036      FF
 7037 0439 0F1F8000 		.p2align 4,,10
 7037      000000
 7038              		.p2align 3
 7039              	.L175:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7040              		.loc 19 189 5 view .LVU1423
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7041              		.loc 19 189 5 view .LVU1424
 7042 0440 BA0C0000 		movl	$12, %edx	#, prephitmp_47
 7042      00
 7043 0445 488D3500 		leaq	.LC13(%rip), %rsi	#, _137
 7043      000000
 7044 044c E96FFDFF 		jmp	.L184	#
 7044      FF
 7045              		.p2align 4,,10
 7046 0451 0F1F8000 		.p2align 3
 7046      000000
 7047              	.L174:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7048              		.loc 19 189 5 view .LVU1425
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7049              		.loc 19 189 5 view .LVU1426
 7050 0458 BA0D0000 		movl	$13, %edx	#, prephitmp_47
 7050      00
 7051 045d 488D3500 		leaq	.LC14(%rip), %rsi	#, _137
 7051      000000
 7052 0464 E957FDFF 		jmp	.L184	#
 7052      FF
 7053              	.LVL359:
 7054 0469 0F1F8000 		.p2align 4,,10
 7054      000000
 7055              		.p2align 3
 7056              	.L188:
 189:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****     default:
 7057              		.loc 19 189 5 is_stmt 0 view .LVU1427
 7058              	.LBE6170:
 7059              	.LBE6175:
 7060              	.LBE6180:
 7061              	.LBE6200:
 7062              	.LBE6206:
 7063              	.LBE6213:
 7064              	.LBE6218:
 7065              	.LBE6339:
 7066              	.LBB6340:
 7067              	.LBB6298:
 7068              	.LBB6295:
 7069              	.LBB6264:
 7070              	.LBI6264:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 7071              		.loc 2 1470 9 is_stmt 1 view .LVU1428
 7072              	.LBB6265:
 7073              	.LBI6265:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 7074              		.loc 2 842 7 view .LVU1429
 7075              	.LBB6266:
 7076              	.LBI6266:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 7077              		.loc 17 806 7 view .LVU1430
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 7078              		.loc 17 806 7 is_stmt 0 view .LVU1431
 7079              	.LBE6266:
 7080              	.LBE6265:
 7081              	.LBB6267:
 7082              	.LBI6267:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 7083              		.loc 17 811 9 is_stmt 1 view .LVU1432
 7084              	.LBB6268:
 7085              	.LBI6268:
 7086              		.loc 17 871 7 view .LVU1433
 7087              		.loc 17 871 7 is_stmt 0 view .LVU1434
 7088              	.LBE6268:
 7089              	.LBE6267:
 7090              	.LBB6269:
 7091              	.LBI6269:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 7092              		.loc 2 826 7 is_stmt 1 view .LVU1435
 7093              	.LBB6270:
 7094              	.LBI6270:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 7095              		.loc 17 806 7 view .LVU1436
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 7096              		.loc 17 806 7 is_stmt 0 view .LVU1437
 7097              	.LBE6270:
 7098              	.LBE6269:
 7099              	.LBB6271:
 7100              	.LBI6271:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 7101              		.loc 17 811 9 is_stmt 1 view .LVU1438
 7102              	.LBB6272:
 7103              	.LBI6272:
 7104              		.loc 17 871 7 view .LVU1439
 7105              		.loc 17 871 7 is_stmt 0 view .LVU1440
 7106              	.LBE6272:
 7107              	.LBE6271:
 7108              	.LBB6273:
 7109              	.LBI6273:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 7110              		.loc 2 2123 7 is_stmt 1 view .LVU1441
 7111              	.LBB6274:
 7112              	.LBB6275:
 7113              	.LBI6275:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 7114              		.loc 2 826 7 view .LVU1442
 7115              	.LBB6276:
 7116              	.LBI6276:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 7117              		.loc 17 806 7 view .LVU1443
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 7118              		.loc 17 806 7 is_stmt 0 view .LVU1444
 7119              	.LBE6276:
 7120              	.LBE6275:
 7121              	.LBB6277:
 7122              	.LBI6277:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 7123              		.loc 2 1936 7 is_stmt 1 view .LVU1445
 7124              	.LBB6278:
 7125              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 7126              		.loc 2 1941 38 is_stmt 0 view .LVU1446
 7127 0470 4929C8   		subq	%rcx, %r8	# pretmp_50,
 7128              	.LVL360:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 7129              		.loc 2 1941 38 view .LVU1447
 7130 0473 31D2     		xorl	%edx, %edx	#
 7131 0475 31F6     		xorl	%esi, %esi	#
 7132 0477 4C89E7   		movq	%r12, %rdi	# <retval>,
 7133 047a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 7133      00
 7134              	.LVL361:
 7135              	.LEHE17:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 7136              		.loc 2 1941 38 view .LVU1448
 7137 047f E9B6FDFF 		jmp	.L189	#
 7137      FF
 7138              	.LVL362:
 7139              		.p2align 4,,10
 7140 0484 0F1F4000 		.p2align 3
 7141              	.L205:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 7142              		.loc 2 1941 38 view .LVU1449
 7143              	.LBE6278:
 7144              	.LBE6277:
 7145              	.LBE6274:
 7146              	.LBE6273:
 7147              	.LBE6264:
 7148              	.LBE6295:
 7149              	.LBE6298:
 7150              	.LBE6340:
 7151              	.LBB6341:
 7152              	.LBB6219:
 7153              	.LBB6214:
 7154              	.LBB6207:
 7155              	.LBB6201:
 7156              	.LBB6198:
 7157              	.LBB6197:
 7158              	.LBB6191:
 7159              	.LBI6191:
 565:/usr/include/c++/9/ostream ****     {
 7160              		.loc 16 565 5 is_stmt 1 view .LVU1450
 7161              	.LBB6192:
 7162              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 7163              		.loc 16 568 2 is_stmt 0 view .LVU1451
 7164 0488 488B4424 		movq	32(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 7164      20
 7165 048d 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_53 + -24B], _56
 7166 0491 4C01EF   		addq	%r13, %rdi	# tmp220, _56
 7167              	.LVL363:
 7168              	.LBB6193:
 7169              	.LBI6193:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 7170              		.loc 15 157 7 is_stmt 1 view .LVU1452
 7171              	.LBB6194:
 7172              	.LBB6195:
 7173              	.LBI6195:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 7174              		.loc 18 169 3 view .LVU1453
 7175              	.LBB6196:
 7176              		.loc 18 170 5 view .LVU1454
 7177              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 7178              		.loc 18 170 70 is_stmt 0 view .LVU1455
 7179 0494 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_56 + 32B], tmp190
 7180 0497 83CE01   		orl	$1, %esi	#, tmp190
 7181              	.LEHB18:
 7182              	.LBE6196:
 7183              	.LBE6195:
 7184              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 7185              		.loc 15 158 9 view .LVU1456
 7186 049a E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 7186      00
 7187              	.LVL364:
 7188              	.LEHE18:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 7189              		.loc 15 158 9 view .LVU1457
 7190 049f E94BFDFF 		jmp	.L186	#
 7190      FF
 7191              	.LVL365:
 7192              		.p2align 4,,10
 7193 04a4 0F1F4000 		.p2align 3
 7194              	.L187:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 7195              		.loc 15 158 9 view .LVU1458
 7196              	.LBE6194:
 7197              	.LBE6193:
 7198              	.LBE6192:
 7199              	.LBE6191:
 7200              	.LBE6197:
 7201              	.LBE6198:
 7202              	.LBE6201:
 7203              	.LBE6207:
 7204              	.LBE6214:
 7205              	.LBE6219:
 7206              	.LBE6341:
 7207              	.LBB6342:
 7208              	.LBB6299:
 7209              	.LBB6296:
 7210              	.LBB6279:
 7211              	.LBI6279:
 665:/usr/include/c++/9/bits/basic_string.h ****       {
 7212              		.loc 2 665 7 is_stmt 1 view .LVU1459
 7213              	.LBB6280:
 7214              	.LBI6280:
1364:/usr/include/c++/9/bits/basic_string.h ****       {
 7215              		.loc 2 1364 7 view .LVU1460
 7216              	.LBB6281:
 7217              	# /usr/include/c++/9/bits/basic_string.h:1366: 	this->_M_assign(__str);
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 7218              		.loc 2 1366 2 is_stmt 0 view .LVU1461
 7219 04a8 488D7424 		leaq	112(%rsp), %rsi	#, tmp199
 7219      70
 7220              	.LVL366:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 7221              		.loc 2 1366 2 view .LVU1462
 7222 04ad 4C89E7   		movq	%r12, %rdi	# <retval>,
 7223              	.LEHB19:
 7224 04b0 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT	#
 7224      00
 7225              	.LVL367:
 7226              	.LEHE19:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 7227              		.loc 2 1366 2 view .LVU1463
 7228 04b5 E980FDFF 		jmp	.L189	#
 7228      FF
 7229              	.LVL368:
 7230              	.L166:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 7231              		.loc 2 1366 2 view .LVU1464
 7232              	.LBE6281:
 7233              	.LBE6280:
 7234              	.LBE6279:
 7235              	.LBE6296:
 7236              	.LBE6299:
 7237              	.LBE6342:
 7238              	.LBB6343:
 7239              	.LBB6220:
 7240              	.LBB6215:
 7241              	.LBB6208:
 7242              	.LBB6202:
 7243              	.LBB6181:
 7244              	.LBB6176:
 7245              	.LBB6171:
 190:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****       return "UNKNOWN_SCALAR";
 7246              		.loc 19 190 5 is_stmt 1 view .LVU1465
 191:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 7247              		.loc 19 191 7 view .LVU1466
 7248              	# /workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h:191:       return "UNKNOWN_SCALA
 191:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 7249              		.loc 19 191 14 is_stmt 0 view .LVU1467
 7250 04ba BA0E0000 		movl	$14, %edx	#, prephitmp_47
 7250      00
 7251 04bf 488D3500 		leaq	.LC4(%rip), %rsi	#, _137
 7251      000000
 7252 04c6 E9F5FCFF 		jmp	.L184	#
 7252      FF
 7253              	.LVL369:
 7254              	.L206:
 191:/workspace/pth-linear-interp/torch/include/c10/core/ScalarType.h ****   }
 7255              		.loc 19 191 14 view .LVU1468
 7256              	.LBE6171:
 7257              	.LBE6176:
 7258              	.LBE6181:
 7259              	.LBE6202:
 7260              	.LBE6208:
 7261              	.LBE6215:
 7262              	.LBE6220:
 7263              	.LBE6343:
 7264              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
 7265              		.loc 14 54 3 view .LVU1469
 7266 04cb E8000000 		call	__stack_chk_fail@PLT	#
 7266      00
 7267              	.LVL370:
 7268              	.L200:
 7269              		.loc 14 54 3 view .LVU1470
 7270 04d0 F30F1EFA 		endbr64	
 7271 04d4 4989C6   		movq	%rax, %r14	# tmp236, tmp206
 7272 04d7 EB09     		jmp	.L192	#
 7273              	.LVL371:
 7274              	.L198:
 7275              		.loc 14 54 3 view .LVU1471
 7276 04d9 F30F1EFA 		endbr64	
 7277 04dd 4889C3   		movq	%rax, %rbx	# tmp233, tmp166
 7278              	.LVL372:
 7279              		.loc 14 54 3 view .LVU1472
 7280 04e0 EB4B     		jmp	.L163	#
 7281              	.LVL373:
 7282              	.L192:
 7283              	.LBB6344:
 7284              	.LBB6300:
 7285              	.LBB6297:
 7286              	.LBB6282:
 7287              	.LBI6282:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 7288              		.loc 2 657 7 is_stmt 1 view .LVU1473
 7289              	.LBB6283:
 7290              	.LBI6283:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 7291              		.loc 2 229 7 view .LVU1474
 7292              	.LBB6284:
 7293              	.LBB6285:
 7294              	.LBI6285:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 7295              		.loc 2 221 7 view .LVU1475
 7296              	.LBB6286:
 7297              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 7298              		.loc 2 222 26 is_stmt 0 view .LVU1476
 7299 04e2 498B3C24 		movq	(%r12), %rdi	# MEM[(char * *)_7(D)], _69
 7300              	.LVL374:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 7301              		.loc 2 222 26 view .LVU1477
 7302              	.LBE6286:
 7303              	.LBE6285:
 7304              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 7305              		.loc 2 231 2 view .LVU1478
 7306 04e6 4839FB   		cmpq	%rdi, %rbx	# _69, _60
 7307 04e9 7408     		je	.L194	#,
 7308              	.LVL375:
 7309              	.LBB6287:
 7310              	.LBI6287:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 7311              		.loc 2 236 7 is_stmt 1 view .LVU1479
 7312              	.LBB6288:
 7313              	.LBB6289:
 7314              	.LBI6289:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 7315              		.loc 3 469 7 view .LVU1480
 7316              	.LBB6290:
 7317              	.LBI6290:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 7318              		.loc 4 119 7 view .LVU1481
 7319              	.LBB6291:
 7320              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 7321              		.loc 4 128 19 is_stmt 0 view .LVU1482
 7322 04eb C5F877   		vzeroupper
 7323 04ee E8000000 		call	_ZdlPv@PLT	#
 7323      00
 7324              	.LVL376:
 7325              		.loc 4 128 19 view .LVU1483
 7326              	.LBE6291:
 7327              	.LBE6290:
 7328              	.LBE6289:
 7329              	.LBE6288:
 7330              	.LBE6287:
 7331              	.LBE6284:
 7332              	.LBE6283:
 7333              	.LBB6292:
 7334              	.LBI6292:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 7335              		.loc 2 150 14 is_stmt 1 view .LVU1484
 7336              	.LBB6293:
 7337              	.LBI6293:
 7338              		.loc 5 153 7 view .LVU1485
 7339              	.LBB6294:
 7340              	.LBI6294:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 7341              		.loc 4 89 7 view .LVU1486
 7342              	.L194:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 7343              		.loc 4 89 7 is_stmt 0 view .LVU1487
 7344              	.LBE6294:
 7345              	.LBE6293:
 7346              	.LBE6292:
 7347              	.LBE6282:
 7348              	.LBE6297:
 7349              	.LBE6300:
 7350              	.LBE6344:
 7351              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:51:     std::ostringstream ss;
  51:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     _str(ss, args...);
 7352              		.loc 14 51 24 view .LVU1488
 7353 04f3 4C89EF   		movq	%r13, %rdi	# tmp220,
 7354 04f6 C5F877   		vzeroupper
 7355 04f9 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 7355      00
 7356              	.LVL377:
 7357 04fe 4C89F7   		movq	%r14, %rdi	# tmp205,
 7358              	.LEHB20:
 7359 0501 E8000000 		call	_Unwind_Resume@PLT	#
 7359      00
 7360              	.LVL378:
 7361              	.L162:
 7362              	.LBB6345:
 7363              	.LBB6143:
 7364              	.LBB6140:
 7365              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 7366              		.loc 12 584 53 view .LVU1489
 7367 0506 4C89FF   		movq	%r15, %rdi	# tmp223,
 7368 0509 C5F877   		vzeroupper
 7369 050c E8000000 		call	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev	#
 7369      00
 7370              	.LVL379:
 7371              	.LBB6134:
 7372              	.LBI6134:
  93:/usr/include/c++/9/ostream **** 
 7373              		.loc 16 93 7 is_stmt 1 view .LVU1490
 7374              	.LBB6135:
 7375              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 7376              		.loc 16 93 26 is_stmt 0 view .LVU1491
 7377 0511 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 7377      000000
 7378 0518 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 7378      000000
 7379 051f 48894424 		movq	%rax, 32(%rsp)	# tmp252, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 7379      20
 7380 0524 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_20 + -24B], MEM[(long int *)_20 + -24B]
 7381 0528 48894C04 		movq	%rcx, 32(%rsp,%rax)	# tmp254, *_32.D.34155._vptr.ios_base
 7381      20
 7382              	.LVL380:
 7383              	.L163:
  93:/usr/include/c++/9/ostream **** 
 7384              		.loc 16 93 26 view .LVU1492
 7385              	.LBE6135:
 7386              	.LBE6134:
 7387              	.LBB6136:
 7388              	.LBI6136:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 7389              		.loc 15 282 7 is_stmt 1 view .LVU1493
 7390              	.LBB6137:
 7391              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 7392              		.loc 15 282 22 is_stmt 0 view .LVU1494
 7393 052d 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp255
 7393      000000
 7394 0534 4C89F7   		movq	%r14, %rdi	# tmp222,
 7395 0537 48898424 		movq	%rax, 144(%rsp)	# tmp255, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 7395      90000000 
 7396 053f C5F877   		vzeroupper
 7397 0542 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 7397      00
 7398              	.LVL381:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 7399              		.loc 15 282 22 view .LVU1495
 7400 0547 4889DF   		movq	%rbx, %rdi	# tmp166,
 7401 054a E8000000 		call	_Unwind_Resume@PLT	#
 7401      00
 7402              	.LVL382:
 7403              	.LEHE20:
 7404              	.L199:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 7405              		.loc 15 282 22 view .LVU1496
 7406 054f F30F1EFA 		endbr64	
 7407 0553 4889C3   		movq	%rax, %rbx	# tmp232, tmp162
 7408              	.LVL383:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 7409              		.loc 15 282 22 view .LVU1497
 7410 0556 EBAE     		jmp	.L162	#
 7411              	.LVL384:
 7412              	.L197:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 7413              		.loc 15 282 22 view .LVU1498
 7414 0558 F30F1EFA 		endbr64	
 7415 055c 4989C6   		movq	%rax, %r14	# tmp237, tmp205
 7416 055f EB92     		jmp	.L194	#
 7417              	.LBE6137:
 7418              	.LBE6136:
 7419              	.LBE6140:
 7420              	.LBE6143:
 7421              	.LBE6345:
 7422              		.cfi_endproc
 7423              	.LFE12256:
 7424              		.section	.gcc_except_table._ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERK
 7425              	.LLSDA12256:
 7426 0000 FF       		.byte	0xff
 7427 0001 FF       		.byte	0xff
 7428 0002 01       		.byte	0x1
 7429 0003 2B       		.uleb128 .LLSDACSE12256-.LLSDACSB12256
 7430              	.LLSDACSB12256:
 7431 0004 B301     		.uleb128 .LEHB14-.LFB12256
 7432 0006 05       		.uleb128 .LEHE14-.LEHB14
 7433 0007 D909     		.uleb128 .L198-.LFB12256
 7434 0009 00       		.uleb128 0
 7435 000a CB02     		.uleb128 .LEHB15-.LFB12256
 7436 000c 05       		.uleb128 .LEHE15-.LEHB15
 7437 000d CF0A     		.uleb128 .L199-.LFB12256
 7438 000f 00       		.uleb128 0
 7439 0010 EE02     		.uleb128 .LEHB16-.LFB12256
 7440 0012 8101     		.uleb128 .LEHE16-.LEHB16
 7441 0014 D80A     		.uleb128 .L197-.LFB12256
 7442 0016 00       		.uleb128 0
 7443 0017 B504     		.uleb128 .LEHB17-.LFB12256
 7444 0019 CA04     		.uleb128 .LEHE17-.LEHB17
 7445 001b D009     		.uleb128 .L200-.LFB12256
 7446 001d 00       		.uleb128 0
 7447 001e 9A09     		.uleb128 .LEHB18-.LFB12256
 7448 0020 05       		.uleb128 .LEHE18-.LEHB18
 7449 0021 D80A     		.uleb128 .L197-.LFB12256
 7450 0023 00       		.uleb128 0
 7451 0024 B009     		.uleb128 .LEHB19-.LFB12256
 7452 0026 05       		.uleb128 .LEHE19-.LEHB19
 7453 0027 D009     		.uleb128 .L200-.LFB12256
 7454 0029 00       		.uleb128 0
 7455 002a 810A     		.uleb128 .LEHB20-.LFB12256
 7456 002c 4E       		.uleb128 .LEHE20-.LEHB20
 7457 002d 00       		.uleb128 0
 7458 002e 00       		.uleb128 0
 7459              	.LLSDACSE12256:
 7460              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_,"a
 7462              		.section	.text._ZN3c106detail12_str_wrapperIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 7463              		.p2align 4
 7464              		.weak	_ZN3c106detail12_str_wrapperIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4callE
 7466              	_ZN3c106detail12_str_wrapperIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4callES9_:
 7467              	.LVL385:
 7468              	.LFB12097:
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 7469              		.loc 14 50 22 is_stmt 1 view -0
 7470              		.cfi_startproc
 7471              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 7472              		.cfi_lsda 0x1b,.LLSDA12097
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 7473              		.loc 14 50 22 is_stmt 0 view .LVU1500
 7474 0000 F30F1EFA 		endbr64	
 7475 0004 55       		pushq	%rbp	#
 7476              		.cfi_def_cfa_offset 16
 7477              		.cfi_offset 6, -16
 7478 0005 4889E5   		movq	%rsp, %rbp	#,
 7479              		.cfi_def_cfa_register 6
 7480 0008 4157     		pushq	%r15	#
 7481 000a 4156     		pushq	%r14	#
 7482 000c 4155     		pushq	%r13	#
 7483 000e 4154     		pushq	%r12	#
 7484              		.cfi_offset 15, -24
 7485              		.cfi_offset 14, -32
 7486              		.cfi_offset 13, -40
 7487              		.cfi_offset 12, -48
 7488 0010 4989FC   		movq	%rdi, %r12	# tmp185, <retval>
 7489 0013 53       		pushq	%rbx	#
 7490              		.cfi_offset 3, -56
 7491 0014 4889F3   		movq	%rsi, %rbx	# tmp186, args#0
 7492 0017 4883E4E0 		andq	$-32, %rsp	#,
 7493 001b 4881ECA0 		subq	$416, %rsp	#,
 7493      010000
 7494              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 7495              		.loc 14 50 22 view .LVU1501
 7496 0022 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp191
 7496      25280000 
 7496      00
 7497 002b 48898424 		movq	%rax, 408(%rsp)	# tmp191, D.445698
 7497      98010000 
 7498 0033 31C0     		xorl	%eax, %eax	# tmp191
 7499              	.LVL386:
 7500              	.LBB6492:
 7501              	.LBI6492:
 583:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 7502              		.loc 12 583 7 is_stmt 1 view .LVU1502
 7503              	.LBB6493:
 7504              	.LBB6494:
 7505              	.LBB6495:
 7506              	.LBI6495:
 460:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 7507              		.loc 15 460 7 view .LVU1503
 7508              	.LBB6496:
 7509              	.LBB6497:
 7510              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 7511              		.loc 15 462 59 is_stmt 0 view .LVU1504
 7512 0035 4C8DAC24 		leaq	144(%rsp), %r13	#, tmp176
 7512      90000000 
 7513              	.LVL387:
 7514              		.loc 15 462 59 view .LVU1505
 7515 003d 4C8D7C24 		leaq	32(%rsp), %r15	#, tmp178
 7515      20
 7516              	.LVL388:
 7517              		.loc 15 462 59 view .LVU1506
 7518 0042 4C89EF   		movq	%r13, %rdi	# tmp176,
 7519              	.LVL389:
 7520              		.loc 15 462 59 view .LVU1507
 7521 0045 E8000000 		call	_ZNSt8ios_baseC2Ev@PLT	#
 7521      00
 7522              	.LVL390:
 7523              		.loc 15 462 59 view .LVU1508
 7524 004a 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp193
 7524      000000
 7525 0051 C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp119
 7526              	.LBE6497:
 7527              	.LBE6496:
 7528              	.LBE6495:
 7529              	.LBB6506:
 7530              	.LBB6507:
 7531              	.LBB6508:
 7532              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 7533              		.loc 16 391 9 view .LVU1509
 7534 0055 31F6     		xorl	%esi, %esi	#
 7535              	.LBE6508:
 7536              	.LBE6507:
 7537              	.LBE6506:
 7538              	.LBB6515:
 7539              	.LBB6502:
 7540              	.LBB6498:
 7541              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 7542              		.loc 15 462 59 view .LVU1510
 7543 0057 48898424 		movq	%rax, 144(%rsp)	# tmp193, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 7543      90000000 
 7544 005f 31C0     		xorl	%eax, %eax	#
 7545 0061 C4E37D39 		vextracti128	$0x1, %ymm0, 392(%rsp)	# tmp119, MEM[(void *)&ss + 344B]
 7545      84248801 
 7545      000001
 7546              	.LVL391:
 7547              		.loc 15 462 59 view .LVU1511
 7548              	.LBE6498:
 7549              	.LBE6502:
 7550              	.LBE6515:
 7551              	.LBB6516:
 7552              	.LBI6506:
 390:/usr/include/c++/9/ostream ****       { this->init(0); }
 7553              		.loc 16 390 7 is_stmt 1 view .LVU1512
 7554              	.LBE6516:
 7555              	.LBB6517:
 7556              	.LBB6503:
 7557              	.LBB6499:
 7558              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 7559              		.loc 15 462 59 is_stmt 0 view .LVU1513
 7560 006c 66898424 		movw	%ax, 368(%rsp)	#, MEM[(void *)&ss + 336B]
 7560      70010000 
 7561              	.LBE6499:
 7562              	.LBE6503:
 7563              	.LBE6517:
 7564              	.LBB6518:
 7565              	.LBB6512:
 7566              	.LBB6509:
 7567              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 7568              		.loc 16 391 7 view .LVU1514
 7569 0074 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 7569      000000
 7570              	.LBE6509:
 7571              	.LBE6512:
 7572              	.LBE6518:
 7573              	.LBB6519:
 7574              	.LBB6504:
 7575              	.LBB6500:
 7576              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 7577              		.loc 15 462 59 view .LVU1515
 7578 007b C5F81184 		vmovups	%xmm0, 376(%rsp)	# tmp119, MEM[(void *)&ss + 344B]
 7578      24780100 
 7578      00
 7579              	.LBE6500:
 7580              	.LBE6504:
 7581              	.LBE6519:
 7582              	.LBB6520:
 7583              	.LBB6513:
 7584              	.LBB6510:
 7585              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 7586              		.loc 16 391 7 view .LVU1516
 7587 0084 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_16 + -24B], _19
 7588 0088 48894424 		movq	%rax, 32(%rsp)	# tmp194, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 7588      20
 7589 008d 488B0500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const v
 7589      000000
 7590              	.LBE6510:
 7591              	.LBE6513:
 7592              	.LBE6520:
 7593              	.LBB6521:
 7594              	.LBB6505:
 7595              	.LBB6501:
 7596              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 7597              		.loc 15 462 59 view .LVU1517
 7598 0094 48C78424 		movq	$0, 360(%rsp)	#, MEM[(struct basic_ios *)&ss + 112B]._M_tie
 7598      68010000 
 7598      00000000 
 7599              	.LBE6501:
 7600              	.LBE6505:
 7601              	.LBE6521:
 7602              	.LBB6522:
 7603              	.LBB6514:
 7604              	.LBB6511:
 7605              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 7606              		.loc 16 391 7 view .LVU1518
 7607 00a0 4C01FF   		addq	%r15, %rdi	# tmp178, _19
 7608 00a3 488907   		movq	%rax, (%rdi)	# tmp197, *_19.D.34155._vptr.ios_base
 7609              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 7610              		.loc 16 391 9 view .LVU1519
 7611 00a6 C5F877   		vzeroupper
 7612              	.LEHB21:
 7613 00a9 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 7613      00
 7614              	.LVL392:
 7615              	.LEHE21:
 391:/usr/include/c++/9/ostream **** 
 7616              		.loc 16 391 9 view .LVU1520
 7617              	.LBE6511:
 7618              	.LBE6514:
 7619              	.LBE6522:
 7620              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 7621              		.loc 12 584 53 view .LVU1521
 7622 00ae C5FA7E0D 		vmovq	.LC1(%rip), %xmm1	#, tmp199
 7622      00000000 
 7623 00b6 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp198
 7623      000000
 7624              	.LBB6523:
 7625              	.LBB6524:
 7626              	.LBB6525:
 7627              	.LBB6526:
 7628              	.LBB6527:
 7629              	.LBB6528:
 7630              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 7631              		.loc 13 473 29 view .LVU1522
 7632 00bd 4C8D7424 		leaq	96(%rsp), %r14	#, tmp181
 7632      60
 7633              	.LBE6528:
 7634              	.LBE6527:
 7635              	.LBE6526:
 7636              	.LBE6525:
 7637              	.LBE6524:
 7638              	.LBE6523:
 7639              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 7640              		.loc 12 584 53 view .LVU1523
 7641 00c2 48898424 		movq	%rax, 144(%rsp)	# tmp198, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 7641      90000000 
 7642              	.LVL393:
 7643              	.LBB6575:
 7644              	.LBI6523:
 111:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 7645              		.loc 12 111 7 is_stmt 1 view .LVU1524
 7646              	.LBB6570:
 7647              	.LBB6565:
 7648              	.LBB6533:
 7649              	.LBI6526:
 470:/usr/include/c++/9/streambuf ****       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
 7650              		.loc 13 470 7 view .LVU1525
 7651              	.LBE6533:
 7652              	.LBE6565:
 7653              	.LBE6570:
 7654              	.LBE6575:
 7655              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 7656              		.loc 12 584 53 is_stmt 0 view .LVU1526
 7657 00ca 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp200
 7657      000000
 7658              	.LBB6576:
 7659              	.LBB6571:
 7660              	.LBB6566:
 7661              	.LBB6534:
 7662              	.LBB6531:
 7663              	.LBB6529:
 7664              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 7665              		.loc 13 473 29 view .LVU1527
 7666 00d1 4C89F7   		movq	%r14, %rdi	# tmp181,
 7667              	.LBE6529:
 7668              	.LBE6531:
 7669              	.LBE6534:
 7670              	.LBE6566:
 7671              	.LBE6571:
 7672              	.LBE6576:
 7673              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 7674              		.loc 12 584 53 view .LVU1528
 7675 00d4 C4E3F122 		vpinsrq	$1, %rax, %xmm1, %xmm0	# tmp200, tmp199, tmp125
 7675      C001
 7676 00da C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp125, MEM[(int (*) () * *)&ss]
 7676      2420
 7677              	.LBB6577:
 7678              	.LBB6572:
 7679              	.LBB6567:
 7680              	.LBB6535:
 7681              	.LBB6532:
 7682              	.LBB6530:
 7683              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 7684              		.loc 13 473 29 view .LVU1529
 7685 00e0 C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp127
 7686 00e4 C5F82944 		vmovaps	%xmm0, 48(%rsp)	# tmp127, MEM[(char_type * *)&ss + 16B]
 7686      2430
 7687 00ea C5F82944 		vmovaps	%xmm0, 64(%rsp)	# tmp127, MEM[(char_type * *)&ss + 32B]
 7687      2440
 7688 00f0 C5F82944 		vmovaps	%xmm0, 80(%rsp)	# tmp127, MEM[(char_type * *)&ss + 48B]
 7688      2450
 7689 00f6 E8000000 		call	_ZNSt6localeC1Ev@PLT	#
 7689      00
 7690              	.LVL394:
 7691              		.loc 13 473 29 view .LVU1530
 7692              	.LBE6530:
 7693              	.LBE6532:
 7694              	.LBE6535:
 7695              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 7696              		.loc 12 112 56 view .LVU1531
 7697 00fb 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp201
 7697      000000
 7698              	.LBE6567:
 7699              	.LBE6572:
 7700              	.LBE6577:
 7701              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 7702              		.loc 12 585 9 view .LVU1532
 7703 0102 4C89EF   		movq	%r13, %rdi	# tmp176,
 7704              	.LBB6578:
 7705              	.LBB6573:
 7706              	.LBB6568:
 7707              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 7708              		.loc 12 112 56 view .LVU1533
 7709 0105 C7442468 		movl	$16, 104(%rsp)	#, MEM[(struct basic_stringbuf *)&ss + 8B]._M_mode
 7709      10000000 
 7710              	.LVL395:
 7711              	.LBB6536:
 7712              	.LBI6536:
 431:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 7713              		.loc 2 431 7 is_stmt 1 view .LVU1534
 7714              	.LBB6537:
 7715              	.LBB6538:
 7716              	.LBI6538:
 138:/usr/include/c++/9/bits/allocator.h **** 
 7717              		.loc 5 138 7 view .LVU1535
 7718              	.LBB6539:
 7719              	.LBI6539:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 7720              		.loc 4 80 7 view .LVU1536
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 7721              		.loc 4 80 7 is_stmt 0 view .LVU1537
 7722              	.LBE6539:
 7723              	.LBE6538:
 7724              	.LBB6540:
 7725              	.LBI6540:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 7726              		.loc 2 190 7 is_stmt 1 view .LVU1538
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 7727              		.loc 2 190 7 is_stmt 0 view .LVU1539
 7728              	.LBE6540:
 7729              	.LBB6541:
 7730              	.LBI6541:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 7731              		.loc 2 159 2 is_stmt 1 view .LVU1540
 7732              	.LBB6542:
 7733              	.LBB6543:
 7734              	.LBB6544:
 7735              	.LBI6544:
 7736              		.loc 11 99 5 view .LVU1541
 7737              		.loc 11 99 5 is_stmt 0 view .LVU1542
 7738              	.LBE6544:
 7739              	.LBB6545:
 7740              	.LBI6545:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 7741              		.loc 5 141 7 is_stmt 1 view .LVU1543
 7742              	.LBB6546:
 7743              	.LBI6546:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 7744              		.loc 4 83 7 view .LVU1544
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 7745              		.loc 4 83 7 is_stmt 0 view .LVU1545
 7746              	.LBE6546:
 7747              	.LBE6545:
 7748              	.LBE6543:
 7749              	.LBE6542:
 7750              	.LBE6541:
 7751              	.LBE6537:
 7752              	.LBE6536:
 7753              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 7754              		.loc 12 112 56 view .LVU1546
 7755 010d 48894424 		movq	%rax, 40(%rsp)	# tmp201, MEM[(struct basic_stringbuf *)&ss + 8B].D.48380._vptr.basic_streambu
 7755      28
 7756              	.LBB6563:
 7757              	.LBB6561:
 7758              	.LBB6549:
 7759              	.LBB6548:
 7760              	.LBB6547:
 7761              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 7762              		.loc 2 160 46 view .LVU1547
 7763 0112 488D8424 		leaq	128(%rsp), %rax	#, tmp184
 7763      80000000 
 7764              	.LVL396:
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 7765              		.loc 2 160 46 view .LVU1548
 7766 011a 48894424 		movq	%rax, 24(%rsp)	# tmp184, %sfp
 7766      18
 7767 011f 48894424 		movq	%rax, 112(%rsp)	# tmp184, MEM[(struct _Alloc_hider *)&ss + 80B]._M_p
 7767      70
 7768              	.LVL397:
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 7769              		.loc 2 160 46 view .LVU1549
 7770              	.LBE6547:
 7771              	.LBE6548:
 7772              	.LBE6549:
 7773              	.LBB6550:
 7774              	.LBI6550:
 7775              		.loc 5 153 7 is_stmt 1 view .LVU1550
 7776              	.LBB6551:
 7777              	.LBI6551:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 7778              		.loc 4 89 7 view .LVU1551
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 7779              		.loc 4 89 7 is_stmt 0 view .LVU1552
 7780              	.LBE6551:
 7781              	.LBE6550:
 7782              	.LBB6552:
 7783              	.LBI6552:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 7784              		.loc 2 214 7 is_stmt 1 view .LVU1553
 7785              	.LBB6553:
 7786              	.LBI6553:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 7787              		.loc 2 182 7 view .LVU1554
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 7788              		.loc 2 182 7 is_stmt 0 view .LVU1555
 7789              	.LBE6553:
 7790              	.LBE6552:
 7791              	.LBE6561:
 7792              	.LBE6563:
 7793              	.LBE6568:
 7794              	.LBE6573:
 7795              	.LBE6578:
 7796              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 7797              		.loc 12 585 9 view .LVU1556
 7798 0124 488D4424 		leaq	40(%rsp), %rax	#, tmp183
 7798      28
 7799 0129 4889C6   		movq	%rax, %rsi	# tmp183,
 7800              	.LBB6579:
 7801              	.LBB6574:
 7802              	.LBB6569:
 7803              	.LBB6564:
 7804              	.LBB6562:
 7805              	.LBB6560:
 7806              	.LBB6555:
 7807              	.LBB6556:
 7808              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 7809              		.loc 8 300 14 view .LVU1557
 7810 012c C6842480 		movb	$0, 128(%rsp)	#, MEM[(char_type &)&ss + 96]
 7810      00000000 
 7811              	.LBE6556:
 7812              	.LBE6555:
 7813              	.LBB6558:
 7814              	.LBB6554:
 7815              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 7816              		.loc 2 183 9 view .LVU1558
 7817 0134 48C74424 		movq	$0, 120(%rsp)	#, MEM[(size_type *)&ss + 88B]
 7817      78000000 
 7817      00
 7818              	.LVL398:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 7819              		.loc 2 183 9 view .LVU1559
 7820              	.LBE6554:
 7821              	.LBE6558:
 7822              	.LBB6559:
 7823              	.LBI6555:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 7824              		.loc 8 299 7 is_stmt 1 view .LVU1560
 7825              	.LBB6557:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 7826              		.loc 8 300 9 view .LVU1561
 300:/usr/include/c++/9/bits/char_traits.h **** 
 7827              		.loc 8 300 9 is_stmt 0 view .LVU1562
 7828              	.LBE6557:
 7829              	.LBE6559:
 7830              	.LBE6560:
 7831              	.LBE6562:
 7832              	.LBE6564:
 7833              	.LBE6569:
 7834              	.LBE6574:
 7835              	.LBE6579:
 7836              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 7837              		.loc 12 585 9 view .LVU1563
 7838 013d 48894424 		movq	%rax, 16(%rsp)	# tmp183, %sfp
 7838      10
 7839              	.LEHB22:
 7840 0142 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 7840      00
 7841              	.LVL399:
 7842              	.LEHE22:
 585:/usr/include/c++/9/sstream **** 
 7843              		.loc 12 585 9 view .LVU1564
 7844              	.LBE6494:
 7845              	.LBE6493:
 7846              	.LBE6492:
 7847              	.LBB6586:
 7848              	.LBI6586:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 7849              		.loc 14 38 22 is_stmt 1 view .LVU1565
 7850              	.LBB6587:
 7851              	.LBI6587:
6416:/usr/include/c++/9/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __str)
 7852              		.loc 2 6416 5 view .LVU1566
 7853              	.LBB6588:
 7854              	.LBB6589:
 7855              	.LBI6589:
2312:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
 7856              		.loc 2 2312 7 view .LVU1567
2312:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data(); }
 7857              		.loc 2 2312 7 is_stmt 0 view .LVU1568
 7858              	.LBE6589:
 7859              	# /usr/include/c++/9/bits/basic_string.h:6421:       return __ostream_insert(__os, __str.data(), __
 7860              		.loc 2 6421 30 view .LVU1569
 7861 0147 488B5308 		movq	8(%rbx), %rdx	# MEM[(long unsigned int *)args#0_4(D) + 8B], MEM[(long unsigned int *)args#0_4
 7862 014b 488B33   		movq	(%rbx), %rsi	# MEM[(char * *)args#0_4(D)],
 7863 014e 4C89FF   		movq	%r15, %rdi	# tmp178,
 7864              	.LEHB23:
 7865 0151 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 7865      00
 7866              	.LVL400:
 7867              	.LEHE23:
 7868              		.loc 2 6421 30 view .LVU1570
 7869              	.LBE6588:
 7870              	.LBE6587:
 7871              	.LBE6586:
 7872              	.LBB6590:
 7873              	.LBI6590:
 7874              		.loc 12 677 7 is_stmt 1 view .LVU1571
 7875              	.LBB6591:
 7876              	.LBI6591:
 178:/usr/include/c++/9/sstream ****       {
 7877              		.loc 12 178 7 view .LVU1572
 7878              	.LBB6592:
 7879              	.LBB6593:
 7880              	.LBI6593:
2331:/usr/include/c++/9/bits/basic_string.h ****       { return _M_get_allocator(); }
 7881              		.loc 2 2331 7 view .LVU1573
 7882              	.LBB6594:
 7883              	.LBI6594:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 7884              		.loc 5 141 7 view .LVU1574
 7885              	.LBB6595:
 7886              	.LBI6595:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 7887              		.loc 4 83 7 view .LVU1575
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 7888              		.loc 4 83 7 is_stmt 0 view .LVU1576
 7889              	.LBE6595:
 7890              	.LBE6594:
 7891              	.LBE6593:
 7892              	.LBB6596:
 7893              	.LBI6596:
 440:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 7894              		.loc 2 440 7 is_stmt 1 view .LVU1577
 7895              	.LBB6597:
 7896              	.LBI6597:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 7897              		.loc 2 190 7 view .LVU1578
 7898              	.LBE6597:
 7899              	.LBE6596:
 7900              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 7901              		.loc 12 181 2 is_stmt 0 view .LVU1579
 7902 0156 488B4424 		movq	80(%rsp), %rax	# MEM[(char_type * *)&ss + 48B], _31
 7902      50
 7903              	.LBB6613:
 7904              	.LBB6599:
 7905              	.LBB6598:
 7906              	# /usr/include/c++/9/bits/basic_string.h:193: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 7907              		.loc 2 193 51 view .LVU1580
 7908 015b 498D5C24 		leaq	16(%r12), %rbx	#, _30
 7908      10
 7909              	.LVL401:
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 7910              		.loc 2 193 51 view .LVU1581
 7911              	.LBE6598:
 7912              	.LBE6599:
 7913              	.LBB6600:
 7914              	.LBI6600:
 156:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 7915              		.loc 2 156 2 is_stmt 1 view .LVU1582
 7916              	.LBB6601:
 7917              	.LBB6602:
 7918              	.LBI6602:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 7919              		.loc 5 141 7 view .LVU1583
 7920              	.LBB6603:
 7921              	.LBI6603:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 7922              		.loc 4 83 7 view .LVU1584
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 7923              		.loc 4 83 7 is_stmt 0 view .LVU1585
 7924              	.LBE6603:
 7925              	.LBE6602:
 7926              	.LBE6601:
 7927              	.LBE6600:
 7928              	.LBB6605:
 7929              	.LBB6606:
 7930              	.LBB6607:
 7931              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 7932              		.loc 2 183 9 view .LVU1586
 7933 0160 49C74424 		movq	$0, 8(%r12)	#, MEM[(size_type *)_5(D) + 8B]
 7933      08000000 
 7933      00
 7934              	.LBE6607:
 7935              	.LBE6606:
 7936              	.LBE6605:
 7937              	.LBB6611:
 7938              	.LBB6604:
 7939              	# /usr/include/c++/9/bits/basic_string.h:157: 	: allocator_type(__a), _M_p(__dat) { }
 157:/usr/include/c++/9/bits/basic_string.h **** 
 7940              		.loc 2 157 35 view .LVU1587
 7941 0169 49891C24 		movq	%rbx, (%r12)	# _30, MEM[(struct _Alloc_hider *)_5(D)]._M_p
 7942              	.LVL402:
 157:/usr/include/c++/9/bits/basic_string.h **** 
 7943              		.loc 2 157 35 view .LVU1588
 7944              	.LBE6604:
 7945              	.LBE6611:
 7946              	.LBB6612:
 7947              	.LBI6605:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 7948              		.loc 2 214 7 is_stmt 1 view .LVU1589
 7949              	.LBB6608:
 7950              	.LBI6606:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 7951              		.loc 2 182 7 view .LVU1590
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 7952              		.loc 2 182 7 is_stmt 0 view .LVU1591
 7953              	.LBE6608:
 7954              	.LBB6609:
 7955              	.LBI6609:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 7956              		.loc 8 299 7 is_stmt 1 view .LVU1592
 7957              	.LBB6610:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 7958              		.loc 8 300 9 view .LVU1593
 7959              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 7960              		.loc 8 300 14 is_stmt 0 view .LVU1594
 7961 016d 41C64424 		movb	$0, 16(%r12)	#, MEM[(char_type &)_5(D) + 16]
 7961      1000
 7962              	.LVL403:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 7963              		.loc 8 300 14 view .LVU1595
 7964              	.LBE6610:
 7965              	.LBE6609:
 7966              	.LBE6612:
 7967              	.LBE6613:
 7968              	.LBB6614:
 7969              	.LBI6614:
 7970              		.loc 5 153 7 is_stmt 1 view .LVU1596
 7971              	.LBB6615:
 7972              	.LBI6615:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 7973              		.loc 4 89 7 view .LVU1597
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 7974              		.loc 4 89 7 is_stmt 0 view .LVU1598
 7975              	.LBE6615:
 7976              	.LBE6614:
 7977              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 7978              		.loc 12 181 2 view .LVU1599
 7979 0173 4885C0   		testq	%rax, %rax	# _31
 7980 0176 0F84E400 		je	.L211	#,
 7980      0000
 7981              	.LVL404:
 7982              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 7983              		.loc 12 184 23 view .LVU1600
 7984 017c 4C8B4424 		movq	64(%rsp), %r8	# MEM[(char_type * *)&ss + 32B], _32
 7984      40
 7985              	.LVL405:
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 7986              		.loc 12 184 23 view .LVU1601
 7987 0181 488B4C24 		movq	72(%rsp), %rcx	# MEM[(char_type * *)&ss + 40B], pretmp_47
 7987      48
 7988              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 7989              		.loc 12 184 6 view .LVU1602
 7990 0186 4C39C0   		cmpq	%r8, %rax	# _32, _31
 7991 0189 0F87B900 		ja	.L227	#,
 7991      0000
 7992              	.LVL406:
 7993              	.LBB6616:
 7994              	.LBI6616:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 7995              		.loc 2 1470 9 is_stmt 1 view .LVU1603
 7996              	.LBB6617:
 7997              	.LBI6617:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 7998              		.loc 2 842 7 view .LVU1604
 7999              	.LBB6618:
 8000              	.LBI6618:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8001              		.loc 17 806 7 view .LVU1605
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8002              		.loc 17 806 7 is_stmt 0 view .LVU1606
 8003              	.LBE6618:
 8004              	.LBE6617:
 8005              	.LBB6619:
 8006              	.LBI6619:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 8007              		.loc 17 811 9 is_stmt 1 view .LVU1607
 8008              	.LBB6620:
 8009              	.LBI6620:
 8010              		.loc 17 871 7 view .LVU1608
 8011              		.loc 17 871 7 is_stmt 0 view .LVU1609
 8012              	.LBE6620:
 8013              	.LBE6619:
 8014              	.LBB6621:
 8015              	.LBI6621:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 8016              		.loc 2 826 7 is_stmt 1 view .LVU1610
 8017              	.LBB6622:
 8018              	.LBI6622:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8019              		.loc 17 806 7 view .LVU1611
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8020              		.loc 17 806 7 is_stmt 0 view .LVU1612
 8021              	.LBE6622:
 8022              	.LBE6621:
 8023              	.LBB6623:
 8024              	.LBI6623:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 8025              		.loc 17 811 9 is_stmt 1 view .LVU1613
 8026              	.LBB6624:
 8027              	.LBI6624:
 8028              		.loc 17 871 7 view .LVU1614
 8029              		.loc 17 871 7 is_stmt 0 view .LVU1615
 8030              	.LBE6624:
 8031              	.LBE6623:
 8032              	.LBB6625:
 8033              	.LBI6625:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 8034              		.loc 2 2123 7 is_stmt 1 view .LVU1616
 8035              	.LBB6626:
 8036              	.LBB6627:
 8037              	.LBI6627:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 8038              		.loc 2 826 7 view .LVU1617
 8039              	.LBB6628:
 8040              	.LBI6628:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8041              		.loc 17 806 7 view .LVU1618
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8042              		.loc 17 806 7 is_stmt 0 view .LVU1619
 8043              	.LBE6628:
 8044              	.LBE6627:
 8045              	.LBB6629:
 8046              	.LBI6629:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 8047              		.loc 2 1936 7 is_stmt 1 view .LVU1620
 8048              	.LBB6630:
 8049              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 8050              		.loc 2 1941 38 is_stmt 0 view .LVU1621
 8051 018f 4929C8   		subq	%rcx, %r8	# pretmp_47,
 8052              	.LVL407:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 8053              		.loc 2 1941 38 view .LVU1622
 8054 0192 31D2     		xorl	%edx, %edx	#
 8055 0194 31F6     		xorl	%esi, %esi	#
 8056 0196 4C89E7   		movq	%r12, %rdi	# <retval>,
 8057              	.LEHB24:
 8058 0199 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 8058      00
 8059              	.LVL408:
 8060              	.L213:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 8061              		.loc 2 1941 38 view .LVU1623
 8062              	.LBE6630:
 8063              	.LBE6629:
 8064              	.LBE6626:
 8065              	.LBE6625:
 8066              	.LBE6616:
 8067              	.LBE6592:
 8068              	.LBE6591:
 8069              	.LBE6590:
 8070              	.LBB6666:
 8071              	.LBI6666:
 629:/usr/include/c++/9/sstream ****       { }
 8072              		.loc 12 629 7 is_stmt 1 view .LVU1624
 8073              	.LBB6667:
 8074              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 8075              		.loc 12 630 9 is_stmt 0 view .LVU1625
 8076 019e 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp210
 8076      000000
 8077 01a5 C5FA7E15 		vmovq	.LC1(%rip), %xmm2	#, tmp211
 8077      00000000 
 8078              	.LBB6668:
 8079              	.LBB6669:
 8080              	.LBB6670:
 8081              	.LBB6671:
 8082              	.LBB6672:
 8083              	.LBB6673:
 8084              	.LBB6674:
 8085              	.LBB6675:
 8086              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 8087              		.loc 2 222 26 view .LVU1626
 8088 01ad 488B7C24 		movq	112(%rsp), %rdi	# MEM[(char * *)&ss + 80B], _56
 8088      70
 8089              	.LBE6675:
 8090              	.LBE6674:
 8091              	.LBE6673:
 8092              	.LBE6672:
 8093              	.LBE6671:
 8094              	.LBE6670:
 8095              	.LBE6669:
 8096              	.LBE6668:
 8097              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 8098              		.loc 12 630 9 view .LVU1627
 8099 01b2 48898424 		movq	%rax, 144(%rsp)	# tmp210, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 8099      90000000 
 8100              	.LVL409:
 8101              	.LBB6694:
 8102              	.LBI6668:
  65:/usr/include/c++/9/sstream ****     {
 8103              		.loc 12 65 11 is_stmt 1 view .LVU1628
 8104              	.LBE6694:
 8105              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 8106              		.loc 12 630 9 is_stmt 0 view .LVU1629
 8107 01ba 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp212
 8107      000000
 8108 01c1 C4E3E922 		vpinsrq	$1, %rax, %xmm2, %xmm0	# tmp212, tmp211, tmp158
 8108      C001
 8109 01c7 C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp158, MEM[(int (*) () * *)&ss]
 8109      2420
 8110              	.LVL410:
 8111              	.LBB6695:
 8112              	.LBB6693:
 8113              	.LBB6690:
 8114              	.LBI6670:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 8115              		.loc 2 657 7 is_stmt 1 view .LVU1630
 8116              	.LBB6689:
 8117              	.LBB6685:
 8118              	.LBI6672:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 8119              		.loc 2 229 7 view .LVU1631
 8120              	.LBB6684:
 8121              	.LBB6678:
 8122              	.LBI6674:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 8123              		.loc 2 221 7 view .LVU1632
 8124              	.LBB6677:
 8125              	.LBB6676:
 8126              	.LBI6676:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 8127              		.loc 2 200 7 view .LVU1633
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 8128              		.loc 2 200 7 is_stmt 0 view .LVU1634
 8129              	.LBE6676:
 8130              	.LBE6677:
 8131              	.LBE6678:
 8132              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8133              		.loc 2 231 2 view .LVU1635
 8134 01cd 483B7C24 		cmpq	24(%rsp), %rdi	# %sfp, _56
 8134      18
 8135 01d2 7405     		je	.L215	#,
 8136              	.LVL411:
 8137              	.LBB6679:
 8138              	.LBI6679:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8139              		.loc 2 236 7 is_stmt 1 view .LVU1636
 8140              	.LBB6680:
 8141              	.LBB6681:
 8142              	.LBI6681:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 8143              		.loc 3 469 7 view .LVU1637
 8144              	.LBB6682:
 8145              	.LBI6682:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 8146              		.loc 4 119 7 view .LVU1638
 8147              	.LBB6683:
 8148              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 8149              		.loc 4 128 19 is_stmt 0 view .LVU1639
 8150 01d4 E8000000 		call	_ZdlPv@PLT	#
 8150      00
 8151              	.LVL412:
 8152              	.L215:
 8153              		.loc 4 128 19 view .LVU1640
 8154              	.LBE6683:
 8155              	.LBE6682:
 8156              	.LBE6681:
 8157              	.LBE6680:
 8158              	.LBE6679:
 8159              	.LBE6684:
 8160              	.LBE6685:
 8161              	.LBB6686:
 8162              	.LBI6686:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 8163              		.loc 2 150 14 is_stmt 1 view .LVU1641
 8164              	.LBB6687:
 8165              	.LBI6687:
 8166              		.loc 5 153 7 view .LVU1642
 8167              	.LBB6688:
 8168              	.LBI6688:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8169              		.loc 4 89 7 view .LVU1643
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8170              		.loc 4 89 7 is_stmt 0 view .LVU1644
 8171              	.LBE6688:
 8172              	.LBE6687:
 8173              	.LBE6686:
 8174              	.LBE6689:
 8175              	.LBE6690:
 8176              	.LBB6691:
 8177              	.LBI6691:
 204:/usr/include/c++/9/streambuf ****       { }
 8178              		.loc 13 204 7 is_stmt 1 view .LVU1645
 8179              	.LBB6692:
 8180              	# /usr/include/c++/9/streambuf:205:       { }
 205:/usr/include/c++/9/streambuf **** 
 8181              		.loc 13 205 9 is_stmt 0 view .LVU1646
 8182 01d9 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp214
 8182      000000
 8183 01e0 4C89F7   		movq	%r14, %rdi	# tmp181,
 8184 01e3 48894424 		movq	%rax, 40(%rsp)	# tmp214, MEM[(struct basic_streambuf *)&ss + 8B]._vptr.basic_streambuf
 8184      28
 8185 01e8 E8000000 		call	_ZNSt6localeD1Ev@PLT	#
 8185      00
 8186              	.LVL413:
 205:/usr/include/c++/9/streambuf **** 
 8187              		.loc 13 205 9 view .LVU1647
 8188              	.LBE6692:
 8189              	.LBE6691:
 8190              	.LBE6693:
 8191              	.LBE6695:
 8192              	.LBB6696:
 8193              	.LBI6696:
  93:/usr/include/c++/9/ostream **** 
 8194              		.loc 16 93 7 is_stmt 1 view .LVU1648
 8195              	.LBB6697:
 8196              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 8197              		.loc 16 93 26 is_stmt 0 view .LVU1649
 8198 01ed 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 8198      000000
 8199 01f4 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 8199      000000
 8200              	.LBE6697:
 8201              	.LBE6696:
 8202              	.LBB6699:
 8203              	.LBB6700:
 8204              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8205              		.loc 15 282 22 view .LVU1650
 8206 01fb 4C89EF   		movq	%r13, %rdi	# tmp176,
 8207              	.LBE6700:
 8208              	.LBE6699:
 8209              	.LBB6702:
 8210              	.LBB6698:
 8211              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 8212              		.loc 16 93 26 view .LVU1651
 8213 01fe 48894424 		movq	%rax, 32(%rsp)	# tmp215, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 8213      20
 8214 0203 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_16 + -24B], MEM[(long int *)_16 + -24B]
 8215 0207 48894C04 		movq	%rcx, 32(%rsp,%rax)	# tmp217, _53->D.34155._vptr.ios_base
 8215      20
 8216              	.LVL414:
  93:/usr/include/c++/9/ostream **** 
 8217              		.loc 16 93 26 view .LVU1652
 8218              	.LBE6698:
 8219              	.LBE6702:
 8220              	.LBB6703:
 8221              	.LBI6699:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8222              		.loc 15 282 7 is_stmt 1 view .LVU1653
 8223              	.LBB6701:
 8224              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8225              		.loc 15 282 22 is_stmt 0 view .LVU1654
 8226 020c 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp218
 8226      000000
 8227 0213 48898424 		movq	%rax, 144(%rsp)	# tmp218, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 8227      90000000 
 8228 021b E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 8228      00
 8229              	.LVL415:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8230              		.loc 15 282 22 view .LVU1655
 8231              	.LBE6701:
 8232              	.LBE6703:
 8233              	.LBE6667:
 8234              	.LBE6666:
 8235              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
 8236              		.loc 14 54 3 view .LVU1656
 8237 0220 488B8424 		movq	408(%rsp), %rax	# D.445698, tmp192
 8237      98010000 
 8238 0228 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp192
 8238      25280000 
 8238      00
 8239 0231 753F     		jne	.L228	#,
 8240 0233 488D65D8 		leaq	-40(%rbp), %rsp	#,
 8241              	.LVL416:
 8242              		.loc 14 54 3 view .LVU1657
 8243 0237 4C89E0   		movq	%r12, %rax	# <retval>,
 8244 023a 5B       		popq	%rbx	#
 8245 023b 415C     		popq	%r12	#
 8246              	.LVL417:
 8247              		.loc 14 54 3 view .LVU1658
 8248 023d 415D     		popq	%r13	#
 8249 023f 415E     		popq	%r14	#
 8250              	.LVL418:
 8251              		.loc 14 54 3 view .LVU1659
 8252 0241 415F     		popq	%r15	#
 8253              	.LVL419:
 8254              		.loc 14 54 3 view .LVU1660
 8255 0243 5D       		popq	%rbp	#
 8256              		.cfi_remember_state
 8257              		.cfi_def_cfa 7, 8
 8258              	.LVL420:
 8259              		.loc 14 54 3 view .LVU1661
 8260 0244 C3       		ret	
 8261              	.LVL421:
 8262              		.p2align 4,,10
 8263 0245 0F1F00   		.p2align 3
 8264              	.L227:
 8265              		.cfi_restore_state
 8266              	.LBB6704:
 8267              	.LBB6664:
 8268              	.LBB6662:
 8269              	.LBB6631:
 8270              	.LBI6631:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 8271              		.loc 2 1470 9 is_stmt 1 view .LVU1662
 8272              	.LBB6632:
 8273              	.LBI6632:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 8274              		.loc 2 842 7 view .LVU1663
 8275              	.LBB6633:
 8276              	.LBI6633:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8277              		.loc 17 806 7 view .LVU1664
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8278              		.loc 17 806 7 is_stmt 0 view .LVU1665
 8279              	.LBE6633:
 8280              	.LBE6632:
 8281              	.LBB6634:
 8282              	.LBI6634:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 8283              		.loc 17 811 9 is_stmt 1 view .LVU1666
 8284              	.LBB6635:
 8285              	.LBI6635:
 8286              		.loc 17 871 7 view .LVU1667
 8287              		.loc 17 871 7 is_stmt 0 view .LVU1668
 8288              	.LBE6635:
 8289              	.LBE6634:
 8290              	.LBB6636:
 8291              	.LBI6636:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 8292              		.loc 2 826 7 is_stmt 1 view .LVU1669
 8293              	.LBB6637:
 8294              	.LBI6637:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8295              		.loc 17 806 7 view .LVU1670
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8296              		.loc 17 806 7 is_stmt 0 view .LVU1671
 8297              	.LBE6637:
 8298              	.LBE6636:
 8299              	.LBB6638:
 8300              	.LBI6638:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 8301              		.loc 17 811 9 is_stmt 1 view .LVU1672
 8302              	.LBB6639:
 8303              	.LBI6639:
 8304              		.loc 17 871 7 view .LVU1673
 8305              		.loc 17 871 7 is_stmt 0 view .LVU1674
 8306              	.LBE6639:
 8307              	.LBE6638:
 8308              	.LBB6640:
 8309              	.LBI6640:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 8310              		.loc 2 2123 7 is_stmt 1 view .LVU1675
 8311              	.LBB6641:
 8312              	.LBB6642:
 8313              	.LBI6642:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 8314              		.loc 2 826 7 view .LVU1676
 8315              	.LBB6643:
 8316              	.LBI6643:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8317              		.loc 17 806 7 view .LVU1677
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 8318              		.loc 17 806 7 is_stmt 0 view .LVU1678
 8319              	.LBE6643:
 8320              	.LBE6642:
 8321              	.LBB6644:
 8322              	.LBI6644:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 8323              		.loc 2 1936 7 is_stmt 1 view .LVU1679
 8324              	.LBB6645:
 8325              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 8326              		.loc 2 1941 38 is_stmt 0 view .LVU1680
 8327 0248 4829C8   		subq	%rcx, %rax	# pretmp_47, _31
 8328              	.LVL422:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 8329              		.loc 2 1941 38 view .LVU1681
 8330 024b 31D2     		xorl	%edx, %edx	#
 8331 024d 31F6     		xorl	%esi, %esi	#
 8332 024f 4C89E7   		movq	%r12, %rdi	# <retval>,
 8333 0252 4989C0   		movq	%rax, %r8	# _31,
 8334 0255 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 8334      00
 8335              	.LVL423:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 8336              		.loc 2 1941 38 view .LVU1682
 8337 025a E93FFFFF 		jmp	.L213	#
 8337      FF
 8338              	.LVL424:
 8339 025f 90       		.p2align 4,,10
 8340              		.p2align 3
 8341              	.L211:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 8342              		.loc 2 1941 38 view .LVU1683
 8343              	.LBE6645:
 8344              	.LBE6644:
 8345              	.LBE6641:
 8346              	.LBE6640:
 8347              	.LBE6631:
 8348              	.LBB6646:
 8349              	.LBI6646:
 665:/usr/include/c++/9/bits/basic_string.h ****       {
 8350              		.loc 2 665 7 is_stmt 1 view .LVU1684
 8351              	.LBB6647:
 8352              	.LBI6647:
1364:/usr/include/c++/9/bits/basic_string.h ****       {
 8353              		.loc 2 1364 7 view .LVU1685
 8354              	.LBB6648:
 8355              	# /usr/include/c++/9/bits/basic_string.h:1366: 	this->_M_assign(__str);
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 8356              		.loc 2 1366 2 is_stmt 0 view .LVU1686
 8357 0260 488D7424 		leaq	112(%rsp), %rsi	#, tmp156
 8357      70
 8358              	.LVL425:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 8359              		.loc 2 1366 2 view .LVU1687
 8360 0265 4C89E7   		movq	%r12, %rdi	# <retval>,
 8361 0268 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT	#
 8361      00
 8362              	.LVL426:
 8363              	.LEHE24:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 8364              		.loc 2 1366 2 view .LVU1688
 8365 026d E92CFFFF 		jmp	.L213	#
 8365      FF
 8366              	.LVL427:
 8367              	.L228:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 8368              		.loc 2 1366 2 view .LVU1689
 8369              	.LBE6648:
 8370              	.LBE6647:
 8371              	.LBE6646:
 8372              	.LBE6662:
 8373              	.LBE6664:
 8374              	.LBE6704:
 8375              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
 8376              		.loc 14 54 3 view .LVU1690
 8377 0272 E8000000 		call	__stack_chk_fail@PLT	#
 8377      00
 8378              	.LVL428:
 8379              	.L220:
 8380              		.loc 14 54 3 view .LVU1691
 8381 0277 F30F1EFA 		endbr64	
 8382 027b 4989C5   		movq	%rax, %r13	# tmp190, tmp162
 8383 027e EB1A     		jmp	.L218	#
 8384              	.LVL429:
 8385              	.L222:
 8386              		.loc 14 54 3 view .LVU1692
 8387 0280 F30F1EFA 		endbr64	
 8388 0284 4889C3   		movq	%rax, %rbx	# tmp187, tmp142
 8389              	.LVL430:
 8390              		.loc 14 54 3 view .LVU1693
 8391 0287 EB24     		jmp	.L209	#
 8392              	.LVL431:
 8393              	.L216:
 8394              	.LBB6705:
 8395              	.LBB6665:
 8396              	.LBB6663:
 8397              	.LBB6649:
 8398              	.LBI6649:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 8399              		.loc 2 657 7 is_stmt 1 view .LVU1694
 8400              	.LBB6650:
 8401              	.LBI6650:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 8402              		.loc 2 229 7 view .LVU1695
 8403              	.LBB6651:
 8404              	.LBB6652:
 8405              	.LBI6652:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 8406              		.loc 2 221 7 view .LVU1696
 8407              	.LBB6653:
 8408              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 8409              		.loc 2 222 26 is_stmt 0 view .LVU1697
 8410 0289 498B3C24 		movq	(%r12), %rdi	# MEM[(char * *)_5(D)], _39
 8411              	.LVL432:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 8412              		.loc 2 222 26 view .LVU1698
 8413              	.LBE6653:
 8414              	.LBE6652:
 8415              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8416              		.loc 2 231 2 view .LVU1699
 8417 028d 4839FB   		cmpq	%rdi, %rbx	# _39, _30
 8418 0290 7408     		je	.L218	#,
 8419              	.LVL433:
 8420              	.LBB6654:
 8421              	.LBI6654:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8422              		.loc 2 236 7 is_stmt 1 view .LVU1700
 8423              	.LBB6655:
 8424              	.LBB6656:
 8425              	.LBI6656:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 8426              		.loc 3 469 7 view .LVU1701
 8427              	.LBB6657:
 8428              	.LBI6657:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 8429              		.loc 4 119 7 view .LVU1702
 8430              	.LBB6658:
 8431              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 8432              		.loc 4 128 19 is_stmt 0 view .LVU1703
 8433 0292 C5F877   		vzeroupper
 8434 0295 E8000000 		call	_ZdlPv@PLT	#
 8434      00
 8435              	.LVL434:
 8436              		.loc 4 128 19 view .LVU1704
 8437              	.LBE6658:
 8438              	.LBE6657:
 8439              	.LBE6656:
 8440              	.LBE6655:
 8441              	.LBE6654:
 8442              	.LBE6651:
 8443              	.LBE6650:
 8444              	.LBB6659:
 8445              	.LBI6659:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 8446              		.loc 2 150 14 is_stmt 1 view .LVU1705
 8447              	.LBB6660:
 8448              	.LBI6660:
 8449              		.loc 5 153 7 view .LVU1706
 8450              	.LBB6661:
 8451              	.LBI6661:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8452              		.loc 4 89 7 view .LVU1707
 8453              	.L218:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8454              		.loc 4 89 7 is_stmt 0 view .LVU1708
 8455              	.LBE6661:
 8456              	.LBE6660:
 8457              	.LBE6659:
 8458              	.LBE6649:
 8459              	.LBE6663:
 8460              	.LBE6665:
 8461              	.LBE6705:
 8462              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:51:     std::ostringstream ss;
  51:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     _str(ss, args...);
 8463              		.loc 14 51 24 view .LVU1709
 8464 029a 4C89FF   		movq	%r15, %rdi	# tmp178,
 8465 029d C5F877   		vzeroupper
 8466 02a0 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 8466      00
 8467              	.LVL435:
 8468 02a5 4C89EF   		movq	%r13, %rdi	# tmp162,
 8469              	.LEHB25:
 8470 02a8 E8000000 		call	_Unwind_Resume@PLT	#
 8470      00
 8471              	.LVL436:
 8472              	.L209:
 8473              	.LBB6706:
 8474              	.LBB6585:
 8475              	.LBB6584:
 8476              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 8477              		.loc 12 584 53 view .LVU1710
 8478 02ad 488B7C24 		movq	16(%rsp), %rdi	# %sfp,
 8478      10
 8479 02b2 C5F877   		vzeroupper
 8480 02b5 E8000000 		call	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev	#
 8480      00
 8481              	.LVL437:
 8482              	.LBB6580:
 8483              	.LBI6580:
  93:/usr/include/c++/9/ostream **** 
 8484              		.loc 16 93 7 is_stmt 1 view .LVU1711
 8485              	.LBB6581:
 8486              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 8487              		.loc 16 93 26 is_stmt 0 view .LVU1712
 8488 02ba 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 8488      000000
 8489 02c1 488B1500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rdx	# MEM[(const v
 8489      000000
 8490 02c8 48894424 		movq	%rax, 32(%rsp)	# tmp205, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 8490      20
 8491 02cd 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_16 + -24B], MEM[(long int *)_16 + -24B]
 8492 02d1 48895404 		movq	%rdx, 32(%rsp,%rax)	# tmp207, *_28.D.34155._vptr.ios_base
 8492      20
 8493              	.LVL438:
 8494              	.L210:
  93:/usr/include/c++/9/ostream **** 
 8495              		.loc 16 93 26 view .LVU1713
 8496              	.LBE6581:
 8497              	.LBE6580:
 8498              	.LBB6582:
 8499              	.LBI6582:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8500              		.loc 15 282 7 is_stmt 1 view .LVU1714
 8501              	.LBB6583:
 8502              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8503              		.loc 15 282 22 is_stmt 0 view .LVU1715
 8504 02d6 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp208
 8504      000000
 8505 02dd 4C89EF   		movq	%r13, %rdi	# tmp176,
 8506 02e0 48898424 		movq	%rax, 144(%rsp)	# tmp208, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 8506      90000000 
 8507 02e8 C5F877   		vzeroupper
 8508 02eb E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 8508      00
 8509              	.LVL439:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8510              		.loc 15 282 22 view .LVU1716
 8511 02f0 4889DF   		movq	%rbx, %rdi	# tmp146,
 8512 02f3 E8000000 		call	_Unwind_Resume@PLT	#
 8512      00
 8513              	.LVL440:
 8514              	.LEHE25:
 8515              	.L221:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8516              		.loc 15 282 22 view .LVU1717
 8517 02f8 F30F1EFA 		endbr64	
 8518 02fc 4889C3   		movq	%rax, %rbx	# tmp188, tmp146
 8519              	.LVL441:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8520              		.loc 15 282 22 view .LVU1718
 8521 02ff EBD5     		jmp	.L210	#
 8522              	.LVL442:
 8523              	.L223:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 8524              		.loc 15 282 22 view .LVU1719
 8525 0301 F30F1EFA 		endbr64	
 8526 0305 4989C5   		movq	%rax, %r13	# tmp189, tmp163
 8527 0308 E97CFFFF 		jmp	.L216	#
 8527      FF
 8528              	.LBE6583:
 8529              	.LBE6582:
 8530              	.LBE6584:
 8531              	.LBE6585:
 8532              	.LBE6706:
 8533              		.cfi_endproc
 8534              	.LFE12097:
 8535              		.section	.gcc_except_table._ZN3c106detail12_str_wrapperIJRKNSt7__cxx1112basic_stringIcSt11char_tra
 8536              	.LLSDA12097:
 8537 0000 FF       		.byte	0xff
 8538 0001 FF       		.byte	0xff
 8539 0002 01       		.byte	0x1
 8540 0003 1E       		.uleb128 .LLSDACSE12097-.LLSDACSB12097
 8541              	.LLSDACSB12097:
 8542 0004 A901     		.uleb128 .LEHB21-.LFB12097
 8543 0006 05       		.uleb128 .LEHE21-.LEHB21
 8544 0007 F805     		.uleb128 .L221-.LFB12097
 8545 0009 00       		.uleb128 0
 8546 000a C202     		.uleb128 .LEHB22-.LFB12097
 8547 000c 05       		.uleb128 .LEHE22-.LEHB22
 8548 000d 8005     		.uleb128 .L222-.LFB12097
 8549 000f 00       		.uleb128 0
 8550 0010 D102     		.uleb128 .LEHB23-.LFB12097
 8551 0012 05       		.uleb128 .LEHE23-.LEHB23
 8552 0013 F704     		.uleb128 .L220-.LFB12097
 8553 0015 00       		.uleb128 0
 8554 0016 9903     		.uleb128 .LEHB24-.LFB12097
 8555 0018 D401     		.uleb128 .LEHE24-.LEHB24
 8556 001a 8106     		.uleb128 .L223-.LFB12097
 8557 001c 00       		.uleb128 0
 8558 001d A805     		.uleb128 .LEHB25-.LFB12097
 8559 001f 50       		.uleb128 .LEHE25-.LEHB25
 8560 0020 00       		.uleb128 0
 8561 0021 00       		.uleb128 0
 8562              	.LLSDACSE12097:
 8563              		.section	.text._ZN3c106detail12_str_wrapperIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 8565              		.section	.rodata._ZN3c10L19backendToDeviceTypeENS_7BackendE.str1.8,"aMS",@progbits,1
 8566              		.align 8
 8567              	.LC20:
 8568 0000 45787065 		.string	"Expected false to be true, but got false.  (Could this error message be improved?  If so,
 8568      63746564 
 8568      2066616C 
 8568      73652074 
 8568      6F206265 
 8569 008c 00000000 		.align 8
 8570              	.LC21:
 8571 0090 556E6465 		.string	"Undefined backend is not a valid device type"
 8571      66696E65 
 8571      64206261 
 8571      636B656E 
 8571      64206973 
 8572 00bd 000000   		.align 8
 8573              	.LC22:
 8574 00c0 2F776F72 		.string	"/workspace/pth-linear-interp/torch/include/c10/core/Backend.h"
 8574      6B737061 
 8574      63652F70 
 8574      74682D6C 
 8574      696E6561 
 8575              		.section	.rodata._ZN3c10L19backendToDeviceTypeENS_7BackendE.str1.1,"aMS",@progbits,1
 8576              	.LC23:
 8577 0000 6261636B 		.string	"backendToDeviceType"
 8577      656E6454 
 8577      6F446576 
 8577      69636554 
 8577      79706500 
 8578              	.LC24:
 8579 0014 556E6B6E 		.string	"Unknown backend"
 8579      6F776E20 
 8579      6261636B 
 8579      656E6400 
 8580              		.section	.text._ZN3c10L19backendToDeviceTypeENS_7BackendE,"axG",@progbits,_ZNK2at24DeprecatedTypeP
 8581              		.p2align 4
 8583              	_ZN3c10L19backendToDeviceTypeENS_7BackendE:
 8584              	.LVL443:
 8585              	.LFB4490:
 8586              		.file 20 "/workspace/pth-linear-interp/torch/include/c10/core/Backend.h"
   1:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** #include <c10/core/DeviceType.h>
   4:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** #include <c10/core/DispatchKey.h>
   5:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** #include <c10/core/DispatchKeySet.h>
   6:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** #include <c10/util/Exception.h>
   7:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
   8:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** #include <stdexcept>
   9:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
  10:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** namespace c10 {
  11:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
  12:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** /**
  13:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * This legacy enum class defines the set of backends supported by old school,
  14:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * code generated Type-based ATen.  A "backend" in this sense roughly
  15:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * corresponds to the cartesian product of (device type, layout), but restricted
  16:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * only to combinations which we actually have kernels for.  Backend does NOT
  17:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * include dtype.
  18:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  *
  19:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * The reason we are sunsetting this enum class is because it doesn't allow for
  20:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * open registration; e.g., if you want to add SparseXLA, you'd have to
  21:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * edit this enum; you wouldn't be able to do it out of tree.  DispatchKey is
  22:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * the replacement for Backend which supports open registration.
  23:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  *
  24:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * NB: The concept of 'Backend' here disagrees with the notion of backend
  25:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * exposed to users in torch.backends.  Backend here is something like "CPU"
  26:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * or "SparseCUDA"; backend in torch.backends is something like "MKL" or
  27:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  * "CUDNN".
  28:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****  */
  29:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** enum class Backend {
  30:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   CPU,
  31:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   CUDA,
  32:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   HIP,
  33:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   FPGA,
  34:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   XPU,
  35:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   SparseCPU,
  36:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   SparseCUDA,
  37:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   SparseHIP,
  38:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   SparseXPU,
  39:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   MSNPU,
  40:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   XLA,
  41:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   Vulkan,
  42:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   Metal,
  43:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   QuantizedCPU,
  44:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   QuantizedCUDA,
  45:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   QuantizedXPU,
  46:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   Undefined,
  47:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   MkldnnCPU,
  48:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   NumOptions
  49:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** };
  50:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
  51:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** static inline Backend toSparse(Backend b) {
  52:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   switch (b) {
  53:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CPU:
  54:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::SparseCPU;
  55:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XPU:
  56:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::SparseXPU;
  57:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CUDA:
  58:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::SparseCUDA;
  59:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::HIP:
  60:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::SparseHIP;
  61:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCPU:
  62:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::SparseCPU;
  63:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCUDA:
  64:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::SparseCUDA;
  65:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseHIP:
  66:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::SparseHIP;
  67:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
  68:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       throw std::runtime_error("Unknown backend");
  69:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
  70:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** }
  71:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
  72:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** static inline Backend toDense(Backend b) {
  73:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   switch (b) {
  74:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CPU:
  75:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::CPU;
  76:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CUDA:
  77:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::CUDA;
  78:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::HIP:
  79:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::HIP;
  80:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::FPGA:
  81:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::FPGA;
  82:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MSNPU:
  83:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::MSNPU;
  84:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XLA:
  85:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::XLA;
  86:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XPU:
  87:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::XPU;
  88:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseXPU:
  89:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::XPU;
  90:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCPU:
  91:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::CPU;
  92:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCUDA:
  93:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::CUDA;
  94:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseHIP:
  95:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::HIP;
  96:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedCPU:
  97:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::QuantizedCPU;
  98:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedCUDA:
  99:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::QuantizedCUDA;
 100:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedXPU:
 101:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return Backend::QuantizedXPU;
 102:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 103:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       throw std::runtime_error("Unknown backend");
 104:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 105:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** }
 106:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
 107:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** static inline Backend dispatchKeyToBackend(DispatchKey t) {
 108:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   if (t == DispatchKey::CPU || t == DispatchKey::AutogradCPU) {
 109:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::CPU;
 110:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::CUDA || t == DispatchKey::AutogradCUDA) {
 111:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::CUDA;
 112:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::HIP) {
 113:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::HIP;
 114:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::FPGA) {
 115:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::FPGA;
 116:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::MSNPU) {
 117:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::MSNPU;
 118:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::XLA || t == DispatchKey::AutogradXLA) {
 119:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::XLA;
 120:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::Vulkan) {
 121:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::Vulkan;
 122:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::Metal) {
 123:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::Metal;
 124:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::SparseCPU) {
 125:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::SparseCPU;
 126:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::SparseCUDA) {
 127:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::SparseCUDA;
 128:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::SparseHIP) {
 129:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::SparseHIP;
 130:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::MkldnnCPU) {
 131:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::MkldnnCPU;
 132:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::QuantizedCPU) {
 133:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::QuantizedCPU;
 134:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::QuantizedCUDA) {
 135:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::QuantizedCUDA;
 136:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::XPU) {
 137:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::XPU;
 138:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::SparseXPU) {
 139:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::SparseXPU;
 140:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::QuantizedXPU) {
 141:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::QuantizedXPU;
 142:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else if (t == DispatchKey::Undefined) {
 143:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     return Backend::Undefined;
 144:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   } else {
 145:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     AT_ERROR("Unrecognized tensor type ID: ", t);
 146:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 147:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** }
 148:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
 149:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** static inline DispatchKey backendToDispatchKey(Backend b) {
 150:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   switch (b) {
 151:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CPU:
 152:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::CPU;
 153:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CUDA:
 154:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::CUDA;
 155:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::HIP:
 156:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::HIP;
 157:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::FPGA:
 158:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::FPGA;
 159:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MSNPU:
 160:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::MSNPU;
 161:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XLA:
 162:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::XLA;
 163:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XPU:
 164:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::XPU;
 165:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseXPU:
 166:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::SparseXPU;
 167:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCPU:
 168:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::SparseCPU;
 169:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCUDA:
 170:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::SparseCUDA;
 171:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseHIP:
 172:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::SparseHIP;
 173:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MkldnnCPU:
 174:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::MkldnnCPU;
 175:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Vulkan:
 176:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::Vulkan;
 177:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Metal:
 178:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::Metal;
 179:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedCPU:
 180:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::QuantizedCPU;
 181:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedCUDA:
 182:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::QuantizedCUDA;
 183:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Undefined:
 184:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DispatchKey::Undefined;
 185:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 186:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       throw std::runtime_error("Unknown backend");
 187:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 188:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** }
 189:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** 
 190:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** static inline DeviceType backendToDeviceType(Backend b) {
 8587              		.loc 20 190 57 is_stmt 1 view -0
 8588              		.cfi_startproc
 8589              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8590              		.cfi_lsda 0x1b,.LLSDA4490
 8591              		.loc 20 190 57 is_stmt 0 view .LVU1721
 8592 0000 4156     		pushq	%r14	#
 8593              		.cfi_def_cfa_offset 16
 8594              		.cfi_offset 14, -16
 8595 0002 4155     		pushq	%r13	#
 8596              		.cfi_def_cfa_offset 24
 8597              		.cfi_offset 13, -24
 8598 0004 4154     		pushq	%r12	#
 8599              		.cfi_def_cfa_offset 32
 8600              		.cfi_offset 12, -32
 8601 0006 55       		pushq	%rbp	#
 8602              		.cfi_def_cfa_offset 40
 8603              		.cfi_offset 6, -40
 8604 0007 4881EC98 		subq	$152, %rsp	#,
 8604      000000
 8605              		.cfi_def_cfa_offset 192
 8606              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:190: static inline DeviceType backe
 8607              		.loc 20 190 57 view .LVU1722
 8608 000e 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp164
 8608      25280000 
 8608      00
 8609 0017 48898424 		movq	%rax, 136(%rsp)	# tmp164, D.445723
 8609      88000000 
 8610 001f 31C0     		xorl	%eax, %eax	# tmp164
 191:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   switch (b) {
 8611              		.loc 20 191 3 is_stmt 1 view .LVU1723
 8612 0021 83FF11   		cmpl	$17, %edi	#, b
 8613 0024 0F872401 		ja	.L230	#,
 8613      0000
 8614 002a 488D1500 		leaq	.L232(%rip), %rdx	#, tmp96
 8614      000000
 8615 0031 89FF     		movl	%edi, %edi	# b, b
 8616              		.loc 20 191 3 is_stmt 0 view .LVU1724
 8617 0033 486304BA 		movslq	(%rdx,%rdi,4), %rax	#, tmp98
 8618 0037 4801D0   		addq	%rdx, %rax	# tmp96, tmp99
 8619 003a 3EFFE0   		notrack jmp	*%rax	# tmp99
 8620              		.section	.rodata._ZN3c10L19backendToDeviceTypeENS_7BackendE,"aG",@progbits,_ZNK2at24DeprecatedType
 8621              		.align 4
 8622              		.align 4
 8623              	.L232:
 8624 0000 00000000 		.long	.L231-.L232
 8625 0004 00000000 		.long	.L235-.L232
 8626 0008 00000000 		.long	.L259-.L232
 8627 000c 00000000 		.long	.L241-.L232
 8628 0010 00000000 		.long	.L234-.L232
 8629 0014 00000000 		.long	.L231-.L232
 8630 0018 00000000 		.long	.L235-.L232
 8631 001c 00000000 		.long	.L259-.L232
 8632 0020 00000000 		.long	.L234-.L232
 8633 0024 00000000 		.long	.L239-.L232
 8634 0028 00000000 		.long	.L238-.L232
 8635 002c 00000000 		.long	.L237-.L232
 8636 0030 00000000 		.long	.L236-.L232
 8637 0034 00000000 		.long	.L231-.L232
 8638 0038 00000000 		.long	.L235-.L232
 8639 003c 00000000 		.long	.L234-.L232
 8640 0040 00000000 		.long	.L233-.L232
 8641 0044 00000000 		.long	.L231-.L232
 8642              		.section	.text._ZN3c10L19backendToDeviceTypeENS_7BackendE,"axG",@progbits,_ZNK2at24DeprecatedTypeP
 8643 003d 0F1F00   		.p2align 4,,10
 8644              		.p2align 3
 8645              	.L231:
 8646              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:193:       return DeviceType::CPU;
 192:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CPU:
 193:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::CPU;
 8647              		.loc 20 193 26 view .LVU1725
 8648 0040 31C0     		xorl	%eax, %eax	# <retval>
 8649              		.p2align 4,,10
 8650 0042 660F1F44 		.p2align 3
 8650      0000
 8651              	.L229:
 8652              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:228: }
 194:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CUDA:
 195:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::CUDA;
 196:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::HIP:
 197:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::HIP;
 198:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::FPGA:
 199:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::FPGA;
 200:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MSNPU:
 201:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::MSNPU;
 202:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XLA:
 203:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::XLA;
 204:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCPU:
 205:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::CPU;
 206:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCUDA:
 207:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::CUDA;
 208:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseHIP:
 209:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::HIP;
 210:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XPU:
 211:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseXPU:
 212:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedXPU:
 213:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::XPU;
 214:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MkldnnCPU:
 215:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedCPU:
 216:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::CPU;
 217:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedCUDA:
 218:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::CUDA;
 219:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Vulkan:
 220:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::Vulkan;
 221:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Metal:
 222:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::Metal;
 223:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Undefined:
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       AT_ERROR("Undefined backend is not a valid device type");
 225:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       AT_ERROR("Unknown backend");
 227:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 228:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h **** }
 8653              		.loc 20 228 1 view .LVU1726
 8654 0048 488B8C24 		movq	136(%rsp), %rcx	# D.445723, tmp165
 8654      88000000 
 8655 0050 6448330C 		xorq	%fs:40, %rcx	# MEM[(<address-space-1> long unsigned int *)40B], tmp165
 8655      25280000 
 8655      00
 8656 0059 0F855301 		jne	.L284	#,
 8656      0000
 8657 005f 4881C498 		addq	$152, %rsp	#,
 8657      000000
 8658              		.cfi_remember_state
 8659              		.cfi_def_cfa_offset 40
 8660 0066 5D       		popq	%rbp	#
 8661              		.cfi_def_cfa_offset 32
 8662 0067 415C     		popq	%r12	#
 8663              		.cfi_def_cfa_offset 24
 8664 0069 415D     		popq	%r13	#
 8665              		.cfi_def_cfa_offset 16
 8666 006b 415E     		popq	%r14	#
 8667              		.cfi_def_cfa_offset 8
 8668 006d C3       		ret	
 8669 006e 6690     		.p2align 4,,10
 8670              		.p2align 3
 8671              	.L235:
 8672              		.cfi_restore_state
 8673              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:193:       return DeviceType::CPU;
 193:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::CUDA:
 8674              		.loc 20 193 26 view .LVU1727
 8675 0070 B8010000 		movl	$1, %eax	#, <retval>
 8675      00
 8676 0075 EBD1     		jmp	.L229	#
 8677 0077 660F1F84 		.p2align 4,,10
 8677      00000000 
 8677      00
 8678              		.p2align 3
 8679              	.L234:
 210:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseXPU:
 8680              		.loc 20 210 5 is_stmt 1 view .LVU1728
 211:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::QuantizedXPU:
 8681              		.loc 20 211 5 view .LVU1729
 212:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::XPU;
 8682              		.loc 20 212 5 view .LVU1730
 213:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MkldnnCPU:
 8683              		.loc 20 213 7 view .LVU1731
 8684              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:213:       return DeviceType::XPU;
 213:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MkldnnCPU:
 8685              		.loc 20 213 26 is_stmt 0 view .LVU1732
 8686 0080 B80C0000 		movl	$12, %eax	#, <retval>
 8686      00
 8687 0085 EBC1     		jmp	.L229	#
 8688 0087 660F1F84 		.p2align 4,,10
 8688      00000000 
 8688      00
 8689              		.p2align 3
 8690              	.L259:
 8691              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:197:       return DeviceType::HIP;
 197:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::FPGA:
 8692              		.loc 20 197 26 view .LVU1733
 8693 0090 B8060000 		movl	$6, %eax	#, <retval>
 8693      00
 8694 0095 EBB1     		jmp	.L229	#
 8695 0097 660F1F84 		.p2align 4,,10
 8695      00000000 
 8695      00
 8696              		.p2align 3
 8697              	.L241:
 198:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::FPGA;
 8698              		.loc 20 198 5 is_stmt 1 view .LVU1734
 199:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MSNPU:
 8699              		.loc 20 199 7 view .LVU1735
 8700              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:199:       return DeviceType::FPGA;
 199:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::MSNPU:
 8701              		.loc 20 199 26 is_stmt 0 view .LVU1736
 8702 00a0 B8070000 		movl	$7, %eax	#, <retval>
 8702      00
 8703 00a5 EBA1     		jmp	.L229	#
 8704 00a7 660F1F84 		.p2align 4,,10
 8704      00000000 
 8704      00
 8705              		.p2align 3
 8706              	.L239:
 200:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::MSNPU;
 8707              		.loc 20 200 5 is_stmt 1 view .LVU1737
 201:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XLA:
 8708              		.loc 20 201 7 view .LVU1738
 8709              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:201:       return DeviceType::MSNPU
 201:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::XLA:
 8710              		.loc 20 201 26 is_stmt 0 view .LVU1739
 8711 00b0 B8080000 		movl	$8, %eax	#, <retval>
 8711      00
 8712 00b5 EB91     		jmp	.L229	#
 8713 00b7 660F1F84 		.p2align 4,,10
 8713      00000000 
 8713      00
 8714              		.p2align 3
 8715              	.L238:
 202:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::XLA;
 8716              		.loc 20 202 5 is_stmt 1 view .LVU1740
 203:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCPU:
 8717              		.loc 20 203 7 view .LVU1741
 8718              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:203:       return DeviceType::XLA;
 203:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::SparseCPU:
 8719              		.loc 20 203 26 is_stmt 0 view .LVU1742
 8720 00c0 B8090000 		movl	$9, %eax	#, <retval>
 8720      00
 8721 00c5 EB81     		jmp	.L229	#
 8722 00c7 660F1F84 		.p2align 4,,10
 8722      00000000 
 8722      00
 8723              		.p2align 3
 8724              	.L237:
 219:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::Vulkan;
 8725              		.loc 20 219 5 is_stmt 1 view .LVU1743
 220:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Metal:
 8726              		.loc 20 220 7 view .LVU1744
 8727              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:220:       return DeviceType::Vulka
 220:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Metal:
 8728              		.loc 20 220 26 is_stmt 0 view .LVU1745
 8729 00d0 B80A0000 		movl	$10, %eax	#, <retval>
 8729      00
 8730 00d5 E96EFFFF 		jmp	.L229	#
 8730      FF
 8731 00da 660F1F44 		.p2align 4,,10
 8731      0000
 8732              		.p2align 3
 8733              	.L236:
 221:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       return DeviceType::Metal;
 8734              		.loc 20 221 5 is_stmt 1 view .LVU1746
 222:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Undefined:
 8735              		.loc 20 222 7 view .LVU1747
 8736              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:222:       return DeviceType::Metal
 222:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     case Backend::Undefined:
 8737              		.loc 20 222 26 is_stmt 0 view .LVU1748
 8738 00e0 B80B0000 		movl	$11, %eax	#, <retval>
 8738      00
 8739 00e5 E95EFFFF 		jmp	.L229	#
 8739      FF
 8740              	.L233:
 223:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       AT_ERROR("Undefined backend is not a valid device type");
 8741              		.loc 20 223 5 is_stmt 1 view .LVU1749
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8742              		.loc 20 224 7 view .LVU1750
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8743              		.loc 20 224 7 view .LVU1751
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8744              		.loc 20 224 7 view .LVU1752
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8745              		.loc 20 224 7 view .LVU1753
 8746              	.LBB6707:
 8747              	.LBI6707:
 138:/usr/include/c++/9/bits/allocator.h **** 
 8748              		.loc 5 138 7 view .LVU1754
 8749              	.LVL444:
 8750              	.LBB6708:
 8751              	.LBI6708:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8752              		.loc 4 80 7 view .LVU1755
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8753              		.loc 4 80 7 is_stmt 0 view .LVU1756
 8754              	.LBE6708:
 8755              	.LBE6707:
 8756              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:224:       AT_ERROR("Undefined back
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8757              		.loc 20 224 7 view .LVU1757
 8758 00ea 4C8D6C24 		leaq	64(%rsp), %r13	#, tmp151
 8758      40
 8759 00ef 488D3500 		leaq	.LC20(%rip), %rsi	#,
 8759      000000
 8760              	.LBB6709:
 8761              	.LBB6710:
 8762              	.LBB6711:
 8763              	.LBB6712:
 8764              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:69:     return str;
  55:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
  56:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  57:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** // Specializations for already-a-string types.
  58:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template<>
  59:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** struct _str_wrapper<std::string> final {
  60:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   // return by reference to avoid the binary size of a string copy
  61:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   static const std::string& call(const std::string& str) {
  62:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return str;
  63:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
  64:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
  65:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  66:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template<>
  67:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** struct _str_wrapper<const char*> final {
  68:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   static std::string call(const char* str) {
  69:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return str;
 8765              		.loc 14 69 12 view .LVU1758
 8766 00f6 4889E5   		movq	%rsp, %rbp	#, tmp152
 8767              	.LBE6712:
 8768              	.LBE6711:
 8769              	.LBE6710:
 8770              	.LBE6709:
 8771              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:224:       AT_ERROR("Undefined back
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8772              		.loc 20 224 7 view .LVU1759
 8773 00f9 4C89EF   		movq	%r13, %rdi	# tmp151,
 8774              	.LVL445:
 8775              	.LEHB26:
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8776              		.loc 20 224 7 view .LVU1760
 8777 00fc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0	#
 8777      00
 8778              	.LVL446:
 8779              	.LEHE26:
 8780              	.LBB6720:
 8781              	.LBI6709:
  70:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
  71:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
  72:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  73:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** // For c10::str() with an empty argument list (which is common in our assert macros),
  74:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** // we don't want to pay the binary size for constructing and destructing a stringstream
  75:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** // or even constructing a string. Let's just return a reference to an empty string.
  76:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template<>
  77:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** struct _str_wrapper<> final {
  78:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   static const std::string& call() {
  79:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     thread_local const std::string empty_string_literal;
  80:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return empty_string_literal;
  81:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
  82:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
  83:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  84:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** } // namespace detail
  85:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** 
  86:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** // Convert a list of string-like arguments into a single string.
  87:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** template <typename... Args>
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** inline decltype(auto) str(const Args&... args) {
 8782              		.loc 14 88 23 is_stmt 1 view .LVU1761
 8783              	.LBB6719:
 8784              	.LBB6718:
 8785              	.LBI6711:
  68:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return str;
 8786              		.loc 14 68 22 view .LVU1762
 8787              	.LBB6717:
  69:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
 8788              		.loc 14 69 5 view .LVU1763
 8789              	.LBB6713:
 8790              	.LBI6713:
 138:/usr/include/c++/9/bits/allocator.h **** 
 8791              		.loc 5 138 7 view .LVU1764
 8792              	.LBB6714:
 8793              	.LBI6714:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8794              		.loc 4 80 7 view .LVU1765
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8795              		.loc 4 80 7 is_stmt 0 view .LVU1766
 8796              	.LBE6714:
 8797              	.LBE6713:
 8798              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:69:     return str;
  69:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
 8799              		.loc 14 69 12 view .LVU1767
 8800 0101 488D3500 		leaq	.LC21(%rip), %rsi	#,
 8800      000000
 8801 0108 4889EF   		movq	%rbp, %rdi	# tmp152,
 8802              	.LEHB27:
 8803 010b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0	#
 8803      00
 8804              	.LVL447:
 8805              	.LEHE27:
 8806              	.LBB6715:
 8807              	.LBB6716:
 8808              	.LBI6716:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8809              		.loc 4 89 7 is_stmt 1 view .LVU1768
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8810              		.loc 4 89 7 is_stmt 0 view .LVU1769
 8811              	.LBE6716:
 8812              	.LBI6715:
 8813              		.loc 5 153 7 is_stmt 1 view .LVU1770
 8814              		.loc 5 153 7 is_stmt 0 view .LVU1771
 8815              	.LBE6715:
 8816              	.LBE6717:
 8817              	.LBE6718:
 8818              	.LBE6719:
 8819              	.LBE6720:
 8820              	.LBB6721:
 8821              	.LBI6721:
 8822              		.loc 14 88 23 is_stmt 1 view .LVU1772
 8823              	.LBB6722:
 8824              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
  89:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 8825              		.loc 14 89 98 is_stmt 0 view .LVU1773
 8826 0110 4C8D6424 		leaq	32(%rsp), %r12	#, tmp154
 8826      20
 8827 0115 4889EE   		movq	%rbp, %rsi	# tmp152,
 8828 0118 4C89E7   		movq	%r12, %rdi	# tmp154,
 8829              	.LEHB28:
 8830 011b E8000000 		call	_ZN3c106detail12_str_wrapperIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4callES
 8830      00
 8831              	.LVL448:
 8832              	.LEHE28:
 8833              		.loc 14 89 98 view .LVU1774
 8834              	.LBE6722:
 8835              	.LBE6721:
 8836              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:224:       AT_ERROR("Undefined back
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8837              		.loc 20 224 7 discriminator 6 view .LVU1775
 8838 0120 4C8D7424 		leaq	96(%rsp), %r14	#, tmp153
 8838      60
 8839 0125 4C89EA   		movq	%r13, %rdx	# tmp151,
 8840 0128 4C89E6   		movq	%r12, %rsi	# tmp154,
 8841 012b 4C89F7   		movq	%r14, %rdi	# tmp153,
 8842              	.LEHB29:
 8843 012e E8000000 		call	_ZN3c106detail13if_empty_thenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_	#
 8843      00
 8844              	.LVL449:
 8845              	.LEHE29:
 8846              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:224:       AT_ERROR("Undefined back
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8847              		.loc 20 224 7 discriminator 8 view .LVU1776
 8848 0133 4C89F1   		movq	%r14, %rcx	# tmp153,
 8849 0136 BAE00000 		movl	$224, %edx	#,
 8849      00
 8850 013b 488D3500 		leaq	.LC22(%rip), %rsi	#,
 8850      000000
 8851 0142 488D3D00 		leaq	.LC23(%rip), %rdi	#,
 8851      000000
 8852              	.LEHB30:
 8853 0149 E8000000 		call	_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@
 8853      00
 8854              	.LVL450:
 8855              	.LEHE30:
 8856              	.L230:
 224:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****     default:
 8857              		.loc 20 224 7 is_stmt 1 view .LVU1777
 225:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****       AT_ERROR("Unknown backend");
 8858              		.loc 20 225 5 view .LVU1778
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8859              		.loc 20 226 7 view .LVU1779
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8860              		.loc 20 226 7 view .LVU1780
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8861              		.loc 20 226 7 view .LVU1781
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8862              		.loc 20 226 7 view .LVU1782
 8863              	.LBB6723:
 8864              	.LBI6723:
 138:/usr/include/c++/9/bits/allocator.h **** 
 8865              		.loc 5 138 7 view .LVU1783
 8866              	.LBB6724:
 8867              	.LBI6724:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8868              		.loc 4 80 7 view .LVU1784
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8869              		.loc 4 80 7 is_stmt 0 view .LVU1785
 8870              	.LBE6724:
 8871              	.LBE6723:
 8872              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:226:       AT_ERROR("Unknown backen
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8873              		.loc 20 226 7 view .LVU1786
 8874 014e 4C8D6C24 		leaq	64(%rsp), %r13	#, tmp151
 8874      40
 8875 0153 488D3500 		leaq	.LC20(%rip), %rsi	#,
 8875      000000
 8876              	.LBB6725:
 8877              	.LBB6726:
 8878              	.LBB6727:
 8879              	.LBB6728:
 8880              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:69:     return str;
  69:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
 8881              		.loc 14 69 12 view .LVU1787
 8882 015a 4889E5   		movq	%rsp, %rbp	#, tmp152
 8883              	.LBE6728:
 8884              	.LBE6727:
 8885              	.LBE6726:
 8886              	.LBE6725:
 8887              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:226:       AT_ERROR("Unknown backen
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8888              		.loc 20 226 7 view .LVU1788
 8889 015d 4C89EF   		movq	%r13, %rdi	# tmp151,
 8890              	.LVL451:
 8891              	.LEHB31:
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8892              		.loc 20 226 7 view .LVU1789
 8893 0160 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0	#
 8893      00
 8894              	.LVL452:
 8895              	.LEHE31:
 8896              	.LBB6741:
 8897              	.LBI6725:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 8898              		.loc 14 88 23 is_stmt 1 view .LVU1790
 8899              	.LBB6739:
 8900              	.LBB6737:
 8901              	.LBI6727:
  68:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return str;
 8902              		.loc 14 68 22 view .LVU1791
 8903              	.LBB6735:
  69:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
 8904              		.loc 14 69 5 view .LVU1792
 8905              	.LBB6729:
 8906              	.LBI6729:
 138:/usr/include/c++/9/bits/allocator.h **** 
 8907              		.loc 5 138 7 view .LVU1793
 8908              	.LBB6730:
 8909              	.LBI6730:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8910              		.loc 4 80 7 view .LVU1794
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 8911              		.loc 4 80 7 is_stmt 0 view .LVU1795
 8912              	.LBE6730:
 8913              	.LBE6729:
 8914              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:69:     return str;
  69:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   }
 8915              		.loc 14 69 12 view .LVU1796
 8916 0165 488D3500 		leaq	.LC24(%rip), %rsi	#,
 8916      000000
 8917 016c 4889EF   		movq	%rbp, %rdi	# tmp152,
 8918              	.LEHB32:
 8919 016f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0	#
 8919      00
 8920              	.LVL453:
 8921              	.LEHE32:
 8922              	.LBB6731:
 8923              	.LBB6732:
 8924              	.LBI6732:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8925              		.loc 4 89 7 is_stmt 1 view .LVU1797
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 8926              		.loc 4 89 7 is_stmt 0 view .LVU1798
 8927              	.LBE6732:
 8928              	.LBI6731:
 8929              		.loc 5 153 7 is_stmt 1 view .LVU1799
 8930              		.loc 5 153 7 is_stmt 0 view .LVU1800
 8931              	.LBE6731:
 8932              	.LBE6735:
 8933              	.LBE6737:
 8934              	.LBE6739:
 8935              	.LBE6741:
 8936              	.LBB6742:
 8937              	.LBI6742:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 8938              		.loc 14 88 23 is_stmt 1 view .LVU1801
 8939              	.LBB6743:
 8940              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 8941              		.loc 14 89 98 is_stmt 0 view .LVU1802
 8942 0174 4C8D6424 		leaq	32(%rsp), %r12	#, tmp154
 8942      20
 8943 0179 4889EE   		movq	%rbp, %rsi	# tmp152,
 8944 017c 4C89E7   		movq	%r12, %rdi	# tmp154,
 8945              	.LEHB33:
 8946 017f E8000000 		call	_ZN3c106detail12_str_wrapperIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4callES
 8946      00
 8947              	.LVL454:
 8948              	.LEHE33:
 8949              		.loc 14 89 98 view .LVU1803
 8950              	.LBE6743:
 8951              	.LBE6742:
 8952              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:226:       AT_ERROR("Unknown backen
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8953              		.loc 20 226 7 discriminator 6 view .LVU1804
 8954 0184 4C8D7424 		leaq	96(%rsp), %r14	#, tmp153
 8954      60
 8955 0189 4C89EA   		movq	%r13, %rdx	# tmp151,
 8956 018c 4C89E6   		movq	%r12, %rsi	# tmp154,
 8957 018f 4C89F7   		movq	%r14, %rdi	# tmp153,
 8958              	.LEHB34:
 8959 0192 E8000000 		call	_ZN3c106detail13if_empty_thenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_	#
 8959      00
 8960              	.LVL455:
 8961              	.LEHE34:
 8962              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:226:       AT_ERROR("Unknown backen
 226:/workspace/pth-linear-interp/torch/include/c10/core/Backend.h ****   }
 8963              		.loc 20 226 7 discriminator 8 view .LVU1805
 8964 0197 4C89F1   		movq	%r14, %rcx	# tmp153,
 8965 019a BAE20000 		movl	$226, %edx	#,
 8965      00
 8966 019f 488D3500 		leaq	.LC22(%rip), %rsi	#,
 8966      000000
 8967 01a6 488D3D00 		leaq	.LC23(%rip), %rdi	#,
 8967      000000
 8968              	.LEHB35:
 8969 01ad E8000000 		call	_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@
 8969      00
 8970              	.LVL456:
 8971              	.LEHE35:
 8972              	.L284:
 8973              	# /workspace/pth-linear-interp/torch/include/c10/core/Backend.h:228: }
 8974              		.loc 20 228 1 view .LVU1806
 8975 01b2 E8000000 		call	__stack_chk_fail@PLT	#
 8975      00
 8976              	.LVL457:
 8977              	.L267:
 8978              		.loc 20 228 1 view .LVU1807
 8979 01b7 F30F1EFA 		endbr64	
 8980              	.LVL458:
 8981              	.L283:
 8982              		.loc 20 228 1 view .LVU1808
 8983 01bb 4889C5   		movq	%rax, %rbp	# tmp160, tmp137
 8984 01be EB09     		jmp	.L250	#
 8985              	.LVL459:
 8986              	.L266:
 8987              		.loc 20 228 1 view .LVU1809
 8988 01c0 F30F1EFA 		endbr64	
 8989              	.LVL460:
 8990              	.L280:
 8991              		.loc 20 228 1 view .LVU1810
 8992 01c4 4889C5   		movq	%rax, %rbp	# tmp161, tmp136
 8993 01c7 EB17     		jmp	.L252	#
 8994              	.L250:
 8995              	.LVL461:
 8996              	.LBB6744:
 8997              	.LBI6744:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 8998              		.loc 2 657 7 is_stmt 1 discriminator 9 view .LVU1811
 8999              	.LBB6745:
 9000              	.LBI6745:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 9001              		.loc 2 229 7 discriminator 9 view .LVU1812
 9002              	.LBB6746:
 9003              	.LBB6747:
 9004              	.LBI6747:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 9005              		.loc 2 221 7 discriminator 9 view .LVU1813
 9006              	.LBB6748:
 9007              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 9008              		.loc 2 222 26 is_stmt 0 discriminator 9 view .LVU1814
 9009 01c9 488B7C24 		movq	96(%rsp), %rdi	#, _30
 9009      60
 9010              	.LVL462:
 9011              	.LBB6749:
 9012              	.LBI6749:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9013              		.loc 2 200 7 is_stmt 1 discriminator 9 view .LVU1815
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9014              		.loc 2 200 7 is_stmt 0 discriminator 9 view .LVU1816
 9015              	.LBE6749:
 9016              	.LBE6748:
 9017              	.LBE6747:
 9018              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9019              		.loc 2 231 2 discriminator 9 view .LVU1817
 9020 01ce 488D4424 		leaq	112(%rsp), %rax	#, tmp135
 9020      70
 9021 01d3 4839C7   		cmpq	%rax, %rdi	# tmp135, _30
 9022 01d6 7408     		je	.L252	#,
 9023              	.LVL463:
 9024              	.LBB6750:
 9025              	.LBI6750:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 9026              		.loc 2 236 7 is_stmt 1 view .LVU1818
 9027              	.LBB6751:
 9028              	.LBB6752:
 9029              	.LBI6752:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 9030              		.loc 3 469 7 view .LVU1819
 9031              	.LBB6753:
 9032              	.LBI6753:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 9033              		.loc 4 119 7 view .LVU1820
 9034              	.LBB6754:
 9035              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 9036              		.loc 4 128 19 is_stmt 0 view .LVU1821
 9037 01d8 C5F877   		vzeroupper
 9038 01db E8000000 		call	_ZdlPv@PLT	#
 9038      00
 9039              	.LVL464:
 9040              		.loc 4 128 19 view .LVU1822
 9041              	.LBE6754:
 9042              	.LBE6753:
 9043              	.LBE6752:
 9044              	.LBE6751:
 9045              	.LBE6750:
 9046              	.LBE6746:
 9047              	.LBE6745:
 9048              	.LBB6755:
 9049              	.LBI6755:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 9050              		.loc 2 150 14 is_stmt 1 view .LVU1823
 9051              	.LBB6756:
 9052              	.LBI6756:
 9053              		.loc 5 153 7 view .LVU1824
 9054              	.LBB6757:
 9055              	.LBI6757:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9056              		.loc 4 89 7 view .LVU1825
 9057              	.L252:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9058              		.loc 4 89 7 is_stmt 0 view .LVU1826
 9059              	.LBE6757:
 9060              	.LBE6756:
 9061              	.LBE6755:
 9062              	.LBE6744:
 9063              	.LBB6758:
 9064              	.LBI6758:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 9065              		.loc 2 657 7 is_stmt 1 discriminator 7 view .LVU1827
 9066              	.LBB6759:
 9067              	.LBI6759:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 9068              		.loc 2 229 7 discriminator 7 view .LVU1828
 9069              	.LBB6760:
 9070              	.LBB6761:
 9071              	.LBI6761:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 9072              		.loc 2 221 7 discriminator 7 view .LVU1829
 9073              	.LBB6762:
 9074              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 9075              		.loc 2 222 26 is_stmt 0 discriminator 7 view .LVU1830
 9076 01e0 488B7C24 		movq	32(%rsp), %rdi	#, _31
 9076      20
 9077              	.LVL465:
 9078              	.LBB6763:
 9079              	.LBI6763:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9080              		.loc 2 200 7 is_stmt 1 discriminator 7 view .LVU1831
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9081              		.loc 2 200 7 is_stmt 0 discriminator 7 view .LVU1832
 9082              	.LBE6763:
 9083              	.LBE6762:
 9084              	.LBE6761:
 9085              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9086              		.loc 2 231 2 discriminator 7 view .LVU1833
 9087 01e5 488D4424 		leaq	48(%rsp), %rax	#, tmp141
 9087      30
 9088 01ea 4839C7   		cmpq	%rax, %rdi	# tmp141, _31
 9089 01ed 7408     		je	.L254	#,
 9090              	.LVL466:
 9091              	.LBB6764:
 9092              	.LBI6764:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 9093              		.loc 2 236 7 is_stmt 1 view .LVU1834
 9094              	.LBB6765:
 9095              	.LBB6766:
 9096              	.LBI6766:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 9097              		.loc 3 469 7 view .LVU1835
 9098              	.LBB6767:
 9099              	.LBI6767:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 9100              		.loc 4 119 7 view .LVU1836
 9101              	.LBB6768:
 9102              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 9103              		.loc 4 128 19 is_stmt 0 view .LVU1837
 9104 01ef C5F877   		vzeroupper
 9105 01f2 E8000000 		call	_ZdlPv@PLT	#
 9105      00
 9106              	.LVL467:
 9107              		.loc 4 128 19 view .LVU1838
 9108              	.LBE6768:
 9109              	.LBE6767:
 9110              	.LBE6766:
 9111              	.LBE6765:
 9112              	.LBE6764:
 9113              	.LBE6760:
 9114              	.LBE6759:
 9115              	.LBB6769:
 9116              	.LBI6769:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 9117              		.loc 2 150 14 is_stmt 1 view .LVU1839
 9118              	.LBB6770:
 9119              	.LBI6770:
 9120              		.loc 5 153 7 view .LVU1840
 9121              	.LBB6771:
 9122              	.LBI6771:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9123              		.loc 4 89 7 view .LVU1841
 9124              	.L254:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9125              		.loc 4 89 7 is_stmt 0 view .LVU1842
 9126              	.LBE6771:
 9127              	.LBE6770:
 9128              	.LBE6769:
 9129              	.LBE6758:
 9130              	.LBB6772:
 9131              	.LBI6772:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 9132              		.loc 2 657 7 is_stmt 1 discriminator 5 view .LVU1843
 9133              	.LBB6773:
 9134              	.LBI6773:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 9135              		.loc 2 229 7 discriminator 5 view .LVU1844
 9136              	.LBB6774:
 9137              	.LBB6775:
 9138              	.LBI6775:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 9139              		.loc 2 221 7 discriminator 5 view .LVU1845
 9140              	.LBB6776:
 9141              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 9142              		.loc 2 222 26 is_stmt 0 discriminator 5 view .LVU1846
 9143 01f7 488B3C24 		movq	(%rsp), %rdi	#, _32
 9144              	.LVL468:
 9145              	.LBB6777:
 9146              	.LBI6777:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9147              		.loc 2 200 7 is_stmt 1 discriminator 5 view .LVU1847
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9148              		.loc 2 200 7 is_stmt 0 discriminator 5 view .LVU1848
 9149              	.LBE6777:
 9150              	.LBE6776:
 9151              	.LBE6775:
 9152              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9153              		.loc 2 231 2 discriminator 5 view .LVU1849
 9154 01fb 488D4424 		leaq	16(%rsp), %rax	#, tmp145
 9154      10
 9155 0200 4839C7   		cmpq	%rax, %rdi	# tmp145, _32
 9156 0203 7408     		je	.L256	#,
 9157              	.LVL469:
 9158              	.LBB6778:
 9159              	.LBI6778:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 9160              		.loc 2 236 7 is_stmt 1 view .LVU1850
 9161              	.LBB6779:
 9162              	.LBB6780:
 9163              	.LBI6780:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 9164              		.loc 3 469 7 view .LVU1851
 9165              	.LBB6781:
 9166              	.LBI6781:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 9167              		.loc 4 119 7 view .LVU1852
 9168              	.LBB6782:
 9169              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 9170              		.loc 4 128 19 is_stmt 0 view .LVU1853
 9171 0205 C5F877   		vzeroupper
 9172 0208 E8000000 		call	_ZdlPv@PLT	#
 9172      00
 9173              	.LVL470:
 9174              		.loc 4 128 19 view .LVU1854
 9175              	.LBE6782:
 9176              	.LBE6781:
 9177              	.LBE6780:
 9178              	.LBE6779:
 9179              	.LBE6778:
 9180              	.LBE6774:
 9181              	.LBE6773:
 9182              	.LBB6783:
 9183              	.LBI6783:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 9184              		.loc 2 150 14 is_stmt 1 view .LVU1855
 9185              	.LBB6784:
 9186              	.LBI6784:
 9187              		.loc 5 153 7 view .LVU1856
 9188              	.LBB6785:
 9189              	.LBI6785:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9190              		.loc 4 89 7 view .LVU1857
 9191              	.L256:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9192              		.loc 4 89 7 is_stmt 0 view .LVU1858
 9193              	.LBE6785:
 9194              	.LBE6784:
 9195              	.LBE6783:
 9196              	.LBE6772:
 9197              	.LBB6786:
 9198              	.LBB6740:
 9199              	.LBB6738:
 9200              	.LBB6736:
 9201              	.LBB6734:
 9202              	.LBB6733:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9203              		.loc 4 89 7 is_stmt 1 discriminator 3 view .LVU1859
 9204              	.LBE6733:
 9205              		.loc 5 153 7 discriminator 3 view .LVU1860
 9206              		.loc 5 153 7 is_stmt 0 discriminator 3 view .LVU1861
 9207              	.LBE6734:
 9208              	.LBE6736:
 9209              	.LBE6738:
 9210              	.LBE6740:
 9211              	.LBE6786:
 9212              	.LBB6787:
 9213              	.LBI6787:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 9214              		.loc 2 657 7 is_stmt 1 discriminator 3 view .LVU1862
 9215              	.LBB6788:
 9216              	.LBI6788:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 9217              		.loc 2 229 7 discriminator 3 view .LVU1863
 9218              	.LBB6789:
 9219              	.LBB6790:
 9220              	.LBI6790:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 9221              		.loc 2 221 7 discriminator 3 view .LVU1864
 9222              	.LBB6791:
 9223              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 9224              		.loc 2 222 26 is_stmt 0 discriminator 3 view .LVU1865
 9225 020d 488B7C24 		movq	64(%rsp), %rdi	#, _33
 9225      40
 9226              	.LVL471:
 9227              	.LBB6792:
 9228              	.LBI6792:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9229              		.loc 2 200 7 is_stmt 1 discriminator 3 view .LVU1866
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 9230              		.loc 2 200 7 is_stmt 0 discriminator 3 view .LVU1867
 9231              	.LBE6792:
 9232              	.LBE6791:
 9233              	.LBE6790:
 9234              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 9235              		.loc 2 231 2 discriminator 3 view .LVU1868
 9236 0212 488D4424 		leaq	80(%rsp), %rax	#, tmp149
 9236      50
 9237 0217 4839C7   		cmpq	%rax, %rdi	# tmp149, _33
 9238 021a 7410     		je	.L269	#,
 9239              	.LVL472:
 9240              	.LBB6793:
 9241              	.LBI6793:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 9242              		.loc 2 236 7 is_stmt 1 view .LVU1869
 9243              	.LBB6794:
 9244              	.LBB6795:
 9245              	.LBI6795:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 9246              		.loc 3 469 7 view .LVU1870
 9247              	.LBB6796:
 9248              	.LBI6796:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 9249              		.loc 4 119 7 view .LVU1871
 9250              	.LBB6797:
 9251              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 9252              		.loc 4 128 19 is_stmt 0 view .LVU1872
 9253 021c C5F877   		vzeroupper
 9254 021f E8000000 		call	_ZdlPv@PLT	#
 9254      00
 9255              	.LVL473:
 9256              	.L257:
 9257              		.loc 4 128 19 view .LVU1873
 9258              	.LBE6797:
 9259              	.LBE6796:
 9260              	.LBE6795:
 9261              	.LBE6794:
 9262              	.LBE6793:
 9263              	.LBE6789:
 9264              	.LBE6788:
 9265              	.LBB6798:
 9266              	.LBI6798:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 9267              		.loc 2 150 14 is_stmt 1 view .LVU1874
 9268              	.LBB6799:
 9269              	.LBI6799:
 9270              		.loc 5 153 7 view .LVU1875
 9271              	.LBB6800:
 9272              	.LBI6800:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9273              		.loc 4 89 7 view .LVU1876
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9274              		.loc 4 89 7 is_stmt 0 view .LVU1877
 9275 0224 4889EF   		movq	%rbp, %rdi	# tmp146,
 9276              	.LEHB36:
 9277 0227 E8000000 		call	_Unwind_Resume@PLT	#
 9277      00
 9278              	.LVL474:
 9279              	.LEHE36:
 9280              	.L269:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9281              		.loc 4 89 7 view .LVU1878
 9282 022c C5F877   		vzeroupper
 9283 022f EBF3     		jmp	.L257	#
 9284              	.LVL475:
 9285              	.L265:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9286              		.loc 4 89 7 view .LVU1879
 9287 0231 F30F1EFA 		endbr64	
 9288              	.LVL476:
 9289              	.L277:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9290              		.loc 4 89 7 view .LVU1880
 9291 0235 4889C5   		movq	%rax, %rbp	# tmp162, tmp142
 9292 0238 EBBD     		jmp	.L254	#
 9293              	.LVL477:
 9294              	.L264:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9295              		.loc 4 89 7 view .LVU1881
 9296 023a F30F1EFA 		endbr64	
 9297              	.LVL478:
 9298              	.L274:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9299              		.loc 4 89 7 view .LVU1882
 9300 023e 4889C5   		movq	%rax, %rbp	# tmp163, tmp146
 9301 0241 EBCA     		jmp	.L256	#
 9302              	.LVL479:
 9303              	.L263:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9304              		.loc 4 89 7 view .LVU1883
 9305 0243 F30F1EFA 		endbr64	
 9306 0247 E96FFFFF 		jmp	.L283	#
 9306      FF
 9307              	.L262:
 9308 024c F30F1EFA 		endbr64	
 9309 0250 E96FFFFF 		jmp	.L280	#
 9309      FF
 9310              	.LVL480:
 9311              	.L261:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9312              		.loc 4 89 7 view .LVU1884
 9313 0255 F30F1EFA 		endbr64	
 9314 0259 EBDA     		jmp	.L277	#
 9315              	.LVL481:
 9316              	.L260:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 9317              		.loc 4 89 7 view .LVU1885
 9318 025b F30F1EFA 		endbr64	
 9319 025f EBDD     		jmp	.L274	#
 9320              	.LBE6800:
 9321              	.LBE6799:
 9322              	.LBE6798:
 9323              	.LBE6787:
 9324              		.cfi_endproc
 9325              	.LFE4490:
 9326              		.section	.gcc_except_table._ZN3c10L19backendToDeviceTypeENS_7BackendE,"aG",@progbits,_ZNK2at24Depr
 9327              	.LLSDA4490:
 9328 0000 FF       		.byte	0xff
 9329 0001 FF       		.byte	0xff
 9330 0002 01       		.byte	0x1
 9331 0003 3F       		.uleb128 .LLSDACSE4490-.LLSDACSB4490
 9332              	.LLSDACSB4490:
 9333 0004 FC01     		.uleb128 .LEHB26-.LFB4490
 9334 0006 05       		.uleb128 .LEHE26-.LEHB26
 9335 0007 00       		.uleb128 0
 9336 0008 00       		.uleb128 0
 9337 0009 8B02     		.uleb128 .LEHB27-.LFB4490
 9338 000b 05       		.uleb128 .LEHE27-.LEHB27
 9339 000c DB04     		.uleb128 .L260-.LFB4490
 9340 000e 00       		.uleb128 0
 9341 000f 9B02     		.uleb128 .LEHB28-.LFB4490
 9342 0011 05       		.uleb128 .LEHE28-.LEHB28
 9343 0012 D504     		.uleb128 .L261-.LFB4490
 9344 0014 00       		.uleb128 0
 9345 0015 AE02     		.uleb128 .LEHB29-.LFB4490
 9346 0017 05       		.uleb128 .LEHE29-.LEHB29
 9347 0018 CC04     		.uleb128 .L262-.LFB4490
 9348 001a 00       		.uleb128 0
 9349 001b C902     		.uleb128 .LEHB30-.LFB4490
 9350 001d 05       		.uleb128 .LEHE30-.LEHB30
 9351 001e C304     		.uleb128 .L263-.LFB4490
 9352 0020 00       		.uleb128 0
 9353 0021 E002     		.uleb128 .LEHB31-.LFB4490
 9354 0023 05       		.uleb128 .LEHE31-.LEHB31
 9355 0024 00       		.uleb128 0
 9356 0025 00       		.uleb128 0
 9357 0026 EF02     		.uleb128 .LEHB32-.LFB4490
 9358 0028 05       		.uleb128 .LEHE32-.LEHB32
 9359 0029 BA04     		.uleb128 .L264-.LFB4490
 9360 002b 00       		.uleb128 0
 9361 002c FF02     		.uleb128 .LEHB33-.LFB4490
 9362 002e 05       		.uleb128 .LEHE33-.LEHB33
 9363 002f B104     		.uleb128 .L265-.LFB4490
 9364 0031 00       		.uleb128 0
 9365 0032 9203     		.uleb128 .LEHB34-.LFB4490
 9366 0034 05       		.uleb128 .LEHE34-.LEHB34
 9367 0035 C003     		.uleb128 .L266-.LFB4490
 9368 0037 00       		.uleb128 0
 9369 0038 AD03     		.uleb128 .LEHB35-.LFB4490
 9370 003a 05       		.uleb128 .LEHE35-.LEHB35
 9371 003b B703     		.uleb128 .L267-.LFB4490
 9372 003d 00       		.uleb128 0
 9373 003e A704     		.uleb128 .LEHB36-.LFB4490
 9374 0040 05       		.uleb128 .LEHE36-.LEHB36
 9375 0041 00       		.uleb128 0
 9376 0042 00       		.uleb128 0
 9377              	.LLSDACSE4490:
 9378              		.section	.text._ZN3c10L19backendToDeviceTypeENS_7BackendE,"axG",@progbits,_ZNK2at24DeprecatedTypeP
 9380              		.section	.rodata._ZNK2at24DeprecatedTypeProperties7optionsEs.str1.1,"aMS",@progbits,1
 9381              	.LC25:
 9382 0000 2028706C 		.string	" (please report this error)"
 9382      65617365 
 9382      20726570 
 9382      6F727420 
 9382      74686973 
 9383              	.LC26:
 9384 001c 556E7265 		.string	"Unrecognized Scalartype "
 9384      636F676E 
 9384      697A6564 
 9384      20536361 
 9384      6C617274 
 9385              		.section	.rodata._ZNK2at24DeprecatedTypeProperties7optionsEs.str1.8,"aMS",@progbits,1
 9386              		.align 8
 9387              	.LC27:
 9388 0000 696E6465 		.string	"index < NumScalarTypes INTERNAL ASSERT FAILED at \"/workspace/pth-linear-interp/torch/inc
 9388      78203C20 
 9388      4E756D53 
 9388      63616C61 
 9388      72547970 
 9389              		.section	.rodata._ZNK2at24DeprecatedTypeProperties7optionsEs.str1.1
 9390              	.LC28:
 9391 0035 66726F6D 		.string	"fromScalarType"
 9391      5363616C 
 9391      61725479 
 9391      706500
 9392              		.section	.rodata._ZNK2at24DeprecatedTypeProperties7optionsEs.str1.8
 9393 0096 0000     		.align 8
 9394              	.LC29:
 9395 0098 2F776F72 		.string	"/workspace/pth-linear-interp/torch/include/c10/util/typeid.h"
 9395      6B737061 
 9395      63652F70 
 9395      74682D6C 
 9395      696E6561 
 9396 00d5 000000   		.align 8
 9397              	.LC30:
 9398 00d8 44657669 		.string	"Device index must be -1 or non-negative, got "
 9398      63652069 
 9398      6E646578 
 9398      206D7573 
 9398      74206265 
 9399 0106 0000     		.align 8
 9400              	.LC31:
 9401 0108 696E6465 		.string	"index_ == -1 || index_ >= 0 INTERNAL ASSERT FAILED at \"/workspace/pth-linear-interp/torc
 9401      785F203D 
 9401      3D202D31 
 9401      207C7C20 
 9401      696E6465 
 9402              		.section	.rodata._ZNK2at24DeprecatedTypeProperties7optionsEs.str1.1
 9403              	.LC32:
 9404 0044 76616C69 		.string	"validate"
 9404      64617465 
 9404      00
 9405              		.section	.rodata._ZNK2at24DeprecatedTypeProperties7optionsEs.str1.8
 9406 01a3 00000000 		.align 8
 9406      00
 9407              	.LC33:
 9408 01a8 2F776F72 		.string	"/workspace/pth-linear-interp/torch/include/c10/core/Device.h"
 9408      6B737061 
 9408      63652F70 
 9408      74682D6C 
 9408      696E6561 
 9409 01e5 000000   		.align 8
 9410              	.LC34:
 9411 01e8 43505520 		.string	"CPU device index must be -1 or zero, got "
 9411      64657669 
 9411      63652069 
 9411      6E646578 
 9411      206D7573 
 9412 0212 00000000 		.align 8
 9412      0000
 9413              	.LC35:
 9414 0218 2169735F 		.string	"!is_cpu() || index_ <= 0 INTERNAL ASSERT FAILED at \"/workspace/pth-linear-interp/torch/i
 9414      63707528 
 9414      29207C7C 
 9414      20696E64 
 9414      65785F20 
 9415              		.section	.text._ZNK2at24DeprecatedTypeProperties7optionsEs,"axG",@progbits,_ZNK2at24DeprecatedType
 9416              		.align 2
 9417              		.p2align 4
 9418              		.weak	_ZNK2at24DeprecatedTypeProperties7optionsEs
 9420              	_ZNK2at24DeprecatedTypeProperties7optionsEs:
 9421              	.LVL482:
 9422              	.LFB8150:
 9423              		.file 21 "/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h"
   1:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
   3:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #include <c10/core/Backend.h>
   4:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #include <c10/core/ScalarType.h>
   5:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #include <c10/core/Layout.h>
   6:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #include <c10/core/TensorOptions.h>
   7:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #include <c10/core/Storage.h>
   8:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #include <ATen/core/DeprecatedTypePropertiesRegistry.h>
   9:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** #include <ATen/core/Generator.h>
  10:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  11:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  12:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** namespace at {
  13:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  14:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** class Tensor;
  15:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  16:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** // This class specifies a Backend and a ScalarType. Currently, it primarily
  17:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** // serves as a replacement return value for Tensor::type(). Previously,
  18:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** // Tensor::type() returned Type&, but we are changing Type to not be
  19:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** // dtype-specific.
  20:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** class TORCH_API DeprecatedTypeProperties {
  21:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****  public:
  22:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   DeprecatedTypeProperties(Backend backend, ScalarType scalar_type)
  23:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     : backend_(backend), scalar_type_(scalar_type) {}
  24:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  25:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   Backend backend() const {
  26:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return backend_;
  27:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  28:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  29:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   Layout layout() const {
  30:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return layout_from_backend(backend_);
  31:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  32:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  33:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   bool is_sparse() const {
  34:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return layout_from_backend(backend()) == kSparse;
  35:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  36:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  37:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   DeviceType device_type() const {
  38:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return backendToDeviceType(backend_);
  39:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  40:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  41:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   bool is_cuda() const {
  42:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return backendToDeviceType(backend_) == kCUDA;
  43:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  44:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  45:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   ScalarType scalarType() const {
  46:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return scalar_type_;
  47:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  48:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  49:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   caffe2::TypeMeta typeMeta() const {
  50:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return scalarTypeToTypeMeta(scalar_type_);
  51:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  52:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  53:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   bool operator==(const DeprecatedTypeProperties& other) const {
  54:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return backend_ == other.backend() && scalar_type_ == other.scalarType();
  55:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  56:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  57:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   bool operator!=(const DeprecatedTypeProperties& other) const {
  58:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return !(*this == other);
  59:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  60:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  61:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   std::string toString() const {
  62:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     std::string base_str;
  63:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     if (backend_ == Backend::Undefined || scalar_type_ == ScalarType::Undefined) {
  64:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****       base_str = "UndefinedType";
  65:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     } else {
  66:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****       base_str = std::string(at::toString(backend_)) + at::toString(scalar_type_) + "Type";
  67:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     }
  68:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return base_str;
  69:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  70:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  71:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   DeprecatedTypeProperties & toBackend(Backend b) const {
  72:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return globalDeprecatedTypePropertiesRegistry().getDeprecatedTypeProperties(
  73:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****         b, scalar_type_);
  74:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  75:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  76:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   DeprecatedTypeProperties & toScalarType(ScalarType s) const {
  77:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return globalDeprecatedTypePropertiesRegistry().getDeprecatedTypeProperties(
  78:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****         backend_, s);
  79:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  80:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  81:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   DeprecatedTypeProperties & cpu() const {
  82:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return toBackend(Backend::CPU);
  83:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  84:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  85:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   DeprecatedTypeProperties & cuda() const {
  86:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return toBackend(Backend::CUDA);
  87:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  88:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  89:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   DeprecatedTypeProperties & hip() const {
  90:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return toBackend(Backend::HIP);
  91:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
  92:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
  93:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   /// Constructs the `TensorOptions` from a type and a `device_index`.
  94:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   TensorOptions options(int16_t device_index = -1) const {
 9424              		.loc 21 94 17 is_stmt 1 view -0
 9425              		.cfi_startproc
 9426              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9427              		.cfi_lsda 0x1b,.LLSDA8150
 9428              		.loc 21 94 17 is_stmt 0 view .LVU1887
 9429 0000 F30F1EFA 		endbr64	
 9430 0004 55       		pushq	%rbp	#
 9431              		.cfi_def_cfa_offset 16
 9432              		.cfi_offset 6, -16
 9433 0005 4889E5   		movq	%rsp, %rbp	#,
 9434              		.cfi_def_cfa_register 6
 9435 0008 4157     		pushq	%r15	#
 9436 000a 4156     		pushq	%r14	#
 9437 000c 4155     		pushq	%r13	#
 9438 000e 4154     		pushq	%r12	#
 9439 0010 53       		pushq	%rbx	#
 9440 0011 4881ECA8 		subq	$168, %rsp	#,
 9440      000000
 9441              		.cfi_offset 15, -24
 9442              		.cfi_offset 14, -32
 9443              		.cfi_offset 13, -40
 9444              		.cfi_offset 12, -48
 9445              		.cfi_offset 3, -56
 9446              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:95:     return Te
  95:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return TensorOptions().dtype(typeMeta())
 9447              		.loc 21 95 43 view .LVU1888
 9448 0018 66440FBE 		movsbw	4(%rdi), %r12w	# MEM[(ScalarType *)this_3(D) + 4B],
 9448      6704
 9449              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:94:   TensorOptio
  94:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return TensorOptions().dtype(typeMeta())
 9450              		.loc 21 94 17 view .LVU1889
 9451 001e 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp320
 9451      25280000 
 9451      00
 9452 0027 488945C8 		movq	%rax, -56(%rbp)	# tmp320, D.446328
 9453 002b 31C0     		xorl	%eax, %eax	# tmp320
 9454              		.loc 21 95 5 is_stmt 1 view .LVU1890
 9455              	.LVL483:
 9456              	.LBB7166:
 9457              	.LBI7166:
 9458              		.file 22 "/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h"
   1:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/DefaultDtype.h>
   4:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/Backend.h>
   5:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/Layout.h>
   6:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/ScalarType.h>
   7:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/ScalarTypeToTypeMeta.h>
   8:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/Device.h>
   9:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/MemoryFormat.h>
  10:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/core/DispatchKeySet.h>
  11:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  12:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/util/Optional.h>
  13:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/util/C++17.h>
  14:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <c10/macros/Macros.h>
  15:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  16:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <cstddef>
  17:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <iosfwd>
  18:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** #include <utility>
  19:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  20:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** namespace c10 {
  21:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  22:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** DispatchKey computeDispatchKey(c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::
  23:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  24:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** inline ScalarType dtype_or_default(c10::optional<ScalarType> dtype) {
  25:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   return value_or_else(dtype, [] {return get_default_dtype_as_scalartype();});
  26:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** }
  27:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  28:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** inline caffe2::TypeMeta dtype_or_default(c10::optional<caffe2::TypeMeta> dtype) {
  29:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   return value_or_else(dtype, [] {return get_default_dtype();});
  30:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** }
  31:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  32:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** inline Layout layout_or_default(c10::optional<Layout> layout) {
  33:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   return layout.value_or(kStrided);
  34:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** }
  35:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  36:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** inline Device device_or_default(c10::optional<Device> device) {
  37:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   return value_or_else(device, [] {return Device(kCPU);});
  38:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** }
  39:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  40:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** inline bool pinned_memory_or_default(c10::optional<bool> pinned_memory) {
  41:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   return pinned_memory.value_or(false);
  42:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** }
  43:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  44:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// A class to encapsulate construction axes of an Tensor.  TensorOptions was
  45:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// designed to support the Python style API for specifying construction options
  46:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// on factory functions, e.g.,
  47:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  48:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     torch.zeros(2, 3, dtype=torch.int32)
  49:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  50:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// Because C++ doesn't natively support keyword arguments, there must be
  51:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// another way of specifying keyword-like arguments.  TensorOptions is a
  52:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// builder class which can be used to construct this "dictionary" of keyword
  53:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// arguments: functions which support TensorOptions conventionally take this
  54:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// argument optionally as their last argument.
  55:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  56:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// WARNING: In PyTorch, there are `torch::` variants of factory functions,
  57:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// e.g., torch::zeros for at::zeros.  These return Variables (while the
  58:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// stock ATen functions return plain Tensors).  If you mix these functions
  59:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// up, you WILL BE SAD.
  60:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  61:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// Rather than use the constructor of this class directly, you should prefer to
  62:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// use the constructor functions, and then chain setter methods on top of them.
  63:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  64:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     at::device(at::kCUDA).dtype(kInt)
  65:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     at::dtype(at::kInt)
  66:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  67:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// Additionally, anywhere a TensorOptions is expected, you can directly
  68:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// pass at::kCUDA / at::kInt, and it will implicitly convert to a TensorOptions.
  69:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  70:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// Here are some recommended ways to create a 2x2 tensor of zeros
  71:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// with certain properties.  These all *implicitly* make use of
  72:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// TensorOptions, even if they don't mention the class explicitly:
  73:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  74:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     at::zeros({2,2}, at::kCUDA);
  75:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     at::zeros({2,2}, at::kLong);
  76:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     at::zeros({2,2}, at::device(at::kCUDA).dtype(at::kLong()));
  77:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     at::zeros({2,2}, at::device({at::kCUDA, 1})); // place on device 1
  78:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     at::zeros({2,2}, at::requires_grad());
  79:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  80:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
  81:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// NOTE [ TensorOptions Constructors ]
  82:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  83:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// TensorOptions is like a dictionary with entries from the set:
  84:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// {requires_grad, device, dtype, layout}, where each entry may be
  85:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// unspecified (i.e., is optional). It is used to specify the properties of
  86:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// tensors in many places both in C++ internal and API, e.g., tensor factory
  87:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// methods like `at::empty({10}, options)`, tensor conversions like
  88:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `tensor.to(...)`, etc.
  89:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  90:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// To provide a simple API that is consistent with Python, where one can do
  91:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `torch.empty(sizes, X)` with `X` being a `torch.device`, `torch.dtype`, or a
  92:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `torch.layout`, we want TensorOptions to be implicitly convertible from
  93:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `ScalarType dtype`, `Layout layout` and `Device device`. Therefore, we have
  94:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// three implicit constructors from each of these three types.
  95:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
  96:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// This is sufficient for `ScalarType` and `Layout` as they are simple Enum
  97:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// classes. However, `Device` is an ordinary class with implicit constructors
  98:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `Device(DeviceType, DeviceIndex = -1)` and `Device(std::string)` to be
  99:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// consistent with Python API, where strings are treated as equivalent with a
 100:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `torch.device` object (e.g., "cuda:1" can be passed to everywhere a
 101:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `torch.device("cuda:1")` is accepted). To support the syntax
 102:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `at::empty({10}, {kCUDA, 1})` and `tensor.to(kCUDA)`, we need to make sure
 103:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// that `TensorOptions` is implicitly constructible with any argments that a
 104:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `Device` can constructed from. So we have,
 105:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
 106:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///    /* implicit */ TensorOptions(T&& device) : TensorOptions() {
 107:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///      this->set_device(device);
 108:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///    }
 109:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
 110:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///    template <typename... Args,
 111:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///             typename = std::enable_if_t<std::is_constructible<Device, Args&&...>::value>>
 112:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///    /* implicit */  TensorOptions(Args&&... args)
 113:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///     : TensorOptions(Device(std::forward<Args>(args)...)) {}
 114:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
 115:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
 116:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// But this will be problematic. Consider this: `TensorOptions({kCUDA, 1})`.
 117:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// Compiler will compain about ambiguity between the copy constructor and the
 118:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `Device` constructor because `{kCUDA, 1}` can be converted to both a
 119:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// `TensorOption` and a `Device`.
 120:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** ///
 121:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// To get around this, we templatize the `Device` constructor. Since overload
 122:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** /// resolution is done before template resolution, our problem is solved.
 123:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 124:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** DispatchKey computeDispatchKey(optional<ScalarType> dtype, optional<Layout> layout, optional<Device
 125:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 126:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 127:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** struct C10_API TensorOptions {
 128:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   TensorOptions()
 9459              		.loc 22 128 3 view .LVU1891
 9460              	.LBB7167:
 9461              	.LBI7167:
 9462              		.file 23 "/workspace/pth-linear-interp/torch/include/c10/core/Device.h"
   1:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #include <c10/core/DeviceType.h>
   4:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #include <c10/macros/Macros.h>
   5:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #include <c10/util/Exception.h>
   6:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
   7:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #include <cstddef>
   8:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #include <functional>
   9:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #include <iosfwd>
  10:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** #include <string>
  11:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  12:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** namespace c10 {
  13:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  14:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// An index representing a specific device; e.g., the 1 in GPU 1.
  15:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// A DeviceIndex is not independently meaningful without knowing
  16:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// the DeviceType it is associated; try to use Device rather than
  17:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// DeviceIndex directly.
  18:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** using DeviceIndex = int8_t;
  19:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  20:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// Represents a a compute device on which a tensor is located. A device is
  21:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// uniquely identified by a type, which specifies the type of machine it is
  22:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// (e.g. CPU or CUDA GPU), and a device index or ordinal, which identifies the
  23:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// specific compute device when there is more than one of a certain type. The
  24:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// device index is optional, and in its defaulted state represents (abstractly)
  25:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// "the current device". Further, there are two constraints on the value of the
  26:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// device index, if one is explicitly stored:
  27:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// 1. A negative index represents the current device, a non-negative index
  28:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// represents a specific, concrete device,
  29:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** /// 2. When the device type is CPU, the device index must be zero.
  30:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** struct C10_API Device final {
  31:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   using Type = DeviceType;
  32:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  33:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Constructs a new `Device` from a `DeviceType` and an optional device
  34:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// index.
  35:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /* implicit */ Device(DeviceType type, DeviceIndex index = -1)
 9463              		.loc 23 35 18 view .LVU1892
 9464              	.LBE7167:
 9465              	.LBE7166:
  36:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****       : type_(type), index_(index) {
  37:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     validate();
 9466              		.loc 23 37 5 view .LVU1893
 9467              	.LBB7176:
 9468              	.LBB7172:
 9469              	.LBB7168:
 9470              	.LBI7168:
  38:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  39:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  40:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Constructs a `Device` from a string description, for convenience.
  41:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// The string supplied must follow the following schema:
  42:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// `(cpu|cuda)[:<device-index>]`
  43:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// where `cpu` or `cuda` specifies the device type, and
  44:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// `:<device-index>` optionally specifies a device index.
  45:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /* implicit */ Device(const std::string& device_string);
  46:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  47:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Returns true if the type and index of this `Device` matches that of
  48:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// `other`.
  49:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   bool operator==(const Device& other) const noexcept {
  50:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return this->type_ == other.type_ && this->index_ == other.index_;
  51:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  52:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  53:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Returns true if the type or index of this `Device` differs from that of
  54:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// `other`.
  55:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   bool operator!=(const Device& other) const noexcept {
  56:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return !(*this == other);
  57:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  58:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  59:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Sets the device index.
  60:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   void set_index(DeviceIndex index) {
  61:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     index_ = index;
  62:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  63:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  64:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Returns the type of device this is.
  65:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   DeviceType type() const noexcept {
  66:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return type_;
  67:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  68:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  69:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Returns the optional index.
  70:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   DeviceIndex index() const noexcept {
  71:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return index_;
  72:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  73:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  74:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Returns true if the device has a non-default index.
  75:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   bool has_index() const noexcept {
  76:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return index_ != -1;
  77:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  78:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  79:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Return true if the device is of CUDA type.
  80:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   bool is_cuda() const noexcept {
  81:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return type_ == DeviceType::CUDA;
  82:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  83:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  84:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Return true if the device is of XPU type.
  85:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   bool is_xpu() const noexcept {
  86:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return type_ == DeviceType::XPU;
  87:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  88:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  89:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Return true if the device is of CPU type.
  90:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   bool is_cpu() const noexcept {
  91:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     return type_ == DeviceType::CPU;
  92:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
  93:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  94:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   /// Same string as returned from operator<<.
  95:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   std::string str() const;
  96:/workspace/pth-linear-interp/torch/include/c10/core/Device.h **** 
  97:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****  private:
  98:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   DeviceType type_;
  99:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   DeviceIndex index_ = -1;
 100:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   void validate() {
 9471              		.loc 23 100 8 view .LVU1894
 9472              	.LBB7169:
 101:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     // Removing these checks in release builds noticeably improves
 102:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     // performance in micro-benchmarks.
 103:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     // This is safe to do, because backends that use the DeviceIndex
 104:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     // have a later check when we actually try to switch to that device.
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     TORCH_INTERNAL_ASSERT_DEBUG_ONLY(index_ == -1 || index_ >= 0,
 9473              		.loc 23 105 5 view .LVU1895
 106:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 9474              		.loc 23 106 70 view .LVU1896
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     TORCH_INTERNAL_ASSERT_DEBUG_ONLY(!is_cpu() || index_ <= 0,
 9475              		.loc 23 107 5 view .LVU1897
 9476              		.loc 23 107 5 is_stmt 0 view .LVU1898
 9477              	.LBE7169:
 9478              	.LBE7168:
 9479              	.LBE7172:
 9480              	.LBE7176:
  91:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
 9481              		.loc 23 91 5 is_stmt 1 view .LVU1899
 9482              	.LBB7177:
 9483              	.LBB7173:
 9484              	.LBB7171:
 9485              	.LBB7170:
 108:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9486              		.loc 23 108 66 view .LVU1900
 9487              		.loc 23 108 66 is_stmt 0 view .LVU1901
 9488              	.LBE7170:
 9489              	.LBE7171:
 9490              	.LBE7173:
 9491              	.LBB7174:
 9492              	.LBI7174:
 9493              		.file 24 "/workspace/pth-linear-interp/torch/include/c10/util/typeid.h"
   1:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <atomic>
   4:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <cassert>
   5:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <complex>
   6:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <cstdlib>
   7:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <iostream>
   8:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <memory>
   9:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <mutex>
  10:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <type_traits>
  11:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <unordered_map>
  12:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <unordered_set>
  13:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <vector>
  14:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #ifdef __GXX_RTTI
  15:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <typeinfo>
  16:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #endif
  17:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  18:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <exception>
  19:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  20:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/macros/Macros.h>
  21:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/Backtrace.h>
  22:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/C++17.h>
  23:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/Exception.h>
  24:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/IdWrapper.h>
  25:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/Type.h>
  26:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/TypeTraits.h>
  27:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/TypeIndex.h>
  28:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/util/flat_hash_map.h>
  29:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  30:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #include <c10/core/ScalarType.h>
  31:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  32:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** /*
  33:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * TypeIdentifier is a small type containing an id.
  34:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * Types must be registered using CAFFE_KNOWN_TYPE() for them to have a type id.
  35:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * If a type is registered, you can also create an object containing meta data
  36:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * like constructor, destructor, stringified name, ... about the type by calling
  37:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * TypeMeta::Make<T>. This returns a TypeMeta() object, which is basically just
  38:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * a pointer to the type information, so it's cheap to pass around.
  39:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  */
  40:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  41:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // TODO: This file is still in the caffe2 namespace, despite living
  42:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // in the ATen directory.  This is because the macro
  43:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // CAFFE_KNOWN_TYPE defines a template specialization, which relies
  44:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // on the namespace of TypeMeta matching the namespace where the macro is
  45:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // called.  This requires us to fix all of the call-sites, which I want to do
  46:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // later.  So the namespace is not fixed at the moment.
  47:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  48:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // Make at::Half a fundamental type.
  49:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** namespace c10 {
  50:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** namespace guts {
  51:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <>
  52:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** struct is_fundamental<at::Half> : std::true_type {};
  53:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** } // namespace guts
  54:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** } // namespace c10
  55:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  56:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** namespace caffe2 {
  57:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  58:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** /**
  59:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * A type id is a unique id for a given C++ type.
  60:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * You need to register your types using CAFFE_KNOWN_TYPE(MyType) to be able to
  61:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * use TypeIdentifier with custom types. This is for example used to store the
  62:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * dtype of tensors.
  63:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  */
  64:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** class C10_API TypeIdentifier final
  65:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     : public at::IdWrapper<TypeIdentifier, c10::util::type_index> {
  66:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** public:
  67:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   friend std::ostream& operator<<(std::ostream& stream, TypeIdentifier typeId);
  68:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   friend constexpr bool operator<(TypeIdentifier lhs, TypeIdentifier rhs);
  69:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  70:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
  71:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns the unique id for the given type T. The id is unique for the type T
  72:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * in the sense that for any two different types, their ids are different; for
  73:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * the same type T, the id remains the same over different calls of the
  74:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * function. However, this is not guaranteed over different runs, as the id
  75:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * is generated during run-time. Do NOT serialize the id for storage.
  76:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
  77:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   template <typename T>
  78:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static C10_HOST_CONSTEXPR TypeIdentifier Get() noexcept {
  79:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return TypeIdentifier(c10::util::get_type_index<T>());
  80:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
  81:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  82:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static constexpr TypeIdentifier uninitialized() {
  83:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return TypeIdentifier(c10::util::type_index{0});
  84:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
  85:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  86:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** private:
  87:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   constexpr explicit TypeIdentifier(c10::util::type_index id) : IdWrapper(id) {}
  88:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** };
  89:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  90:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // Allow usage in std::map / std::set
  91:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // TODO Disallow this and rather use std::unordered_map/set everywhere
  92:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr bool operator<(TypeIdentifier lhs, TypeIdentifier rhs) {
  93:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return lhs.underlyingId() < rhs.underlyingId();
  94:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
  95:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
  96:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline std::ostream& operator<<(
  97:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     std::ostream& stream,
  98:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     caffe2::TypeIdentifier typeId) {
  99:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return stream << typeId.underlyingId();
 100:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 101:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 102:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** } // namespace caffe2
 103:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 104:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** namespace at {
 105:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** using DataType = caffe2::TypeIdentifier;
 106:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 107:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 108:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** C10_DEFINE_HASH_FOR_IDWRAPPER(caffe2::TypeIdentifier)
 109:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 110:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** namespace caffe2 {
 111:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 112:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** namespace detail {
 113:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 114:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // This struct holds the actual type information. There will be
 115:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // one allocated per type. TypeMeta objects will then point to the struct
 116:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // instance for the type they're configured for.
 117:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** struct TypeMetaData final {
 118:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using New = void*();
 119:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using PlacementNew = void(void*, size_t);
 120:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using Copy = void(const void*, void*, size_t);
 121:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using PlacementDelete = void(void*, size_t);
 122:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using Delete = void(void*);
 123:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 124:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   constexpr TypeMetaData() noexcept
 125:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   : itemsize_(0),
 126:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     new_(nullptr),
 127:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     placementNew_(nullptr),
 128:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     copy_(nullptr),
 129:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     placementDelete_(nullptr),
 130:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     delete_(nullptr),
 131:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     id_(TypeIdentifier::uninitialized()),
 132:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     name_("nullptr (uninitialized)") {}
 133:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 134:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   constexpr TypeMetaData(
 135:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       size_t itemsize,
 136:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       New* newFn,
 137:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       PlacementNew* placementNew,
 138:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       Copy* copy,
 139:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       PlacementDelete* placementDelete,
 140:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       Delete* deleteFn,
 141:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       TypeIdentifier id,
 142:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       c10::string_view name) noexcept
 143:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   : itemsize_(itemsize),
 144:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     new_(newFn),
 145:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     placementNew_(placementNew),
 146:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     copy_(copy),
 147:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     placementDelete_(placementDelete),
 148:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     delete_(deleteFn),
 149:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     id_(id),
 150:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     name_(name) {}
 151:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 152:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   size_t itemsize_;
 153:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   New* new_;
 154:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   PlacementNew* placementNew_;
 155:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   Copy* copy_;
 156:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   PlacementDelete* placementDelete_;
 157:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   Delete* delete_;
 158:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   TypeIdentifier id_;
 159:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   c10::string_view name_;
 160:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** };
 161:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 162:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // Mechanism for throwing errors which can't be prevented at compile time
 163:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // due to type erasure. E.g. somebody calling TypeMeta::copy() for
 164:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // non-copyable type. Right now just throws exception but is implemented
 165:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // in .cpp to manage dependencies
 166:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** [[noreturn]] C10_API void _ThrowRuntimeTypeLogicError(const std::string& msg);
 167:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 168:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** /**
 169:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * Placement new function for the type.
 170:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  */
 171:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 172:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void _PlacementNew(void* ptr, size_t n) {
 173:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   T* typed_ptr = static_cast<T*>(ptr);
 174:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   for (size_t i = 0; i < n; ++i) {
 175:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     new (typed_ptr + i) T;
 176:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 177:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 178:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 179:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 180:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void _PlacementNewNotDefault(void* /*ptr*/, size_t /*n*/) {
 181:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   _ThrowRuntimeTypeLogicError(
 182:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       "Type " + std::string(c10::util::get_fully_qualified_type_name<T>()) +
 183:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       " is not default-constructible.");
 184:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 185:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 186:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <
 187:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typename T,
 188:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     std::enable_if_t<std::is_default_constructible<T>::value>* = nullptr>
 189:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::PlacementNew* _PickPlacementNew() {
 190:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return (c10::guts::is_fundamental<T>::value || std::is_pointer<T>::value)
 191:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       ? nullptr
 192:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       : &_PlacementNew<T>;
 193:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 194:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 195:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <
 196:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typename T,
 197:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     std::enable_if_t<!std::is_default_constructible<T>::value>* = nullptr>
 198:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::PlacementNew* _PickPlacementNew() {
 199:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static_assert(
 200:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       !c10::guts::is_fundamental<T>::value && !std::is_pointer<T>::value,
 201:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       "this should have picked the other SFINAE case");
 202:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return &_PlacementNewNotDefault<T>;
 203:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 204:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 205:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 206:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void* _New() {
 207:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return new T;
 208:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 209:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 210:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 211:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void* _NewNotDefault() {
 212:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   _ThrowRuntimeTypeLogicError(
 213:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       "Type " + std::string(c10::util::get_fully_qualified_type_name<T>()) +
 214:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       " is not default-constructible.");
 215:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 216:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 217:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <
 218:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typename T,
 219:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     std::enable_if_t<std::is_default_constructible<T>::value>* = nullptr>
 220:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::New* _PickNew() {
 221:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return &_New<T>;
 222:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 223:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 224:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <
 225:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typename T,
 226:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     std::enable_if_t<!std::is_default_constructible<T>::value>* = nullptr>
 227:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::New* _PickNew() {
 228:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return &_NewNotDefault<T>;
 229:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 230:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 231:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** /**
 232:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * Typed copy function for classes.
 233:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  */
 234:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 235:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void _Copy(const void* src, void* dst, size_t n) {
 236:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   const T* typed_src = static_cast<const T*>(src);
 237:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   T* typed_dst = static_cast<T*>(dst);
 238:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   for (size_t i = 0; i < n; ++i) {
 239:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typed_dst[i] = typed_src[i];
 240:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 241:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 242:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 243:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** /**
 244:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * A placeholder function for types that do not allow assignment.
 245:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  */
 246:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 247:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void _CopyNotAllowed(const void* /*src*/, void* /*dst*/, size_t /*n*/) {
 248:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   _ThrowRuntimeTypeLogicError(
 249:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       "Type " + std::string(c10::util::get_fully_qualified_type_name<T>()) +
 250:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       " does not allow assignment.");
 251:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 252:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 253:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <
 254:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typename T,
 255:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     std::enable_if_t<std::is_copy_assignable<T>::value>* = nullptr>
 256:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::Copy* _PickCopy() {
 257:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return (c10::guts::is_fundamental<T>::value || std::is_pointer<T>::value)
 258:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       ? nullptr
 259:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       : &_Copy<T>;
 260:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 261:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 262:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <
 263:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typename T,
 264:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     std::enable_if_t<!std::is_copy_assignable<T>::value>* = nullptr>
 265:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::Copy* _PickCopy() {
 266:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static_assert(
 267:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       !c10::guts::is_fundamental<T>::value && !std::is_pointer<T>::value,
 268:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       "this should have picked the other SFINAE case");
 269:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return &_CopyNotAllowed<T>;
 270:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 271:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 272:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** /**
 273:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * Destructor for non-fundamental types.
 274:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  */
 275:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 276:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void _PlacementDelete(void* ptr, size_t n) {
 277:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   T* typed_ptr = static_cast<T*>(ptr);
 278:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   for (size_t i = 0; i < n; ++i) {
 279:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     typed_ptr[i].~T();
 280:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 281:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 282:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 283:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 284:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::PlacementDelete* _PickPlacementDelete() {
 285:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return (c10::guts::is_fundamental<T>::value || std::is_pointer<T>::value)
 286:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       ? nullptr
 287:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       : &_PlacementDelete<T>;
 288:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 289:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 290:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <typename T>
 291:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline void _Delete(void* ptr) {
 292:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   T* typed_ptr = static_cast<T*>(ptr);
 293:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   delete typed_ptr;
 294:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 295:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 296:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** template <class T>
 297:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** inline constexpr TypeMetaData::Delete* _PickDelete() noexcept {
 298:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   return &_Delete<T>;
 299:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** }
 300:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 301:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** class _Uninitialized final {};
 302:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 303:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** } // namespace detail
 304:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 305:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** //
 306:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // note: this is outside TypeMeta bc gcc seems to have trouble
 307:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // with scalarTypeItemSizes as a constexpr static member used by
 308:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // a public inline instance method
 309:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** //
 310:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 311:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** // item sizes for TypeMeta::itemsize() fast path
 312:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** static constexpr uint8_t scalarTypeItemSizes[NumScalarTypes] = {
 313:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #define SCALAR_TYPE_SIZE(T, name) sizeof(T),
 314:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   AT_FORALL_SCALAR_TYPES_WITH_COMPLEX_AND_QINTS(SCALAR_TYPE_SIZE)
 315:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #undef SCALAR_TYPE_SIZE
 316:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     0, // Undefined
 317:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** };
 318:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 319:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** /**
 320:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * TypeMeta is a thin class that allows us to store the type of a container such
 321:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * as a blob, or the data type of a tensor, with a unique run-time id. It also
 322:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * stores some additional data such as the item size and the name of the type
 323:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  * for run-time inspection.
 324:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  */
 325:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** class C10_API TypeMeta final {
 326:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  public:
 327:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using New = detail::TypeMetaData::New;
 328:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using PlacementNew = detail::TypeMetaData::PlacementNew;
 329:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using Copy = detail::TypeMetaData::Copy;
 330:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using PlacementDelete = detail::TypeMetaData::PlacementDelete;
 331:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   using Delete = detail::TypeMetaData::Delete;
 332:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 333:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /** Create a dummy TypeMeta object. To create a TypeMeta object for a specific
 334:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * type, use TypeMeta::Make<T>().
 335:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 336:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   TypeMeta() noexcept;
 337:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 338:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 339:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Copy constructor.
 340:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 341:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   TypeMeta(const TypeMeta& src) noexcept = default;
 342:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 343:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 344:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Assignment operators.
 345:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 346:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   TypeMeta& operator=(const TypeMeta& src) noexcept = default;
 347:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 348:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   TypeMeta(TypeMeta&& rhs) noexcept = default;
 349:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 350:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   inline TypeMeta& operator=(ScalarType scalar_type) noexcept {
 351:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     index_ = static_cast<uint16_t>(scalar_type);
 352:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return *this;
 353:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 354:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 355:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** private:
 356:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   // TypeMeta can only be created by Make, making sure that we do not
 357:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   // create incorrectly mixed up TypeMeta objects.
 358:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   explicit TypeMeta(const uint16_t index) noexcept
 359:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   : index_(index) {
 360:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 361:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 362:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****  public:
 363:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 364:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns the type id.
 365:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 366:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   TypeIdentifier id() const noexcept {
 367:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().id_;
 368:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 369:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 370:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * true if we represent some ScalarType type
 371:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 372:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   inline bool isScalarType() const noexcept {
 373:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return index_ < NumScalarTypes;
 374:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 375:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 376:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * true if we represent ScalarType scalar_type
 377:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 378:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   inline bool isScalarType(ScalarType scalar_type) const noexcept {
 379:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return index_ == static_cast<uint16_t>(scalar_type);
 380:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 381:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 382:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns the size of the item.
 383:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 384:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   inline size_t itemsize() const noexcept {
 385:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     if (C10_LIKELY(isScalarType())) {
 386:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       return scalarTypeItemSizes[index_];
 387:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     }
 388:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().itemsize_;
 389:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 390:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 391:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns the new function pointer for individual items.
 392:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 393:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   New* newFn() const noexcept {
 394:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().new_;
 395:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 396:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 397:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns the placement new function pointer for individual items.
 398:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 399:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   PlacementNew* placementNew() const noexcept {
 400:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().placementNew_;
 401:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 402:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 403:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns the typed copy function pointer for individual iterms.
 404:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 405:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   Copy* copy() const noexcept {
 406:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().copy_;
 407:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 408:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 409:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns the destructor function pointer for individual items.
 410:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 411:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   PlacementDelete* placementDelete() const noexcept {
 412:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().placementDelete_;
 413:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 414:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   Delete* deleteFn() const noexcept {
 415:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().delete_;
 416:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 417:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 418:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns a printable name for the type.
 419:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 420:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   c10::string_view name() const noexcept {
 421:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return data().name_;
 422:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 423:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 424:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   friend bool operator==(
 425:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       const TypeMeta lhs,
 426:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       const TypeMeta rhs) noexcept;
 427:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 428:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   template <typename T>
 429:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   bool Match() const noexcept {
 430:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return (*this == Make<T>());
 431:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 432:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 433:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   // Below are static functions that can be called by passing a specific type.
 434:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 435:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   template <class T>
 436:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static C10_HOST_CONSTEXPR TypeIdentifier Id() noexcept {
 437:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return TypeIdentifier::Get<T>();
 438:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 439:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 440:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   template <class T>
 441:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static c10::string_view TypeName() noexcept {
 442:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return c10::util::get_fully_qualified_type_name<T>();
 443:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 444:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 445:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   template <class T>
 446:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static constexpr size_t ItemSize() noexcept {
 447:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return sizeof(T);
 448:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 449:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 450:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 451:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    * Returns a TypeMeta object that corresponds to the typename T.
 452:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****    */
 453:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   template <typename T>
 454:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static TypeMeta Make() {
 9494              		.loc 24 454 19 is_stmt 1 view .LVU1902
 9495              	.LBB7175:
 9496              	.LBI7175:
 358:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   : index_(index) {
 9497              		.loc 24 358 12 view .LVU1903
 358:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   : index_(index) {
 9498              		.loc 24 358 12 is_stmt 0 view .LVU1904
 9499              	.LBE7175:
 9500              	.LBE7174:
 9501              	.LBE7177:
 9502              	.LBB7178:
 9503              	.LBI7178:
  49:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return scalarTypeToTypeMeta(scalar_type_);
 9504              		.loc 21 49 20 is_stmt 1 view .LVU1905
  49:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return scalarTypeToTypeMeta(scalar_type_);
 9505              		.loc 21 49 20 is_stmt 0 view .LVU1906
 9506              	.LBE7178:
  50:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9507              		.loc 21 50 5 is_stmt 1 view .LVU1907
 9508              	.LBB7265:
 9509              	.LBB7179:
 9510              	.LBI7179:
 9511              		.file 25 "/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h"
   1:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** #include <c10/core/ScalarType.h>
   4:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** #include <c10/util/typeid.h>
   5:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** 
   6:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** // these just expose TypeMeta/ScalarType bridge functions in c10
   7:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** // TODO move to typeid.h (or codemod away) when TypeMeta et al
   8:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** // are moved from caffe2 to c10 (see note at top of typeid.h)
   9:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** 
  10:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** namespace c10 {
  11:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** 
  12:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** /**
  13:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h ****  * convert ScalarType enum values to TypeMeta handles
  14:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h ****  */
  15:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h **** static inline caffe2::TypeMeta scalarTypeToTypeMeta(ScalarType scalar_type) {
 9512              		.loc 25 15 32 view .LVU1908
 9513              	.LBB7180:
  16:/workspace/pth-linear-interp/torch/include/c10/core/ScalarTypeToTypeMeta.h ****   return caffe2::TypeMeta::fromScalarType(scalar_type);
 9514              		.loc 25 16 3 view .LVU1909
 9515 002d 4488A53C 		movb	%r12b, -196(%rbp)	# _13, scalar_type
 9515      FFFFFF
 9516              	.LVL484:
 9517              	.LBB7181:
 9518              	.LBI7181:
 455:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     // The instance pointed to is declared here, but defined in a .cpp file.
 456:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     // We need to silence the compiler warning about using an undefined
 457:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     // variable template. '-Wpragmas' and '-Wunknown-warning-option' has to be
 458:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     // disabled for compilers that don't know '-Wundefined-var-template' and
 459:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     // would error at our attempt to disable it.
 460:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #ifndef _MSC_VER
 461:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #pragma GCC diagnostic push
 462:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #pragma GCC diagnostic ignored "-Wpragmas"
 463:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #pragma GCC diagnostic ignored "-Wunknown-warning-option"
 464:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #pragma GCC diagnostic ignored "-Wundefined-var-template"
 465:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #endif
 466:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return TypeMeta(_typeMetaData<T>());
 467:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #ifndef _MSC_VER
 468:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #pragma GCC diagnostic pop
 469:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** #endif
 470:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   }
 471:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h **** 
 472:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   /**
 473:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   * convert ScalarType enum values to TypeMeta handles
 474:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   */
 475:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   static inline caffe2::TypeMeta fromScalarType(ScalarType scalar_type) {
 9519              		.loc 24 475 34 view .LVU1910
 9520              	.LBB7182:
 476:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     const size_t index = static_cast<uint16_t>(scalar_type);
 9521              		.loc 24 476 5 view .LVU1911
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     TORCH_INTERNAL_ASSERT_DEBUG_ONLY(
 9522              		.loc 24 477 5 view .LVU1912
 9523 0034 664183FC 		cmpw	$17, %r12w	#, _60
 9523      11
 9524 0039 0F87DB02 		ja	.L343	#,
 9524      0000
 9525 003f 4889FB   		movq	%rdi, %rbx	# tmp311, this
 9526              	.LBE7182:
 9527              	.LBE7181:
 9528              	.LBE7180:
 9529              	.LBE7179:
 9530              	.LBE7265:
 9531              	.LBB7266:
 9532              	.LBB7267:
 9533              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:38:     return ba
  38:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9534              		.loc 21 38 31 is_stmt 0 view .LVU1913
 9535 0042 8B3F     		movl	(%rdi), %edi	# MEM[(Backend *)this_3(D)],
 9536              	.LVL485:
  38:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9537              		.loc 21 38 31 view .LVU1914
 9538 0044 4189F6   		movl	%esi, %r14d	# tmp312, device_index
 9539              	.LBE7267:
 9540              	.LBE7266:
 9541              	.LBB7269:
 9542              	.LBB7262:
 9543              	.LBB7259:
 9544              	.LBB7256:
 9545              	.LBB7253:
 478:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 479:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       "Unrecognized Scalartype ", scalar_type, " (please report this error)");
 9546              		.loc 24 479 78 is_stmt 1 view .LVU1915
 480:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****     return TypeMeta(index);
 9547              		.loc 24 480 5 view .LVU1916
 9548              	.LVL486:
 9549              	.LBB7183:
 9550              	.LBI7183:
 358:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   : index_(index) {
 9551              		.loc 24 358 12 view .LVU1917
 358:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****   : index_(index) {
 9552              		.loc 24 358 12 is_stmt 0 view .LVU1918
 9553              	.LBE7183:
 9554              	.LBE7253:
 9555              	.LBE7256:
 9556              	.LBE7259:
 9557              	.LBE7262:
 9558              	.LBE7269:
 9559              	.LBB7270:
 9560              	.LBI7270:
 9561              		.file 26 "/workspace/pth-linear-interp/torch/include/c10/util/Optional.h"
   1:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // Copyright (C) 2011 - 2012 Andrzej Krzemienski.
   2:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** //
   3:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // Use, modification, and distribution is subject to the Boost Software
   4:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
   5:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // http://www.boost.org/LICENSE_1_0.txt)
   6:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** //
   7:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // The idea and interface is based on Boost.Optional library
   8:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // authored by Fernando Luis Cacciola Carballal
   9:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** //
  10:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // From https://github.com/akrzemi1/Optional
  11:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** //
  12:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // C10
  13:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // - Move file to `c10` namespace.
  14:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // - Remove macro use in line 478 because the nvcc device compiler cannot handle it
  15:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // it.
  16:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // - Revise constructor logic so that it is 1) consistent with c++ 17 standard documented
  17:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // here in (8): https://en.cppreference.com/w/cpp/utility/optional/optional, and 2)
  18:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // able to support initialization of optionals from convertible type U.
  19:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // - Remove the constructors for `optional(const T&)` and `optional(T&&)`, as they can be
  20:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // handled by the template<U=T> case with the default template argument.
  21:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // - Move `constexpr struct in_place_t {} in_place{}` to `c10/util/in_place.h`
  22:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // so that it can also be used in `c10/util/variant.h`.
  23:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // - Remove special cases for pre-c++14 compilers to make code simpler.
  24:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  25:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #ifndef C10_UTIL_OPTIONAL_H_
  26:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #define C10_UTIL_OPTIONAL_H_
  27:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  28:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <c10/macros/Macros.h>
  29:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <c10/util/in_place.h>
  30:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  31:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <cassert>
  32:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <functional>
  33:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <initializer_list>
  34:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <stdexcept>
  35:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <string>
  36:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <type_traits>
  37:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <utility>
  38:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  39:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #include <c10/util/Metaprogramming.h>
  40:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  41:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #define TR2_OPTIONAL_REQUIRES(...) \
  42:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   typename std::enable_if<__VA_ARGS__::value, bool>::type = false
  43:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  44:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** namespace c10 {
  45:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  46:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // 20.5.4, optional for object types
  47:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
  48:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** class optional;
  49:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  50:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // 20.5.5, optional for lvalue reference types
  51:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
  52:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** class optional<T&>;
  53:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  54:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // workaround: std utility functions aren't constexpr yet
  55:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** inline constexpr T&& constexpr_forward(
  57:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
  58:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   return static_cast<T&&>(t);
  59:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** }
  60:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  61:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
  62:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** inline constexpr T&& constexpr_forward(
  63:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type&& t) noexcept {
  64:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   static_assert(!std::is_lvalue_reference<T>::value, "!!");
  65:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   return static_cast<T&&>(t);
  66:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** }
  67:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  68:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
  69:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** inline constexpr typename std::remove_reference<T>::type&& constexpr_move(
  70:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     T&& t) noexcept {
  71:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   return static_cast<typename std::remove_reference<T>::type&&>(t);
  72:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** }
  73:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  74:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #if defined NDEBUG
  75:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #define TR2_OPTIONAL_ASSERTED_EXPRESSION(CHECK, EXPR) (EXPR)
  76:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #else
  77:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #define TR2_OPTIONAL_ASSERTED_EXPRESSION(CHECK, EXPR) \
  78:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   ((CHECK) ? (EXPR) : ([] { assert(!#CHECK); }(), (EXPR)))
  79:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #endif
  80:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  81:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #if defined(__CUDA_ARCH__)
  82:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #define TR2_OPTIONAL_HOST_CONSTEXPR
  83:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #else
  84:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #define TR2_OPTIONAL_HOST_CONSTEXPR constexpr
  85:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #endif
  86:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  87:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // Sphinx chokes on static_addressof, so exclude it from Doxygen
  88:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // generation.  See https://github.com/sphinx-doc/sphinx/issues/7944
  89:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // \cond
  90:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  91:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** namespace detail_ {
  92:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
  93:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // VS doesn't handle constexpr well, so we need to skip these stuff.
  94:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #if (defined _MSC_VER)
  95:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <typename T>
  96:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** T* static_addressof(T& ref) {
  97:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   return std::addressof(ref);
  98:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** }
  99:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #else
 100:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // static_addressof: a constexpr version of addressof
 101:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <typename T>
 102:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** struct has_overloaded_addressof {
 103:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class X>
 104:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr static bool has_overload(...) {
 105:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return false;
 106:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 107:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 108:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class X, size_t S = sizeof(std::declval<X&>().operator&())>
 109:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr static bool has_overload(bool) {
 110:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return true;
 111:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 112:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 113:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr static bool value = has_overload<T>(true);
 114:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 115:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 116:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <typename T, TR2_OPTIONAL_REQUIRES(!has_overloaded_addressof<T>)>
 117:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** constexpr T* static_addressof(T& ref) {
 118:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   return &ref;
 119:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** }
 120:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 121:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <typename T, TR2_OPTIONAL_REQUIRES(has_overloaded_addressof<T>)>
 122:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** T* static_addressof(T& ref) {
 123:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   return std::addressof(ref);
 124:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** }
 125:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #endif
 126:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 127:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // the call to convert<A>(b) has return type A and converts b to type A iff b
 128:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // decltype(b) is implicitly convertible to A
 129:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class U>
 130:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** constexpr U convert(U v) {
 131:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   return v;
 132:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** }
 133:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 134:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** } // namespace detail_
 135:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 136:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // \endcond
 137:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 138:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** constexpr struct trivial_init_t {
 139:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** } trivial_init{};
 140:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 141:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // 20.5.7, Disengaged state indicator
 142:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** struct nullopt_t {
 143:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr explicit nullopt_t(int) {}
 144:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 145:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** constexpr nullopt_t nullopt {0};
 146:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 147:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // 20.5.8, class bad_optional_access
 148:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** class bad_optional_access : public std::logic_error {
 149:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****  public:
 150:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit bad_optional_access(const std::string& what_arg)
 151:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : logic_error{what_arg} {}
 152:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit bad_optional_access(const char* what_arg) : logic_error{what_arg} {}
 153:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 154:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 155:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 156:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** union storage_t {
 157:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   unsigned char dummy_;
 158:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   T value_;
 159:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 160:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr storage_t(trivial_init_t) noexcept : dummy_(){};
 161:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 162:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class... Args>
 163:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr storage_t(Args&&... args)
 164:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : value_(constexpr_forward<Args>(args)...) {}
 165:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 166:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   ~storage_t() {}
 167:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 168:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 169:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 170:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** union constexpr_storage_t {
 171:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   unsigned char dummy_;
 172:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   T value_;
 173:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 174:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr constexpr_storage_t(trivial_init_t) noexcept : dummy_(){};
 175:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 176:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class... Args>
 177:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr constexpr_storage_t(Args&&... args)
 178:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : value_(constexpr_forward<Args>(args)...) {}
 179:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 180:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   ~constexpr_storage_t() = default;
 181:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 182:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 183:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 184:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** struct optional_base {
 185:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   bool init_;
 186:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   storage_t<T> storage_;
 187:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 188:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr optional_base() noexcept : init_(false), storage_(trivial_init){};
 189:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 190:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr optional_base(const optional_base<T>& v) : init_(v.init_), storage_(trivial_in
 191:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_) {
 192:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(v.storage_.value_);
 193:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 194:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 195:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 196:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr optional_base(const T& v) : init_(true), storage_(v) {}
 197:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 198:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr optional_base(optional_base<T>&& v) noexcept(
 199:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_nothrow_move_constructible<T>::value)
 200:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(v.init_), storage_(trivial_init) {
 201:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_) {
 202:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(std::move(v.storage_.value_));
 203:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 204:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 205:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 206:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr optional_base(T&& v)
 207:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_move(v)) {}
 208:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 209:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class... Args>
 210:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit optional_base(in_place_t, Args&&... args)
 211:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_forward<Args>(args)...) {}
 212:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 213:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <
 214:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       class U,
 215:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       class... Args,
 216:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       TR2_OPTIONAL_REQUIRES(std::is_constructible<T, std::initializer_list<U>>)>
 217:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit optional_base(
 218:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       in_place_t,
 219:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::initializer_list<U> il,
 220:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       Args&&... args)
 221:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(il, std::forward<Args>(args)...) {}
 222:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 223:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   optional_base& operator=(const optional_base& rhs) {
 224:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_ && !rhs.init_) {
 225:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       clear();
 226:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (!init_ && rhs.init_) {
 227:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       init_ = true;
 228:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(rhs.storage_.value_);
 229:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (init_ && rhs.init_) {
 230:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       storage_.value_ = rhs.storage_.value_;
 231:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 232:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return *this;
 233:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 234:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 235:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   optional_base& operator=(optional_base&& rhs) noexcept(
 236:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_nothrow_move_assignable<T>::value &&
 237:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           std::is_nothrow_move_constructible<T>::value) {
 238:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_ && !rhs.init_) {
 239:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       clear();
 240:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (!init_ && rhs.init_) {
 241:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       init_ = true;
 242:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(std::move(rhs.storage_.value_));
 243:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (init_ && rhs.init_) {
 244:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       storage_.value_ = std::move(rhs.storage_.value_);
 245:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 246:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return *this;
 247:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 248:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 249:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   ~optional_base() {
 250:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_)
 251:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       storage_.value_.T::~T();
 252:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 253:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 254:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****  private:
 255:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   typename std::remove_const<T>::type* dataptr() {
 256:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return std::addressof(storage_.value_);
 257:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 258:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 259:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr const T* dataptr() const {
 260:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return detail_::static_addressof(storage_.value_);
 261:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 262:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 263:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   void clear() noexcept {
 264:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_) {
 265:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       dataptr()->~T();
 266:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 267:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     init_ = false;
 268:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 269:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 270:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 271:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 272:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** struct constexpr_optional_base {
 273:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   bool init_;
 274:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr_storage_t<T> storage_;
 275:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 276:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr constexpr_optional_base() noexcept
 277:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(false), storage_(trivial_init){};
 278:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 279:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr constexpr_optional_base(const constexpr_optional_base<T>& v) : init_(v.init_),
 280:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_) {
 281:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(v.storage_.value_);
 282:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 283:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 284:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 285:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr constexpr_optional_base(constexpr_optional_base<T>&& v) noexcept(
 286:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_nothrow_move_constructible<T>::value)
 287:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(v.init_), storage_(trivial_init) {
 288:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_) {
 289:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(std::move(v.storage_.value_));
 290:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 291:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 292:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 293:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr constexpr_optional_base(const T& v)
 294:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(v) {}
 295:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 296:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr constexpr_optional_base(T&& v)
 297:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_move(v)) {}
 298:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 299:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class... Args>
 300:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr constexpr_optional_base(in_place_t, Args&&... args)
 301:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_forward<Args>(args)...) {}
 302:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 303:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <
 304:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       class U,
 305:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       class... Args,
 306:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       TR2_OPTIONAL_REQUIRES(std::is_constructible<T, std::initializer_list<U>>)>
 307:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr explicit constexpr_optional_base(
 308:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       in_place_t,
 309:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::initializer_list<U> il,
 310:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       Args&&... args)
 311:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(il, std::forward<Args>(args)...) {}
 312:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 313:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   ~constexpr_optional_base() = default;
 314:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 315:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr_optional_base& operator=(const constexpr_optional_base& rhs) {
 316:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_ && !rhs.init_) {
 317:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       clear();
 318:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (!init_ && rhs.init_) {
 319:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       init_ = true;
 320:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(rhs.storage_.value_);
 321:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (init_ && rhs.init_) {
 322:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       storage_.value_ = rhs.storage_.value_;
 323:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 324:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return *this;
 325:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 326:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 327:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr_optional_base& operator=(constexpr_optional_base&& rhs) noexcept(
 328:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_nothrow_move_assignable<T>::value &&
 329:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           std::is_nothrow_move_constructible<T>::value) {
 330:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (init_ && !rhs.init_) {
 331:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       clear();
 332:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (!init_ && rhs.init_) {
 333:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       init_ = true;
 334:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (dataptr()) T(std::move(rhs.storage_.value_));
 335:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     } else if (init_ && rhs.init_) {
 336:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       storage_.value_ = std::move(rhs.storage_.value_);
 337:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 338:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return *this;
 339:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 340:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 341:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****  private:
 342:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   typename std::remove_const<T>::type* dataptr() {
 343:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return std::addressof(storage_.value_);
 344:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 345:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 346:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr const T* dataptr() const {
 347:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return detail_::static_addressof(storage_.value_);
 348:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 349:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 350:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   void clear() noexcept {
 351:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     init_ = false;
 352:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 353:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 354:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 355:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // HACK: Optimization for trivially copyable types. The mainline
 356:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // implementation fails to have trivial copy/move operations in these
 357:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // cases, and we care about them, so just implement that directly.
 358:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 359:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** struct trivially_copyable_optimization_optional_base {
 360:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   bool init_;
 361:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr_storage_t<T> storage_;
 362:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 363:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr trivially_copyable_optimization_optional_base() noexcept
 364:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   : init_(false), storage_(trivial_init) {}
 365:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 366:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr trivially_copyable_optimization_optional_base(const T& v)
 367:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(v) {}
 368:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 369:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr trivially_copyable_optimization_optional_base(T&& v)
 370:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_move(v)) {}
 371:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 372:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class... Args>
 373:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr trivially_copyable_optimization_optional_base(in_place_t, Args&&... args)
 374:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_forward<Args>(args)...) {}
 375:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 376:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <
 377:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       class U,
 378:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       class... Args,
 379:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       TR2_OPTIONAL_REQUIRES(std::is_constructible<T, std::initializer_list<U>>)>
 380:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr explicit trivially_copyable_optimization_optional_base(
 381:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       in_place_t,
 382:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::initializer_list<U> il,
 383:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       Args&&... args)
 384:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(il, std::forward<Args>(args)...) {}
 385:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 386:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   ~trivially_copyable_optimization_optional_base() = default;
 387:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** };
 388:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 389:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // CUDA 9.2 and below fail while trying to compile default move constructor
 390:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // see https://github.com/pytorch/csprng/issues/84
 391:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #if (!defined(__CUDA_ARCH__) || !defined(CUDA_VERSION) || CUDA_VERSION > 9200)
 392:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 393:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** using OptionalBase = typename std::conditional<
 394:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     std::is_trivially_destructible<T>::value &&
 395:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     C10_IS_TRIVIALLY_COPYABLE(T) &&
 396:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     // Avoid using is_trivially_copy_{constructible,assignable}
 397:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     // because old GCC versions don't support them. Also,
 398:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     // is_trivially_copyable seems not to do what I expect, so check
 399:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     // trivially_copyable_optimization_optional_base directly.
 400:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     std::is_copy_constructible<trivially_copyable_optimization_optional_base<T>>::value &&
 401:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     std::is_copy_assignable<trivially_copyable_optimization_optional_base<T>>::value,
 402:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     trivially_copyable_optimization_optional_base<T>,
 403:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::conditional<
 404:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****         std::is_trivially_destructible<T>::value, // if possible
 405:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****         constexpr_optional_base<typename std::remove_const<
 406:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****             T>::type>, // use base with trivial destructor
 407:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****         optional_base<typename std::remove_const<T>::type>>::type>::type;
 408:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #else
 409:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 410:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** using OptionalBase = typename std::conditional<
 411:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****         std::is_trivially_destructible<T>::value, // if possible
 412:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****         constexpr_optional_base<typename std::remove_const<
 413:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****             T>::type>, // use base with trivial destructor
 414:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****         optional_base<typename std::remove_const<T>::type>>::type;
 415:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #endif
 416:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 417:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** template <class T>
 418:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** class optional : private OptionalBase<T> {
 419:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // CUDA 9.2 and below fail while trying to compile default move constructor
 420:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // see https://github.com/pytorch/csprng/issues/84
 421:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #if (!defined(__CUDA_ARCH__) || !defined(CUDA_VERSION) || CUDA_VERSION > 9200)
 422:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class U> // re-declaration for nvcc on Windows.
 423:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   using OptionalBase = typename std::conditional<
 424:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_trivially_destructible<U>::value &&
 425:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       C10_IS_TRIVIALLY_COPYABLE(U) &&
 426:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_copy_constructible<trivially_copyable_optimization_optional_base<U>>::value &&
 427:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_copy_assignable<trivially_copyable_optimization_optional_base<U>>::value,
 428:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       trivially_copyable_optimization_optional_base<U>,
 429:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       typename std::conditional<
 430:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           std::is_trivially_destructible<U>::value, // if possible
 431:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           constexpr_optional_base<typename std::remove_const<
 432:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****               U>::type>, // use base with trivial destructor
 433:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           optional_base<typename std::remove_const<U>::type>>::type>::type;
 434:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #else
 435:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class U>
 436:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   using OptionalBase = typename std::conditional<
 437:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           std::is_trivially_destructible<U>::value, // if possible
 438:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           constexpr_optional_base<typename std::remove_const<
 439:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****               U>::type>, // use base with trivial destructor
 440:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           optional_base<typename std::remove_const<U>::type>>::type;
 441:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #endif
 442:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 443:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   static_assert(
 444:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       !std::is_same<typename std::decay<T>::type, nullopt_t>::value,
 445:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       "bad T");
 446:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   static_assert(
 447:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       !std::is_same<typename std::decay<T>::type, in_place_t>::value,
 448:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       "bad T");
 449:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 450:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr bool initialized() const noexcept {
 451:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return OptionalBase<T>::init_;
 452:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 453:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   typename std::remove_const<T>::type* dataptr() {
 454:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return std::addressof(OptionalBase<T>::storage_.value_);
 455:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 456:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr const T* dataptr() const {
 457:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return detail_::static_addressof(OptionalBase<T>::storage_.value_);
 458:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 459:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 460:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr const T& contained_val() const& {
 461:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return OptionalBase<T>::storage_.value_;
 462:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 463:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr T&& contained_val() && {
 464:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return std::move(OptionalBase<T>::storage_.value_);
 465:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 466:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr T& contained_val() & {
 467:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     return OptionalBase<T>::storage_.value_;
 468:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 469:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 470:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   void clear() noexcept {
 471:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (initialized())
 472:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       dataptr()->~T();
 473:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     OptionalBase<T>::init_ = false;
 474:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 475:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 476:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class... Args>
 477:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   void initialize(Args&&... args) noexcept(
 478:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       noexcept(T(std::forward<Args>(args)...))) {
 479:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     assert(!OptionalBase<T>::init_);
 480:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     ::new (static_cast<void*>(dataptr())) T(std::forward<Args>(args)...);
 481:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     OptionalBase<T>::init_ = true;
 482:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 483:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 484:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class U, class... Args>
 485:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   void initialize(std::initializer_list<U> il, Args&&... args) noexcept(
 486:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       noexcept(T(il, std::forward<Args>(args)...))) {
 487:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     assert(!OptionalBase<T>::init_);
 488:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     ::new (static_cast<void*>(dataptr())) T(il, std::forward<Args>(args)...);
 489:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     OptionalBase<T>::init_ = true;
 490:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 491:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 492:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****  public:
 493:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   typedef T value_type;
 494:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 495:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   // 20.5.5.1, constructors
 496:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr optional() noexcept : OptionalBase<T>(){};
 497:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr optional(nullopt_t) noexcept : OptionalBase<T>(){};
 498:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 499:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   optional(const optional& rhs) = default;
 500:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 501:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // CUDA 9.2 and below fail while trying to compile default move constructor
 502:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** // see https://github.com/pytorch/csprng/issues/84
 503:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #if (!defined(__CUDA_ARCH__) || !defined(CUDA_VERSION) || CUDA_VERSION > 9200)
 504:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   optional(optional&& rhs) = default;
 505:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #else
 506:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   optional(optional&& rhs) noexcept(
 507:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       std::is_nothrow_move_constructible<T>::value) {
 508:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     if (rhs.initialized()) {
 509:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       ::new (static_cast<void*>(dataptr())) T(std::move(*rhs));
 510:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       OptionalBase<T>::init_ = true;
 511:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     }
 512:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   }
 513:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** #endif
 514:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 515:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   // see https://github.com/akrzemi1/Optional/issues/16
 516:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   // and https://en.cppreference.com/w/cpp/utility/optional/optional,
 517:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   // in constructor 8, the std::optional spec can allow initialization
 518:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   // of optionals from convertible type U
 519:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   //
 520:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   // 8 - implicit move construct from value
 521:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template<
 522:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       typename U = T,
 523:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       TR2_OPTIONAL_REQUIRES(
 524:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           std::is_constructible<T, U&&>::value
 525:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           && !std::is_same<typename std::decay<U>::type, in_place_t>::value
 526:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           && !std::is_same<typename std::decay<U>::type, optional<T>>::value
 527:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           && std::is_convertible<U&&, T>
 528:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       )
 529:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     >
 530:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   constexpr optional(U&& u) : OptionalBase<T>(std::forward<U>(u)) {}
 9562              		.loc 26 530 13 is_stmt 1 view .LVU1919
 9563              	.LBB7271:
 9564              	.LBI7271:
  74:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 9565              		.loc 11 74 5 view .LVU1920
  74:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 9566              		.loc 11 74 5 is_stmt 0 view .LVU1921
 9567              	.LBE7271:
 9568              	.LBB7272:
 9569              	.LBI7272:
 369:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_move(v)) {}
 9570              		.loc 26 369 22 is_stmt 1 view .LVU1922
 9571              	.LBB7273:
 9572              	.LBI7273:
  69:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     T&& t) noexcept {
 9573              		.loc 26 69 60 view .LVU1923
  69:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     T&& t) noexcept {
 9574              		.loc 26 69 60 is_stmt 0 view .LVU1924
 9575              	.LBE7273:
 9576              	.LBB7274:
 9577              	.LBI7274:
 177:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : value_(constexpr_forward<Args>(args)...) {}
 9578              		.loc 26 177 13 is_stmt 1 view .LVU1925
 9579              	.LBB7275:
 9580              	.LBI7275:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9581              		.loc 26 56 22 view .LVU1926
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9582              		.loc 26 56 22 is_stmt 0 view .LVU1927
 9583              	.LBE7275:
 9584              	.LBE7274:
 9585              	.LBE7272:
 9586              	.LBE7270:
 129:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     : requires_grad_(false)
 130:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     , pinned_memory_(false)
 131:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     , has_device_(false)
 132:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     , has_dtype_(false)
 133:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     , has_layout_(false)
 134:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     , has_requires_grad_(false)
 135:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     , has_pinned_memory_(false)
 136:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     , has_memory_format_(false)
 137:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     {}
 138:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 139:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Constructs a `TensorOptions` object with the given layout.
 140:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /* implicit */ TensorOptions(Layout layout) : TensorOptions() {
 141:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     this->set_layout(layout);
 142:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 143:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 144:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Constructs a `TensorOptions` object with the given device.
 145:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// See NOTE [ TensorOptions Constructors ] on why this is templatized.
 146:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   template<typename T,
 147:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****            typename = std::enable_if_t<std::is_same<std::decay_t<T>, Device>::value>>
 148:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /* implicit */ TensorOptions(T&& device) : TensorOptions() {
 149:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     this->set_device(std::forward<T>(device));
 150:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 151:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 152:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Constructs a `TensorOptions` object from arguments allowed in `Device`
 153:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// constructors.
 154:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   ///
 155:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// See NOTE [ TensorOptions Constructors ].
 156:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   ///
 157:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// NB: Ideally we only allow implicit constructors here. But there is no easy
 158:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   ///     way to detect them. So we have this one that allows explicit
 159:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   ///     constructors too.
 160:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   template <typename... Args,
 161:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****             typename = std::enable_if_t<std::is_constructible<Device, Args&&...>::value>>
 162:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****    /* implicit */ TensorOptions(Args&&... args)
 163:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     : TensorOptions(Device(std::forward<Args>(args)...)) {}
 164:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 165:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Constructs a `TensorOptions` object with the given dtype.
 166:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /* implicit */ TensorOptions(caffe2::TypeMeta dtype) : TensorOptions() {
 167:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     this->set_dtype(dtype);
 168:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 169:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 170:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// legacy constructor to support ScalarType
 171:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /* implicit */ TensorOptions(ScalarType dtype) : TensorOptions() {
 172:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     this->set_dtype(dtype);
 173:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 174:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 175:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Constructs a `TensorOptions` object with the given memory format.
 176:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /* implicit */ TensorOptions(MemoryFormat memory_format) : TensorOptions() {
 177:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     set_memory_format(memory_format);
 178:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 179:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 180:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Return a copy of `TensorOptions` with `device` set to the given one, or
 181:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// cleared if `device` is `nullopt`.
 182:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions device(c10::optional<Device> device) const noexcept {
 183:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 184:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_device(device);
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 186:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 187:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 188:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Return a copy of `TensorOptions` with `device` set to the given one.
 189:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// (This overload ensures that variadic template c10::optional constructor
 190:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// for Device work correctly.)
 191:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   template<typename ... Args>
 192:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions device(Args&&... args) const noexcept {
 193:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device(c10::optional<Device>(c10::in_place, std::forward<Args>(args)...));
 194:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 195:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 196:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Return a copy of `TensorOptions`, but with device set to CUDA, and the
 197:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// device index set to the given one.
 198:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   ///
 199:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// TODO: This function encourages bad behavior (assuming CUDA is
 200:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// the only device that matters).  Get rid of it / rename it.
 201:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions device_index(int16_t device_index) const noexcept {
 202:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device(Device::Type::CUDA, device_index);
 203:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 204:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 205:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Return a copy of `TensorOptions` with `dtype` set to the given one.
 206:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions dtype(c10::optional<caffe2::TypeMeta> dtype) const noexcept {
 207:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 9587              		.loc 22 207 5 is_stmt 1 view .LVU1928
 208:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_dtype(dtype);
 9588              		.loc 22 208 5 view .LVU1929
 209:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 210:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 211:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 212:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // legacy function to support ScalarType
 213:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions dtype(c10::optional<ScalarType> dtype) const noexcept {
 214:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 215:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_dtype(dtype);
 216:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 217:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 218:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 219:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // Since dtype is taken...
 220:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   template <typename T>
 221:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   TensorOptions& dtype() {
 222:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     dtype_ = caffe2::TypeMeta::Make<T>();
 223:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     has_dtype_ = true;
 224:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return *this;
 225:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 226:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 227:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Sets the layout of the `TensorOptions`.
 228:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions layout(c10::optional<Layout> layout) const noexcept {
 229:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 230:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_layout(layout);
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 232:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 233:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 234:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Sets the `requires_grad` property of the `TensorOptions`.
 235:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions requires_grad(c10::optional<bool> requires_grad) const noexcept {
 236:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 237:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_requires_grad(requires_grad);
 238:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 239:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 240:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 241:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Sets the `pinned_memory` property on the `TensorOptions`.
 242:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions pinned_memory(c10::optional<bool> pinned_memory) const noexcept {
 243:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 244:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_pinned_memory(pinned_memory);
 245:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 246:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 247:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 248:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Sets the `memory_format` property on `TensorOptions`.
 249:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   C10_NODISCARD TensorOptions memory_format(c10::optional<MemoryFormat> memory_format) const noexce
 250:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 251:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_memory_format(memory_format);
 252:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 253:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 254:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 255:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the device of the `TensorOptions`.
 256:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   Device device() const noexcept {
 257:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device_or_default(device_opt());
 258:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 259:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 260:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns whether the device is specified.
 261:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool has_device() const noexcept {
 262:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_device_;
 263:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 264:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 265:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the device of the `TensorOptions`, or `c10::nullopt` if
 266:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// device is not specified.
 267:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   c10::optional<Device> device_opt() const noexcept {
 268:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_device_ ? c10::make_optional(device_) : c10::nullopt;
 269:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 270:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 271:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the device index of the `TensorOptions`.
 272:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   int32_t device_index() const noexcept {
 273:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device().index();
 274:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 275:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 276:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the dtype of the `TensorOptions`.
 277:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   caffe2::TypeMeta dtype() const noexcept {
 278:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return dtype_or_default(dtype_opt());
 279:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 280:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 281:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns whether the dtype is specified.
 282:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool has_dtype() const noexcept {
 283:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_dtype_;
 284:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 285:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 286:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the dtype of the `TensorOptions`, or `c10::nullopt` if
 287:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// device is not specified.
 288:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   c10::optional<caffe2::TypeMeta> dtype_opt() const noexcept {
 289:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_dtype_ ? c10::make_optional(dtype_) : c10::nullopt;
 290:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 291:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 292:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the layout of the `TensorOptions`.
 293:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   Layout layout() const noexcept {
 294:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return layout_or_default(layout_opt());
 295:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 296:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 297:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns whether the layout is specified.
 298:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool has_layout() const noexcept {
 299:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_layout_;
 300:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 301:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 302:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the layout of the `TensorOptions`, or `c10::nullopt` if
 303:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// layout is not specified.
 304:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   c10::optional<Layout> layout_opt() const noexcept {
 305:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_layout_ ? c10::make_optional(layout_) : c10::nullopt;
 306:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 307:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 308:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the `requires_grad` property of the `TensorOptions`.
 309:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool requires_grad() const noexcept {
 310:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_requires_grad_ ? requires_grad_ : false;
 311:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 312:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 313:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns whether the `requires_grad` is specified.
 314:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool has_requires_grad() const noexcept {
 315:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_requires_grad_;
 316:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 317:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 318:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the `requires_grad` property of the `TensorOptions`, or
 319:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// `c10::nullopt` if `requires_grad` is not specified.
 320:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   c10::optional<bool> requires_grad_opt() const noexcept {
 321:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_requires_grad_ ? c10::make_optional(requires_grad_)
 322:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****                               : c10::nullopt;
 323:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 324:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 325:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the `pinned_memory` property of the `TensorOptions`.
 326:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool pinned_memory() const noexcept {
 327:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return pinned_memory_or_default(pinned_memory_opt());
 328:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 329:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 330:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns whether the `pinned_memory` is specified.
 331:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool has_pinned_memory() const noexcept {
 332:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_pinned_memory_;
 333:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 334:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 335:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns if the layout is sparse
 336:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool is_sparse() const {
 337:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return layout_ == c10::Layout::Sparse;
 338:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 339:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 340:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // For compatibility with legacy tensor.type() comparisons
 341:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool type_equal(const TensorOptions& other) const {
 342:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return backend() == other.backend() && typeMetaToScalarType(dtype_) == typeMetaToScalarType(oth
 343:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 344:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 345:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the `pinned_memory` property of the `TensorOptions`, or
 346:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// `c10::nullopt` if `pinned_memory` is not specified.
 347:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   c10::optional<bool> pinned_memory_opt() const noexcept {
 348:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_pinned_memory_ ? c10::make_optional(pinned_memory_) : c10::nullopt;
 349:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 350:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 351:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns whether the `memory_layout` is specified
 352:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   bool has_memory_format() const noexcept {
 353:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_memory_format_;
 354:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 355:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 356:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // NB: memory_format() getter is PURPOSELY not defined, as the default
 357:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // behavior of memory_format varies from function to function.
 358:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 359:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Returns the `memory_layout` property of `TensorOptions, or
 360:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// `c10::nullopt` if `memory_format` is not specified.
 361:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   c10::optional<MemoryFormat> memory_format_opt() const noexcept {
 362:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return has_memory_format_ ? c10::make_optional(memory_format_) : c10::nullopt;
 363:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 364:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 365:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // Resolves the ATen backend specified by the current construction axes.
 366:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // TODO: Deprecate this
 367:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   Backend backend() const noexcept {
 368:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return at::dispatchKeyToBackend(computeDispatchKey());
 369:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 370:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 371:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Return the right-biased merge of two TensorOptions.  This has the
 372:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// effect of overwriting settings from self with specified options
 373:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// of options.
 374:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   ///
 375:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// NB: This merging operation does NOT respect device merges.
 376:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// For example, if you device({kCUDA, 1}).merge_in(kCUDA)
 377:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// you will get kCUDA in the end!  Functions like Tensor.new_empty
 378:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// ensure the right device is selected anyway by way of a
 379:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// device guard.
 380:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   ///
 381:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   TensorOptions merge_in(TensorOptions options) const noexcept {
 382:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions merged = *this;
 383:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (options.has_device()) merged.set_device(options.device_opt());
 384:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (options.has_dtype()) merged.set_dtype(options.dtype_opt());
 385:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (options.has_layout()) merged.set_layout(options.layout_opt());
 386:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     // NB: requires grad is right biased; not a logical AND/OR!
 387:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (options.has_requires_grad()) merged.set_requires_grad(options.requires_grad_opt());
 388:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (options.has_pinned_memory()) merged.set_pinned_memory(options.pinned_memory_opt());
 389:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (options.has_memory_format()) merged.set_memory_format(options.memory_format_opt());
 390:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return merged;
 391:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 392:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 393:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // TODO remove after TensorOptions rationalization
 394:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   TensorOptions merge_memory_format(c10::optional<MemoryFormat> optional_memory_format) const noexc
 395:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions merged = *this;
 396:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (optional_memory_format.has_value()) {
 397:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       merged.set_memory_format(*optional_memory_format);
 398:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     }
 399:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return merged;
 400:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 401:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 402:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // Resolves the tensor type set specified by the current construction axes.
 403:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   DispatchKeySet key_set() const noexcept {
 404:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return DispatchKeySet(computeDispatchKey());
 405:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 406:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 407:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   DispatchKey computeDispatchKey() const {
 408:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return c10::computeDispatchKey(optTypeMetaToScalarType(dtype_opt()), layout_opt(), device_opt()
 409:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 410:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 411:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****  private:
 412:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 413:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // These methods are currently private because I'm not sure if it's wise
 414:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // to actually publish them.  They are methods because I need them in
 415:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // the constructor and the functional API implementation.
 416:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   //
 417:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // If you really, really need it, you can make these public, but check if you
 418:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // couldn't just do what you need with the functional API.  Similarly, these
 419:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // methods are not chainable, because if you wanted chaining, you probably
 420:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // want to use the functional API instead.  (It's probably OK to make
 421:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // these chainable, because these functions are all explicitly annotated
 422:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // with a ref-qualifier, the trailing &, that makes them illegal to call
 423:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // on temporaries.)
 424:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 425:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Mutably set the device of `TensorOptions`.
 426:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   void set_device(c10::optional<Device> device) & noexcept {
 427:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (device) {
 428:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       device_ = *device;
 429:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_device_ = true;
 430:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     } else {
 431:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_device_ = false;
 432:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     }
 433:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 434:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 435:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Mutably set the dtype of `TensorOptions`.
 436:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   void set_dtype(c10::optional<caffe2::TypeMeta> dtype) & noexcept {
 437:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (dtype) {
 9589              		.loc 22 437 5 view .LVU1930
 209:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 9590              		.loc 22 209 5 view .LVU1931
 9591              	.LBB7276:
 9592              	.LBI7266:
  37:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return backendToDeviceType(backend_);
 9593              		.loc 21 37 14 view .LVU1932
 9594              	.LBB7268:
  38:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9595              		.loc 21 38 5 view .LVU1933
 9596              	.LEHB37:
 9597              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:38:     return ba
  38:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9598              		.loc 21 38 31 is_stmt 0 view .LVU1934
 9599 0047 E8000000 		call	_ZN3c10L19backendToDeviceTypeENS_7BackendE	#
 9599      00
 9600              	.LVL487:
 9601              	.LEHE37:
  38:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9602              		.loc 21 38 31 view .LVU1935
 9603 004c 89C6     		movl	%eax, %esi	# tmp314, _16
 9604              	.LBE7268:
 9605              	.LBE7276:
 9606              	.LBB7277:
 9607              	.LBI7277:
 192:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device(c10::optional<Device>(c10::in_place, std::forward<Args>(args)...));
 9608              		.loc 22 192 31 is_stmt 1 view .LVU1936
 9609              	.LVL488:
 9610              	.LBB7278:
 9611              	.LBI7278:
 531:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 532:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   // 8 - explicit move construct from value
 533:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template<
 534:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       typename U = T,
 535:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       TR2_OPTIONAL_REQUIRES(
 536:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           std::is_constructible<T, U&&>::value
 537:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           && !std::is_same<typename std::decay<U>::type, in_place_t>::value
 538:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           && !std::is_same<typename std::decay<U>::type, optional<T>>::value
 539:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****           && !std::is_convertible<U&&, T>
 540:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       )
 541:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     >
 542:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr optional(U&& u) : OptionalBase<T>(std::forward<U>(u)) {}
 543:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 544:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   template <class... Args>
 545:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   explicit constexpr optional(in_place_t, Args&&... args)
 9612              		.loc 26 545 22 view .LVU1937
 9613              	.LBB7279:
 9614              	.LBI7279:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9615              		.loc 26 56 22 view .LVU1938
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9616              		.loc 26 56 22 is_stmt 0 view .LVU1939
 9617              	.LBE7279:
 9618              	.LBB7280:
 9619              	.LBI7280:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9620              		.loc 26 56 22 is_stmt 1 view .LVU1940
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9621              		.loc 26 56 22 is_stmt 0 view .LVU1941
 9622              	.LBE7280:
 9623              	.LBB7281:
 9624              	.LBI7281:
 373:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_forward<Args>(args)...) {}
 9625              		.loc 26 373 22 is_stmt 1 view .LVU1942
 9626              	.LBB7282:
 9627              	.LBI7282:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9628              		.loc 26 56 22 view .LVU1943
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9629              		.loc 26 56 22 is_stmt 0 view .LVU1944
 9630              	.LBE7282:
 9631              	.LBB7283:
 9632              	.LBI7283:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9633              		.loc 26 56 22 is_stmt 1 view .LVU1945
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9634              		.loc 26 56 22 is_stmt 0 view .LVU1946
 9635              	.LBE7283:
 9636              	.LBB7284:
 9637              	.LBI7284:
 177:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : value_(constexpr_forward<Args>(args)...) {}
 9638              		.loc 26 177 13 is_stmt 1 view .LVU1947
 9639              	.LBB7285:
 9640              	.LBB7286:
 9641              	.LBI7286:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9642              		.loc 26 56 22 view .LVU1948
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9643              		.loc 26 56 22 is_stmt 0 view .LVU1949
 9644              	.LBE7286:
 9645              	.LBB7287:
 9646              	.LBI7287:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9647              		.loc 26 56 22 is_stmt 1 view .LVU1950
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9648              		.loc 26 56 22 is_stmt 0 view .LVU1951
 9649              	.LBE7287:
 9650              	.LBB7288:
 9651              	.LBI7288:
  35:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****       : type_(type), index_(index) {
 9652              		.loc 23 35 18 is_stmt 1 view .LVU1952
 9653              	.LBE7288:
 9654              	.LBE7285:
 9655              	.LBE7284:
 9656              	.LBE7281:
 9657              	.LBE7278:
 9658              	.LBE7277:
  37:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
 9659              		.loc 23 37 5 view .LVU1953
 9660              	.LBB7419:
 9661              	.LBB7408:
 9662              	.LBB7403:
 9663              	.LBB7398:
 9664              	.LBB7393:
 9665              	.LBB7388:
 9666              	.LBB7289:
 9667              	.LBI7289:
 100:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     // Removing these checks in release builds noticeably improves
 9668              		.loc 23 100 8 view .LVU1954
 9669              	.LBB7290:
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 9670              		.loc 23 105 5 view .LVU1955
 9671 004e 4180FEFF 		cmpb	$-1, %r14b	#, device_index
 9672 0052 0F8C1202 		jl	.L344	#,
 9672      0000
 106:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****     TORCH_INTERNAL_ASSERT_DEBUG_ONLY(!is_cpu() || index_ <= 0,
 9673              		.loc 23 106 70 view .LVU1956
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9674              		.loc 23 107 5 view .LVU1957
 9675              	.LVL489:
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9676              		.loc 23 107 5 is_stmt 0 view .LVU1958
 9677              	.LBE7290:
 9678              	.LBE7289:
 9679              	.LBE7388:
 9680              	.LBE7393:
 9681              	.LBE7398:
 9682              	.LBE7403:
 9683              	.LBE7408:
 9684              	.LBE7419:
  91:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****   }
 9685              		.loc 23 91 5 is_stmt 1 view .LVU1959
 9686              	.LBB7420:
 9687              	.LBB7409:
 9688              	.LBB7404:
 9689              	.LBB7399:
 9690              	.LBB7394:
 9691              	.LBB7389:
 9692              	.LBB7384:
 9693              	.LBB7380:
 9694              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:107:     TORCH_INTERNAL_ASSERT_DEBUG
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9695              		.loc 23 107 5 is_stmt 0 view .LVU1960
 9696 0058 4584F6   		testb	%r14b, %r14b	# device_index
 9697 005b 7E08     		jle	.L298	#,
 9698 005d 84C0     		testb	%al, %al	# _16
 9699 005f 0F841C01 		je	.L345	#,
 9699      0000
 9700              	.L298:
 9701              		.loc 23 108 66 is_stmt 1 view .LVU1961
 9702              	.LVL490:
 9703              		.loc 23 108 66 is_stmt 0 view .LVU1962
 9704              	.LBE7380:
 9705              	.LBE7384:
 9706              	.LBE7389:
 9707              	.LBE7394:
 9708              	.LBE7399:
 9709              	.LBE7404:
 9710              	.LBE7409:
 9711              	.LBB7410:
 9712              	.LBI7410:
 182:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 9713              		.loc 22 182 31 is_stmt 1 view .LVU1963
 9714              	.LBB7411:
 183:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_device(device);
 9715              		.loc 22 183 5 view .LVU1964
 9716              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:183:     TensorOptions r = *t
 183:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_device(device);
 9717              		.loc 22 183 19 is_stmt 0 view .LVU1965
 9718 0065 410FB7CC 		movzwl	%r12w, %ecx	# _60, _60
 9719 0069 4088B561 		movb	%sil, -159(%rbp)	# _16, MEM[(struct optional *)&device + 1B]
 9719      FFFFFF
 9720              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:185:     return r;
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9721              		.loc 22 185 12 view .LVU1966
 9722 0070 48BE0000 		movabsq	$3377699720527872, %rsi	#, tmp233
 9722      00000000 
 9722      0C00
 9723              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:183:     TensorOptions r = *t
 183:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_device(device);
 9724              		.loc 22 183 19 view .LVU1967
 9725 007a 49B9FFFF 		movabsq	$-4294901761, %r9	#, tmp224
 9725      0000FFFF 
 9725      FFFF
 9726 0084 4989C8   		movq	%rcx, %r8	# _60, tmp222
 9727 0087 4488B562 		movb	%r14b, -158(%rbp)	# tmp336, MEM[(struct optional *)&device + 2B]
 9727      FFFFFF
 9728              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:185:     return r;
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9729              		.loc 22 185 12 view .LVU1968
 9730 008e 48BFFFFF 		movabsq	$-71776119061217281, %rdi	#, tmp231
 9730      FFFFFFFF 
 9730      00FF
 9731              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:183:     TensorOptions r = *t
 183:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_device(device);
 9732              		.loc 22 183 19 view .LVU1969
 9733 0098 49C1E010 		salq	$16, %r8	#, tmp222
 9734 009c 4C89C2   		movq	%r8, %rdx	# tmp222, r
 9735              	.LVL491:
 184:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 9736              		.loc 22 184 5 is_stmt 1 view .LVU1970
 9737              	.LBB7412:
 9738              	.LBI7412:
 426:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (device) {
 9739              		.loc 22 426 8 view .LVU1971
 9740              	.LBB7413:
 427:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       device_ = *device;
 9741              		.loc 22 427 5 view .LVU1972
 428:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_device_ = true;
 9742              		.loc 22 428 7 view .LVU1973
 9743              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:428:       device_ = *device;
 428:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_device_ = true;
 9744              		.loc 22 428 15 is_stmt 0 view .LVU1974
 9745 009f 668B9561 		movw	-159(%rbp), %dx	# MEM[(const struct Device &)&device + 1], r
 9745      FFFFFF
 9746              	.LVL492:
 429:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     } else {
 9747              		.loc 22 429 7 is_stmt 1 view .LVU1975
 429:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     } else {
 9748              		.loc 22 429 7 is_stmt 0 view .LVU1976
 9749              	.LBE7413:
 9750              	.LBE7412:
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9751              		.loc 22 185 5 is_stmt 1 view .LVU1977
 9752              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:185:     return r;
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9753              		.loc 22 185 12 is_stmt 0 view .LVU1978
 9754 00a6 4889D0   		movq	%rdx, %rax	# r, r
 9755              	.LVL493:
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9756              		.loc 22 185 12 view .LVU1979
 9757              	.LBE7411:
 9758              	.LBE7410:
 9759              	.LBE7420:
 9760              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:97:              
  96:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****                           .device(device_type(), device_index)
  97:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****                           .layout(layout());
 9761              		.loc 21 97 41 view .LVU1980
 9762 00a9 8B13     		movl	(%rbx), %edx	# MEM[(Backend *)this_3(D)], _12
 9763              	.LVL494:
 9764              	.LBB7421:
 9765              	.LBB7415:
 9766              	.LBB7414:
 9767              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:185:     return r;
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9768              		.loc 22 185 12 view .LVU1981
 9769 00ab 4809F0   		orq	%rsi, %rax	# tmp233, r
 9770              	.LVL495:
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9771              		.loc 22 185 12 view .LVU1982
 9772 00ae 4C21C8   		andq	%r9, %rax	# tmp224, tmp236
 9773 00b1 4C09C0   		orq	%r8, %rax	# tmp222, tmp240
 9774 00b4 4821F8   		andq	%rdi, %rax	# tmp231, tmp243
 9775 00b7 4809F0   		orq	%rsi, %rax	# tmp233, tmp245
 9776              	.LVL496:
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9777              		.loc 22 185 12 view .LVU1983
 9778 00ba 4C21C8   		andq	%r9, %rax	# tmp224, tmp249
 9779 00bd 4C09C0   		orq	%r8, %rax	# tmp222, tmp253
 9780 00c0 4821F8   		andq	%rdi, %rax	# tmp231, tmp256
 9781 00c3 4809F0   		orq	%rsi, %rax	# tmp233, tmp258
 185:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9782              		.loc 22 185 12 view .LVU1984
 9783              	.LBE7414:
 9784              	.LBE7415:
 9785              	.LBE7421:
 9786              	.LBB7422:
 9787              	.LBI7422:
  29:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return layout_from_backend(backend_);
 9788              		.loc 21 29 10 is_stmt 1 view .LVU1985
 9789              	.LVL497:
  29:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return layout_from_backend(backend_);
 9790              		.loc 21 29 10 is_stmt 0 view .LVU1986
 9791              	.LBE7422:
  30:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9792              		.loc 21 30 5 is_stmt 1 view .LVU1987
 9793              	.LBB7427:
 9794              	.LBB7423:
 9795              	.LBI7423:
 9796              		.file 27 "/workspace/pth-linear-interp/torch/include/c10/core/Layout.h"
   1:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** #include <c10/core/Backend.h>
   4:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** #include <c10/util/Exception.h>
   5:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** 
   6:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** #include <iostream>
   7:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** 
   8:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** namespace c10 {
   9:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** enum class Layout : int8_t { Strided, Sparse, Mkldnn, NumOptions };
  10:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** 
  11:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** constexpr auto kStrided = Layout::Strided;
  12:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** constexpr auto kSparse = Layout::Sparse;
  13:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** constexpr auto kMkldnn = Layout::Mkldnn;
  14:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** 
  15:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h **** inline Layout layout_from_backend(Backend backend) {
 9797              		.loc 27 15 15 view .LVU1988
 9798              	.LBB7424:
  16:/workspace/pth-linear-interp/torch/include/c10/core/Layout.h ****   switch (backend) {
 9799              		.loc 27 16 3 view .LVU1989
 9800 00c6 83FA08   		cmpl	$8, %edx	#, _12
 9801 00c9 0F8EA100 		jle	.L346	#,
 9801      0000
 9802 00cf 83FA11   		cmpl	$17, %edx	#, _12
 9803 00d2 400F94C6 		sete	%sil	#, tmp310
 9804 00d6 01F6     		addl	%esi, %esi	# _18
 9805              	.L313:
 9806              	.LVL498:
 9807              		.loc 27 16 3 is_stmt 0 view .LVU1990
 9808              	.LBE7424:
 9809              	.LBE7423:
 9810              	.LBE7427:
 9811              	.LBB7428:
 9812              	.LBI7428:
 530:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 9813              		.loc 26 530 13 is_stmt 1 view .LVU1991
 9814              	.LBB7429:
 9815              	.LBI7429:
  74:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 9816              		.loc 11 74 5 view .LVU1992
  74:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 9817              		.loc 11 74 5 is_stmt 0 view .LVU1993
 9818              	.LBE7429:
 9819              	.LBB7430:
 9820              	.LBI7430:
 369:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : init_(true), storage_(constexpr_move(v)) {}
 9821              		.loc 26 369 22 is_stmt 1 view .LVU1994
 9822              	.LBB7431:
 9823              	.LBI7431:
  69:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     T&& t) noexcept {
 9824              		.loc 26 69 60 view .LVU1995
  69:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     T&& t) noexcept {
 9825              		.loc 26 69 60 is_stmt 0 view .LVU1996
 9826              	.LBE7431:
 9827              	.LBB7432:
 9828              	.LBI7432:
 177:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****       : value_(constexpr_forward<Args>(args)...) {}
 9829              		.loc 26 177 13 is_stmt 1 view .LVU1997
 9830              	.LBB7433:
 9831              	.LBI7433:
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9832              		.loc 26 56 22 view .LVU1998
  56:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****     typename std::remove_reference<T>::type& t) noexcept {
 9833              		.loc 26 56 22 is_stmt 0 view .LVU1999
 9834              	.LBE7433:
 9835              	.LBE7432:
 9836              	.LBE7430:
 9837              	.LBE7428:
 9838              	.LBB7434:
 9839              	.LBI7434:
 228:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     TensorOptions r = *this;
 9840              		.loc 22 228 31 is_stmt 1 view .LVU2000
 9841              	.LBB7435:
 229:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_layout(layout);
 9842              		.loc 22 229 5 view .LVU2001
 9843              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:229:     TensorOptions r = *t
 229:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_layout(layout);
 9844              		.loc 22 229 19 is_stmt 0 view .LVU2002
 9845 00d8 48BFFFFF 		movabsq	$-4294901761, %rdi	#, tmp264
 9845      0000FFFF 
 9845      FFFF
 9846 00e2 48C1E110 		salq	$16, %rcx	#, tmp262
 9847              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:231:     return r;
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9848              		.loc 22 231 12 view .LVU2003
 9849 00e6 400FB6F6 		movzbl	%sil, %esi	# _18, _18
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9850              		.loc 22 231 12 view .LVU2004
 9851 00ea 49B9FFFF 		movabsq	$-72056494526300161, %r9	#, tmp286
 9851      FFFFFF00 
 9851      00FF
 9852              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:229:     TensorOptions r = *t
 229:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_layout(layout);
 9853              		.loc 22 229 19 view .LVU2005
 9854 00f4 4821F8   		andq	%rdi, %rax	# tmp264, tmp258
 9855              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:231:     return r;
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9856              		.loc 22 231 12 view .LVU2006
 9857 00f7 48C1E620 		salq	$32, %rsi	#, tmp280
 9858              	.LVL499:
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9859              		.loc 22 231 12 view .LVU2007
 9860 00fb 49B80000 		movabsq	$7881299347898368, %r8	#, tmp288
 9860      00000000 
 9860      1C00
 9861              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:229:     TensorOptions r = *t
 229:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     r.set_layout(layout);
 9862              		.loc 22 229 19 view .LVU2008
 9863 0105 4889C2   		movq	%rax, %rdx	# tmp258, tmp263
 9864 0108 48B80000 		movabsq	$3377699720527872, %rax	#, tmp273
 9864      00000000 
 9864      0C00
 9865 0112 4809CA   		orq	%rcx, %rdx	# tmp262, tmp267
 9866 0115 89D2     		movl	%edx, %edx	# tmp267, tmp270
 9867 0117 4809C2   		orq	%rax, %rdx	# tmp273, tmp272
 9868              	.LVL500:
 230:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 9869              		.loc 22 230 5 is_stmt 1 view .LVU2009
 230:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return r;
 9870              		.loc 22 230 5 is_stmt 0 view .LVU2010
 9871              	.LBE7435:
 9872              	.LBE7434:
 438:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       dtype_ = *dtype;
 439:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_dtype_ = true;
 440:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     } else {
 441:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_dtype_ = false;
 442:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     }
 443:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 444:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 445:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   // legacy function to support ScalarType
 446:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   void set_dtype(c10::optional<ScalarType> dtype) & noexcept {
 447:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (dtype) {
 448:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       dtype_ = scalarTypeToTypeMeta(*dtype);
 449:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_dtype_ = true;
 450:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     } else {
 451:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****       has_dtype_ = false;
 452:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     }
 453:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 454:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h **** 
 455:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   /// Mutably set the layout of `TensorOptions`.
 456:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   void set_layout(c10::optional<Layout> layout) & noexcept {
 457:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     if (layout) {
 9873              		.loc 22 457 5 is_stmt 1 view .LVU2011
 9874              	.LBB7437:
 9875              	.LBB7436:
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9876              		.loc 22 231 5 view .LVU2012
 9877              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:231:     return r;
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9878              		.loc 22 231 12 is_stmt 0 view .LVU2013
 9879 011a 4821FA   		andq	%rdi, %rdx	# tmp264, tmp276
 9880 011d 4809CA   		orq	%rcx, %rdx	# tmp262, tmp281
 9881 0120 4809F2   		orq	%rsi, %rdx	# tmp280, tmp283
 9882 0123 4C21CA   		andq	%r9, %rdx	# tmp286, tmp285
 9883 0126 4C09C2   		orq	%r8, %rdx	# tmp288, tmp287
 9884              	.LVL501:
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9885              		.loc 22 231 12 view .LVU2014
 9886 0129 4889D0   		movq	%rdx, %rax	# tmp287, tmp287
 9887 012c 48BAFFFF 		movabsq	$-1095216660481, %rdx	#, tmp282
 9887      FFFF00FF 
 9887      FFFF
 9888 0136 4821F8   		andq	%rdi, %rax	# tmp264, tmp287
 9889 0139 4809C8   		orq	%rcx, %rax	# tmp262, tmp293
 9890 013c 4821D0   		andq	%rdx, %rax	# tmp282, tmp296
 9891 013f 4809F0   		orq	%rsi, %rax	# tmp280, tmp298
 9892 0142 4C21C8   		andq	%r9, %rax	# tmp286, tmp300
 9893 0145 4C09C0   		orq	%r8, %rax	# tmp288, tmp302
 9894              	.LVL502:
 231:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****   }
 9895              		.loc 22 231 12 view .LVU2015
 9896              	.LBE7436:
 9897              	.LBE7437:
 9898              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:98:   }
  98:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 9899              		.loc 21 98 3 view .LVU2016
 9900 0148 488B5DC8 		movq	-56(%rbp), %rbx	# D.446328, tmp321
 9901 014c 6448331C 		xorq	%fs:40, %rbx	# MEM[(<address-space-1> long unsigned int *)40B], tmp321
 9901      25280000 
 9901      00
 9902              	.LVL503:
 9903              		.loc 21 98 3 view .LVU2017
 9904 0155 7525     		jne	.L347	#,
 9905 0157 488D65D8 		leaq	-40(%rbp), %rsp	#,
 9906 015b 5B       		popq	%rbx	#
 9907 015c 415C     		popq	%r12	#
 9908              	.LVL504:
 9909              		.loc 21 98 3 view .LVU2018
 9910 015e 415D     		popq	%r13	#
 9911 0160 415E     		popq	%r14	#
 9912 0162 415F     		popq	%r15	#
 9913 0164 5D       		popq	%rbp	#
 9914              		.cfi_remember_state
 9915              		.cfi_def_cfa 7, 8
 9916              	.LVL505:
 9917              		.loc 21 98 3 view .LVU2019
 9918 0165 C3       		ret	
 9919              	.LVL506:
 9920 0166 662E0F1F 		.p2align 4,,10
 9920      84000000 
 9920      0000
 9921              		.p2align 3
 9922              	.L346:
 9923              		.cfi_restore_state
 9924              	.LBB7438:
 9925              	.LBB7426:
 9926              	.LBB7425:
 9927              	# /workspace/pth-linear-interp/torch/include/c10/core/Layout.h:16:   switch (backend) {
 9928              		.loc 27 16 3 view .LVU2020
 9929 0170 83FA04   		cmpl	$4, %edx	#, _12
 9930 0173 400F9FC6 		setg	%sil	#, _18
 9931 0177 E95CFFFF 		jmp	.L313	#
 9931      FF
 9932              	.LVL507:
 9933              	.L347:
 9934              		.loc 27 16 3 view .LVU2021
 9935              	.LBE7425:
 9936              	.LBE7426:
 9937              	.LBE7438:
 9938              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:98:   }
 9939              		.loc 21 98 3 view .LVU2022
 9940 017c E8000000 		call	__stack_chk_fail@PLT	#
 9940      00
 9941              	.LVL508:
 9942              	.L345:
 9943              	.LBB7439:
 9944              	.LBB7416:
 9945              	.LBB7405:
 9946              	.LBB7400:
 9947              	.LBB7395:
 9948              	.LBB7390:
 9949              	.LBB7385:
 9950              	.LBB7381:
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9951              		.loc 23 107 5 is_stmt 1 view .LVU2023
 9952 0181 BFA80000 		movl	$168, %edi	#,
 9952      00
 9953              	.LBB7291:
 9954              	.LBB7292:
 9955              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 9956              		.loc 14 89 98 is_stmt 0 view .LVU2024
 9957 0186 4C8DAD60 		leaq	-160(%rbp), %r13	#, tmp308
 9957      FFFFFF
 9958              	.LBE7292:
 9959              	.LBE7291:
 9960              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:107:     TORCH_INTERNAL_ASSERT_DEBUG
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9961              		.loc 23 107 5 view .LVU2025
 9962 018d E8000000 		call	__cxa_allocate_exception@PLT	#
 9962      00
 9963              	.LVL509:
 9964              	.LBB7296:
 9965              	.LBI7291:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 9966              		.loc 14 88 23 is_stmt 1 view .LVU2026
 9967              	.LBB7293:
 9968              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 9969              		.loc 14 89 98 is_stmt 0 view .LVU2027
 9970 0192 488D953C 		leaq	-196(%rbp), %rdx	#, tmp187
 9970      FFFFFF
 9971              	.LVL510:
 9972              		.loc 14 89 98 view .LVU2028
 9973 0199 4C89EE   		movq	%r13, %rsi	# tmp308,
 9974              	.LBE7293:
 9975              	.LBE7296:
 9976              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:107:     TORCH_INTERNAL_ASSERT_DEBUG
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9977              		.loc 23 107 5 view .LVU2029
 9978 019c 4989C7   		movq	%rax, %r15	# tmp319, _110
 9979 019f 410FBEC6 		movsbl	%r14b, %eax	# device_index, tmp330
 9980              	.LBB7297:
 9981              	.LBB7294:
 9982              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 9983              		.loc 14 89 98 view .LVU2030
 9984 01a3 4C8D7580 		leaq	-128(%rbp), %r14	#, tmp309
 9985              	.LVL511:
 9986              		.loc 14 89 98 view .LVU2031
 9987              	.LBE7294:
 9988              	.LBE7297:
 9989              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:107:     TORCH_INTERNAL_ASSERT_DEBUG
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 9990              		.loc 23 107 5 view .LVU2032
 9991 01a7 89853CFF 		movl	%eax, -196(%rbp)	# tmp330, D.446133
 9991      FFFF
 9992              	.LBB7298:
 9993              	.LBB7295:
 9994              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 9995              		.loc 14 89 98 view .LVU2033
 9996 01ad 4C89F7   		movq	%r14, %rdi	# tmp309,
 9997 01b0 488D0500 		leaq	.LC34(%rip), %rax	#, tmp331
 9997      000000
 9998              	.LVL512:
 9999              		.loc 14 89 98 view .LVU2034
 10000 01b7 48898560 		movq	%rax, -160(%rbp)	# tmp331, D.446129
 10000      FFFFFF
 10001              	.LEHB38:
 10002 01be E8000000 		call	_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_	#
 10002      00
 10003              	.LVL513:
 10004              	.LEHE38:
 10005              		.loc 14 89 98 view .LVU2035
 10006              	.LBE7295:
 10007              	.LBE7298:
 10008              	.LBB7299:
 10009              	.LBI7299:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 10010              		.loc 14 88 23 is_stmt 1 view .LVU2036
 10011              	.LBB7300:
 10012              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10013              		.loc 14 89 98 is_stmt 0 view .LVU2037
 10014 01c3 4C8D65A0 		leaq	-96(%rbp), %r12	#, tmp307
 10015              	.LVL514:
 10016              		.loc 14 89 98 view .LVU2038
 10017 01c7 488D0500 		leaq	.LC35(%rip), %rax	#, tmp332
 10017      000000
 10018 01ce 4C89F2   		movq	%r14, %rdx	# tmp309,
 10019 01d1 4C89EE   		movq	%r13, %rsi	# tmp308,
 10020 01d4 4C89E7   		movq	%r12, %rdi	# tmp307,
 10021 01d7 48898560 		movq	%rax, -160(%rbp)	# tmp332, D.446128
 10021      FFFFFF
 10022              	.LEHB39:
 10023 01de E8000000 		call	_ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4cal
 10023      00
 10024              	.LVL515:
 10025              	.LEHE39:
 10026              		.loc 14 89 98 view .LVU2039
 10027              	.LBE7300:
 10028              	.LBE7299:
 10029              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:107:     TORCH_INTERNAL_ASSERT_DEBUG
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 10030              		.loc 23 107 5 view .LVU2040
 10031 01e3 488D1D00 		leaq	.LC32(%rip), %rbx	#, tmp195
 10031      000000
 10032              	.LVL516:
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 10033              		.loc 23 107 5 view .LVU2041
 10034 01ea 488D0500 		leaq	.LC33(%rip), %rax	#, tmp194
 10034      000000
 10035 01f1 4C89E6   		movq	%r12, %rsi	# tmp307,
 10036 01f4 4C89FF   		movq	%r15, %rdi	# _110,
 10037 01f7 C78550FF 		movl	$107, -176(%rbp)	#, D.446132.line
 10037      FFFF6B00 
 10037      0000
 10038 0201 C4E1F96E 		vmovq	%rbx, %xmm0	# tmp195, tmp195
 10038      C3
 10039 0206 C4E3F922 		vpinsrq	$1, %rax, %xmm0, %xmm0	# tmp194, tmp195, tmp193
 10039      C001
 10040 020c 50       		pushq	%rax	#
 10041 020d C5F82985 		vmovaps	%xmm0, -192(%rbp)	# tmp193, MEM[(const char * *)&D.446132]
 10041      40FFFFFF 
 10042 0215 FFB550FF 		pushq	-176(%rbp)	# D.446132
 10042      FFFF
 10043 021b FFB548FF 		pushq	-184(%rbp)	# D.446132
 10043      FFFF
 10044 0221 FFB540FF 		pushq	-192(%rbp)	# D.446132
 10044      FFFF
 10045              	.LEHB40:
 10046              		.cfi_escape 0x2e,0x20
 10047 0227 E8000000 		call	_ZN3c105ErrorC1ENS_14SourceLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@PLT	
 10047      00
 10048              	.LVL517:
 10049              	.LEHE40:
 10050              	.L338:
 10051              	.LBB7301:
 10052              	.LBB7302:
 10053              	.LBB7303:
 10054              	.LBB7304:
 10055              	.LBB7305:
 10056              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10057              		.loc 2 222 26 view .LVU2042
 10058 022c 488B7DA0 		movq	-96(%rbp), %rdi	#, _113
 10059              	.LBE7305:
 10060              	.LBE7304:
 10061              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10062              		.loc 2 231 2 view .LVU2043
 10063 0230 488D45B0 		leaq	-80(%rbp), %rax	#, tmp198
 10064              	.LBE7303:
 10065              	.LBE7302:
 10066              	.LBE7301:
 10067              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:107:     TORCH_INTERNAL_ASSERT_DEBUG
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 10068              		.loc 23 107 5 view .LVU2044
 10069 0234 4883C420 		addq	$32, %rsp	#,
 10070              	.LVL518:
 10071              	.LBB7319:
 10072              	.LBI7301:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10073              		.loc 2 657 7 is_stmt 1 view .LVU2045
 10074              	.LBB7315:
 10075              	.LBI7302:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10076              		.loc 2 229 7 view .LVU2046
 10077              	.LBB7314:
 10078              	.LBB7308:
 10079              	.LBI7304:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10080              		.loc 2 221 7 view .LVU2047
 10081              	.LBB7307:
 10082              	.LBB7306:
 10083              	.LBI7306:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10084              		.loc 2 200 7 view .LVU2048
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10085              		.loc 2 200 7 is_stmt 0 view .LVU2049
 10086              	.LBE7306:
 10087              	.LBE7307:
 10088              	.LBE7308:
 10089              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10090              		.loc 2 231 2 view .LVU2050
 10091 0238 4839C7   		cmpq	%rax, %rdi	# tmp198, _113
 10092 023b 7405     		je	.L299	#,
 10093              	.LVL519:
 10094              	.LBB7309:
 10095              	.LBI7309:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10096              		.loc 2 236 7 is_stmt 1 view .LVU2051
 10097              	.LBB7310:
 10098              	.LBB7311:
 10099              	.LBI7311:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10100              		.loc 3 469 7 view .LVU2052
 10101              	.LBB7312:
 10102              	.LBI7312:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10103              		.loc 4 119 7 view .LVU2053
 10104              	.LBB7313:
 10105              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10106              		.loc 4 128 19 is_stmt 0 view .LVU2054
 10107 023d E8000000 		call	_ZdlPv@PLT	#
 10107      00
 10108              	.LVL520:
 10109              	.L299:
 10110              		.loc 4 128 19 view .LVU2055
 10111              	.LBE7313:
 10112              	.LBE7312:
 10113              	.LBE7311:
 10114              	.LBE7310:
 10115              	.LBE7309:
 10116              	.LBE7314:
 10117              	.LBE7315:
 10118              	.LBB7316:
 10119              	.LBI7316:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10120              		.loc 2 150 14 is_stmt 1 view .LVU2056
 10121              	.LBB7317:
 10122              	.LBI7317:
 10123              		.loc 5 153 7 view .LVU2057
 10124              	.LBB7318:
 10125              	.LBI7318:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10126              		.loc 4 89 7 view .LVU2058
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10127              		.loc 4 89 7 is_stmt 0 view .LVU2059
 10128              	.LBE7318:
 10129              	.LBE7317:
 10130              	.LBE7316:
 10131              	.LBE7319:
 10132              	.LBB7320:
 10133              	.LBI7320:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10134              		.loc 2 657 7 is_stmt 1 view .LVU2060
 10135              	.LBB7321:
 10136              	.LBI7321:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10137              		.loc 2 229 7 view .LVU2061
 10138              	.LBB7322:
 10139              	.LBB7323:
 10140              	.LBI7323:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10141              		.loc 2 221 7 view .LVU2062
 10142              	.LBB7324:
 10143              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10144              		.loc 2 222 26 is_stmt 0 view .LVU2063
 10145 0242 488B7D80 		movq	-128(%rbp), %rdi	#, _114
 10146              	.LVL521:
 10147              	.LBB7325:
 10148              	.LBI7325:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10149              		.loc 2 200 7 is_stmt 1 view .LVU2064
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10150              		.loc 2 200 7 is_stmt 0 view .LVU2065
 10151              	.LBE7325:
 10152              	.LBE7324:
 10153              	.LBE7323:
 10154              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10155              		.loc 2 231 2 view .LVU2066
 10156 0246 488D4590 		leaq	-112(%rbp), %rax	#, tmp200
 10157 024a 4839C7   		cmpq	%rax, %rdi	# tmp200, _114
 10158 024d 7405     		je	.L300	#,
 10159              	.LVL522:
 10160              	.LBB7326:
 10161              	.LBI7326:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10162              		.loc 2 236 7 is_stmt 1 view .LVU2067
 10163              	.LBB7327:
 10164              	.LBB7328:
 10165              	.LBI7328:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10166              		.loc 3 469 7 view .LVU2068
 10167              	.LBB7329:
 10168              	.LBI7329:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10169              		.loc 4 119 7 view .LVU2069
 10170              	.LBB7330:
 10171              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10172              		.loc 4 128 19 is_stmt 0 view .LVU2070
 10173 024f E8000000 		call	_ZdlPv@PLT	#
 10173      00
 10174              	.LVL523:
 10175              	.L300:
 10176              		.loc 4 128 19 view .LVU2071
 10177              	.LBE7330:
 10178              	.LBE7329:
 10179              	.LBE7328:
 10180              	.LBE7327:
 10181              	.LBE7326:
 10182              	.LBE7322:
 10183              	.LBE7321:
 10184              	.LBB7331:
 10185              	.LBI7331:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10186              		.loc 2 150 14 is_stmt 1 view .LVU2072
 10187              	.LBB7332:
 10188              	.LBI7332:
 10189              		.loc 5 153 7 view .LVU2073
 10190              	.LBB7333:
 10191              	.LBI7333:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10192              		.loc 4 89 7 view .LVU2074
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10193              		.loc 4 89 7 is_stmt 0 view .LVU2075
 10194              	.LBE7333:
 10195              	.LBE7332:
 10196              	.LBE7331:
 10197              	.LBE7320:
 10198              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:107:     TORCH_INTERNAL_ASSERT_DEBUG
 107:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "CPU device index must be -1 or zero, got ", (int)index_);
 10199              		.loc 23 107 5 view .LVU2076
 10200 0254 488D1500 		leaq	_ZN3c105ErrorD1Ev(%rip), %rdx	#,
 10200      000000
 10201 025b 488D3500 		leaq	_ZTIN3c105ErrorE(%rip), %rsi	#,
 10201      000000
 10202 0262 4C89FF   		movq	%r15, %rdi	# _110,
 10203 0265 E8000000 		call	__cxa_throw@PLT	#
 10203      00
 10204              	.LVL524:
 10205              	.L344:
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10206              		.loc 23 105 5 is_stmt 1 view .LVU2077
 10207 026a BFA80000 		movl	$168, %edi	#,
 10207      00
 10208              	.LBB7334:
 10209              	.LBB7335:
 10210              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10211              		.loc 14 89 98 is_stmt 0 view .LVU2078
 10212 026f 4C8DAD60 		leaq	-160(%rbp), %r13	#, tmp308
 10212      FFFFFF
 10213              	.LBE7335:
 10214              	.LBE7334:
 10215              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:105:     TORCH_INTERNAL_ASSERT_DEBUG
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10216              		.loc 23 105 5 view .LVU2079
 10217 0276 E8000000 		call	__cxa_allocate_exception@PLT	#
 10217      00
 10218              	.LVL525:
 10219              	.LBB7339:
 10220              	.LBI7334:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 10221              		.loc 14 88 23 is_stmt 1 view .LVU2080
 10222              	.LBB7336:
 10223              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10224              		.loc 14 89 98 is_stmt 0 view .LVU2081
 10225 027b 488D9540 		leaq	-192(%rbp), %rdx	#, tmp165
 10225      FFFFFF
 10226              	.LVL526:
 10227              		.loc 14 89 98 view .LVU2082
 10228 0282 4C89EE   		movq	%r13, %rsi	# tmp308,
 10229              	.LBE7336:
 10230              	.LBE7339:
 10231              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:105:     TORCH_INTERNAL_ASSERT_DEBUG
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10232              		.loc 23 105 5 view .LVU2083
 10233 0285 4989C7   		movq	%rax, %r15	# tmp318, _98
 10234 0288 410FBEC6 		movsbl	%r14b, %eax	# device_index, tmp326
 10235              	.LBB7340:
 10236              	.LBB7337:
 10237              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10238              		.loc 14 89 98 view .LVU2084
 10239 028c 4C8D7580 		leaq	-128(%rbp), %r14	#, tmp309
 10240              	.LVL527:
 10241              		.loc 14 89 98 view .LVU2085
 10242              	.LBE7337:
 10243              	.LBE7340:
 10244              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:105:     TORCH_INTERNAL_ASSERT_DEBUG
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10245              		.loc 23 105 5 view .LVU2086
 10246 0290 898540FF 		movl	%eax, -192(%rbp)	# tmp326, D.446137
 10246      FFFF
 10247              	.LBB7341:
 10248              	.LBB7338:
 10249              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10250              		.loc 14 89 98 view .LVU2087
 10251 0296 4C89F7   		movq	%r14, %rdi	# tmp309,
 10252 0299 488D0500 		leaq	.LC30(%rip), %rax	#, tmp327
 10252      000000
 10253              	.LVL528:
 10254              		.loc 14 89 98 view .LVU2088
 10255 02a0 48898560 		movq	%rax, -160(%rbp)	# tmp327, D.446131
 10255      FFFFFF
 10256              	.LEHB41:
 10257              		.cfi_escape 0x2e,0
 10258 02a7 E8000000 		call	_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_	#
 10258      00
 10259              	.LVL529:
 10260              	.LEHE41:
 10261              		.loc 14 89 98 view .LVU2089
 10262              	.LBE7338:
 10263              	.LBE7341:
 10264              	.LBB7342:
 10265              	.LBI7342:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 10266              		.loc 14 88 23 is_stmt 1 view .LVU2090
 10267              	.LBB7343:
 10268              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10269              		.loc 14 89 98 is_stmt 0 view .LVU2091
 10270 02ac 4C8D65A0 		leaq	-96(%rbp), %r12	#, tmp307
 10271              	.LVL530:
 10272              		.loc 14 89 98 view .LVU2092
 10273 02b0 488D0500 		leaq	.LC31(%rip), %rax	#, tmp328
 10273      000000
 10274 02b7 4C89F2   		movq	%r14, %rdx	# tmp309,
 10275 02ba 4C89EE   		movq	%r13, %rsi	# tmp308,
 10276 02bd 4C89E7   		movq	%r12, %rdi	# tmp307,
 10277 02c0 48898560 		movq	%rax, -160(%rbp)	# tmp328, D.446130
 10277      FFFFFF
 10278              	.LEHB42:
 10279 02c7 E8000000 		call	_ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4cal
 10279      00
 10280              	.LVL531:
 10281              	.LEHE42:
 10282              		.loc 14 89 98 view .LVU2093
 10283              	.LBE7343:
 10284              	.LBE7342:
 10285              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:105:     TORCH_INTERNAL_ASSERT_DEBUG
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10286              		.loc 23 105 5 view .LVU2094
 10287 02cc 488D1D00 		leaq	.LC32(%rip), %rbx	#, tmp173
 10287      000000
 10288              	.LVL532:
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10289              		.loc 23 105 5 view .LVU2095
 10290 02d3 488D0500 		leaq	.LC33(%rip), %rax	#, tmp172
 10290      000000
 10291 02da 4C89E6   		movq	%r12, %rsi	# tmp307,
 10292 02dd 4C89FF   		movq	%r15, %rdi	# _98,
 10293 02e0 C78570FF 		movl	$105, -144(%rbp)	#, D.446136.line
 10293      FFFF6900 
 10293      0000
 10294 02ea C4E1F96E 		vmovq	%rbx, %xmm0	# tmp173, tmp173
 10294      C3
 10295 02ef C4E3F922 		vpinsrq	$1, %rax, %xmm0, %xmm0	# tmp172, tmp173, tmp171
 10295      C001
 10296 02f5 52       		pushq	%rdx	#
 10297 02f6 C5F82985 		vmovaps	%xmm0, -160(%rbp)	# tmp171, MEM[(const char * *)&D.446136]
 10297      60FFFFFF 
 10298 02fe FFB570FF 		pushq	-144(%rbp)	# D.446136
 10298      FFFF
 10299 0304 FFB568FF 		pushq	-152(%rbp)	# D.446136
 10299      FFFF
 10300 030a FFB560FF 		pushq	-160(%rbp)	# D.446136
 10300      FFFF
 10301              	.LEHB43:
 10302              		.cfi_escape 0x2e,0x20
 10303 0310 E8000000 		call	_ZN3c105ErrorC1ENS_14SourceLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@PLT	
 10303      00
 10304              	.LVL533:
 10305              	.LEHE43:
 10306 0315 E912FFFF 		jmp	.L338	#
 10306      FF
 10307              	.LVL534:
 10308              	.L343:
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10309              		.loc 23 105 5 view .LVU2096
 10310              	.LBE7381:
 10311              	.LBE7385:
 10312              	.LBE7390:
 10313              	.LBE7395:
 10314              	.LBE7400:
 10315              	.LBE7405:
 10316              	.LBE7416:
 10317              	.LBE7439:
 10318              	.LBB7440:
 10319              	.LBB7263:
 10320              	.LBB7260:
 10321              	.LBB7257:
 10322              	.LBB7254:
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10323              		.loc 24 477 5 is_stmt 1 view .LVU2097
 10324 031a BFA80000 		movl	$168, %edi	#,
 10324      00
 10325              	.LVL535:
 10326              	.LBB7184:
 10327              	.LBB7185:
 10328              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10329              		.loc 14 89 98 is_stmt 0 view .LVU2098
 10330 031f 4C8D7580 		leaq	-128(%rbp), %r14	#, tmp309
 10331 0323 4C8DAD60 		leaq	-160(%rbp), %r13	#, tmp308
 10331      FFFFFF
 10332              	.LBE7185:
 10333              	.LBE7184:
 10334              	# /workspace/pth-linear-interp/torch/include/c10/util/typeid.h:477:     TORCH_INTERNAL_ASSERT_DEBUG
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10335              		.loc 24 477 5 view .LVU2099
 10336 032a E8000000 		call	__cxa_allocate_exception@PLT	#
 10336      00
 10337              	.LVL536:
 10338              	.LBB7188:
 10339              	.LBB7186:
 10340              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10341              		.loc 14 89 98 view .LVU2100
 10342 032f 488D8D40 		leaq	-192(%rbp), %rcx	#, tmp136
 10342      FFFFFF
 10343 0336 4C89EE   		movq	%r13, %rsi	# tmp308,
 10344 0339 4C89F7   		movq	%r14, %rdi	# tmp309,
 10345              	.LBE7186:
 10346              	.LBE7188:
 10347              	# /workspace/pth-linear-interp/torch/include/c10/util/typeid.h:477:     TORCH_INTERNAL_ASSERT_DEBUG
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10348              		.loc 24 477 5 view .LVU2101
 10349 033c 4989C7   		movq	%rax, %r15	# tmp313, _64
 10350              	.LVL537:
 10351              	.LBB7189:
 10352              	.LBI7184:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 10353              		.loc 14 88 23 is_stmt 1 view .LVU2102
 10354              	.LBB7187:
 10355              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10356              		.loc 14 89 98 is_stmt 0 view .LVU2103
 10357 033f 488D0500 		leaq	.LC25(%rip), %rax	#, tmp322
 10357      000000
 10358 0346 488D953C 		leaq	-196(%rbp), %rdx	#, tmp137
 10358      FFFFFF
 10359              	.LVL538:
 10360              		.loc 14 89 98 view .LVU2104
 10361 034d 48898540 		movq	%rax, -192(%rbp)	# tmp322, D.445841
 10361      FFFFFF
 10362 0354 488D0500 		leaq	.LC26(%rip), %rax	#, tmp323
 10362      000000
 10363 035b 48898560 		movq	%rax, -160(%rbp)	# tmp323, D.445842
 10363      FFFFFF
 10364              	.LEHB44:
 10365              		.cfi_escape 0x2e,0
 10366 0362 E8000000 		call	_ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_	#
 10366      00
 10367              	.LVL539:
 10368              	.LEHE44:
 10369              		.loc 14 89 98 view .LVU2105
 10370              	.LBE7187:
 10371              	.LBE7189:
 10372              	.LBB7190:
 10373              	.LBI7190:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 10374              		.loc 14 88 23 is_stmt 1 view .LVU2106
 10375              	.LBB7191:
 10376              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 10377              		.loc 14 89 98 is_stmt 0 view .LVU2107
 10378 0367 4C8D65A0 		leaq	-96(%rbp), %r12	#, tmp307
 10379              	.LVL540:
 10380              		.loc 14 89 98 view .LVU2108
 10381 036b 488D0500 		leaq	.LC27(%rip), %rax	#, tmp324
 10381      000000
 10382 0372 4C89F2   		movq	%r14, %rdx	# tmp309,
 10383 0375 4C89EE   		movq	%r13, %rsi	# tmp308,
 10384 0378 4C89E7   		movq	%r12, %rdi	# tmp307,
 10385 037b 48898560 		movq	%rax, -160(%rbp)	# tmp324, D.445840
 10385      FFFFFF
 10386              	.LEHB45:
 10387 0382 E8000000 		call	_ZN3c106detail12_str_wrapperIJPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4cal
 10387      00
 10388              	.LVL541:
 10389              	.LEHE45:
 10390              		.loc 14 89 98 view .LVU2109
 10391              	.LBE7191:
 10392              	.LBE7190:
 10393              	# /workspace/pth-linear-interp/torch/include/c10/util/typeid.h:477:     TORCH_INTERNAL_ASSERT_DEBUG
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10394              		.loc 24 477 5 view .LVU2110
 10395 0387 488D1D00 		leaq	.LC28(%rip), %rbx	#, tmp145
 10395      000000
 10396 038e 488D0500 		leaq	.LC29(%rip), %rax	#, tmp144
 10396      000000
 10397 0395 4C89E6   		movq	%r12, %rsi	# tmp307,
 10398 0398 4C89FF   		movq	%r15, %rdi	# _64,
 10399 039b C78570FF 		movl	$477, -144(%rbp)	#, D.445844.line
 10399      FFFFDD01 
 10399      0000
 10400 03a5 C4E1F96E 		vmovq	%rbx, %xmm0	# tmp145, tmp145
 10400      C3
 10401 03aa C4E3F922 		vpinsrq	$1, %rax, %xmm0, %xmm0	# tmp144, tmp145, tmp143
 10401      C001
 10402 03b0 51       		pushq	%rcx	#
 10403 03b1 C5F82985 		vmovaps	%xmm0, -160(%rbp)	# tmp143, MEM[(const char * *)&D.445844]
 10403      60FFFFFF 
 10404 03b9 FFB570FF 		pushq	-144(%rbp)	# D.445844
 10404      FFFF
 10405 03bf FFB568FF 		pushq	-152(%rbp)	# D.445844
 10405      FFFF
 10406 03c5 FFB560FF 		pushq	-160(%rbp)	# D.445844
 10406      FFFF
 10407              	.LEHB46:
 10408              		.cfi_escape 0x2e,0x20
 10409 03cb E8000000 		call	_ZN3c105ErrorC1ENS_14SourceLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@PLT	
 10409      00
 10410              	.LVL542:
 10411              	.LEHE46:
 10412              	.LBB7192:
 10413              	.LBB7193:
 10414              	.LBB7194:
 10415              	.LBB7195:
 10416              	.LBB7196:
 10417              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10418              		.loc 2 222 26 view .LVU2111
 10419 03d0 488B7DA0 		movq	-96(%rbp), %rdi	# MEM[(char * *)&D.445846], _65
 10420              	.LBE7196:
 10421              	.LBE7195:
 10422              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10423              		.loc 2 231 2 view .LVU2112
 10424 03d4 488D45B0 		leaq	-80(%rbp), %rax	#, tmp148
 10425              	.LBE7194:
 10426              	.LBE7193:
 10427              	.LBE7192:
 10428              	# /workspace/pth-linear-interp/torch/include/c10/util/typeid.h:477:     TORCH_INTERNAL_ASSERT_DEBUG
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10429              		.loc 24 477 5 view .LVU2113
 10430 03d8 4883C420 		addq	$32, %rsp	#,
 10431              	.LVL543:
 10432              	.LBB7210:
 10433              	.LBI7192:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10434              		.loc 2 657 7 is_stmt 1 view .LVU2114
 10435              	.LBB7206:
 10436              	.LBI7193:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10437              		.loc 2 229 7 view .LVU2115
 10438              	.LBB7205:
 10439              	.LBB7199:
 10440              	.LBI7195:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10441              		.loc 2 221 7 view .LVU2116
 10442              	.LBB7198:
 10443              	.LBB7197:
 10444              	.LBI7197:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10445              		.loc 2 200 7 view .LVU2117
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10446              		.loc 2 200 7 is_stmt 0 view .LVU2118
 10447              	.LBE7197:
 10448              	.LBE7198:
 10449              	.LBE7199:
 10450              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10451              		.loc 2 231 2 view .LVU2119
 10452 03dc 4839C7   		cmpq	%rax, %rdi	# tmp148, _65
 10453 03df 7405     		je	.L287	#,
 10454              	.LVL544:
 10455              	.LBB7200:
 10456              	.LBI7200:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10457              		.loc 2 236 7 is_stmt 1 view .LVU2120
 10458              	.LBB7201:
 10459              	.LBB7202:
 10460              	.LBI7202:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10461              		.loc 3 469 7 view .LVU2121
 10462              	.LBB7203:
 10463              	.LBI7203:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10464              		.loc 4 119 7 view .LVU2122
 10465              	.LBB7204:
 10466              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10467              		.loc 4 128 19 is_stmt 0 view .LVU2123
 10468 03e1 E8000000 		call	_ZdlPv@PLT	#
 10468      00
 10469              	.LVL545:
 10470              	.L287:
 10471              		.loc 4 128 19 view .LVU2124
 10472              	.LBE7204:
 10473              	.LBE7203:
 10474              	.LBE7202:
 10475              	.LBE7201:
 10476              	.LBE7200:
 10477              	.LBE7205:
 10478              	.LBE7206:
 10479              	.LBB7207:
 10480              	.LBI7207:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10481              		.loc 2 150 14 is_stmt 1 view .LVU2125
 10482              	.LBB7208:
 10483              	.LBI7208:
 10484              		.loc 5 153 7 view .LVU2126
 10485              	.LBB7209:
 10486              	.LBI7209:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10487              		.loc 4 89 7 view .LVU2127
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10488              		.loc 4 89 7 is_stmt 0 view .LVU2128
 10489              	.LBE7209:
 10490              	.LBE7208:
 10491              	.LBE7207:
 10492              	.LBE7210:
 10493              	.LBB7211:
 10494              	.LBI7211:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10495              		.loc 2 657 7 is_stmt 1 view .LVU2129
 10496              	.LBB7212:
 10497              	.LBI7212:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10498              		.loc 2 229 7 view .LVU2130
 10499              	.LBB7213:
 10500              	.LBB7214:
 10501              	.LBI7214:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10502              		.loc 2 221 7 view .LVU2131
 10503              	.LBB7215:
 10504              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10505              		.loc 2 222 26 is_stmt 0 view .LVU2132
 10506 03e6 488B7D80 		movq	-128(%rbp), %rdi	# MEM[(char * *)&D.445845], _66
 10507              	.LVL546:
 10508              	.LBB7216:
 10509              	.LBI7216:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10510              		.loc 2 200 7 is_stmt 1 view .LVU2133
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10511              		.loc 2 200 7 is_stmt 0 view .LVU2134
 10512              	.LBE7216:
 10513              	.LBE7215:
 10514              	.LBE7214:
 10515              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10516              		.loc 2 231 2 view .LVU2135
 10517 03ea 488D4590 		leaq	-112(%rbp), %rax	#, tmp150
 10518 03ee 4839C7   		cmpq	%rax, %rdi	# tmp150, _66
 10519 03f1 7405     		je	.L288	#,
 10520              	.LVL547:
 10521              	.LBB7217:
 10522              	.LBI7217:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10523              		.loc 2 236 7 is_stmt 1 view .LVU2136
 10524              	.LBB7218:
 10525              	.LBB7219:
 10526              	.LBI7219:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10527              		.loc 3 469 7 view .LVU2137
 10528              	.LBB7220:
 10529              	.LBI7220:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10530              		.loc 4 119 7 view .LVU2138
 10531              	.LBB7221:
 10532              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10533              		.loc 4 128 19 is_stmt 0 view .LVU2139
 10534 03f3 E8000000 		call	_ZdlPv@PLT	#
 10534      00
 10535              	.LVL548:
 10536              	.L288:
 10537              		.loc 4 128 19 view .LVU2140
 10538              	.LBE7221:
 10539              	.LBE7220:
 10540              	.LBE7219:
 10541              	.LBE7218:
 10542              	.LBE7217:
 10543              	.LBE7213:
 10544              	.LBE7212:
 10545              	.LBB7222:
 10546              	.LBI7222:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10547              		.loc 2 150 14 is_stmt 1 view .LVU2141
 10548              	.LBB7223:
 10549              	.LBI7223:
 10550              		.loc 5 153 7 view .LVU2142
 10551              	.LBB7224:
 10552              	.LBI7224:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10553              		.loc 4 89 7 view .LVU2143
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10554              		.loc 4 89 7 is_stmt 0 view .LVU2144
 10555              	.LBE7224:
 10556              	.LBE7223:
 10557              	.LBE7222:
 10558              	.LBE7211:
 10559              	# /workspace/pth-linear-interp/torch/include/c10/util/typeid.h:477:     TORCH_INTERNAL_ASSERT_DEBUG
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10560              		.loc 24 477 5 view .LVU2145
 10561 03f8 488D1500 		leaq	_ZN3c105ErrorD1Ev(%rip), %rdx	#,
 10561      000000
 10562 03ff 488D3500 		leaq	_ZTIN3c105ErrorE(%rip), %rsi	#,
 10562      000000
 10563 0406 4C89FF   		movq	%r15, %rdi	# _64,
 10564              	.LEHB47:
 10565 0409 E8000000 		call	__cxa_throw@PLT	#
 10565      00
 10566              	.LVL549:
 10567              	.L321:
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10568              		.loc 24 477 5 view .LVU2146
 10569 040e F30F1EFA 		endbr64	
 10570 0412 EB0C     		jmp	.L306	#
 10571              	.LVL550:
 10572              	.L320:
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10573              		.loc 24 477 5 view .LVU2147
 10574 0414 F30F1EFA 		endbr64	
 10575 0418 EB1B     		jmp	.L308	#
 10576              	.LVL551:
 10577              	.L319:
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10578              		.loc 24 477 5 view .LVU2148
 10579 041a F30F1EFA 		endbr64	
 10580 041e EB3A     		jmp	.L310	#
 10581              	.LVL552:
 10582              	.L301:
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10583              		.loc 24 477 5 view .LVU2149
 10584              	.LBE7254:
 10585              	.LBE7257:
 10586              	.LBE7260:
 10587              	.LBE7263:
 10588              	.LBE7440:
 10589              	.LBB7441:
 10590              	.LBB7417:
 10591              	.LBB7406:
 10592              	.LBB7401:
 10593              	.LBB7396:
 10594              	.LBB7391:
 10595              	.LBB7386:
 10596              	.LBB7382:
 10597              	.LBB7344:
 10598              	.LBI7344:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10599              		.loc 2 657 7 is_stmt 1 view .LVU2150
 10600              	.LBB7345:
 10601              	.LBI7345:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10602              		.loc 2 229 7 view .LVU2151
 10603              	.LBB7346:
 10604              	.LBB7347:
 10605              	.LBI7347:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10606              		.loc 2 221 7 view .LVU2152
 10607              	.L306:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10608              		.loc 2 221 7 is_stmt 0 view .LVU2153
 10609              	.LBE7347:
 10610              	.LBE7346:
 10611              	.LBE7345:
 10612              	.LBE7344:
 10613              	.LBB7348:
 10614              	.LBI7348:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10615              		.loc 2 657 7 is_stmt 1 view .LVU2154
 10616              	.LBB7349:
 10617              	.LBI7349:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10618              		.loc 2 229 7 view .LVU2155
 10619              	.LBB7350:
 10620              	.LBB7351:
 10621              	.LBI7351:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10622              		.loc 2 221 7 view .LVU2156
 10623              	.LBB7352:
 10624              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10625              		.loc 2 222 26 is_stmt 0 view .LVU2157
 10626 0420 488B7DA0 		movq	-96(%rbp), %rdi	#, _117
 10627              	.LVL553:
 10628              	.LBB7353:
 10629              	.LBI7353:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10630              		.loc 2 200 7 is_stmt 1 view .LVU2158
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10631              		.loc 2 200 7 is_stmt 0 view .LVU2159
 10632              	.LBE7353:
 10633              	.LBE7352:
 10634              	.LBE7351:
 10635              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10636              		.loc 2 231 2 view .LVU2160
 10637 0424 488D45B0 		leaq	-80(%rbp), %rax	#, tmp212
 10638 0428 4839C7   		cmpq	%rax, %rdi	# tmp212, _117
 10639 042b 7408     		je	.L308	#,
 10640              	.LVL554:
 10641              	.LBB7354:
 10642              	.LBI7354:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10643              		.loc 2 236 7 is_stmt 1 view .LVU2161
 10644              	.LBB7355:
 10645              	.LBB7356:
 10646              	.LBI7356:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10647              		.loc 3 469 7 view .LVU2162
 10648              	.LBB7357:
 10649              	.LBI7357:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10650              		.loc 4 119 7 view .LVU2163
 10651              	.LBB7358:
 10652              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10653              		.loc 4 128 19 is_stmt 0 view .LVU2164
 10654 042d C5F877   		vzeroupper
 10655 0430 E8000000 		call	_ZdlPv@PLT	#
 10655      00
 10656              	.LVL555:
 10657              		.loc 4 128 19 view .LVU2165
 10658              	.LBE7358:
 10659              	.LBE7357:
 10660              	.LBE7356:
 10661              	.LBE7355:
 10662              	.LBE7354:
 10663              	.LBE7350:
 10664              	.LBE7349:
 10665              	.LBB7359:
 10666              	.LBI7359:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10667              		.loc 2 150 14 is_stmt 1 view .LVU2166
 10668              	.LBB7360:
 10669              	.LBI7360:
 10670              		.loc 5 153 7 view .LVU2167
 10671              	.LBB7361:
 10672              	.LBI7361:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10673              		.loc 4 89 7 view .LVU2168
 10674              	.L308:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10675              		.loc 4 89 7 is_stmt 0 view .LVU2169
 10676              	.LBE7361:
 10677              	.LBE7360:
 10678              	.LBE7359:
 10679              	.LBE7348:
 10680              	.LBB7362:
 10681              	.LBI7362:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10682              		.loc 2 657 7 is_stmt 1 view .LVU2170
 10683              	.LBB7363:
 10684              	.LBI7363:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10685              		.loc 2 229 7 view .LVU2171
 10686              	.LBB7364:
 10687              	.LBB7365:
 10688              	.LBI7365:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10689              		.loc 2 221 7 view .LVU2172
 10690              	.LBB7366:
 10691              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10692              		.loc 2 222 26 is_stmt 0 view .LVU2173
 10693 0435 488B7D80 		movq	-128(%rbp), %rdi	#, _118
 10694              	.LVL556:
 10695              	.LBB7367:
 10696              	.LBI7367:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10697              		.loc 2 200 7 is_stmt 1 view .LVU2174
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10698              		.loc 2 200 7 is_stmt 0 view .LVU2175
 10699              	.LBE7367:
 10700              	.LBE7366:
 10701              	.LBE7365:
 10702              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10703              		.loc 2 231 2 view .LVU2176
 10704 0439 488D4590 		leaq	-112(%rbp), %rax	#, tmp218
 10705 043d 4839C7   		cmpq	%rax, %rdi	# tmp218, _118
 10706 0440 7408     		je	.L305	#,
 10707              	.LVL557:
 10708              	.LBB7368:
 10709              	.LBI7368:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10710              		.loc 2 236 7 is_stmt 1 view .LVU2177
 10711              	.LBB7369:
 10712              	.LBB7370:
 10713              	.LBI7370:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10714              		.loc 3 469 7 view .LVU2178
 10715              	.LBB7371:
 10716              	.LBI7371:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10717              		.loc 4 119 7 view .LVU2179
 10718              	.LBB7372:
 10719              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10720              		.loc 4 128 19 is_stmt 0 view .LVU2180
 10721 0442 C5F877   		vzeroupper
 10722 0445 E8000000 		call	_ZdlPv@PLT	#
 10722      00
 10723              	.LVL558:
 10724              		.loc 4 128 19 view .LVU2181
 10725              	.LBE7372:
 10726              	.LBE7371:
 10727              	.LBE7370:
 10728              	.LBE7369:
 10729              	.LBE7368:
 10730              	.LBE7364:
 10731              	.LBE7363:
 10732              	.LBB7373:
 10733              	.LBI7373:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10734              		.loc 2 150 14 is_stmt 1 view .LVU2182
 10735              	.LBB7374:
 10736              	.LBI7374:
 10737              		.loc 5 153 7 view .LVU2183
 10738              	.LBB7375:
 10739              	.LBI7375:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10740              		.loc 4 89 7 view .LVU2184
 10741              	.L305:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10742              		.loc 4 89 7 is_stmt 0 view .LVU2185
 10743              	.LBE7375:
 10744              	.LBE7374:
 10745              	.LBE7373:
 10746              	.LBE7362:
 10747              	# /workspace/pth-linear-interp/torch/include/c10/core/Device.h:105:     TORCH_INTERNAL_ASSERT_DEBUG
 105:/workspace/pth-linear-interp/torch/include/c10/core/Device.h ****         "Device index must be -1 or non-negative, got ", (int)index_);
 10748              		.loc 23 105 5 view .LVU2186
 10749 044a 4C89FF   		movq	%r15, %rdi	# _98,
 10750 044d C5F877   		vzeroupper
 10751 0450 E8000000 		call	__cxa_free_exception@PLT	#
 10751      00
 10752              	.LVL559:
 10753              	.LBE7382:
 10754              	.LBE7386:
 10755              	.LBE7391:
 10756              	.LBE7396:
 10757              	.LBE7401:
 10758              	.LBE7406:
 10759              	.LBE7417:
 10760              	.LBE7441:
 10761              	# /workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h:192:   C10_NODISCARD TensorOp
 192:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device(c10::optional<Device>(c10::in_place, std::forward<Args>(args)...));
 10762              		.loc 22 192 31 view .LVU2187
 10763 0455 E8000000 		call	_ZSt9terminatev@PLT	#
 10763      00
 10764              	.LVL560:
 10765              	.L310:
 192:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device(c10::optional<Device>(c10::in_place, std::forward<Args>(args)...));
 10766              		.loc 22 192 31 view .LVU2188
 10767 045a EBEE     		jmp	.L305	#
 10768              	.LVL561:
 10769              	.L323:
 192:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device(c10::optional<Device>(c10::in_place, std::forward<Args>(args)...));
 10770              		.loc 22 192 31 view .LVU2189
 10771 045c F30F1EFA 		endbr64	
 10772 0460 EB06     		jmp	.L303	#
 10773              	.LVL562:
 10774              	.L322:
 192:/workspace/pth-linear-interp/torch/include/c10/core/TensorOptions.h ****     return device(c10::optional<Device>(c10::in_place, std::forward<Args>(args)...));
 10775              		.loc 22 192 31 view .LVU2190
 10776 0462 F30F1EFA 		endbr64	
 10777 0466 EBE2     		jmp	.L305	#
 10778              	.LVL563:
 10779              	.L303:
 10780              	.LBB7442:
 10781              	.LBB7418:
 10782              	.LBB7407:
 10783              	.LBB7402:
 10784              	.LBB7397:
 10785              	.LBB7392:
 10786              	.LBB7387:
 10787              	.LBB7383:
 10788              	.LBB7376:
 10789              	.LBI7376:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10790              		.loc 2 657 7 is_stmt 1 view .LVU2191
 10791              	.LBB7377:
 10792              	.LBI7377:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10793              		.loc 2 229 7 view .LVU2192
 10794              	.LBB7378:
 10795              	.LBB7379:
 10796              	.LBI7379:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10797              		.loc 2 221 7 view .LVU2193
 10798 0468 EBCB     		jmp	.L308	#
 10799              	.LVL564:
 10800              	.L324:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10801              		.loc 2 221 7 is_stmt 0 view .LVU2194
 10802 046a F30F1EFA 		endbr64	
 10803 046e EBB0     		jmp	.L301	#
 10804              	.LVL565:
 10805              	.L318:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10806              		.loc 2 221 7 view .LVU2195
 10807 0470 F30F1EFA 		endbr64	
 10808 0474 4889C3   		movq	%rax, %rbx	# tmp315, tmp154
 10809 0477 EB12     		jmp	.L291	#
 10810              	.LVL566:
 10811              	.L317:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10812              		.loc 2 221 7 view .LVU2196
 10813 0479 F30F1EFA 		endbr64	
 10814 047d 4889C3   		movq	%rax, %rbx	# tmp316, tmp153
 10815 0480 EB1E     		jmp	.L293	#
 10816              	.LVL567:
 10817              	.L316:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10818              		.loc 2 221 7 view .LVU2197
 10819 0482 F30F1EFA 		endbr64	
 10820 0486 4889C3   		movq	%rax, %rbx	# tmp317, tmp159
 10821 0489 EB2A     		jmp	.L295	#
 10822              	.LVL568:
 10823              	.L291:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10824              		.loc 2 221 7 view .LVU2198
 10825              	.LBE7379:
 10826              	.LBE7378:
 10827              	.LBE7377:
 10828              	.LBE7376:
 10829              	.LBE7383:
 10830              	.LBE7387:
 10831              	.LBE7392:
 10832              	.LBE7397:
 10833              	.LBE7402:
 10834              	.LBE7407:
 10835              	.LBE7418:
 10836              	.LBE7442:
 10837              	.LBB7443:
 10838              	.LBB7264:
 10839              	.LBB7261:
 10840              	.LBB7258:
 10841              	.LBB7255:
 10842              	.LBB7225:
 10843              	.LBI7225:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10844              		.loc 2 657 7 is_stmt 1 view .LVU2199
 10845              	.LBB7226:
 10846              	.LBI7226:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10847              		.loc 2 229 7 view .LVU2200
 10848              	.LBB7227:
 10849              	.LBB7228:
 10850              	.LBI7228:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10851              		.loc 2 221 7 view .LVU2201
 10852              	.LBB7229:
 10853              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10854              		.loc 2 222 26 is_stmt 0 view .LVU2202
 10855 048b 488B7DA0 		movq	-96(%rbp), %rdi	# MEM[(char * *)&D.445846], _67
 10856              	.LVL569:
 10857              	.LBB7230:
 10858              	.LBI7230:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10859              		.loc 2 200 7 is_stmt 1 view .LVU2203
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10860              		.loc 2 200 7 is_stmt 0 view .LVU2204
 10861              	.LBE7230:
 10862              	.LBE7229:
 10863              	.LBE7228:
 10864              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10865              		.loc 2 231 2 view .LVU2205
 10866 048f 488D45B0 		leaq	-80(%rbp), %rax	#, tmp152
 10867 0493 4839C7   		cmpq	%rax, %rdi	# tmp152, _67
 10868 0496 7408     		je	.L293	#,
 10869              	.LVL570:
 10870              	.LBB7231:
 10871              	.LBI7231:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10872              		.loc 2 236 7 is_stmt 1 view .LVU2206
 10873              	.LBB7232:
 10874              	.LBB7233:
 10875              	.LBI7233:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10876              		.loc 3 469 7 view .LVU2207
 10877              	.LBB7234:
 10878              	.LBI7234:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10879              		.loc 4 119 7 view .LVU2208
 10880              	.LBB7235:
 10881              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10882              		.loc 4 128 19 is_stmt 0 view .LVU2209
 10883 0498 C5F877   		vzeroupper
 10884 049b E8000000 		call	_ZdlPv@PLT	#
 10884      00
 10885              	.LVL571:
 10886              		.loc 4 128 19 view .LVU2210
 10887              	.LBE7235:
 10888              	.LBE7234:
 10889              	.LBE7233:
 10890              	.LBE7232:
 10891              	.LBE7231:
 10892              	.LBE7227:
 10893              	.LBE7226:
 10894              	.LBB7236:
 10895              	.LBI7236:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10896              		.loc 2 150 14 is_stmt 1 view .LVU2211
 10897              	.LBB7237:
 10898              	.LBI7237:
 10899              		.loc 5 153 7 view .LVU2212
 10900              	.LBB7238:
 10901              	.LBI7238:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10902              		.loc 4 89 7 view .LVU2213
 10903              	.L293:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10904              		.loc 4 89 7 is_stmt 0 view .LVU2214
 10905              	.LBE7238:
 10906              	.LBE7237:
 10907              	.LBE7236:
 10908              	.LBE7225:
 10909              	.LBB7239:
 10910              	.LBI7239:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 10911              		.loc 2 657 7 is_stmt 1 view .LVU2215
 10912              	.LBB7240:
 10913              	.LBI7240:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 10914              		.loc 2 229 7 view .LVU2216
 10915              	.LBB7241:
 10916              	.LBB7242:
 10917              	.LBI7242:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 10918              		.loc 2 221 7 view .LVU2217
 10919              	.LBB7243:
 10920              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 10921              		.loc 2 222 26 is_stmt 0 view .LVU2218
 10922 04a0 488B7D80 		movq	-128(%rbp), %rdi	# MEM[(char * *)&D.445845], _68
 10923              	.LVL572:
 10924              	.LBB7244:
 10925              	.LBI7244:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10926              		.loc 2 200 7 is_stmt 1 view .LVU2219
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 10927              		.loc 2 200 7 is_stmt 0 view .LVU2220
 10928              	.LBE7244:
 10929              	.LBE7243:
 10930              	.LBE7242:
 10931              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 10932              		.loc 2 231 2 view .LVU2221
 10933 04a4 488D4590 		leaq	-112(%rbp), %rax	#, tmp158
 10934 04a8 4839C7   		cmpq	%rax, %rdi	# tmp158, _68
 10935 04ab 7408     		je	.L295	#,
 10936              	.LVL573:
 10937              	.LBB7245:
 10938              	.LBI7245:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 10939              		.loc 2 236 7 is_stmt 1 view .LVU2222
 10940              	.LBB7246:
 10941              	.LBB7247:
 10942              	.LBI7247:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 10943              		.loc 3 469 7 view .LVU2223
 10944              	.LBB7248:
 10945              	.LBI7248:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 10946              		.loc 4 119 7 view .LVU2224
 10947              	.LBB7249:
 10948              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 10949              		.loc 4 128 19 is_stmt 0 view .LVU2225
 10950 04ad C5F877   		vzeroupper
 10951 04b0 E8000000 		call	_ZdlPv@PLT	#
 10951      00
 10952              	.LVL574:
 10953              		.loc 4 128 19 view .LVU2226
 10954              	.LBE7249:
 10955              	.LBE7248:
 10956              	.LBE7247:
 10957              	.LBE7246:
 10958              	.LBE7245:
 10959              	.LBE7241:
 10960              	.LBE7240:
 10961              	.LBB7250:
 10962              	.LBI7250:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 10963              		.loc 2 150 14 is_stmt 1 view .LVU2227
 10964              	.LBB7251:
 10965              	.LBI7251:
 10966              		.loc 5 153 7 view .LVU2228
 10967              	.LBB7252:
 10968              	.LBI7252:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10969              		.loc 4 89 7 view .LVU2229
 10970              	.L295:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 10971              		.loc 4 89 7 is_stmt 0 view .LVU2230
 10972              	.LBE7252:
 10973              	.LBE7251:
 10974              	.LBE7250:
 10975              	.LBE7239:
 10976              	# /workspace/pth-linear-interp/torch/include/c10/util/typeid.h:477:     TORCH_INTERNAL_ASSERT_DEBUG
 477:/workspace/pth-linear-interp/torch/include/c10/util/typeid.h ****       index < NumScalarTypes,
 10977              		.loc 24 477 5 view .LVU2231
 10978 04b5 4C89FF   		movq	%r15, %rdi	# _64,
 10979 04b8 C5F877   		vzeroupper
 10980 04bb E8000000 		call	__cxa_free_exception@PLT	#
 10980      00
 10981              	.LVL575:
 10982 04c0 4889DF   		movq	%rbx, %rdi	# tmp159,
 10983 04c3 E8000000 		call	_Unwind_Resume@PLT	#
 10983      00
 10984              	.LVL576:
 10985              	.LEHE47:
 10986              	.LBE7255:
 10987              	.LBE7258:
 10988              	.LBE7261:
 10989              	.LBE7264:
 10990              	.LBE7443:
 10991              		.cfi_endproc
 10992              	.LFE8150:
 10993              		.section	.gcc_except_table._ZNK2at24DeprecatedTypeProperties7optionsEs,"aG",@progbits,_ZNK2at24Dep
 10994              	.LLSDA8150:
 10995 0000 FF       		.byte	0xff
 10996 0001 FF       		.byte	0xff
 10997 0002 01       		.byte	0x1
 10998 0003 40       		.uleb128 .LLSDACSE8150-.LLSDACSB8150
 10999              	.LLSDACSB8150:
 11000 0004 47       		.uleb128 .LEHB37-.LFB8150
 11001 0005 05       		.uleb128 .LEHE37-.LEHB37
 11002 0006 00       		.uleb128 0
 11003 0007 00       		.uleb128 0
 11004 0008 BE03     		.uleb128 .LEHB38-.LFB8150
 11005 000a 05       		.uleb128 .LEHE38-.LEHB38
 11006 000b 9A08     		.uleb128 .L319-.LFB8150
 11007 000d 00       		.uleb128 0
 11008 000e DE03     		.uleb128 .LEHB39-.LFB8150
 11009 0010 05       		.uleb128 .LEHE39-.LEHB39
 11010 0011 9408     		.uleb128 .L320-.LFB8150
 11011 0013 00       		.uleb128 0
 11012 0014 A704     		.uleb128 .LEHB40-.LFB8150
 11013 0016 05       		.uleb128 .LEHE40-.LEHB40
 11014 0017 8E08     		.uleb128 .L321-.LFB8150
 11015 0019 00       		.uleb128 0
 11016 001a A705     		.uleb128 .LEHB41-.LFB8150
 11017 001c 05       		.uleb128 .LEHE41-.LEHB41
 11018 001d E208     		.uleb128 .L322-.LFB8150
 11019 001f 00       		.uleb128 0
 11020 0020 C705     		.uleb128 .LEHB42-.LFB8150
 11021 0022 05       		.uleb128 .LEHE42-.LEHB42
 11022 0023 DC08     		.uleb128 .L323-.LFB8150
 11023 0025 00       		.uleb128 0
 11024 0026 9006     		.uleb128 .LEHB43-.LFB8150
 11025 0028 05       		.uleb128 .LEHE43-.LEHB43
 11026 0029 EA08     		.uleb128 .L324-.LFB8150
 11027 002b 00       		.uleb128 0
 11028 002c E206     		.uleb128 .LEHB44-.LFB8150
 11029 002e 05       		.uleb128 .LEHE44-.LEHB44
 11030 002f 8209     		.uleb128 .L316-.LFB8150
 11031 0031 00       		.uleb128 0
 11032 0032 8207     		.uleb128 .LEHB45-.LFB8150
 11033 0034 05       		.uleb128 .LEHE45-.LEHB45
 11034 0035 F908     		.uleb128 .L317-.LFB8150
 11035 0037 00       		.uleb128 0
 11036 0038 CB07     		.uleb128 .LEHB46-.LFB8150
 11037 003a 05       		.uleb128 .LEHE46-.LEHB46
 11038 003b F008     		.uleb128 .L318-.LFB8150
 11039 003d 00       		.uleb128 0
 11040 003e 8908     		.uleb128 .LEHB47-.LFB8150
 11041 0040 BF01     		.uleb128 .LEHE47-.LEHB47
 11042 0042 00       		.uleb128 0
 11043 0043 00       		.uleb128 0
 11044              	.LLSDACSE8150:
 11045              		.section	.text._ZNK2at24DeprecatedTypeProperties7optionsEs,"axG",@progbits,_ZNK2at24DeprecatedType
 11047              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKlS3_EE4callB5cxx11ERKS3_S5_S8_,"axG",@progbits,_
 11048              		.p2align 4
 11049              		.weak	_ZN3c106detail12_str_wrapperIJPKcRKlS3_EE4callB5cxx11ERKS3_S5_S8_
 11051              	_ZN3c106detail12_str_wrapperIJPKcRKlS3_EE4callB5cxx11ERKS3_S5_S8_:
 11052              	.LVL577:
 11053              	.LFB12649:
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 11054              		.loc 14 50 22 is_stmt 1 view -0
 11055              		.cfi_startproc
 11056              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 11057              		.cfi_lsda 0x1b,.LLSDA12649
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 11058              		.loc 14 50 22 is_stmt 0 view .LVU2233
 11059 0000 F30F1EFA 		endbr64	
 11060 0004 55       		pushq	%rbp	#
 11061              		.cfi_def_cfa_offset 16
 11062              		.cfi_offset 6, -16
 11063 0005 4889E5   		movq	%rsp, %rbp	#,
 11064              		.cfi_def_cfa_register 6
 11065 0008 4157     		pushq	%r15	#
 11066 000a 4156     		pushq	%r14	#
 11067 000c 4155     		pushq	%r13	#
 11068 000e 4154     		pushq	%r12	#
 11069              		.cfi_offset 15, -24
 11070              		.cfi_offset 14, -32
 11071              		.cfi_offset 13, -40
 11072              		.cfi_offset 12, -48
 11073 0010 4989FC   		movq	%rdi, %r12	# tmp220, <retval>
 11074 0013 53       		pushq	%rbx	#
 11075              		.cfi_offset 3, -56
 11076 0014 4889F3   		movq	%rsi, %rbx	# tmp221, args#0
 11077 0017 4883E4E0 		andq	$-32, %rsp	#,
 11078 001b 4881ECA0 		subq	$416, %rsp	#,
 11078      010000
 11079              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 11080              		.loc 14 50 22 view .LVU2234
 11081 0022 48895424 		movq	%rdx, 24(%rsp)	# tmp222, %sfp
 11081      18
 11082              	.LBB7620:
 11083              	.LBB7621:
 11084              	.LBB7622:
 11085              	.LBB7623:
 11086              	.LBB7624:
 11087              	.LBB7625:
 11088              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 11089              		.loc 15 462 59 view .LVU2235
 11090 0027 4C8DB424 		leaq	144(%rsp), %r14	#, tmp216
 11090      90000000 
 11091 002f 4C8D6C24 		leaq	32(%rsp), %r13	#, tmp211
 11091      20
 11092              	.LBE7625:
 11093              	.LBE7624:
 11094              	.LBE7623:
 11095              	.LBE7622:
 11096              	.LBE7621:
 11097              	.LBE7620:
 11098              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 11099              		.loc 14 50 22 view .LVU2236
 11100 0034 48894C24 		movq	%rcx, 16(%rsp)	# tmp223, %sfp
 11100      10
 11101              	.LBB7709:
 11102              	.LBB7706:
 11103              	.LBB7703:
 11104              	.LBB7638:
 11105              	.LBB7632:
 11106              	.LBB7626:
 11107              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 11108              		.loc 15 462 59 view .LVU2237
 11109 0039 4C89F7   		movq	%r14, %rdi	# tmp216,
 11110              	.LVL578:
 11111              		.loc 15 462 59 view .LVU2238
 11112              	.LBE7626:
 11113              	.LBE7632:
 11114              	.LBE7638:
 11115              	.LBE7703:
 11116              	.LBE7706:
 11117              	.LBE7709:
 11118              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 11119              		.loc 14 50 22 view .LVU2239
 11120 003c 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp230
 11120      25280000 
 11120      00
 11121 0045 48898424 		movq	%rax, 408(%rsp)	# tmp230, D.446582
 11121      98010000 
 11122 004d 31C0     		xorl	%eax, %eax	# tmp230
 11123              	.LVL579:
 11124              	.LBB7710:
 11125              	.LBI7620:
 583:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 11126              		.loc 12 583 7 is_stmt 1 view .LVU2240
 11127              	.LBB7707:
 11128              	.LBB7704:
 11129              	.LBB7639:
 11130              	.LBI7623:
 460:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 11131              		.loc 15 460 7 view .LVU2241
 11132              	.LBB7633:
 11133              	.LBB7627:
 11134              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 11135              		.loc 15 462 59 is_stmt 0 view .LVU2242
 11136 004f E8000000 		call	_ZNSt8ios_baseC2Ev@PLT	#
 11136      00
 11137              	.LVL580:
 11138              		.loc 15 462 59 view .LVU2243
 11139 0054 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp232
 11139      000000
 11140 005b C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp137
 11141              	.LBE7627:
 11142              	.LBE7633:
 11143              	.LBE7639:
 11144              	.LBB7640:
 11145              	.LBB7641:
 11146              	.LBB7642:
 11147              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 11148              		.loc 16 391 9 view .LVU2244
 11149 005f 31F6     		xorl	%esi, %esi	#
 11150              	.LBE7642:
 11151              	.LBE7641:
 11152              	.LBE7640:
 11153              	.LBB7649:
 11154              	.LBB7634:
 11155              	.LBB7628:
 11156              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 11157              		.loc 15 462 59 view .LVU2245
 11158 0061 48898424 		movq	%rax, 144(%rsp)	# tmp232, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 11158      90000000 
 11159 0069 31C0     		xorl	%eax, %eax	#
 11160 006b C4E37D39 		vextracti128	$0x1, %ymm0, 392(%rsp)	# tmp137, MEM[(void *)&ss + 344B]
 11160      84248801 
 11160      000001
 11161              	.LVL581:
 11162              		.loc 15 462 59 view .LVU2246
 11163              	.LBE7628:
 11164              	.LBE7634:
 11165              	.LBE7649:
 11166              	.LBB7650:
 11167              	.LBI7640:
 390:/usr/include/c++/9/ostream ****       { this->init(0); }
 11168              		.loc 16 390 7 is_stmt 1 view .LVU2247
 11169              	.LBE7650:
 11170              	.LBB7651:
 11171              	.LBB7635:
 11172              	.LBB7629:
 11173              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 11174              		.loc 15 462 59 is_stmt 0 view .LVU2248
 11175 0076 66898424 		movw	%ax, 368(%rsp)	#, MEM[(void *)&ss + 336B]
 11175      70010000 
 11176              	.LBE7629:
 11177              	.LBE7635:
 11178              	.LBE7651:
 11179              	.LBB7652:
 11180              	.LBB7646:
 11181              	.LBB7643:
 11182              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 11183              		.loc 16 391 7 view .LVU2249
 11184 007e 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 11184      000000
 11185              	.LBE7643:
 11186              	.LBE7646:
 11187              	.LBE7652:
 11188              	.LBB7653:
 11189              	.LBB7636:
 11190              	.LBB7630:
 11191              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 11192              		.loc 15 462 59 view .LVU2250
 11193 0085 C5F81184 		vmovups	%xmm0, 376(%rsp)	# tmp137, MEM[(void *)&ss + 344B]
 11193      24780100 
 11193      00
 11194              	.LBE7630:
 11195              	.LBE7636:
 11196              	.LBE7653:
 11197              	.LBB7654:
 11198              	.LBB7647:
 11199              	.LBB7644:
 11200              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 11201              		.loc 16 391 7 view .LVU2251
 11202 008e 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_19 + -24B], _22
 11203 0092 48894424 		movq	%rax, 32(%rsp)	# tmp233, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 11203      20
 11204 0097 488B0500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const v
 11204      000000
 11205              	.LBE7644:
 11206              	.LBE7647:
 11207              	.LBE7654:
 11208              	.LBB7655:
 11209              	.LBB7637:
 11210              	.LBB7631:
 11211              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 11212              		.loc 15 462 59 view .LVU2252
 11213 009e 48C78424 		movq	$0, 360(%rsp)	#, MEM[(struct basic_ios *)&ss + 112B]._M_tie
 11213      68010000 
 11213      00000000 
 11214              	.LBE7631:
 11215              	.LBE7637:
 11216              	.LBE7655:
 11217              	.LBB7656:
 11218              	.LBB7648:
 11219              	.LBB7645:
 11220              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 11221              		.loc 16 391 7 view .LVU2253
 11222 00aa 4C01EF   		addq	%r13, %rdi	# tmp211, _22
 11223 00ad 488907   		movq	%rax, (%rdi)	# tmp236, *_22.D.34155._vptr.ios_base
 11224              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 11225              		.loc 16 391 9 view .LVU2254
 11226 00b0 C5F877   		vzeroupper
 11227              	.LEHB48:
 11228 00b3 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 11228      00
 11229              	.LVL582:
 11230              	.LEHE48:
 391:/usr/include/c++/9/ostream **** 
 11231              		.loc 16 391 9 view .LVU2255
 11232              	.LBE7645:
 11233              	.LBE7648:
 11234              	.LBE7656:
 11235              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 11236              		.loc 12 584 53 view .LVU2256
 11237 00b8 C5FA7E0D 		vmovq	.LC1(%rip), %xmm1	#, tmp238
 11237      00000000 
 11238 00c0 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp237
 11238      000000
 11239              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 11240              		.loc 12 585 9 view .LVU2257
 11241 00c7 4C8D7C24 		leaq	40(%rsp), %r15	#, tmp213
 11241      28
 11242              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 11243              		.loc 12 584 53 view .LVU2258
 11244 00cc 48898424 		movq	%rax, 144(%rsp)	# tmp237, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 11244      90000000 
 11245              	.LVL583:
 11246              	.LBB7657:
 11247              	.LBI7657:
 111:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 11248              		.loc 12 111 7 is_stmt 1 view .LVU2259
 11249              	.LBB7658:
 11250              	.LBB7659:
 11251              	.LBB7660:
 11252              	.LBI7660:
 470:/usr/include/c++/9/streambuf ****       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
 11253              		.loc 13 470 7 view .LVU2260
 11254              	.LBE7660:
 11255              	.LBE7659:
 11256              	.LBE7658:
 11257              	.LBE7657:
 11258              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 11259              		.loc 12 584 53 is_stmt 0 view .LVU2261
 11260 00d4 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp239
 11260      000000
 11261 00db C4E3F122 		vpinsrq	$1, %rax, %xmm1, %xmm0	# tmp239, tmp238, tmp143
 11261      C001
 11262              	.LBB7696:
 11263              	.LBB7693:
 11264              	.LBB7690:
 11265              	.LBB7665:
 11266              	.LBB7661:
 11267              	.LBB7662:
 11268              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 11269              		.loc 13 473 29 view .LVU2262
 11270 00e1 488D4424 		leaq	96(%rsp), %rax	#, tmp218
 11270      60
 11271 00e6 4889C7   		movq	%rax, %rdi	# tmp218,
 11272              	.LBE7662:
 11273              	.LBE7661:
 11274              	.LBE7665:
 11275              	.LBE7690:
 11276              	.LBE7693:
 11277              	.LBE7696:
 11278              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 11279              		.loc 12 584 53 view .LVU2263
 11280 00e9 C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp143, MEM[(int (*) () * *)&ss]
 11280      2420
 11281              	.LBB7697:
 11282              	.LBB7694:
 11283              	.LBB7691:
 11284              	.LBB7666:
 11285              	.LBB7664:
 11286              	.LBB7663:
 11287              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 11288              		.loc 13 473 29 view .LVU2264
 11289 00ef C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp145
 11290 00f3 48890424 		movq	%rax, (%rsp)	# tmp218, %sfp
 11291 00f7 C5F82944 		vmovaps	%xmm0, 48(%rsp)	# tmp145, MEM[(char_type * *)&ss + 16B]
 11291      2430
 11292 00fd C5F82944 		vmovaps	%xmm0, 64(%rsp)	# tmp145, MEM[(char_type * *)&ss + 32B]
 11292      2440
 11293 0103 C5F82944 		vmovaps	%xmm0, 80(%rsp)	# tmp145, MEM[(char_type * *)&ss + 48B]
 11293      2450
 11294 0109 E8000000 		call	_ZNSt6localeC1Ev@PLT	#
 11294      00
 11295              	.LVL584:
 11296              		.loc 13 473 29 view .LVU2265
 11297              	.LBE7663:
 11298              	.LBE7664:
 11299              	.LBE7666:
 11300              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 11301              		.loc 12 112 56 view .LVU2266
 11302 010e 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp241
 11302      000000
 11303              	.LBE7691:
 11304              	.LBE7694:
 11305              	.LBE7697:
 11306              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 11307              		.loc 12 585 9 view .LVU2267
 11308 0115 4C89FE   		movq	%r15, %rsi	# tmp213,
 11309 0118 4C89F7   		movq	%r14, %rdi	# tmp216,
 11310              	.LBB7698:
 11311              	.LBB7695:
 11312              	.LBB7692:
 11313              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 11314              		.loc 12 112 56 view .LVU2268
 11315 011b 48894424 		movq	%rax, 40(%rsp)	# tmp241, MEM[(struct basic_stringbuf *)&ss + 8B].D.48380._vptr.basic_streambu
 11315      28
 11316              	.LBB7667:
 11317              	.LBB7668:
 11318              	.LBB7669:
 11319              	.LBB7670:
 11320              	.LBB7671:
 11321              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 11322              		.loc 2 160 46 view .LVU2269
 11323 0120 488D8424 		leaq	128(%rsp), %rax	#, tmp215
 11323      80000000 
 11324              	.LBE7671:
 11325              	.LBE7670:
 11326              	.LBE7669:
 11327              	.LBE7668:
 11328              	.LBE7667:
 11329              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 11330              		.loc 12 112 56 view .LVU2270
 11331 0128 C7442468 		movl	$16, 104(%rsp)	#, MEM[(struct basic_stringbuf *)&ss + 8B]._M_mode
 11331      10000000 
 11332              	.LVL585:
 11333              	.LBB7689:
 11334              	.LBI7667:
 431:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 11335              		.loc 2 431 7 is_stmt 1 view .LVU2271
 11336              	.LBB7688:
 11337              	.LBB7677:
 11338              	.LBI7677:
 138:/usr/include/c++/9/bits/allocator.h **** 
 11339              		.loc 5 138 7 view .LVU2272
 11340              	.LBB7678:
 11341              	.LBI7678:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 11342              		.loc 4 80 7 view .LVU2273
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 11343              		.loc 4 80 7 is_stmt 0 view .LVU2274
 11344              	.LBE7678:
 11345              	.LBE7677:
 11346              	.LBB7679:
 11347              	.LBI7679:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 11348              		.loc 2 190 7 is_stmt 1 view .LVU2275
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 11349              		.loc 2 190 7 is_stmt 0 view .LVU2276
 11350              	.LBE7679:
 11351              	.LBB7680:
 11352              	.LBI7669:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 11353              		.loc 2 159 2 is_stmt 1 view .LVU2277
 11354              	.LBB7676:
 11355              	.LBB7675:
 11356              	.LBB7672:
 11357              	.LBI7672:
 11358              		.loc 11 99 5 view .LVU2278
 11359              		.loc 11 99 5 is_stmt 0 view .LVU2279
 11360              	.LBE7672:
 11361              	.LBB7673:
 11362              	.LBI7673:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 11363              		.loc 5 141 7 is_stmt 1 view .LVU2280
 11364              	.LBB7674:
 11365              	.LBI7674:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 11366              		.loc 4 83 7 view .LVU2281
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 11367              		.loc 4 83 7 is_stmt 0 view .LVU2282
 11368              	.LBE7674:
 11369              	.LBE7673:
 11370              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 11371              		.loc 2 160 46 view .LVU2283
 11372 0130 48894424 		movq	%rax, 8(%rsp)	# tmp215, %sfp
 11372      08
 11373 0135 48894424 		movq	%rax, 112(%rsp)	# tmp215, MEM[(struct _Alloc_hider *)&ss + 80B]._M_p
 11373      70
 11374              	.LVL586:
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 11375              		.loc 2 160 46 view .LVU2284
 11376              	.LBE7675:
 11377              	.LBE7676:
 11378              	.LBE7680:
 11379              	.LBB7681:
 11380              	.LBI7681:
 11381              		.loc 5 153 7 is_stmt 1 view .LVU2285
 11382              	.LBB7682:
 11383              	.LBI7682:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 11384              		.loc 4 89 7 view .LVU2286
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 11385              		.loc 4 89 7 is_stmt 0 view .LVU2287
 11386              	.LBE7682:
 11387              	.LBE7681:
 11388              	.LBB7683:
 11389              	.LBI7683:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 11390              		.loc 2 214 7 is_stmt 1 view .LVU2288
 11391              	.LBB7684:
 11392              	.LBI7684:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 11393              		.loc 2 182 7 view .LVU2289
 11394              	.LBB7685:
 11395              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 11396              		.loc 2 183 9 is_stmt 0 view .LVU2290
 11397 013a 48C74424 		movq	$0, 120(%rsp)	#, MEM[(size_type *)&ss + 88B]
 11397      78000000 
 11397      00
 11398              	.LVL587:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 11399              		.loc 2 183 9 view .LVU2291
 11400              	.LBE7685:
 11401              	.LBE7684:
 11402              	.LBB7686:
 11403              	.LBI7686:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 11404              		.loc 8 299 7 is_stmt 1 view .LVU2292
 11405              	.LBB7687:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 11406              		.loc 8 300 9 view .LVU2293
 11407              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 11408              		.loc 8 300 14 is_stmt 0 view .LVU2294
 11409 0143 C6842480 		movb	$0, 128(%rsp)	#, MEM[(char_type &)&ss + 96]
 11409      00000000 
 11410              	.LVL588:
 11411              	.LEHB49:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 11412              		.loc 8 300 14 view .LVU2295
 11413              	.LBE7687:
 11414              	.LBE7686:
 11415              	.LBE7683:
 11416              	.LBE7688:
 11417              	.LBE7689:
 11418              	.LBE7692:
 11419              	.LBE7695:
 11420              	.LBE7698:
 11421              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 11422              		.loc 12 585 9 view .LVU2296
 11423 014b E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 11423      00
 11424              	.LVL589:
 11425              	.LEHE49:
 585:/usr/include/c++/9/sstream **** 
 11426              		.loc 12 585 9 view .LVU2297
 11427              	.LBE7704:
 11428              	.LBE7707:
 11429              	.LBE7710:
 11430              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:52:     _str(ss, args...);
  52:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return ss.str();
 11431              		.loc 14 52 9 view .LVU2298
 11432 0150 4C8B3B   		movq	(%rbx), %r15	# *args#0_4(D), _12
 11433              	.LVL590:
 11434              	.LBB7711:
 11435              	.LBI7711:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 11436              		.loc 14 44 22 is_stmt 1 view .LVU2299
 11437              	.LBB7712:
 11438              	.LBB7713:
 11439              	.LBI7713:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 11440              		.loc 14 38 22 view .LVU2300
 11441              	.LBB7714:
 11442              	.LBI7714:
 565:/usr/include/c++/9/ostream ****     {
 11443              		.loc 16 565 5 view .LVU2301
 11444              	.LBB7715:
 11445              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 11446              		.loc 16 567 7 is_stmt 0 view .LVU2302
 11447 0153 4D85FF   		testq	%r15, %r15	# _12
 11448 0156 0F848401 		je	.L372	#,
 11448      0000
 11449              	.LVL591:
 11450              	.LBB7716:
 11451              	.LBI7716:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 11452              		.loc 8 329 7 is_stmt 1 view .LVU2303
 11453              	.LBB7717:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11454              		.loc 8 335 2 view .LVU2304
 11455              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11456              		.loc 8 335 25 is_stmt 0 view .LVU2305
 11457 015c 4C89FF   		movq	%r15, %rdi	# _12,
 11458 015f E8000000 		call	strlen@PLT	#
 11458      00
 11459              	.LVL592:
 11460              	.LBE7717:
 11461              	.LBE7716:
 11462              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 11463              		.loc 16 570 18 view .LVU2306
 11464 0164 4C89FE   		movq	%r15, %rsi	# _12,
 11465 0167 4C89EF   		movq	%r13, %rdi	# tmp211,
 11466              	.LBB7719:
 11467              	.LBB7718:
 11468              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11469              		.loc 8 335 25 view .LVU2307
 11470 016a 4889C2   		movq	%rax, %rdx	# tmp226, tmp175
 11471              	.LVL593:
 11472              	.LEHB50:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11473              		.loc 8 335 25 view .LVU2308
 11474              	.LBE7718:
 11475              	.LBE7719:
 11476              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 11477              		.loc 16 570 18 view .LVU2309
 11478 016d E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 11478      00
 11479              	.LVL594:
 11480              	.L353:
 11481              		.loc 16 570 18 view .LVU2310
 11482              	.LBE7715:
 11483              	.LBE7714:
 11484              	.LBE7713:
 11485              	.LBB7728:
 11486              	.LBI7728:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 11487              		.loc 14 44 22 is_stmt 1 view .LVU2311
 11488              	.LBB7729:
 11489              	.LBB7730:
 11490              	.LBI7730:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 11491              		.loc 14 38 22 view .LVU2312
 11492              	.LBB7731:
 11493              	.LBI7731:
 166:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 11494              		.loc 16 166 7 view .LVU2313
 11495              	.LBB7732:
 11496              	# /usr/include/c++/9/ostream:167:       { return _M_insert(__n); }
 167:/usr/include/c++/9/ostream **** 
 11497              		.loc 16 167 29 is_stmt 0 view .LVU2314
 11498 0172 488B4424 		movq	24(%rsp), %rax	# %sfp, args#1
 11498      18
 11499 0177 4C89EF   		movq	%r13, %rdi	# tmp211,
 11500 017a 488B30   		movq	(%rax), %rsi	# *args#1_5(D),
 11501 017d E8000000 		call	_ZNSo9_M_insertIlEERSoT_@PLT	#
 11501      00
 11502              	.LVL595:
 167:/usr/include/c++/9/ostream **** 
 11503              		.loc 16 167 29 view .LVU2315
 11504              	.LBE7732:
 11505              	.LBE7731:
 11506              	.LBE7730:
 11507              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 11508              		.loc 14 45 14 view .LVU2316
 11509 0182 488B4424 		movq	16(%rsp), %rax	# %sfp, args#2
 11509      10
 11510 0187 4C8B38   		movq	(%rax), %r15	# *args#2_6(D), _16
 11511              	.LVL596:
 11512              	.LBB7733:
 11513              	.LBI7733:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 11514              		.loc 14 38 22 is_stmt 1 view .LVU2317
 11515              	.LBB7734:
 11516              	.LBI7734:
 565:/usr/include/c++/9/ostream ****     {
 11517              		.loc 16 565 5 view .LVU2318
 11518              	.LBB7735:
 11519              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 11520              		.loc 16 567 7 is_stmt 0 view .LVU2319
 11521 018a 4D85FF   		testq	%r15, %r15	# _16
 11522 018d 0F842D01 		je	.L373	#,
 11522      0000
 11523              	.LVL597:
 11524              	.LBB7736:
 11525              	.LBI7736:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 11526              		.loc 8 329 7 is_stmt 1 view .LVU2320
 11527              	.LBB7737:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11528              		.loc 8 335 2 view .LVU2321
 11529              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11530              		.loc 8 335 25 is_stmt 0 view .LVU2322
 11531 0193 4C89FF   		movq	%r15, %rdi	# _16,
 11532 0196 E8000000 		call	strlen@PLT	#
 11532      00
 11533              	.LVL598:
 11534              	.LBE7737:
 11535              	.LBE7736:
 11536              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 11537              		.loc 16 570 18 view .LVU2323
 11538 019b 4C89FE   		movq	%r15, %rsi	# _16,
 11539 019e 4C89EF   		movq	%r13, %rdi	# tmp211,
 11540              	.LBB7739:
 11541              	.LBB7738:
 11542              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11543              		.loc 8 335 25 view .LVU2324
 11544 01a1 4889C2   		movq	%rax, %rdx	# tmp227, tmp185
 11545              	.LVL599:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 11546              		.loc 8 335 25 view .LVU2325
 11547              	.LBE7738:
 11548              	.LBE7739:
 11549              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 11550              		.loc 16 570 18 view .LVU2326
 11551 01a4 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 11551      00
 11552              	.LVL600:
 11553              	.LEHE50:
 11554              	.L355:
 11555              		.loc 16 570 18 view .LVU2327
 11556              	.LBE7735:
 11557              	.LBE7734:
 11558              	.LBE7733:
 11559              	.LBE7729:
 11560              	.LBE7728:
 11561              	.LBE7712:
 11562              	.LBE7711:
 11563              	.LBB7753:
 11564              	.LBI7753:
 11565              		.loc 12 677 7 is_stmt 1 view .LVU2328
 11566              	.LBB7754:
 11567              	.LBI7754:
 178:/usr/include/c++/9/sstream ****       {
 11568              		.loc 12 178 7 view .LVU2329
 11569              	.LBB7755:
 11570              	.LBB7756:
 11571              	.LBI7756:
2331:/usr/include/c++/9/bits/basic_string.h ****       { return _M_get_allocator(); }
 11572              		.loc 2 2331 7 view .LVU2330
 11573              	.LBB7757:
 11574              	.LBI7757:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 11575              		.loc 5 141 7 view .LVU2331
 11576              	.LBB7758:
 11577              	.LBI7758:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 11578              		.loc 4 83 7 view .LVU2332
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 11579              		.loc 4 83 7 is_stmt 0 view .LVU2333
 11580              	.LBE7758:
 11581              	.LBE7757:
 11582              	.LBE7756:
 11583              	.LBB7759:
 11584              	.LBI7759:
 440:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 11585              		.loc 2 440 7 is_stmt 1 view .LVU2334
 11586              	.LBB7760:
 11587              	.LBI7760:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 11588              		.loc 2 190 7 view .LVU2335
 11589              	.LBE7760:
 11590              	.LBE7759:
 11591              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 11592              		.loc 12 181 2 is_stmt 0 view .LVU2336
 11593 01a9 488B4424 		movq	80(%rsp), %rax	# MEM[(char_type * *)&ss + 48B], _50
 11593      50
 11594              	.LBB7776:
 11595              	.LBB7762:
 11596              	.LBB7761:
 11597              	# /usr/include/c++/9/bits/basic_string.h:193: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 11598              		.loc 2 193 51 view .LVU2337
 11599 01ae 498D5C24 		leaq	16(%r12), %rbx	#, _49
 11599      10
 11600              	.LVL601:
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 11601              		.loc 2 193 51 view .LVU2338
 11602              	.LBE7761:
 11603              	.LBE7762:
 11604              	.LBB7763:
 11605              	.LBI7763:
 156:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 11606              		.loc 2 156 2 is_stmt 1 view .LVU2339
 11607              	.LBB7764:
 11608              	.LBB7765:
 11609              	.LBI7765:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 11610              		.loc 5 141 7 view .LVU2340
 11611              	.LBB7766:
 11612              	.LBI7766:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 11613              		.loc 4 83 7 view .LVU2341
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 11614              		.loc 4 83 7 is_stmt 0 view .LVU2342
 11615              	.LBE7766:
 11616              	.LBE7765:
 11617              	.LBE7764:
 11618              	.LBE7763:
 11619              	.LBB7768:
 11620              	.LBB7769:
 11621              	.LBB7770:
 11622              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 11623              		.loc 2 183 9 view .LVU2343
 11624 01b3 49C74424 		movq	$0, 8(%r12)	#, MEM[(size_type *)_8(D) + 8B]
 11624      08000000 
 11624      00
 11625              	.LBE7770:
 11626              	.LBE7769:
 11627              	.LBE7768:
 11628              	.LBB7774:
 11629              	.LBB7767:
 11630              	# /usr/include/c++/9/bits/basic_string.h:157: 	: allocator_type(__a), _M_p(__dat) { }
 157:/usr/include/c++/9/bits/basic_string.h **** 
 11631              		.loc 2 157 35 view .LVU2344
 11632 01bc 49891C24 		movq	%rbx, (%r12)	# _49, MEM[(struct _Alloc_hider *)_8(D)]._M_p
 11633              	.LVL602:
 157:/usr/include/c++/9/bits/basic_string.h **** 
 11634              		.loc 2 157 35 view .LVU2345
 11635              	.LBE7767:
 11636              	.LBE7774:
 11637              	.LBB7775:
 11638              	.LBI7768:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 11639              		.loc 2 214 7 is_stmt 1 view .LVU2346
 11640              	.LBB7771:
 11641              	.LBI7769:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 11642              		.loc 2 182 7 view .LVU2347
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 11643              		.loc 2 182 7 is_stmt 0 view .LVU2348
 11644              	.LBE7771:
 11645              	.LBB7772:
 11646              	.LBI7772:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 11647              		.loc 8 299 7 is_stmt 1 view .LVU2349
 11648              	.LBB7773:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 11649              		.loc 8 300 9 view .LVU2350
 11650              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 11651              		.loc 8 300 14 is_stmt 0 view .LVU2351
 11652 01c0 41C64424 		movb	$0, 16(%r12)	#, MEM[(char_type &)_8(D) + 16]
 11652      1000
 11653              	.LVL603:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 11654              		.loc 8 300 14 view .LVU2352
 11655              	.LBE7773:
 11656              	.LBE7772:
 11657              	.LBE7775:
 11658              	.LBE7776:
 11659              	.LBB7777:
 11660              	.LBI7777:
 11661              		.loc 5 153 7 is_stmt 1 view .LVU2353
 11662              	.LBB7778:
 11663              	.LBI7778:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 11664              		.loc 4 89 7 view .LVU2354
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 11665              		.loc 4 89 7 is_stmt 0 view .LVU2355
 11666              	.LBE7778:
 11667              	.LBE7777:
 11668              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 11669              		.loc 12 181 2 view .LVU2356
 11670 01c6 4885C0   		testq	%rax, %rax	# _50
 11671 01c9 0F843101 		je	.L356	#,
 11671      0000
 11672              	.LVL604:
 11673              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 11674              		.loc 12 184 23 view .LVU2357
 11675 01cf 4C8B4424 		movq	64(%rsp), %r8	# MEM[(char_type * *)&ss + 32B], _51
 11675      40
 11676              	.LVL605:
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 11677              		.loc 12 184 23 view .LVU2358
 11678 01d4 488B4C24 		movq	72(%rsp), %rcx	# MEM[(char_type * *)&ss + 40B], pretmp_76
 11678      48
 11679              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 11680              		.loc 12 184 6 view .LVU2359
 11681 01d9 4C39C0   		cmpq	%r8, %rax	# _51, _50
 11682 01dc 0F87BE00 		ja	.L374	#,
 11682      0000
 11683              	.LVL606:
 11684              	.LBB7779:
 11685              	.LBI7779:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 11686              		.loc 2 1470 9 is_stmt 1 view .LVU2360
 11687              	.LBB7780:
 11688              	.LBI7780:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 11689              		.loc 2 842 7 view .LVU2361
 11690              	.LBB7781:
 11691              	.LBI7781:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11692              		.loc 17 806 7 view .LVU2362
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11693              		.loc 17 806 7 is_stmt 0 view .LVU2363
 11694              	.LBE7781:
 11695              	.LBE7780:
 11696              	.LBB7782:
 11697              	.LBI7782:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 11698              		.loc 17 811 9 is_stmt 1 view .LVU2364
 11699              	.LBB7783:
 11700              	.LBI7783:
 11701              		.loc 17 871 7 view .LVU2365
 11702              		.loc 17 871 7 is_stmt 0 view .LVU2366
 11703              	.LBE7783:
 11704              	.LBE7782:
 11705              	.LBB7784:
 11706              	.LBI7784:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 11707              		.loc 2 826 7 is_stmt 1 view .LVU2367
 11708              	.LBB7785:
 11709              	.LBI7785:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11710              		.loc 17 806 7 view .LVU2368
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11711              		.loc 17 806 7 is_stmt 0 view .LVU2369
 11712              	.LBE7785:
 11713              	.LBE7784:
 11714              	.LBB7786:
 11715              	.LBI7786:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 11716              		.loc 17 811 9 is_stmt 1 view .LVU2370
 11717              	.LBB7787:
 11718              	.LBI7787:
 11719              		.loc 17 871 7 view .LVU2371
 11720              		.loc 17 871 7 is_stmt 0 view .LVU2372
 11721              	.LBE7787:
 11722              	.LBE7786:
 11723              	.LBB7788:
 11724              	.LBI7788:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 11725              		.loc 2 2123 7 is_stmt 1 view .LVU2373
 11726              	.LBB7789:
 11727              	.LBB7790:
 11728              	.LBI7790:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 11729              		.loc 2 826 7 view .LVU2374
 11730              	.LBB7791:
 11731              	.LBI7791:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11732              		.loc 17 806 7 view .LVU2375
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11733              		.loc 17 806 7 is_stmt 0 view .LVU2376
 11734              	.LBE7791:
 11735              	.LBE7790:
 11736              	.LBB7792:
 11737              	.LBI7792:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 11738              		.loc 2 1936 7 is_stmt 1 view .LVU2377
 11739              	.LBB7793:
 11740              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 11741              		.loc 2 1941 38 is_stmt 0 view .LVU2378
 11742 01e2 4929C8   		subq	%rcx, %r8	# pretmp_76,
 11743              	.LVL607:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 11744              		.loc 2 1941 38 view .LVU2379
 11745 01e5 31D2     		xorl	%edx, %edx	#
 11746 01e7 31F6     		xorl	%esi, %esi	#
 11747 01e9 4C89E7   		movq	%r12, %rdi	# <retval>,
 11748              	.LEHB51:
 11749 01ec E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 11749      00
 11750              	.LVL608:
 11751              	.L358:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 11752              		.loc 2 1941 38 view .LVU2380
 11753              	.LBE7793:
 11754              	.LBE7792:
 11755              	.LBE7789:
 11756              	.LBE7788:
 11757              	.LBE7779:
 11758              	.LBE7755:
 11759              	.LBE7754:
 11760              	.LBE7753:
 11761              	.LBB7831:
 11762              	.LBI7831:
 629:/usr/include/c++/9/sstream ****       { }
 11763              		.loc 12 629 7 is_stmt 1 view .LVU2381
 11764              	.LBB7832:
 11765              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 11766              		.loc 12 630 9 is_stmt 0 view .LVU2382
 11767 01f1 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp255
 11767      000000
 11768 01f8 C5FA7E15 		vmovq	.LC1(%rip), %xmm2	#, tmp256
 11768      00000000 
 11769              	.LBB7833:
 11770              	.LBB7834:
 11771              	.LBB7835:
 11772              	.LBB7836:
 11773              	.LBB7837:
 11774              	.LBB7838:
 11775              	.LBB7839:
 11776              	.LBB7840:
 11777              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 11778              		.loc 2 222 26 view .LVU2383
 11779 0200 488B7C24 		movq	112(%rsp), %rdi	# MEM[(char * *)&ss + 80B], _75
 11779      70
 11780              	.LBE7840:
 11781              	.LBE7839:
 11782              	.LBE7838:
 11783              	.LBE7837:
 11784              	.LBE7836:
 11785              	.LBE7835:
 11786              	.LBE7834:
 11787              	.LBE7833:
 11788              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 11789              		.loc 12 630 9 view .LVU2384
 11790 0205 48898424 		movq	%rax, 144(%rsp)	# tmp255, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 11790      90000000 
 11791              	.LVL609:
 11792              	.LBB7859:
 11793              	.LBI7833:
  65:/usr/include/c++/9/sstream ****     {
 11794              		.loc 12 65 11 is_stmt 1 view .LVU2385
 11795              	.LBE7859:
 11796              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 11797              		.loc 12 630 9 is_stmt 0 view .LVU2386
 11798 020d 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp257
 11798      000000
 11799 0214 C4E3E922 		vpinsrq	$1, %rax, %xmm2, %xmm0	# tmp257, tmp256, tmp193
 11799      C001
 11800 021a C5F82944 		vmovaps	%xmm0, 32(%rsp)	# tmp193, MEM[(int (*) () * *)&ss]
 11800      2420
 11801              	.LVL610:
 11802              	.LBB7860:
 11803              	.LBB7858:
 11804              	.LBB7855:
 11805              	.LBI7835:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 11806              		.loc 2 657 7 is_stmt 1 view .LVU2387
 11807              	.LBB7854:
 11808              	.LBB7850:
 11809              	.LBI7837:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 11810              		.loc 2 229 7 view .LVU2388
 11811              	.LBB7849:
 11812              	.LBB7843:
 11813              	.LBI7839:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 11814              		.loc 2 221 7 view .LVU2389
 11815              	.LBB7842:
 11816              	.LBB7841:
 11817              	.LBI7841:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 11818              		.loc 2 200 7 view .LVU2390
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 11819              		.loc 2 200 7 is_stmt 0 view .LVU2391
 11820              	.LBE7841:
 11821              	.LBE7842:
 11822              	.LBE7843:
 11823              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 11824              		.loc 2 231 2 view .LVU2392
 11825 0220 483B7C24 		cmpq	8(%rsp), %rdi	# %sfp, _75
 11825      08
 11826 0225 7405     		je	.L360	#,
 11827              	.LVL611:
 11828              	.LBB7844:
 11829              	.LBI7844:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 11830              		.loc 2 236 7 is_stmt 1 view .LVU2393
 11831              	.LBB7845:
 11832              	.LBB7846:
 11833              	.LBI7846:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 11834              		.loc 3 469 7 view .LVU2394
 11835              	.LBB7847:
 11836              	.LBI7847:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 11837              		.loc 4 119 7 view .LVU2395
 11838              	.LBB7848:
 11839              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 11840              		.loc 4 128 19 is_stmt 0 view .LVU2396
 11841 0227 E8000000 		call	_ZdlPv@PLT	#
 11841      00
 11842              	.LVL612:
 11843              	.L360:
 11844              		.loc 4 128 19 view .LVU2397
 11845              	.LBE7848:
 11846              	.LBE7847:
 11847              	.LBE7846:
 11848              	.LBE7845:
 11849              	.LBE7844:
 11850              	.LBE7849:
 11851              	.LBE7850:
 11852              	.LBB7851:
 11853              	.LBI7851:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 11854              		.loc 2 150 14 is_stmt 1 view .LVU2398
 11855              	.LBB7852:
 11856              	.LBI7852:
 11857              		.loc 5 153 7 view .LVU2399
 11858              	.LBB7853:
 11859              	.LBI7853:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 11860              		.loc 4 89 7 view .LVU2400
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 11861              		.loc 4 89 7 is_stmt 0 view .LVU2401
 11862              	.LBE7853:
 11863              	.LBE7852:
 11864              	.LBE7851:
 11865              	.LBE7854:
 11866              	.LBE7855:
 11867              	.LBB7856:
 11868              	.LBI7856:
 204:/usr/include/c++/9/streambuf ****       { }
 11869              		.loc 13 204 7 is_stmt 1 view .LVU2402
 11870              	.LBB7857:
 11871              	# /usr/include/c++/9/streambuf:205:       { }
 205:/usr/include/c++/9/streambuf **** 
 11872              		.loc 13 205 9 is_stmt 0 view .LVU2403
 11873 022c 488B3C24 		movq	(%rsp), %rdi	# %sfp,
 11874 0230 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp259
 11874      000000
 11875 0237 48894424 		movq	%rax, 40(%rsp)	# tmp259, MEM[(struct basic_streambuf *)&ss + 8B]._vptr.basic_streambuf
 11875      28
 11876 023c E8000000 		call	_ZNSt6localeD1Ev@PLT	#
 11876      00
 11877              	.LVL613:
 205:/usr/include/c++/9/streambuf **** 
 11878              		.loc 13 205 9 view .LVU2404
 11879              	.LBE7857:
 11880              	.LBE7856:
 11881              	.LBE7858:
 11882              	.LBE7860:
 11883              	.LBB7861:
 11884              	.LBI7861:
  93:/usr/include/c++/9/ostream **** 
 11885              		.loc 16 93 7 is_stmt 1 view .LVU2405
 11886              	.LBB7862:
 11887              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 11888              		.loc 16 93 26 is_stmt 0 view .LVU2406
 11889 0241 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 11889      000000
 11890 0248 488B1D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rbx	# MEM[(const v
 11890      000000
 11891              	.LBE7862:
 11892              	.LBE7861:
 11893              	.LBB7864:
 11894              	.LBB7865:
 11895              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 11896              		.loc 15 282 22 view .LVU2407
 11897 024f 4C89F7   		movq	%r14, %rdi	# tmp216,
 11898              	.LBE7865:
 11899              	.LBE7864:
 11900              	.LBB7867:
 11901              	.LBB7863:
 11902              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 11903              		.loc 16 93 26 view .LVU2408
 11904 0252 48894424 		movq	%rax, 32(%rsp)	# tmp260, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 11904      20
 11905 0257 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_19 + -24B], MEM[(long int *)_19 + -24B]
 11906 025b 48895C04 		movq	%rbx, 32(%rsp,%rax)	# tmp262, _72->D.34155._vptr.ios_base
 11906      20
 11907              	.LVL614:
  93:/usr/include/c++/9/ostream **** 
 11908              		.loc 16 93 26 view .LVU2409
 11909              	.LBE7863:
 11910              	.LBE7867:
 11911              	.LBB7868:
 11912              	.LBI7864:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 11913              		.loc 15 282 7 is_stmt 1 view .LVU2410
 11914              	.LBB7866:
 11915              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 11916              		.loc 15 282 22 is_stmt 0 view .LVU2411
 11917 0260 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp263
 11917      000000
 11918 0267 48898424 		movq	%rax, 144(%rsp)	# tmp263, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 11918      90000000 
 11919 026f E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 11919      00
 11920              	.LVL615:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 11921              		.loc 15 282 22 view .LVU2412
 11922              	.LBE7866:
 11923              	.LBE7868:
 11924              	.LBE7832:
 11925              	.LBE7831:
 11926              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 11927              		.loc 14 54 3 view .LVU2413
 11928 0274 488B8424 		movq	408(%rsp), %rax	# D.446582, tmp231
 11928      98010000 
 11929 027c 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp231
 11929      25280000 
 11929      00
 11930 0285 0F858700 		jne	.L375	#,
 11930      0000
 11931 028b 488D65D8 		leaq	-40(%rbp), %rsp	#,
 11932              	.LVL616:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 11933              		.loc 14 54 3 view .LVU2414
 11934 028f 4C89E0   		movq	%r12, %rax	# <retval>,
 11935 0292 5B       		popq	%rbx	#
 11936 0293 415C     		popq	%r12	#
 11937              	.LVL617:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 11938              		.loc 14 54 3 view .LVU2415
 11939 0295 415D     		popq	%r13	#
 11940              	.LVL618:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 11941              		.loc 14 54 3 view .LVU2416
 11942 0297 415E     		popq	%r14	#
 11943              	.LVL619:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 11944              		.loc 14 54 3 view .LVU2417
 11945 0299 415F     		popq	%r15	#
 11946 029b 5D       		popq	%rbp	#
 11947              		.cfi_remember_state
 11948              		.cfi_def_cfa 7, 8
 11949              	.LVL620:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 11950              		.loc 14 54 3 view .LVU2418
 11951 029c C3       		ret	
 11952              	.LVL621:
 11953 029d 0F1F00   		.p2align 4,,10
 11954              		.p2align 3
 11955              	.L374:
 11956              		.cfi_restore_state
 11957              	.LBB7869:
 11958              	.LBB7828:
 11959              	.LBB7825:
 11960              	.LBB7794:
 11961              	.LBI7794:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 11962              		.loc 2 1470 9 is_stmt 1 view .LVU2419
 11963              	.LBB7795:
 11964              	.LBI7795:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 11965              		.loc 2 842 7 view .LVU2420
 11966              	.LBB7796:
 11967              	.LBI7796:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11968              		.loc 17 806 7 view .LVU2421
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11969              		.loc 17 806 7 is_stmt 0 view .LVU2422
 11970              	.LBE7796:
 11971              	.LBE7795:
 11972              	.LBB7797:
 11973              	.LBI7797:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 11974              		.loc 17 811 9 is_stmt 1 view .LVU2423
 11975              	.LBB7798:
 11976              	.LBI7798:
 11977              		.loc 17 871 7 view .LVU2424
 11978              		.loc 17 871 7 is_stmt 0 view .LVU2425
 11979              	.LBE7798:
 11980              	.LBE7797:
 11981              	.LBB7799:
 11982              	.LBI7799:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 11983              		.loc 2 826 7 is_stmt 1 view .LVU2426
 11984              	.LBB7800:
 11985              	.LBI7800:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11986              		.loc 17 806 7 view .LVU2427
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 11987              		.loc 17 806 7 is_stmt 0 view .LVU2428
 11988              	.LBE7800:
 11989              	.LBE7799:
 11990              	.LBB7801:
 11991              	.LBI7801:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 11992              		.loc 17 811 9 is_stmt 1 view .LVU2429
 11993              	.LBB7802:
 11994              	.LBI7802:
 11995              		.loc 17 871 7 view .LVU2430
 11996              		.loc 17 871 7 is_stmt 0 view .LVU2431
 11997              	.LBE7802:
 11998              	.LBE7801:
 11999              	.LBB7803:
 12000              	.LBI7803:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 12001              		.loc 2 2123 7 is_stmt 1 view .LVU2432
 12002              	.LBB7804:
 12003              	.LBB7805:
 12004              	.LBI7805:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 12005              		.loc 2 826 7 view .LVU2433
 12006              	.LBB7806:
 12007              	.LBI7806:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 12008              		.loc 17 806 7 view .LVU2434
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 12009              		.loc 17 806 7 is_stmt 0 view .LVU2435
 12010              	.LBE7806:
 12011              	.LBE7805:
 12012              	.LBB7807:
 12013              	.LBI7807:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 12014              		.loc 2 1936 7 is_stmt 1 view .LVU2436
 12015              	.LBB7808:
 12016              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 12017              		.loc 2 1941 38 is_stmt 0 view .LVU2437
 12018 02a0 4829C8   		subq	%rcx, %rax	# pretmp_76, _50
 12019              	.LVL622:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 12020              		.loc 2 1941 38 view .LVU2438
 12021 02a3 31D2     		xorl	%edx, %edx	#
 12022 02a5 31F6     		xorl	%esi, %esi	#
 12023 02a7 4C89E7   		movq	%r12, %rdi	# <retval>,
 12024 02aa 4989C0   		movq	%rax, %r8	# _50,
 12025 02ad E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 12025      00
 12026              	.LVL623:
 12027              	.LEHE51:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 12028              		.loc 2 1941 38 view .LVU2439
 12029 02b2 E93AFFFF 		jmp	.L358	#
 12029      FF
 12030              	.LVL624:
 12031 02b7 660F1F84 		.p2align 4,,10
 12031      00000000 
 12031      00
 12032              		.p2align 3
 12033              	.L373:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 12034              		.loc 2 1941 38 view .LVU2440
 12035              	.LBE7808:
 12036              	.LBE7807:
 12037              	.LBE7804:
 12038              	.LBE7803:
 12039              	.LBE7794:
 12040              	.LBE7825:
 12041              	.LBE7828:
 12042              	.LBE7869:
 12043              	.LBB7870:
 12044              	.LBB7752:
 12045              	.LBB7750:
 12046              	.LBB7749:
 12047              	.LBB7748:
 12048              	.LBB7747:
 12049              	.LBB7746:
 12050              	.LBB7740:
 12051              	.LBI7740:
 565:/usr/include/c++/9/ostream ****     {
 12052              		.loc 16 565 5 is_stmt 1 view .LVU2441
 12053              	.LBB7741:
 12054              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 12055              		.loc 16 568 2 is_stmt 0 view .LVU2442
 12056 02c0 488B4424 		movq	32(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 12056      20
 12057 02c5 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_42 + -24B], _45
 12058 02c9 4C01EF   		addq	%r13, %rdi	# tmp211, _45
 12059              	.LVL625:
 12060              	.LBB7742:
 12061              	.LBI7742:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 12062              		.loc 15 157 7 is_stmt 1 view .LVU2443
 12063              	.LBB7743:
 12064              	.LBB7744:
 12065              	.LBI7744:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 12066              		.loc 18 169 3 view .LVU2444
 12067              	.LBB7745:
 12068              		.loc 18 170 5 view .LVU2445
 12069              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 12070              		.loc 18 170 70 is_stmt 0 view .LVU2446
 12071 02cc 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_45 + 32B], tmp182
 12072 02cf 83CE01   		orl	$1, %esi	#, tmp182
 12073              	.LEHB52:
 12074              	.LBE7745:
 12075              	.LBE7744:
 12076              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 12077              		.loc 15 158 9 view .LVU2447
 12078 02d2 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 12078      00
 12079              	.LVL626:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 12080              		.loc 15 158 9 view .LVU2448
 12081 02d7 E9CDFEFF 		jmp	.L355	#
 12081      FF
 12082              	.LVL627:
 12083 02dc 0F1F4000 		.p2align 4,,10
 12084              		.p2align 3
 12085              	.L372:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 12086              		.loc 15 158 9 view .LVU2449
 12087              	.LBE7743:
 12088              	.LBE7742:
 12089              	.LBE7741:
 12090              	.LBE7740:
 12091              	.LBE7746:
 12092              	.LBE7747:
 12093              	.LBE7748:
 12094              	.LBE7749:
 12095              	.LBE7750:
 12096              	.LBB7751:
 12097              	.LBB7727:
 12098              	.LBB7726:
 12099              	.LBB7720:
 12100              	.LBI7720:
 565:/usr/include/c++/9/ostream ****     {
 12101              		.loc 16 565 5 is_stmt 1 view .LVU2450
 12102              	.LBB7721:
 12103              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 12104              		.loc 16 568 2 is_stmt 0 view .LVU2451
 12105 02e0 488B4424 		movq	32(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 12105      20
 12106 02e5 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_34 + -24B], _37
 12107 02e9 4C01EF   		addq	%r13, %rdi	# tmp211, _37
 12108              	.LVL628:
 12109              	.LBB7722:
 12110              	.LBI7722:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 12111              		.loc 15 157 7 is_stmt 1 view .LVU2452
 12112              	.LBB7723:
 12113              	.LBB7724:
 12114              	.LBI7724:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 12115              		.loc 18 169 3 view .LVU2453
 12116              	.LBB7725:
 12117              		.loc 18 170 5 view .LVU2454
 12118              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 12119              		.loc 18 170 70 is_stmt 0 view .LVU2455
 12120 02ec 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_37 + 32B], tmp172
 12121 02ef 83CE01   		orl	$1, %esi	#, tmp172
 12122              	.LBE7725:
 12123              	.LBE7724:
 12124              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 12125              		.loc 15 158 9 view .LVU2456
 12126 02f2 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 12126      00
 12127              	.LVL629:
 12128              	.LEHE52:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 12129              		.loc 15 158 9 view .LVU2457
 12130 02f7 E976FEFF 		jmp	.L353	#
 12130      FF
 12131              	.LVL630:
 12132 02fc 0F1F4000 		.p2align 4,,10
 12133              		.p2align 3
 12134              	.L356:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 12135              		.loc 15 158 9 view .LVU2458
 12136              	.LBE7723:
 12137              	.LBE7722:
 12138              	.LBE7721:
 12139              	.LBE7720:
 12140              	.LBE7726:
 12141              	.LBE7727:
 12142              	.LBE7751:
 12143              	.LBE7752:
 12144              	.LBE7870:
 12145              	.LBB7871:
 12146              	.LBB7829:
 12147              	.LBB7826:
 12148              	.LBB7809:
 12149              	.LBI7809:
 665:/usr/include/c++/9/bits/basic_string.h ****       {
 12150              		.loc 2 665 7 is_stmt 1 view .LVU2459
 12151              	.LBB7810:
 12152              	.LBI7810:
1364:/usr/include/c++/9/bits/basic_string.h ****       {
 12153              		.loc 2 1364 7 view .LVU2460
 12154              	.LBB7811:
 12155              	# /usr/include/c++/9/bits/basic_string.h:1366: 	this->_M_assign(__str);
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 12156              		.loc 2 1366 2 is_stmt 0 view .LVU2461
 12157 0300 488D7424 		leaq	112(%rsp), %rsi	#, tmp191
 12157      70
 12158              	.LVL631:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 12159              		.loc 2 1366 2 view .LVU2462
 12160 0305 4C89E7   		movq	%r12, %rdi	# <retval>,
 12161              	.LEHB53:
 12162 0308 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT	#
 12162      00
 12163              	.LVL632:
 12164              	.LEHE53:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 12165              		.loc 2 1366 2 view .LVU2463
 12166 030d E9DFFEFF 		jmp	.L358	#
 12166      FF
 12167              	.LVL633:
 12168              	.L375:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 12169              		.loc 2 1366 2 view .LVU2464
 12170              	.LBE7811:
 12171              	.LBE7810:
 12172              	.LBE7809:
 12173              	.LBE7826:
 12174              	.LBE7829:
 12175              	.LBE7871:
 12176              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 12177              		.loc 14 54 3 view .LVU2465
 12178 0312 E8000000 		call	__stack_chk_fail@PLT	#
 12178      00
 12179              	.LVL634:
 12180              	.L365:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 12181              		.loc 14 54 3 view .LVU2466
 12182 0317 F30F1EFA 		endbr64	
 12183 031b 4989C6   		movq	%rax, %r14	# tmp229, tmp197
 12184 031e EB1A     		jmp	.L363	#
 12185              	.LVL635:
 12186              	.L367:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 12187              		.loc 14 54 3 view .LVU2467
 12188 0320 F30F1EFA 		endbr64	
 12189 0324 4889C3   		movq	%rax, %rbx	# tmp224, tmp160
 12190              	.LVL636:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 12191              		.loc 14 54 3 view .LVU2468
 12192 0327 EB24     		jmp	.L350	#
 12193              	.LVL637:
 12194              	.L361:
 12195              	.LBB7872:
 12196              	.LBB7830:
 12197              	.LBB7827:
 12198              	.LBB7812:
 12199              	.LBI7812:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 12200              		.loc 2 657 7 is_stmt 1 view .LVU2469
 12201              	.LBB7813:
 12202              	.LBI7813:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 12203              		.loc 2 229 7 view .LVU2470
 12204              	.LBB7814:
 12205              	.LBB7815:
 12206              	.LBI7815:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 12207              		.loc 2 221 7 view .LVU2471
 12208              	.LBB7816:
 12209              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 12210              		.loc 2 222 26 is_stmt 0 view .LVU2472
 12211 0329 498B3C24 		movq	(%r12), %rdi	# MEM[(char * *)_8(D)], _58
 12212              	.LVL638:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 12213              		.loc 2 222 26 view .LVU2473
 12214              	.LBE7816:
 12215              	.LBE7815:
 12216              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 12217              		.loc 2 231 2 view .LVU2474
 12218 032d 4839FB   		cmpq	%rdi, %rbx	# _58, _49
 12219 0330 7408     		je	.L363	#,
 12220              	.LVL639:
 12221              	.LBB7817:
 12222              	.LBI7817:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 12223              		.loc 2 236 7 is_stmt 1 view .LVU2475
 12224              	.LBB7818:
 12225              	.LBB7819:
 12226              	.LBI7819:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 12227              		.loc 3 469 7 view .LVU2476
 12228              	.LBB7820:
 12229              	.LBI7820:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 12230              		.loc 4 119 7 view .LVU2477
 12231              	.LBB7821:
 12232              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 12233              		.loc 4 128 19 is_stmt 0 view .LVU2478
 12234 0332 C5F877   		vzeroupper
 12235 0335 E8000000 		call	_ZdlPv@PLT	#
 12235      00
 12236              	.LVL640:
 12237              		.loc 4 128 19 view .LVU2479
 12238              	.LBE7821:
 12239              	.LBE7820:
 12240              	.LBE7819:
 12241              	.LBE7818:
 12242              	.LBE7817:
 12243              	.LBE7814:
 12244              	.LBE7813:
 12245              	.LBB7822:
 12246              	.LBI7822:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 12247              		.loc 2 150 14 is_stmt 1 view .LVU2480
 12248              	.LBB7823:
 12249              	.LBI7823:
 12250              		.loc 5 153 7 view .LVU2481
 12251              	.LBB7824:
 12252              	.LBI7824:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 12253              		.loc 4 89 7 view .LVU2482
 12254              	.L363:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 12255              		.loc 4 89 7 is_stmt 0 view .LVU2483
 12256              	.LBE7824:
 12257              	.LBE7823:
 12258              	.LBE7822:
 12259              	.LBE7812:
 12260              	.LBE7827:
 12261              	.LBE7830:
 12262              	.LBE7872:
 12263              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:51:     std::ostringstream ss;
  51:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     _str(ss, args...);
 12264              		.loc 14 51 24 view .LVU2484
 12265 033a 4C89EF   		movq	%r13, %rdi	# tmp211,
 12266 033d C5F877   		vzeroupper
 12267 0340 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 12267      00
 12268              	.LVL641:
 12269 0345 4C89F7   		movq	%r14, %rdi	# tmp197,
 12270              	.LEHB54:
 12271 0348 E8000000 		call	_Unwind_Resume@PLT	#
 12271      00
 12272              	.LVL642:
 12273              	.L350:
 12274              	.LBB7873:
 12275              	.LBB7708:
 12276              	.LBB7705:
 12277              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 12278              		.loc 12 584 53 view .LVU2485
 12279 034d 4C89FF   		movq	%r15, %rdi	# tmp213,
 12280 0350 C5F877   		vzeroupper
 12281 0353 E8000000 		call	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev	#
 12281      00
 12282              	.LVL643:
 12283              	.LBB7699:
 12284              	.LBI7699:
  93:/usr/include/c++/9/ostream **** 
 12285              		.loc 16 93 7 is_stmt 1 view .LVU2486
 12286              	.LBB7700:
 12287              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 12288              		.loc 16 93 26 is_stmt 0 view .LVU2487
 12289 0358 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 12289      000000
 12290 035f 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 12290      000000
 12291 0366 48894424 		movq	%rax, 32(%rsp)	# tmp244, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 12291      20
 12292 036b 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_19 + -24B], MEM[(long int *)_19 + -24B]
 12293 036f 48894C04 		movq	%rcx, 32(%rsp,%rax)	# tmp246, *_31.D.34155._vptr.ios_base
 12293      20
 12294              	.LVL644:
 12295              	.L351:
  93:/usr/include/c++/9/ostream **** 
 12296              		.loc 16 93 26 view .LVU2488
 12297              	.LBE7700:
 12298              	.LBE7699:
 12299              	.LBB7701:
 12300              	.LBI7701:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 12301              		.loc 15 282 7 is_stmt 1 view .LVU2489
 12302              	.LBB7702:
 12303              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 12304              		.loc 15 282 22 is_stmt 0 view .LVU2490
 12305 0374 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp247
 12305      000000
 12306 037b 4C89F7   		movq	%r14, %rdi	# tmp216,
 12307 037e 48898424 		movq	%rax, 144(%rsp)	# tmp247, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 12307      90000000 
 12308 0386 C5F877   		vzeroupper
 12309 0389 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 12309      00
 12310              	.LVL645:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 12311              		.loc 15 282 22 view .LVU2491
 12312 038e 4889DF   		movq	%rbx, %rdi	# tmp164,
 12313 0391 E8000000 		call	_Unwind_Resume@PLT	#
 12313      00
 12314              	.LVL646:
 12315              	.LEHE54:
 12316              	.L366:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 12317              		.loc 15 282 22 view .LVU2492
 12318 0396 F30F1EFA 		endbr64	
 12319 039a 4889C3   		movq	%rax, %rbx	# tmp225, tmp164
 12320              	.LVL647:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 12321              		.loc 15 282 22 view .LVU2493
 12322 039d EBD5     		jmp	.L351	#
 12323              	.LVL648:
 12324              	.L368:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 12325              		.loc 15 282 22 view .LVU2494
 12326 039f F30F1EFA 		endbr64	
 12327 03a3 4989C6   		movq	%rax, %r14	# tmp228, tmp198
 12328 03a6 EB81     		jmp	.L361	#
 12329              	.LBE7702:
 12330              	.LBE7701:
 12331              	.LBE7705:
 12332              	.LBE7708:
 12333              	.LBE7873:
 12334              		.cfi_endproc
 12335              	.LFE12649:
 12336              		.section	.gcc_except_table._ZN3c106detail12_str_wrapperIJPKcRKlS3_EE4callB5cxx11ERKS3_S5_S8_,"aG",
 12337              	.LLSDA12649:
 12338 0000 FF       		.byte	0xff
 12339 0001 FF       		.byte	0xff
 12340 0002 01       		.byte	0x1
 12341 0003 2A       		.uleb128 .LLSDACSE12649-.LLSDACSB12649
 12342              	.LLSDACSB12649:
 12343 0004 B301     		.uleb128 .LEHB48-.LFB12649
 12344 0006 05       		.uleb128 .LEHE48-.LEHB48
 12345 0007 9607     		.uleb128 .L366-.LFB12649
 12346 0009 00       		.uleb128 0
 12347 000a CB02     		.uleb128 .LEHB49-.LFB12649
 12348 000c 05       		.uleb128 .LEHE49-.LEHB49
 12349 000d A006     		.uleb128 .L367-.LFB12649
 12350 000f 00       		.uleb128 0
 12351 0010 ED02     		.uleb128 .LEHB50-.LFB12649
 12352 0012 3C       		.uleb128 .LEHE50-.LEHB50
 12353 0013 9706     		.uleb128 .L365-.LFB12649
 12354 0015 00       		.uleb128 0
 12355 0016 EC03     		.uleb128 .LEHB51-.LFB12649
 12356 0018 C601     		.uleb128 .LEHE51-.LEHB51
 12357 001a 9F07     		.uleb128 .L368-.LFB12649
 12358 001c 00       		.uleb128 0
 12359 001d D205     		.uleb128 .LEHB52-.LFB12649
 12360 001f 25       		.uleb128 .LEHE52-.LEHB52
 12361 0020 9706     		.uleb128 .L365-.LFB12649
 12362 0022 00       		.uleb128 0
 12363 0023 8806     		.uleb128 .LEHB53-.LFB12649
 12364 0025 05       		.uleb128 .LEHE53-.LEHB53
 12365 0026 9F07     		.uleb128 .L368-.LFB12649
 12366 0028 00       		.uleb128 0
 12367 0029 C806     		.uleb128 .LEHB54-.LFB12649
 12368 002b 4E       		.uleb128 .LEHE54-.LEHB54
 12369 002c 00       		.uleb128 0
 12370 002d 00       		.uleb128 0
 12371              	.LLSDACSE12649:
 12372              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKlS3_EE4callB5cxx11ERKS3_S5_S8_,"axG",@progbits,_
 12374              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKlS3_S5_S3_S5_S3_EE4callB5cxx11ERKS3_S5_S8_S5_S8_
 12375              		.p2align 4
 12376              		.weak	_ZN3c106detail12_str_wrapperIJPKcRKlS3_S5_S3_S5_S3_EE4callB5cxx11ERKS3_S5_S8_S5_S8_S5_S8_
 12378              	_ZN3c106detail12_str_wrapperIJPKcRKlS3_S5_S3_S5_S3_EE4callB5cxx11ERKS3_S5_S8_S5_S8_S5_S8_:
 12379              	.LVL649:
 12380              	.LFB12650:
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 12381              		.loc 14 50 22 is_stmt 1 view -0
 12382              		.cfi_startproc
 12383              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 12384              		.cfi_lsda 0x1b,.LLSDA12650
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 12385              		.loc 14 50 22 is_stmt 0 view .LVU2496
 12386 0000 F30F1EFA 		endbr64	
 12387 0004 55       		pushq	%rbp	#
 12388              		.cfi_def_cfa_offset 16
 12389              		.cfi_offset 6, -16
 12390 0005 4889E5   		movq	%rsp, %rbp	#,
 12391              		.cfi_def_cfa_register 6
 12392 0008 4157     		pushq	%r15	#
 12393 000a 4156     		pushq	%r14	#
 12394 000c 4155     		pushq	%r13	#
 12395              		.cfi_offset 15, -24
 12396              		.cfi_offset 14, -32
 12397              		.cfi_offset 13, -40
 12398 000e 4989FD   		movq	%rdi, %r13	# tmp264, <retval>
 12399 0011 4154     		pushq	%r12	#
 12400 0013 53       		pushq	%rbx	#
 12401              		.cfi_offset 12, -48
 12402              		.cfi_offset 3, -56
 12403 0014 4889F3   		movq	%rsi, %rbx	# tmp265, args#0
 12404 0017 4883E4E0 		andq	$-32, %rsp	#,
 12405 001b 4881ECC0 		subq	$448, %rsp	#,
 12405      010000
 12406              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 12407              		.loc 14 50 22 view .LVU2497
 12408 0022 488B4510 		movq	16(%rbp), %rax	# args#5, args#5
 12409 0026 48895424 		movq	%rdx, 56(%rsp)	# tmp266, %sfp
 12409      38
 12410              	.LBB8092:
 12411              	.LBB8093:
 12412              	.LBB8094:
 12413              	.LBB8095:
 12414              	.LBB8096:
 12415              	.LBB8097:
 12416              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 12417              		.loc 15 462 59 view .LVU2498
 12418 002b 4C8DB424 		leaq	176(%rsp), %r14	#, tmp255
 12418      B0000000 
 12419 0033 4C8D6424 		leaq	64(%rsp), %r12	#, tmp261
 12419      40
 12420              	.LBE8097:
 12421              	.LBE8096:
 12422              	.LBE8095:
 12423              	.LBE8094:
 12424              	.LBE8093:
 12425              	.LBE8092:
 12426              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 12427              		.loc 14 50 22 view .LVU2499
 12428 0038 48894424 		movq	%rax, 24(%rsp)	# args#5, %sfp
 12428      18
 12429 003d 488B4518 		movq	24(%rbp), %rax	# args#6, args#6
 12430              	.LBB8181:
 12431              	.LBB8178:
 12432              	.LBB8175:
 12433              	.LBB8110:
 12434              	.LBB8104:
 12435              	.LBB8098:
 12436              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 12437              		.loc 15 462 59 view .LVU2500
 12438 0041 4C89F7   		movq	%r14, %rdi	# tmp255,
 12439              	.LVL650:
 12440              		.loc 15 462 59 view .LVU2501
 12441              	.LBE8098:
 12442              	.LBE8104:
 12443              	.LBE8110:
 12444              	.LBE8175:
 12445              	.LBE8178:
 12446              	.LBE8181:
 12447              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:50:   static std::string call(co
  50:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     std::ostringstream ss;
 12448              		.loc 14 50 22 view .LVU2502
 12449 0044 48894C24 		movq	%rcx, 48(%rsp)	# tmp267, %sfp
 12449      30
 12450 0049 4C894424 		movq	%r8, 40(%rsp)	# tmp268, %sfp
 12450      28
 12451 004e 4C894C24 		movq	%r9, 32(%rsp)	# tmp269, %sfp
 12451      20
 12452 0053 48894424 		movq	%rax, 16(%rsp)	# args#6, %sfp
 12452      10
 12453 0058 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp278
 12453      25280000 
 12453      00
 12454 0061 48898424 		movq	%rax, 440(%rsp)	# tmp278, D.446891
 12454      B8010000 
 12455 0069 31C0     		xorl	%eax, %eax	# tmp278
 12456              	.LVL651:
 12457              	.LBB8182:
 12458              	.LBI8092:
 583:/usr/include/c++/9/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 12459              		.loc 12 583 7 is_stmt 1 view .LVU2503
 12460              	.LBB8179:
 12461              	.LBB8176:
 12462              	.LBB8111:
 12463              	.LBI8095:
 460:/usr/include/c++/9/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
 12464              		.loc 15 460 7 view .LVU2504
 12465              	.LBB8105:
 12466              	.LBB8099:
 12467              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 12468              		.loc 15 462 59 is_stmt 0 view .LVU2505
 12469 006b E8000000 		call	_ZNSt8ios_baseC2Ev@PLT	#
 12469      00
 12470              	.LVL652:
 12471              		.loc 15 462 59 view .LVU2506
 12472 0070 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp282
 12472      000000
 12473 0077 C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp161
 12474              	.LBE8099:
 12475              	.LBE8105:
 12476              	.LBE8111:
 12477              	.LBB8112:
 12478              	.LBB8113:
 12479              	.LBB8114:
 12480              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 12481              		.loc 16 391 9 view .LVU2507
 12482 007b 31F6     		xorl	%esi, %esi	#
 12483              	.LBE8114:
 12484              	.LBE8113:
 12485              	.LBE8112:
 12486              	.LBB8121:
 12487              	.LBB8106:
 12488              	.LBB8100:
 12489              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 12490              		.loc 15 462 59 view .LVU2508
 12491 007d 48898424 		movq	%rax, 176(%rsp)	# tmp282, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 12491      B0000000 
 12492 0085 31C0     		xorl	%eax, %eax	#
 12493 0087 C4E37D39 		vextracti128	$0x1, %ymm0, 424(%rsp)	# tmp161, MEM[(void *)&ss + 344B]
 12493      8424A801 
 12493      000001
 12494              	.LVL653:
 12495              		.loc 15 462 59 view .LVU2509
 12496              	.LBE8100:
 12497              	.LBE8106:
 12498              	.LBE8121:
 12499              	.LBB8122:
 12500              	.LBI8112:
 390:/usr/include/c++/9/ostream ****       { this->init(0); }
 12501              		.loc 16 390 7 is_stmt 1 view .LVU2510
 12502              	.LBE8122:
 12503              	.LBB8123:
 12504              	.LBB8107:
 12505              	.LBB8101:
 12506              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 12507              		.loc 15 462 59 is_stmt 0 view .LVU2511
 12508 0092 66898424 		movw	%ax, 400(%rsp)	#, MEM[(void *)&ss + 336B]
 12508      90010000 
 12509              	.LBE8101:
 12510              	.LBE8107:
 12511              	.LBE8123:
 12512              	.LBB8124:
 12513              	.LBB8118:
 12514              	.LBB8115:
 12515              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 12516              		.loc 16 391 7 view .LVU2512
 12517 009a 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 12517      000000
 12518              	.LBE8115:
 12519              	.LBE8118:
 12520              	.LBE8124:
 12521              	.LBB8125:
 12522              	.LBB8108:
 12523              	.LBB8102:
 12524              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 12525              		.loc 15 462 59 view .LVU2513
 12526 00a1 C5F81184 		vmovups	%xmm0, 408(%rsp)	# tmp161, MEM[(void *)&ss + 344B]
 12526      24980100 
 12526      00
 12527              	.LBE8102:
 12528              	.LBE8108:
 12529              	.LBE8125:
 12530              	.LBB8126:
 12531              	.LBB8119:
 12532              	.LBB8116:
 12533              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 12534              		.loc 16 391 7 view .LVU2514
 12535 00aa 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_24 + -24B], _27
 12536 00ae 48894424 		movq	%rax, 64(%rsp)	# tmp283, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 12536      40
 12537 00b3 488B0500 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const v
 12537      000000
 12538              	.LBE8116:
 12539              	.LBE8119:
 12540              	.LBE8126:
 12541              	.LBB8127:
 12542              	.LBB8109:
 12543              	.LBB8103:
 12544              	# /usr/include/c++/9/bits/basic_ios.h:462: 	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get
 12545              		.loc 15 462 59 view .LVU2515
 12546 00ba 48C78424 		movq	$0, 392(%rsp)	#, MEM[(struct basic_ios *)&ss + 112B]._M_tie
 12546      88010000 
 12546      00000000 
 12547              	.LBE8103:
 12548              	.LBE8109:
 12549              	.LBE8127:
 12550              	.LBB8128:
 12551              	.LBB8120:
 12552              	.LBB8117:
 12553              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 12554              		.loc 16 391 7 view .LVU2516
 12555 00c6 4C01E7   		addq	%r12, %rdi	# tmp261, _27
 12556 00c9 488907   		movq	%rax, (%rdi)	# tmp286, *_27.D.34155._vptr.ios_base
 12557              	# /usr/include/c++/9/ostream:391:       { this->init(0); }
 391:/usr/include/c++/9/ostream **** 
 12558              		.loc 16 391 9 view .LVU2517
 12559 00cc C5F877   		vzeroupper
 12560              	.LEHB55:
 12561 00cf E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 12561      00
 12562              	.LVL654:
 12563              	.LEHE55:
 391:/usr/include/c++/9/ostream **** 
 12564              		.loc 16 391 9 view .LVU2518
 12565              	.LBE8117:
 12566              	.LBE8120:
 12567              	.LBE8128:
 12568              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 12569              		.loc 12 584 53 view .LVU2519
 12570 00d4 C5FA7E0D 		vmovq	.LC1(%rip), %xmm1	#, tmp288
 12570      00000000 
 12571 00dc 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp287
 12571      000000
 12572              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 12573              		.loc 12 585 9 view .LVU2520
 12574 00e3 4C8D7C24 		leaq	72(%rsp), %r15	#, tmp263
 12574      48
 12575              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 12576              		.loc 12 584 53 view .LVU2521
 12577 00e8 48898424 		movq	%rax, 176(%rsp)	# tmp287, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 12577      B0000000 
 12578              	.LVL655:
 12579              	.LBB8129:
 12580              	.LBI8129:
 111:/usr/include/c++/9/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 12581              		.loc 12 111 7 is_stmt 1 view .LVU2522
 12582              	.LBB8130:
 12583              	.LBB8131:
 12584              	.LBB8132:
 12585              	.LBI8132:
 470:/usr/include/c++/9/streambuf ****       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
 12586              		.loc 13 470 7 view .LVU2523
 12587              	.LBE8132:
 12588              	.LBE8131:
 12589              	.LBE8130:
 12590              	.LBE8129:
 12591              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 12592              		.loc 12 584 53 is_stmt 0 view .LVU2524
 12593 00f0 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp289
 12593      000000
 12594 00f7 C4E3F122 		vpinsrq	$1, %rax, %xmm1, %xmm0	# tmp289, tmp288, tmp167
 12594      C001
 12595              	.LBB8168:
 12596              	.LBB8165:
 12597              	.LBB8162:
 12598              	.LBB8137:
 12599              	.LBB8133:
 12600              	.LBB8134:
 12601              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 12602              		.loc 13 473 29 view .LVU2525
 12603 00fd 488D8424 		leaq	128(%rsp), %rax	#, tmp259
 12603      80000000 
 12604 0105 4889C7   		movq	%rax, %rdi	# tmp259,
 12605              	.LBE8134:
 12606              	.LBE8133:
 12607              	.LBE8137:
 12608              	.LBE8162:
 12609              	.LBE8165:
 12610              	.LBE8168:
 12611              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 12612              		.loc 12 584 53 view .LVU2526
 12613 0108 C5F82944 		vmovaps	%xmm0, 64(%rsp)	# tmp167, MEM[(int (*) () * *)&ss]
 12613      2440
 12614              	.LBB8169:
 12615              	.LBB8166:
 12616              	.LBB8163:
 12617              	.LBB8138:
 12618              	.LBB8136:
 12619              	.LBB8135:
 12620              	# /usr/include/c++/9/streambuf:473:       _M_buf_locale(locale())
 12621              		.loc 13 473 29 view .LVU2527
 12622 010e C5F9EFC0 		vpxor	%xmm0, %xmm0, %xmm0	# tmp169
 12623 0112 48894424 		movq	%rax, 8(%rsp)	# tmp259, %sfp
 12623      08
 12624 0117 C5F82944 		vmovaps	%xmm0, 80(%rsp)	# tmp169, MEM[(char_type * *)&ss + 16B]
 12624      2450
 12625 011d C5F82944 		vmovaps	%xmm0, 96(%rsp)	# tmp169, MEM[(char_type * *)&ss + 32B]
 12625      2460
 12626 0123 C5F82944 		vmovaps	%xmm0, 112(%rsp)	# tmp169, MEM[(char_type * *)&ss + 48B]
 12626      2470
 12627 0129 E8000000 		call	_ZNSt6localeC1Ev@PLT	#
 12627      00
 12628              	.LVL656:
 12629              		.loc 13 473 29 view .LVU2528
 12630              	.LBE8135:
 12631              	.LBE8136:
 12632              	.LBE8138:
 12633              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 12634              		.loc 12 112 56 view .LVU2529
 12635 012e 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp291
 12635      000000
 12636              	.LBE8163:
 12637              	.LBE8166:
 12638              	.LBE8169:
 12639              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 12640              		.loc 12 585 9 view .LVU2530
 12641 0135 4C89FE   		movq	%r15, %rsi	# tmp263,
 12642 0138 4C89F7   		movq	%r14, %rdi	# tmp255,
 12643              	.LBB8170:
 12644              	.LBB8167:
 12645              	.LBB8164:
 12646              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 12647              		.loc 12 112 56 view .LVU2531
 12648 013b 48894424 		movq	%rax, 72(%rsp)	# tmp291, MEM[(struct basic_stringbuf *)&ss + 8B].D.48380._vptr.basic_streambu
 12648      48
 12649              	.LBB8139:
 12650              	.LBB8140:
 12651              	.LBB8141:
 12652              	.LBB8142:
 12653              	.LBB8143:
 12654              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 12655              		.loc 2 160 46 view .LVU2532
 12656 0140 488D8424 		leaq	160(%rsp), %rax	#, tmp262
 12656      A0000000 
 12657              	.LBE8143:
 12658              	.LBE8142:
 12659              	.LBE8141:
 12660              	.LBE8140:
 12661              	.LBE8139:
 12662              	# /usr/include/c++/9/sstream:112:       : __streambuf_type(), _M_mode(__mode), _M_string()
 112:/usr/include/c++/9/sstream ****       { }
 12663              		.loc 12 112 56 view .LVU2533
 12664 0148 C7842488 		movl	$16, 136(%rsp)	#, MEM[(struct basic_stringbuf *)&ss + 8B]._M_mode
 12664      00000010 
 12664      000000
 12665              	.LVL657:
 12666              	.LBB8161:
 12667              	.LBI8139:
 431:/usr/include/c++/9/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 12668              		.loc 2 431 7 is_stmt 1 view .LVU2534
 12669              	.LBB8160:
 12670              	.LBB8149:
 12671              	.LBI8149:
 138:/usr/include/c++/9/bits/allocator.h **** 
 12672              		.loc 5 138 7 view .LVU2535
 12673              	.LBB8150:
 12674              	.LBI8150:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 12675              		.loc 4 80 7 view .LVU2536
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 12676              		.loc 4 80 7 is_stmt 0 view .LVU2537
 12677              	.LBE8150:
 12678              	.LBE8149:
 12679              	.LBB8151:
 12680              	.LBI8151:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 12681              		.loc 2 190 7 is_stmt 1 view .LVU2538
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 12682              		.loc 2 190 7 is_stmt 0 view .LVU2539
 12683              	.LBE8151:
 12684              	.LBB8152:
 12685              	.LBI8141:
 159:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 12686              		.loc 2 159 2 is_stmt 1 view .LVU2540
 12687              	.LBB8148:
 12688              	.LBB8147:
 12689              	.LBB8144:
 12690              	.LBI8144:
 12691              		.loc 11 99 5 view .LVU2541
 12692              		.loc 11 99 5 is_stmt 0 view .LVU2542
 12693              	.LBE8144:
 12694              	.LBB8145:
 12695              	.LBI8145:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 12696              		.loc 5 141 7 is_stmt 1 view .LVU2543
 12697              	.LBB8146:
 12698              	.LBI8146:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 12699              		.loc 4 83 7 view .LVU2544
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 12700              		.loc 4 83 7 is_stmt 0 view .LVU2545
 12701              	.LBE8146:
 12702              	.LBE8145:
 12703              	# /usr/include/c++/9/bits/basic_string.h:160: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 12704              		.loc 2 160 46 view .LVU2546
 12705 0153 48890424 		movq	%rax, (%rsp)	# tmp262, %sfp
 12706 0157 48898424 		movq	%rax, 144(%rsp)	# tmp262, MEM[(struct _Alloc_hider *)&ss + 80B]._M_p
 12706      90000000 
 12707              	.LVL658:
 160:/usr/include/c++/9/bits/basic_string.h **** #endif
 12708              		.loc 2 160 46 view .LVU2547
 12709              	.LBE8147:
 12710              	.LBE8148:
 12711              	.LBE8152:
 12712              	.LBB8153:
 12713              	.LBI8153:
 12714              		.loc 5 153 7 is_stmt 1 view .LVU2548
 12715              	.LBB8154:
 12716              	.LBI8154:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 12717              		.loc 4 89 7 view .LVU2549
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 12718              		.loc 4 89 7 is_stmt 0 view .LVU2550
 12719              	.LBE8154:
 12720              	.LBE8153:
 12721              	.LBB8155:
 12722              	.LBI8155:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 12723              		.loc 2 214 7 is_stmt 1 view .LVU2551
 12724              	.LBB8156:
 12725              	.LBI8156:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 12726              		.loc 2 182 7 view .LVU2552
 12727              	.LBB8157:
 12728              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 12729              		.loc 2 183 9 is_stmt 0 view .LVU2553
 12730 015f 48C78424 		movq	$0, 152(%rsp)	#, MEM[(size_type *)&ss + 88B]
 12730      98000000 
 12730      00000000 
 12731              	.LVL659:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 12732              		.loc 2 183 9 view .LVU2554
 12733              	.LBE8157:
 12734              	.LBE8156:
 12735              	.LBB8158:
 12736              	.LBI8158:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 12737              		.loc 8 299 7 is_stmt 1 view .LVU2555
 12738              	.LBB8159:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 12739              		.loc 8 300 9 view .LVU2556
 12740              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 12741              		.loc 8 300 14 is_stmt 0 view .LVU2557
 12742 016b C68424A0 		movb	$0, 160(%rsp)	#, MEM[(char_type &)&ss + 96]
 12742      00000000 
 12743              	.LVL660:
 12744              	.LEHB56:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 12745              		.loc 8 300 14 view .LVU2558
 12746              	.LBE8159:
 12747              	.LBE8158:
 12748              	.LBE8155:
 12749              	.LBE8160:
 12750              	.LBE8161:
 12751              	.LBE8164:
 12752              	.LBE8167:
 12753              	.LBE8170:
 12754              	# /usr/include/c++/9/sstream:585:       { this->init(&_M_stringbuf); }
 585:/usr/include/c++/9/sstream **** 
 12755              		.loc 12 585 9 view .LVU2559
 12756 0173 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@PLT	#
 12756      00
 12757              	.LVL661:
 12758              	.LEHE56:
 585:/usr/include/c++/9/sstream **** 
 12759              		.loc 12 585 9 view .LVU2560
 12760              	.LBE8176:
 12761              	.LBE8179:
 12762              	.LBE8182:
 12763              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:52:     _str(ss, args...);
  52:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     return ss.str();
 12764              		.loc 14 52 9 view .LVU2561
 12765 0178 4C8B3B   		movq	(%rbx), %r15	# *args#0_4(D), _16
 12766              	.LVL662:
 12767              	.LBB8183:
 12768              	.LBI8183:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 12769              		.loc 14 44 22 is_stmt 1 view .LVU2562
 12770              	.LBB8184:
 12771              	.LBB8185:
 12772              	.LBI8185:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 12773              		.loc 14 38 22 view .LVU2563
 12774              	.LBB8186:
 12775              	.LBI8186:
 565:/usr/include/c++/9/ostream ****     {
 12776              		.loc 16 565 5 view .LVU2564
 12777              	.LBB8187:
 12778              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 12779              		.loc 16 567 7 is_stmt 0 view .LVU2565
 12780 017b 4D85FF   		testq	%r15, %r15	# _16
 12781 017e 0F842C02 		je	.L404	#,
 12781      0000
 12782              	.LVL663:
 12783              	.LBB8188:
 12784              	.LBI8188:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 12785              		.loc 8 329 7 is_stmt 1 view .LVU2566
 12786              	.LBB8189:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12787              		.loc 8 335 2 view .LVU2567
 12788              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12789              		.loc 8 335 25 is_stmt 0 view .LVU2568
 12790 0184 4C89FF   		movq	%r15, %rdi	# _16,
 12791 0187 E8000000 		call	strlen@PLT	#
 12791      00
 12792              	.LVL664:
 12793              	.LBE8189:
 12794              	.LBE8188:
 12795              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 12796              		.loc 16 570 18 view .LVU2569
 12797 018c 4C89FE   		movq	%r15, %rsi	# _16,
 12798 018f 4C89E7   		movq	%r12, %rdi	# tmp261,
 12799              	.LBB8191:
 12800              	.LBB8190:
 12801              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12802              		.loc 8 335 25 view .LVU2570
 12803 0192 4889C2   		movq	%rax, %rdx	# tmp272, tmp199
 12804              	.LVL665:
 12805              	.LEHB57:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12806              		.loc 8 335 25 view .LVU2571
 12807              	.LBE8190:
 12808              	.LBE8191:
 12809              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 12810              		.loc 16 570 18 view .LVU2572
 12811 0195 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 12811      00
 12812              	.LVL666:
 12813              	.L381:
 12814              		.loc 16 570 18 view .LVU2573
 12815              	.LBE8187:
 12816              	.LBE8186:
 12817              	.LBE8185:
 12818              	.LBB8200:
 12819              	.LBI8200:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 12820              		.loc 14 44 22 is_stmt 1 view .LVU2574
 12821              	.LBB8201:
 12822              	.LBB8202:
 12823              	.LBI8202:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 12824              		.loc 14 38 22 view .LVU2575
 12825              	.LBB8203:
 12826              	.LBI8203:
 166:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 12827              		.loc 16 166 7 view .LVU2576
 12828              	.LBB8204:
 12829              	# /usr/include/c++/9/ostream:167:       { return _M_insert(__n); }
 167:/usr/include/c++/9/ostream **** 
 12830              		.loc 16 167 29 is_stmt 0 view .LVU2577
 12831 019a 488B4424 		movq	56(%rsp), %rax	# %sfp, args#1
 12831      38
 12832 019f 4C89E7   		movq	%r12, %rdi	# tmp261,
 12833 01a2 488B30   		movq	(%rax), %rsi	# *args#1_5(D),
 12834 01a5 E8000000 		call	_ZNSo9_M_insertIlEERSoT_@PLT	#
 12834      00
 12835              	.LVL667:
 167:/usr/include/c++/9/ostream **** 
 12836              		.loc 16 167 29 view .LVU2578
 12837              	.LBE8204:
 12838              	.LBE8203:
 12839              	.LBE8202:
 12840              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 12841              		.loc 14 45 14 view .LVU2579
 12842 01aa 488B4424 		movq	48(%rsp), %rax	# %sfp, args#2
 12842      30
 12843 01af 4C8B38   		movq	(%rax), %r15	# *args#2_6(D), _20
 12844              	.LVL668:
 12845              	.LBB8205:
 12846              	.LBI8205:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 12847              		.loc 14 44 22 is_stmt 1 view .LVU2580
 12848              	.LBB8206:
 12849              	.LBB8207:
 12850              	.LBI8207:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 12851              		.loc 14 38 22 view .LVU2581
 12852              	.LBB8208:
 12853              	.LBI8208:
 565:/usr/include/c++/9/ostream ****     {
 12854              		.loc 16 565 5 view .LVU2582
 12855              	.LBB8209:
 12856              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 12857              		.loc 16 567 7 is_stmt 0 view .LVU2583
 12858 01b2 4D85FF   		testq	%r15, %r15	# _20
 12859 01b5 0F84D501 		je	.L405	#,
 12859      0000
 12860              	.LVL669:
 12861              	.LBB8210:
 12862              	.LBI8210:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 12863              		.loc 8 329 7 is_stmt 1 view .LVU2584
 12864              	.LBB8211:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12865              		.loc 8 335 2 view .LVU2585
 12866              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12867              		.loc 8 335 25 is_stmt 0 view .LVU2586
 12868 01bb 4C89FF   		movq	%r15, %rdi	# _20,
 12869 01be E8000000 		call	strlen@PLT	#
 12869      00
 12870              	.LVL670:
 12871              	.LBE8211:
 12872              	.LBE8210:
 12873              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 12874              		.loc 16 570 18 view .LVU2587
 12875 01c3 4C89FE   		movq	%r15, %rsi	# _20,
 12876 01c6 4C89E7   		movq	%r12, %rdi	# tmp261,
 12877              	.LBB8213:
 12878              	.LBB8212:
 12879              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12880              		.loc 8 335 25 view .LVU2588
 12881 01c9 4889C2   		movq	%rax, %rdx	# tmp273, tmp209
 12882              	.LVL671:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12883              		.loc 8 335 25 view .LVU2589
 12884              	.LBE8212:
 12885              	.LBE8213:
 12886              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 12887              		.loc 16 570 18 view .LVU2590
 12888 01cc E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 12888      00
 12889              	.LVL672:
 12890              	.L383:
 12891              		.loc 16 570 18 view .LVU2591
 12892              	.LBE8209:
 12893              	.LBE8208:
 12894              	.LBE8207:
 12895              	.LBB8222:
 12896              	.LBI8222:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 12897              		.loc 14 44 22 is_stmt 1 view .LVU2592
 12898              	.LBB8223:
 12899              	.LBB8224:
 12900              	.LBI8224:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 12901              		.loc 14 38 22 view .LVU2593
 12902              	.LBB8225:
 12903              	.LBI8225:
 166:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 12904              		.loc 16 166 7 view .LVU2594
 12905              	.LBB8226:
 12906              	# /usr/include/c++/9/ostream:167:       { return _M_insert(__n); }
 167:/usr/include/c++/9/ostream **** 
 12907              		.loc 16 167 29 is_stmt 0 view .LVU2595
 12908 01d1 488B4424 		movq	40(%rsp), %rax	# %sfp, args#3
 12908      28
 12909 01d6 4C89E7   		movq	%r12, %rdi	# tmp261,
 12910 01d9 488B30   		movq	(%rax), %rsi	# *args#3_7(D),
 12911 01dc E8000000 		call	_ZNSo9_M_insertIlEERSoT_@PLT	#
 12911      00
 12912              	.LVL673:
 167:/usr/include/c++/9/ostream **** 
 12913              		.loc 16 167 29 view .LVU2596
 12914              	.LBE8226:
 12915              	.LBE8225:
 12916              	.LBE8224:
 12917              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 12918              		.loc 14 45 14 view .LVU2597
 12919 01e1 488B4424 		movq	32(%rsp), %rax	# %sfp, args#4
 12919      20
 12920 01e6 4C8B38   		movq	(%rax), %r15	# *args#4_8(D), _47
 12921              	.LVL674:
 12922              	.LBB8227:
 12923              	.LBI8227:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 12924              		.loc 14 44 22 is_stmt 1 view .LVU2598
 12925              	.LBB8228:
 12926              	.LBB8229:
 12927              	.LBI8229:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 12928              		.loc 14 38 22 view .LVU2599
 12929              	.LBB8230:
 12930              	.LBI8230:
 565:/usr/include/c++/9/ostream ****     {
 12931              		.loc 16 565 5 view .LVU2600
 12932              	.LBB8231:
 12933              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 12934              		.loc 16 567 7 is_stmt 0 view .LVU2601
 12935 01e9 4D85FF   		testq	%r15, %r15	# _47
 12936 01ec 0F847E01 		je	.L406	#,
 12936      0000
 12937              	.LVL675:
 12938              	.LBB8232:
 12939              	.LBI8232:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 12940              		.loc 8 329 7 is_stmt 1 view .LVU2602
 12941              	.LBB8233:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12942              		.loc 8 335 2 view .LVU2603
 12943              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12944              		.loc 8 335 25 is_stmt 0 view .LVU2604
 12945 01f2 4C89FF   		movq	%r15, %rdi	# _47,
 12946 01f5 E8000000 		call	strlen@PLT	#
 12946      00
 12947              	.LVL676:
 12948              	.LBE8233:
 12949              	.LBE8232:
 12950              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 12951              		.loc 16 570 18 view .LVU2605
 12952 01fa 4C89FE   		movq	%r15, %rsi	# _47,
 12953 01fd 4C89E7   		movq	%r12, %rdi	# tmp261,
 12954              	.LBB8235:
 12955              	.LBB8234:
 12956              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12957              		.loc 8 335 25 view .LVU2606
 12958 0200 4889C2   		movq	%rax, %rdx	# tmp274, tmp219
 12959              	.LVL677:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 12960              		.loc 8 335 25 view .LVU2607
 12961              	.LBE8234:
 12962              	.LBE8235:
 12963              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 12964              		.loc 16 570 18 view .LVU2608
 12965 0203 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 12965      00
 12966              	.LVL678:
 12967              	.L385:
 12968              		.loc 16 570 18 view .LVU2609
 12969              	.LBE8231:
 12970              	.LBE8230:
 12971              	.LBE8229:
 12972              	.LBB8244:
 12973              	.LBI8244:
  44:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return _str(_str(ss, t), args...);
 12974              		.loc 14 44 22 is_stmt 1 view .LVU2610
 12975              	.LBB8245:
 12976              	.LBB8246:
 12977              	.LBI8246:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 12978              		.loc 14 38 22 view .LVU2611
 12979              	.LBB8247:
 12980              	.LBI8247:
 166:/usr/include/c++/9/ostream ****       { return _M_insert(__n); }
 12981              		.loc 16 166 7 view .LVU2612
 12982              	.LBB8248:
 12983              	# /usr/include/c++/9/ostream:167:       { return _M_insert(__n); }
 167:/usr/include/c++/9/ostream **** 
 12984              		.loc 16 167 29 is_stmt 0 view .LVU2613
 12985 0208 488B4424 		movq	24(%rsp), %rax	# %sfp, args#5
 12985      18
 12986 020d 4C89E7   		movq	%r12, %rdi	# tmp261,
 12987 0210 488B30   		movq	(%rax), %rsi	# *args#5_9(D),
 12988 0213 E8000000 		call	_ZNSo9_M_insertIlEERSoT_@PLT	#
 12988      00
 12989              	.LVL679:
 167:/usr/include/c++/9/ostream **** 
 12990              		.loc 16 167 29 view .LVU2614
 12991              	.LBE8248:
 12992              	.LBE8247:
 12993              	.LBE8246:
 12994              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:45:   return _str(_str(ss, t), a
  45:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** }
 12995              		.loc 14 45 14 view .LVU2615
 12996 0218 488B4424 		movq	16(%rsp), %rax	# %sfp, args#6
 12996      10
 12997 021d 4C8B38   		movq	(%rax), %r15	# *args#6_10(D), _59
 12998              	.LVL680:
 12999              	.LBB8249:
 13000              	.LBI8249:
  38:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   ss << t;
 13001              		.loc 14 38 22 is_stmt 1 view .LVU2616
 13002              	.LBB8250:
 13003              	.LBI8250:
 565:/usr/include/c++/9/ostream ****     {
 13004              		.loc 16 565 5 view .LVU2617
 13005              	.LBB8251:
 13006              	# /usr/include/c++/9/ostream:567:       if (!__s)
 567:/usr/include/c++/9/ostream **** 	__out.setstate(ios_base::badbit);
 13007              		.loc 16 567 7 is_stmt 0 view .LVU2618
 13008 0220 4D85FF   		testq	%r15, %r15	# _59
 13009 0223 0F842701 		je	.L407	#,
 13009      0000
 13010              	.LVL681:
 13011              	.LBB8252:
 13012              	.LBI8252:
 329:/usr/include/c++/9/bits/char_traits.h ****       {
 13013              		.loc 8 329 7 is_stmt 1 view .LVU2619
 13014              	.LBB8253:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 13015              		.loc 8 335 2 view .LVU2620
 13016              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 13017              		.loc 8 335 25 is_stmt 0 view .LVU2621
 13018 0229 4C89FF   		movq	%r15, %rdi	# _59,
 13019 022c E8000000 		call	strlen@PLT	#
 13019      00
 13020              	.LVL682:
 13021              	.LBE8253:
 13022              	.LBE8252:
 13023              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 13024              		.loc 16 570 18 view .LVU2622
 13025 0231 4C89FE   		movq	%r15, %rsi	# _59,
 13026 0234 4C89E7   		movq	%r12, %rdi	# tmp261,
 13027              	.LBB8255:
 13028              	.LBB8254:
 13029              	# /usr/include/c++/9/bits/char_traits.h:335: 	return __builtin_strlen(__s);
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 13030              		.loc 8 335 25 view .LVU2623
 13031 0237 4889C2   		movq	%rax, %rdx	# tmp275, tmp229
 13032              	.LVL683:
 335:/usr/include/c++/9/bits/char_traits.h ****       }
 13033              		.loc 8 335 25 view .LVU2624
 13034              	.LBE8254:
 13035              	.LBE8255:
 13036              	# /usr/include/c++/9/ostream:570: 	__ostream_insert(__out, __s,
 13037              		.loc 16 570 18 view .LVU2625
 13038 023a E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 13038      00
 13039              	.LVL684:
 13040              	.LEHE57:
 13041              	.L387:
 13042              		.loc 16 570 18 view .LVU2626
 13043              	.LBE8251:
 13044              	.LBE8250:
 13045              	.LBE8249:
 13046              	.LBE8245:
 13047              	.LBE8244:
 13048              	.LBE8228:
 13049              	.LBE8227:
 13050              	.LBE8223:
 13051              	.LBE8222:
 13052              	.LBE8206:
 13053              	.LBE8205:
 13054              	.LBE8201:
 13055              	.LBE8200:
 13056              	.LBE8184:
 13057              	.LBE8183:
 13058              	.LBB8279:
 13059              	.LBI8279:
 13060              		.loc 12 677 7 is_stmt 1 view .LVU2627
 13061              	.LBB8280:
 13062              	.LBI8280:
 178:/usr/include/c++/9/sstream ****       {
 13063              		.loc 12 178 7 view .LVU2628
 13064              	.LBB8281:
 13065              	.LBB8282:
 13066              	.LBI8282:
2331:/usr/include/c++/9/bits/basic_string.h ****       { return _M_get_allocator(); }
 13067              		.loc 2 2331 7 view .LVU2629
 13068              	.LBB8283:
 13069              	.LBI8283:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 13070              		.loc 5 141 7 view .LVU2630
 13071              	.LBB8284:
 13072              	.LBI8284:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 13073              		.loc 4 83 7 view .LVU2631
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 13074              		.loc 4 83 7 is_stmt 0 view .LVU2632
 13075              	.LBE8284:
 13076              	.LBE8283:
 13077              	.LBE8282:
 13078              	.LBB8285:
 13079              	.LBI8285:
 440:/usr/include/c++/9/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 13080              		.loc 2 440 7 is_stmt 1 view .LVU2633
 13081              	.LBB8286:
 13082              	.LBI8286:
 190:/usr/include/c++/9/bits/basic_string.h ****       {
 13083              		.loc 2 190 7 view .LVU2634
 13084              	.LBE8286:
 13085              	.LBE8285:
 13086              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 13087              		.loc 12 181 2 is_stmt 0 view .LVU2635
 13088 023f 488B4424 		movq	112(%rsp), %rax	# MEM[(char_type * *)&ss + 48B], _78
 13088      70
 13089              	.LBB8303:
 13090              	.LBB8288:
 13091              	.LBB8287:
 13092              	# /usr/include/c++/9/bits/basic_string.h:193: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 13093              		.loc 2 193 51 view .LVU2636
 13094 0244 498D5D10 		leaq	16(%r13), %rbx	#, _77
 13095              	.LVL685:
 193:/usr/include/c++/9/bits/basic_string.h **** #else
 13096              		.loc 2 193 51 view .LVU2637
 13097              	.LBE8287:
 13098              	.LBE8288:
 13099              	.LBB8289:
 13100              	.LBI8289:
 156:/usr/include/c++/9/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 13101              		.loc 2 156 2 is_stmt 1 view .LVU2638
 13102              	.LBB8290:
 13103              	.LBB8291:
 13104              	.LBI8291:
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 13105              		.loc 5 141 7 view .LVU2639
 13106              	.LBB8292:
 13107              	.LBI8292:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 13108              		.loc 4 83 7 view .LVU2640
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 13109              		.loc 4 83 7 is_stmt 0 view .LVU2641
 13110              	.LBE8292:
 13111              	.LBE8291:
 13112              	.LBE8290:
 13113              	.LBE8289:
 13114              	.LBB8294:
 13115              	.LBB8295:
 13116              	.LBB8296:
 13117              	# /usr/include/c++/9/bits/char_traits.h:300:       { __c1 = __c2; }
 300:/usr/include/c++/9/bits/char_traits.h **** 
 13118              		.loc 8 300 14 view .LVU2642
 13119 0248 41C64510 		movb	$0, 16(%r13)	#, MEM[(char_type &)_12(D) + 16]
 13119      00
 13120              	.LBE8296:
 13121              	.LBE8295:
 13122              	.LBE8294:
 13123              	.LBB8301:
 13124              	.LBB8293:
 13125              	# /usr/include/c++/9/bits/basic_string.h:157: 	: allocator_type(__a), _M_p(__dat) { }
 157:/usr/include/c++/9/bits/basic_string.h **** 
 13126              		.loc 2 157 35 view .LVU2643
 13127 024d 49895D00 		movq	%rbx, 0(%r13)	# _77, MEM[(struct _Alloc_hider *)_12(D)]._M_p
 13128              	.LVL686:
 157:/usr/include/c++/9/bits/basic_string.h **** 
 13129              		.loc 2 157 35 view .LVU2644
 13130              	.LBE8293:
 13131              	.LBE8301:
 13132              	.LBB8302:
 13133              	.LBI8294:
 214:/usr/include/c++/9/bits/basic_string.h ****       {
 13134              		.loc 2 214 7 is_stmt 1 view .LVU2645
 13135              	.LBB8298:
 13136              	.LBI8298:
 182:/usr/include/c++/9/bits/basic_string.h ****       { _M_string_length = __length; }
 13137              		.loc 2 182 7 view .LVU2646
 13138              	.LBB8299:
 13139              	# /usr/include/c++/9/bits/basic_string.h:183:       { _M_string_length = __length; }
 183:/usr/include/c++/9/bits/basic_string.h **** 
 13140              		.loc 2 183 9 is_stmt 0 view .LVU2647
 13141 0251 49C74508 		movq	$0, 8(%r13)	#, MEM[(size_type *)_12(D) + 8B]
 13141      00000000 
 13142              	.LVL687:
 183:/usr/include/c++/9/bits/basic_string.h **** 
 13143              		.loc 2 183 9 view .LVU2648
 13144              	.LBE8299:
 13145              	.LBE8298:
 13146              	.LBB8300:
 13147              	.LBI8295:
 299:/usr/include/c++/9/bits/char_traits.h ****       { __c1 = __c2; }
 13148              		.loc 8 299 7 is_stmt 1 view .LVU2649
 13149              	.LBB8297:
 300:/usr/include/c++/9/bits/char_traits.h **** 
 13150              		.loc 8 300 9 view .LVU2650
 300:/usr/include/c++/9/bits/char_traits.h **** 
 13151              		.loc 8 300 9 is_stmt 0 view .LVU2651
 13152              	.LBE8297:
 13153              	.LBE8300:
 13154              	.LBE8302:
 13155              	.LBE8303:
 13156              	.LBB8304:
 13157              	.LBI8304:
 13158              		.loc 5 153 7 is_stmt 1 view .LVU2652
 13159              	.LBB8305:
 13160              	.LBI8305:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 13161              		.loc 4 89 7 view .LVU2653
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 13162              		.loc 4 89 7 is_stmt 0 view .LVU2654
 13163              	.LBE8305:
 13164              	.LBE8304:
 13165              	# /usr/include/c++/9/sstream:181: 	if (this->pptr())
 181:/usr/include/c++/9/sstream **** 	  {
 13166              		.loc 12 181 2 view .LVU2655
 13167 0259 4885C0   		testq	%rax, %rax	# _78
 13168 025c 0F846E01 		je	.L388	#,
 13168      0000
 13169              	.LVL688:
 13170              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 13171              		.loc 12 184 23 view .LVU2656
 13172 0262 4C8B4424 		movq	96(%rsp), %r8	# MEM[(char_type * *)&ss + 32B], _79
 13172      60
 13173              	.LVL689:
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 13174              		.loc 12 184 23 view .LVU2657
 13175 0267 488B4C24 		movq	104(%rsp), %rcx	# MEM[(char_type * *)&ss + 40B], pretmp_29
 13175      68
 13176              	# /usr/include/c++/9/sstream:184: 	    if (this->pptr() > this->egptr())
 184:/usr/include/c++/9/sstream **** 	      __ret.assign(this->pbase(), this->pptr());
 13177              		.loc 12 184 6 view .LVU2658
 13178 026c 4C39C0   		cmpq	%r8, %rax	# _79, _78
 13179 026f 0F87C300 		ja	.L408	#,
 13179      0000
 13180              	.LVL690:
 13181              	.LBB8306:
 13182              	.LBI8306:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 13183              		.loc 2 1470 9 is_stmt 1 view .LVU2659
 13184              	.LBB8307:
 13185              	.LBI8307:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 13186              		.loc 2 842 7 view .LVU2660
 13187              	.LBB8308:
 13188              	.LBI8308:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13189              		.loc 17 806 7 view .LVU2661
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13190              		.loc 17 806 7 is_stmt 0 view .LVU2662
 13191              	.LBE8308:
 13192              	.LBE8307:
 13193              	.LBB8309:
 13194              	.LBI8309:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 13195              		.loc 17 811 9 is_stmt 1 view .LVU2663
 13196              	.LBB8310:
 13197              	.LBI8310:
 13198              		.loc 17 871 7 view .LVU2664
 13199              		.loc 17 871 7 is_stmt 0 view .LVU2665
 13200              	.LBE8310:
 13201              	.LBE8309:
 13202              	.LBB8311:
 13203              	.LBI8311:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 13204              		.loc 2 826 7 is_stmt 1 view .LVU2666
 13205              	.LBB8312:
 13206              	.LBI8312:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13207              		.loc 17 806 7 view .LVU2667
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13208              		.loc 17 806 7 is_stmt 0 view .LVU2668
 13209              	.LBE8312:
 13210              	.LBE8311:
 13211              	.LBB8313:
 13212              	.LBI8313:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 13213              		.loc 17 811 9 is_stmt 1 view .LVU2669
 13214              	.LBB8314:
 13215              	.LBI8314:
 13216              		.loc 17 871 7 view .LVU2670
 13217              		.loc 17 871 7 is_stmt 0 view .LVU2671
 13218              	.LBE8314:
 13219              	.LBE8313:
 13220              	.LBB8315:
 13221              	.LBI8315:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 13222              		.loc 2 2123 7 is_stmt 1 view .LVU2672
 13223              	.LBB8316:
 13224              	.LBB8317:
 13225              	.LBI8317:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 13226              		.loc 2 826 7 view .LVU2673
 13227              	.LBB8318:
 13228              	.LBI8318:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13229              		.loc 17 806 7 view .LVU2674
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13230              		.loc 17 806 7 is_stmt 0 view .LVU2675
 13231              	.LBE8318:
 13232              	.LBE8317:
 13233              	.LBB8319:
 13234              	.LBI8319:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 13235              		.loc 2 1936 7 is_stmt 1 view .LVU2676
 13236              	.LBB8320:
 13237              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 13238              		.loc 2 1941 38 is_stmt 0 view .LVU2677
 13239 0275 4929C8   		subq	%rcx, %r8	# pretmp_29,
 13240              	.LVL691:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 13241              		.loc 2 1941 38 view .LVU2678
 13242 0278 31D2     		xorl	%edx, %edx	#
 13243 027a 31F6     		xorl	%esi, %esi	#
 13244 027c 4C89EF   		movq	%r13, %rdi	# <retval>,
 13245              	.LEHB58:
 13246 027f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 13246      00
 13247              	.LVL692:
 13248              	.L390:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 13249              		.loc 2 1941 38 view .LVU2679
 13250              	.LBE8320:
 13251              	.LBE8319:
 13252              	.LBE8316:
 13253              	.LBE8315:
 13254              	.LBE8306:
 13255              	.LBE8281:
 13256              	.LBE8280:
 13257              	.LBE8279:
 13258              	.LBB8358:
 13259              	.LBI8358:
 629:/usr/include/c++/9/sstream ****       { }
 13260              		.loc 12 629 7 is_stmt 1 view .LVU2680
 13261              	.LBB8359:
 13262              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 13263              		.loc 12 630 9 is_stmt 0 view .LVU2681
 13264 0284 488D0500 		leaq	64+_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp313
 13264      000000
 13265 028b C5FA7E15 		vmovq	.LC1(%rip), %xmm2	#, tmp314
 13265      00000000 
 13266              	.LBB8360:
 13267              	.LBB8361:
 13268              	.LBB8362:
 13269              	.LBB8363:
 13270              	.LBB8364:
 13271              	.LBB8365:
 13272              	.LBB8366:
 13273              	.LBB8367:
 13274              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 13275              		.loc 2 222 26 view .LVU2682
 13276 0293 488BBC24 		movq	144(%rsp), %rdi	# MEM[(char * *)&ss + 80B], _103
 13276      90000000 
 13277              	.LBE8367:
 13278              	.LBE8366:
 13279              	.LBE8365:
 13280              	.LBE8364:
 13281              	.LBE8363:
 13282              	.LBE8362:
 13283              	.LBE8361:
 13284              	.LBE8360:
 13285              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 13286              		.loc 12 630 9 view .LVU2683
 13287 029b 48898424 		movq	%rax, 176(%rsp)	# tmp313, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 13287      B0000000 
 13288              	.LVL693:
 13289              	.LBB8386:
 13290              	.LBI8360:
  65:/usr/include/c++/9/sstream ****     {
 13291              		.loc 12 65 11 is_stmt 1 view .LVU2684
 13292              	.LBE8386:
 13293              	# /usr/include/c++/9/sstream:630:       { }
 630:/usr/include/c++/9/sstream **** 
 13294              		.loc 12 630 9 is_stmt 0 view .LVU2685
 13295 02a3 488D0500 		leaq	16+_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE(%rip), %rax	#, tmp315
 13295      000000
 13296 02aa C4E3E922 		vpinsrq	$1, %rax, %xmm2, %xmm0	# tmp315, tmp314, tmp237
 13296      C001
 13297 02b0 C5F82944 		vmovaps	%xmm0, 64(%rsp)	# tmp237, MEM[(int (*) () * *)&ss]
 13297      2440
 13298              	.LVL694:
 13299              	.LBB8387:
 13300              	.LBB8385:
 13301              	.LBB8382:
 13302              	.LBI8362:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 13303              		.loc 2 657 7 is_stmt 1 view .LVU2686
 13304              	.LBB8381:
 13305              	.LBB8377:
 13306              	.LBI8364:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 13307              		.loc 2 229 7 view .LVU2687
 13308              	.LBB8376:
 13309              	.LBB8370:
 13310              	.LBI8366:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 13311              		.loc 2 221 7 view .LVU2688
 13312              	.LBB8369:
 13313              	.LBB8368:
 13314              	.LBI8368:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 13315              		.loc 2 200 7 view .LVU2689
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 13316              		.loc 2 200 7 is_stmt 0 view .LVU2690
 13317              	.LBE8368:
 13318              	.LBE8369:
 13319              	.LBE8370:
 13320              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 13321              		.loc 2 231 2 view .LVU2691
 13322 02b6 483B3C24 		cmpq	(%rsp), %rdi	# %sfp, _103
 13323 02ba 7405     		je	.L392	#,
 13324              	.LVL695:
 13325              	.LBB8371:
 13326              	.LBI8371:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 13327              		.loc 2 236 7 is_stmt 1 view .LVU2692
 13328              	.LBB8372:
 13329              	.LBB8373:
 13330              	.LBI8373:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 13331              		.loc 3 469 7 view .LVU2693
 13332              	.LBB8374:
 13333              	.LBI8374:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 13334              		.loc 4 119 7 view .LVU2694
 13335              	.LBB8375:
 13336              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 13337              		.loc 4 128 19 is_stmt 0 view .LVU2695
 13338 02bc E8000000 		call	_ZdlPv@PLT	#
 13338      00
 13339              	.LVL696:
 13340              	.L392:
 13341              		.loc 4 128 19 view .LVU2696
 13342              	.LBE8375:
 13343              	.LBE8374:
 13344              	.LBE8373:
 13345              	.LBE8372:
 13346              	.LBE8371:
 13347              	.LBE8376:
 13348              	.LBE8377:
 13349              	.LBB8378:
 13350              	.LBI8378:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 13351              		.loc 2 150 14 is_stmt 1 view .LVU2697
 13352              	.LBB8379:
 13353              	.LBI8379:
 13354              		.loc 5 153 7 view .LVU2698
 13355              	.LBB8380:
 13356              	.LBI8380:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 13357              		.loc 4 89 7 view .LVU2699
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 13358              		.loc 4 89 7 is_stmt 0 view .LVU2700
 13359              	.LBE8380:
 13360              	.LBE8379:
 13361              	.LBE8378:
 13362              	.LBE8381:
 13363              	.LBE8382:
 13364              	.LBB8383:
 13365              	.LBI8383:
 204:/usr/include/c++/9/streambuf ****       { }
 13366              		.loc 13 204 7 is_stmt 1 view .LVU2701
 13367              	.LBB8384:
 13368              	# /usr/include/c++/9/streambuf:205:       { }
 205:/usr/include/c++/9/streambuf **** 
 13369              		.loc 13 205 9 is_stmt 0 view .LVU2702
 13370 02c1 488B7C24 		movq	8(%rsp), %rdi	# %sfp,
 13370      08
 13371 02c6 488D0500 		leaq	16+_ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	#, tmp317
 13371      000000
 13372 02cd 48894424 		movq	%rax, 72(%rsp)	# tmp317, MEM[(struct basic_streambuf *)&ss + 8B]._vptr.basic_streambuf
 13372      48
 13373 02d2 E8000000 		call	_ZNSt6localeD1Ev@PLT	#
 13373      00
 13374              	.LVL697:
 205:/usr/include/c++/9/streambuf **** 
 13375              		.loc 13 205 9 view .LVU2703
 13376              	.LBE8384:
 13377              	.LBE8383:
 13378              	.LBE8385:
 13379              	.LBE8387:
 13380              	.LBB8388:
 13381              	.LBI8388:
  93:/usr/include/c++/9/ostream **** 
 13382              		.loc 16 93 7 is_stmt 1 view .LVU2704
 13383              	.LBB8389:
 13384              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 13385              		.loc 16 93 26 is_stmt 0 view .LVU2705
 13386 02d7 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 13386      000000
 13387 02de 488B1D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rbx	# MEM[(const v
 13387      000000
 13388              	.LBE8389:
 13389              	.LBE8388:
 13390              	.LBB8391:
 13391              	.LBB8392:
 13392              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13393              		.loc 15 282 22 view .LVU2706
 13394 02e5 4C89F7   		movq	%r14, %rdi	# tmp255,
 13395              	.LBE8392:
 13396              	.LBE8391:
 13397              	.LBB8394:
 13398              	.LBB8390:
 13399              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 13400              		.loc 16 93 26 view .LVU2707
 13401 02e8 48894424 		movq	%rax, 64(%rsp)	# tmp318, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 13401      40
 13402 02ed 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_24 + -24B], MEM[(long int *)_24 + -24B]
 13403 02f1 48895C04 		movq	%rbx, 64(%rsp,%rax)	# tmp320, _100->D.34155._vptr.ios_base
 13403      40
 13404              	.LVL698:
  93:/usr/include/c++/9/ostream **** 
 13405              		.loc 16 93 26 view .LVU2708
 13406              	.LBE8390:
 13407              	.LBE8394:
 13408              	.LBB8395:
 13409              	.LBI8391:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13410              		.loc 15 282 7 is_stmt 1 view .LVU2709
 13411              	.LBB8393:
 13412              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13413              		.loc 15 282 22 is_stmt 0 view .LVU2710
 13414 02f6 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp321
 13414      000000
 13415 02fd 48898424 		movq	%rax, 176(%rsp)	# tmp321, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 13415      B0000000 
 13416 0305 E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 13416      00
 13417              	.LVL699:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13418              		.loc 15 282 22 view .LVU2711
 13419              	.LBE8393:
 13420              	.LBE8395:
 13421              	.LBE8359:
 13422              	.LBE8358:
 13423              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13424              		.loc 14 54 3 view .LVU2712
 13425 030a 488B8424 		movq	440(%rsp), %rax	# D.446891, tmp279
 13425      B8010000 
 13426 0312 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp279
 13426      25280000 
 13426      00
 13427 031b 0F85C400 		jne	.L409	#,
 13427      0000
 13428 0321 488D65D8 		leaq	-40(%rbp), %rsp	#,
 13429              	.LVL700:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13430              		.loc 14 54 3 view .LVU2713
 13431 0325 4C89E8   		movq	%r13, %rax	# <retval>,
 13432 0328 5B       		popq	%rbx	#
 13433 0329 415C     		popq	%r12	#
 13434              	.LVL701:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13435              		.loc 14 54 3 view .LVU2714
 13436 032b 415D     		popq	%r13	#
 13437              	.LVL702:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13438              		.loc 14 54 3 view .LVU2715
 13439 032d 415E     		popq	%r14	#
 13440              	.LVL703:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13441              		.loc 14 54 3 view .LVU2716
 13442 032f 415F     		popq	%r15	#
 13443 0331 5D       		popq	%rbp	#
 13444              		.cfi_remember_state
 13445              		.cfi_def_cfa 7, 8
 13446              	.LVL704:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13447              		.loc 14 54 3 view .LVU2717
 13448 0332 C3       		ret	
 13449              	.LVL705:
 13450              		.p2align 4,,10
 13451 0333 0F1F4400 		.p2align 3
 13451      00
 13452              	.L408:
 13453              		.cfi_restore_state
 13454              	.LBB8396:
 13455              	.LBB8355:
 13456              	.LBB8352:
 13457              	.LBB8321:
 13458              	.LBI8321:
1470:/usr/include/c++/9/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
 13459              		.loc 2 1470 9 is_stmt 1 view .LVU2718
 13460              	.LBB8322:
 13461              	.LBI8322:
 842:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 13462              		.loc 2 842 7 view .LVU2719
 13463              	.LBB8323:
 13464              	.LBI8323:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13465              		.loc 17 806 7 view .LVU2720
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13466              		.loc 17 806 7 is_stmt 0 view .LVU2721
 13467              	.LBE8323:
 13468              	.LBE8322:
 13469              	.LBB8324:
 13470              	.LBI8324:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 13471              		.loc 17 811 9 is_stmt 1 view .LVU2722
 13472              	.LBB8325:
 13473              	.LBI8325:
 13474              		.loc 17 871 7 view .LVU2723
 13475              		.loc 17 871 7 is_stmt 0 view .LVU2724
 13476              	.LBE8325:
 13477              	.LBE8324:
 13478              	.LBB8326:
 13479              	.LBI8326:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 13480              		.loc 2 826 7 is_stmt 1 view .LVU2725
 13481              	.LBB8327:
 13482              	.LBI8327:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13483              		.loc 17 806 7 view .LVU2726
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13484              		.loc 17 806 7 is_stmt 0 view .LVU2727
 13485              	.LBE8327:
 13486              	.LBE8326:
 13487              	.LBB8328:
 13488              	.LBI8328:
 811:/usr/include/c++/9/bits/stl_iterator.h **** 			  typename __enable_if<
 13489              		.loc 17 811 9 is_stmt 1 view .LVU2728
 13490              	.LBB8329:
 13491              	.LBI8329:
 13492              		.loc 17 871 7 view .LVU2729
 13493              		.loc 17 871 7 is_stmt 0 view .LVU2730
 13494              	.LBE8329:
 13495              	.LBE8328:
 13496              	.LBB8330:
 13497              	.LBI8330:
2123:/usr/include/c++/9/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
 13498              		.loc 2 2123 7 is_stmt 1 view .LVU2731
 13499              	.LBB8331:
 13500              	.LBB8332:
 13501              	.LBI8332:
 826:/usr/include/c++/9/bits/basic_string.h ****       { return iterator(_M_data()); }
 13502              		.loc 2 826 7 view .LVU2732
 13503              	.LBB8333:
 13504              	.LBI8333:
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13505              		.loc 17 806 7 view .LVU2733
 806:/usr/include/c++/9/bits/stl_iterator.h ****       : _M_current(__i) { }
 13506              		.loc 17 806 7 is_stmt 0 view .LVU2734
 13507              	.LBE8333:
 13508              	.LBE8332:
 13509              	.LBB8334:
 13510              	.LBI8334:
1936:/usr/include/c++/9/bits/basic_string.h **** 	      size_type __n2)
 13511              		.loc 2 1936 7 is_stmt 1 view .LVU2735
 13512              	.LBB8335:
 13513              	# /usr/include/c++/9/bits/basic_string.h:1941: 			  _M_limit(__pos, __n1), __s, __n2);
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 13514              		.loc 2 1941 38 is_stmt 0 view .LVU2736
 13515 0338 4829C8   		subq	%rcx, %rax	# pretmp_29, _78
 13516              	.LVL706:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 13517              		.loc 2 1941 38 view .LVU2737
 13518 033b 31D2     		xorl	%edx, %edx	#
 13519 033d 31F6     		xorl	%esi, %esi	#
 13520 033f 4C89EF   		movq	%r13, %rdi	# <retval>,
 13521 0342 4989C0   		movq	%rax, %r8	# _78,
 13522 0345 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 13522      00
 13523              	.LVL707:
 13524              	.LEHE58:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 13525              		.loc 2 1941 38 view .LVU2738
 13526 034a E935FFFF 		jmp	.L390	#
 13526      FF
 13527              	.LVL708:
 13528 034f 90       		.p2align 4,,10
 13529              		.p2align 3
 13530              	.L407:
1941:/usr/include/c++/9/bits/basic_string.h ****       }
 13531              		.loc 2 1941 38 view .LVU2739
 13532              	.LBE8335:
 13533              	.LBE8334:
 13534              	.LBE8331:
 13535              	.LBE8330:
 13536              	.LBE8321:
 13537              	.LBE8352:
 13538              	.LBE8355:
 13539              	.LBE8396:
 13540              	.LBB8397:
 13541              	.LBB8278:
 13542              	.LBB8276:
 13543              	.LBB8275:
 13544              	.LBB8274:
 13545              	.LBB8273:
 13546              	.LBB8271:
 13547              	.LBB8270:
 13548              	.LBB8269:
 13549              	.LBB8268:
 13550              	.LBB8266:
 13551              	.LBB8265:
 13552              	.LBB8264:
 13553              	.LBB8263:
 13554              	.LBB8262:
 13555              	.LBB8256:
 13556              	.LBI8256:
 565:/usr/include/c++/9/ostream ****     {
 13557              		.loc 16 565 5 is_stmt 1 view .LVU2740
 13558              	.LBB8257:
 13559              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 13560              		.loc 16 568 2 is_stmt 0 view .LVU2741
 13561 0350 488B4424 		movq	64(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 13561      40
 13562 0355 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_70 + -24B], _73
 13563 0359 4C01E7   		addq	%r12, %rdi	# tmp261, _73
 13564              	.LVL709:
 13565              	.LBB8258:
 13566              	.LBI8258:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 13567              		.loc 15 157 7 is_stmt 1 view .LVU2742
 13568              	.LBB8259:
 13569              	.LBB8260:
 13570              	.LBI8260:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 13571              		.loc 18 169 3 view .LVU2743
 13572              	.LBB8261:
 13573              		.loc 18 170 5 view .LVU2744
 13574              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 13575              		.loc 18 170 70 is_stmt 0 view .LVU2745
 13576 035c 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_73 + 32B], tmp226
 13577 035f 83CE01   		orl	$1, %esi	#, tmp226
 13578              	.LEHB59:
 13579              	.LBE8261:
 13580              	.LBE8260:
 13581              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13582              		.loc 15 158 9 view .LVU2746
 13583 0362 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 13583      00
 13584              	.LVL710:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13585              		.loc 15 158 9 view .LVU2747
 13586 0367 E9D3FEFF 		jmp	.L387	#
 13586      FF
 13587              	.LVL711:
 13588 036c 0F1F4000 		.p2align 4,,10
 13589              		.p2align 3
 13590              	.L406:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13591              		.loc 15 158 9 view .LVU2748
 13592              	.LBE8259:
 13593              	.LBE8258:
 13594              	.LBE8257:
 13595              	.LBE8256:
 13596              	.LBE8262:
 13597              	.LBE8263:
 13598              	.LBE8264:
 13599              	.LBE8265:
 13600              	.LBE8266:
 13601              	.LBB8267:
 13602              	.LBB8243:
 13603              	.LBB8242:
 13604              	.LBB8236:
 13605              	.LBI8236:
 565:/usr/include/c++/9/ostream ****     {
 13606              		.loc 16 565 5 is_stmt 1 view .LVU2749
 13607              	.LBB8237:
 13608              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 13609              		.loc 16 568 2 is_stmt 0 view .LVU2750
 13610 0370 488B4424 		movq	64(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 13610      40
 13611 0375 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_62 + -24B], _65
 13612 0379 4C01E7   		addq	%r12, %rdi	# tmp261, _65
 13613              	.LVL712:
 13614              	.LBB8238:
 13615              	.LBI8238:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 13616              		.loc 15 157 7 is_stmt 1 view .LVU2751
 13617              	.LBB8239:
 13618              	.LBB8240:
 13619              	.LBI8240:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 13620              		.loc 18 169 3 view .LVU2752
 13621              	.LBB8241:
 13622              		.loc 18 170 5 view .LVU2753
 13623              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 13624              		.loc 18 170 70 is_stmt 0 view .LVU2754
 13625 037c 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_65 + 32B], tmp216
 13626 037f 83CE01   		orl	$1, %esi	#, tmp216
 13627              	.LBE8241:
 13628              	.LBE8240:
 13629              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13630              		.loc 15 158 9 view .LVU2755
 13631 0382 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 13631      00
 13632              	.LVL713:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13633              		.loc 15 158 9 view .LVU2756
 13634 0387 E97CFEFF 		jmp	.L385	#
 13634      FF
 13635              	.LVL714:
 13636 038c 0F1F4000 		.p2align 4,,10
 13637              		.p2align 3
 13638              	.L405:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13639              		.loc 15 158 9 view .LVU2757
 13640              	.LBE8239:
 13641              	.LBE8238:
 13642              	.LBE8237:
 13643              	.LBE8236:
 13644              	.LBE8242:
 13645              	.LBE8243:
 13646              	.LBE8267:
 13647              	.LBE8268:
 13648              	.LBE8269:
 13649              	.LBE8270:
 13650              	.LBE8271:
 13651              	.LBB8272:
 13652              	.LBB8221:
 13653              	.LBB8220:
 13654              	.LBB8214:
 13655              	.LBI8214:
 565:/usr/include/c++/9/ostream ****     {
 13656              		.loc 16 565 5 is_stmt 1 view .LVU2758
 13657              	.LBB8215:
 13658              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 13659              		.loc 16 568 2 is_stmt 0 view .LVU2759
 13660 0390 488B4424 		movq	64(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 13660      40
 13661 0395 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_51 + -24B], _54
 13662 0399 4C01E7   		addq	%r12, %rdi	# tmp261, _54
 13663              	.LVL715:
 13664              	.LBB8216:
 13665              	.LBI8216:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 13666              		.loc 15 157 7 is_stmt 1 view .LVU2760
 13667              	.LBB8217:
 13668              	.LBB8218:
 13669              	.LBI8218:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 13670              		.loc 18 169 3 view .LVU2761
 13671              	.LBB8219:
 13672              		.loc 18 170 5 view .LVU2762
 13673              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 13674              		.loc 18 170 70 is_stmt 0 view .LVU2763
 13675 039c 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_54 + 32B], tmp206
 13676 039f 83CE01   		orl	$1, %esi	#, tmp206
 13677              	.LBE8219:
 13678              	.LBE8218:
 13679              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13680              		.loc 15 158 9 view .LVU2764
 13681 03a2 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 13681      00
 13682              	.LVL716:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13683              		.loc 15 158 9 view .LVU2765
 13684 03a7 E925FEFF 		jmp	.L383	#
 13684      FF
 13685              	.LVL717:
 13686 03ac 0F1F4000 		.p2align 4,,10
 13687              		.p2align 3
 13688              	.L404:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13689              		.loc 15 158 9 view .LVU2766
 13690              	.LBE8217:
 13691              	.LBE8216:
 13692              	.LBE8215:
 13693              	.LBE8214:
 13694              	.LBE8220:
 13695              	.LBE8221:
 13696              	.LBE8272:
 13697              	.LBE8273:
 13698              	.LBE8274:
 13699              	.LBE8275:
 13700              	.LBE8276:
 13701              	.LBB8277:
 13702              	.LBB8199:
 13703              	.LBB8198:
 13704              	.LBB8192:
 13705              	.LBI8192:
 565:/usr/include/c++/9/ostream ****     {
 13706              		.loc 16 565 5 is_stmt 1 view .LVU2767
 13707              	.LBB8193:
 13708              	# /usr/include/c++/9/ostream:568: 	__out.setstate(ios_base::badbit);
 568:/usr/include/c++/9/ostream ****       else
 13709              		.loc 16 568 2 is_stmt 0 view .LVU2768
 13710 03b0 488B4424 		movq	64(%rsp), %rax	# MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream, MEM[(struct basic_ostr
 13710      40
 13711 03b5 488B78E8 		movq	-24(%rax), %rdi	# MEM[(long int *)_39 + -24B], _42
 13712 03b9 4C01E7   		addq	%r12, %rdi	# tmp261, _42
 13713              	.LVL718:
 13714              	.LBB8194:
 13715              	.LBI8194:
 157:/usr/include/c++/9/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 13716              		.loc 15 157 7 is_stmt 1 view .LVU2769
 13717              	.LBB8195:
 13718              	.LBB8196:
 13719              	.LBI8196:
 169:/usr/include/c++/9/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }
 13720              		.loc 18 169 3 view .LVU2770
 13721              	.LBB8197:
 13722              		.loc 18 170 5 view .LVU2771
 13723              	# /usr/include/c++/9/bits/ios_base.h:170:   { return _Ios_Iostate(static_cast<int>(__a) | static_ca
 13724              		.loc 18 170 70 is_stmt 0 view .LVU2772
 13725 03bc 8B7720   		movl	32(%rdi), %esi	# MEM[(_Ios_Iostate *)_42 + 32B], tmp196
 13726 03bf 83CE01   		orl	$1, %esi	#, tmp196
 13727              	.LBE8197:
 13728              	.LBE8196:
 13729              	# /usr/include/c++/9/bits/basic_ios.h:158:       { this->clear(this->rdstate() | __state); }
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13730              		.loc 15 158 9 view .LVU2773
 13731 03c2 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT	#
 13731      00
 13732              	.LVL719:
 13733              	.LEHE59:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13734              		.loc 15 158 9 view .LVU2774
 13735 03c7 E9CEFDFF 		jmp	.L381	#
 13735      FF
 13736              	.LVL720:
 13737 03cc 0F1F4000 		.p2align 4,,10
 13738              		.p2align 3
 13739              	.L388:
 158:/usr/include/c++/9/bits/basic_ios.h **** 
 13740              		.loc 15 158 9 view .LVU2775
 13741              	.LBE8195:
 13742              	.LBE8194:
 13743              	.LBE8193:
 13744              	.LBE8192:
 13745              	.LBE8198:
 13746              	.LBE8199:
 13747              	.LBE8277:
 13748              	.LBE8278:
 13749              	.LBE8397:
 13750              	.LBB8398:
 13751              	.LBB8356:
 13752              	.LBB8353:
 13753              	.LBB8336:
 13754              	.LBI8336:
 665:/usr/include/c++/9/bits/basic_string.h ****       {
 13755              		.loc 2 665 7 is_stmt 1 view .LVU2776
 13756              	.LBB8337:
 13757              	.LBI8337:
1364:/usr/include/c++/9/bits/basic_string.h ****       {
 13758              		.loc 2 1364 7 view .LVU2777
 13759              	.LBB8338:
 13760              	# /usr/include/c++/9/bits/basic_string.h:1366: 	this->_M_assign(__str);
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 13761              		.loc 2 1366 2 is_stmt 0 view .LVU2778
 13762 03d0 488DB424 		leaq	144(%rsp), %rsi	#, tmp235
 13762      90000000 
 13763              	.LVL721:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 13764              		.loc 2 1366 2 view .LVU2779
 13765 03d8 4C89EF   		movq	%r13, %rdi	# <retval>,
 13766              	.LEHB60:
 13767 03db E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@PLT	#
 13767      00
 13768              	.LVL722:
 13769              	.LEHE60:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 13770              		.loc 2 1366 2 view .LVU2780
 13771 03e0 E99FFEFF 		jmp	.L390	#
 13771      FF
 13772              	.LVL723:
 13773              	.L409:
1366:/usr/include/c++/9/bits/basic_string.h **** 	return *this;
 13774              		.loc 2 1366 2 view .LVU2781
 13775              	.LBE8338:
 13776              	.LBE8337:
 13777              	.LBE8336:
 13778              	.LBE8353:
 13779              	.LBE8356:
 13780              	.LBE8398:
 13781              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:54:   }
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13782              		.loc 14 54 3 view .LVU2782
 13783 03e5 E8000000 		call	__stack_chk_fail@PLT	#
 13783      00
 13784              	.LVL724:
 13785              	.L397:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13786              		.loc 14 54 3 view .LVU2783
 13787 03ea F30F1EFA 		endbr64	
 13788 03ee 4989C6   		movq	%rax, %r14	# tmp277, tmp241
 13789 03f1 EB1A     		jmp	.L395	#
 13790              	.LVL725:
 13791              	.L399:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13792              		.loc 14 54 3 view .LVU2784
 13793 03f3 F30F1EFA 		endbr64	
 13794 03f7 4889C3   		movq	%rax, %rbx	# tmp270, tmp184
 13795              	.LVL726:
  54:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h **** };
 13796              		.loc 14 54 3 view .LVU2785
 13797 03fa EB24     		jmp	.L378	#
 13798              	.LVL727:
 13799              	.L393:
 13800              	.LBB8399:
 13801              	.LBB8357:
 13802              	.LBB8354:
 13803              	.LBB8339:
 13804              	.LBI8339:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 13805              		.loc 2 657 7 is_stmt 1 view .LVU2786
 13806              	.LBB8340:
 13807              	.LBI8340:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 13808              		.loc 2 229 7 view .LVU2787
 13809              	.LBB8341:
 13810              	.LBB8342:
 13811              	.LBI8342:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 13812              		.loc 2 221 7 view .LVU2788
 13813              	.LBB8343:
 13814              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 13815              		.loc 2 222 26 is_stmt 0 view .LVU2789
 13816 03fc 498B7D00 		movq	0(%r13), %rdi	# MEM[(char * *)_12(D)], _86
 13817              	.LVL728:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 13818              		.loc 2 222 26 view .LVU2790
 13819              	.LBE8343:
 13820              	.LBE8342:
 13821              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 13822              		.loc 2 231 2 view .LVU2791
 13823 0400 4839FB   		cmpq	%rdi, %rbx	# _86, _77
 13824 0403 7408     		je	.L395	#,
 13825              	.LVL729:
 13826              	.LBB8344:
 13827              	.LBI8344:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 13828              		.loc 2 236 7 is_stmt 1 view .LVU2792
 13829              	.LBB8345:
 13830              	.LBB8346:
 13831              	.LBI8346:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 13832              		.loc 3 469 7 view .LVU2793
 13833              	.LBB8347:
 13834              	.LBI8347:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 13835              		.loc 4 119 7 view .LVU2794
 13836              	.LBB8348:
 13837              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 13838              		.loc 4 128 19 is_stmt 0 view .LVU2795
 13839 0405 C5F877   		vzeroupper
 13840 0408 E8000000 		call	_ZdlPv@PLT	#
 13840      00
 13841              	.LVL730:
 13842              		.loc 4 128 19 view .LVU2796
 13843              	.LBE8348:
 13844              	.LBE8347:
 13845              	.LBE8346:
 13846              	.LBE8345:
 13847              	.LBE8344:
 13848              	.LBE8341:
 13849              	.LBE8340:
 13850              	.LBB8349:
 13851              	.LBI8349:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 13852              		.loc 2 150 14 is_stmt 1 view .LVU2797
 13853              	.LBB8350:
 13854              	.LBI8350:
 13855              		.loc 5 153 7 view .LVU2798
 13856              	.LBB8351:
 13857              	.LBI8351:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 13858              		.loc 4 89 7 view .LVU2799
 13859              	.L395:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 13860              		.loc 4 89 7 is_stmt 0 view .LVU2800
 13861              	.LBE8351:
 13862              	.LBE8350:
 13863              	.LBE8349:
 13864              	.LBE8339:
 13865              	.LBE8354:
 13866              	.LBE8357:
 13867              	.LBE8399:
 13868              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:51:     std::ostringstream ss;
  51:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****     _str(ss, args...);
 13869              		.loc 14 51 24 view .LVU2801
 13870 040d 4C89E7   		movq	%r12, %rdi	# tmp261,
 13871 0410 C5F877   		vzeroupper
 13872 0413 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 13872      00
 13873              	.LVL731:
 13874 0418 4C89F7   		movq	%r14, %rdi	# tmp241,
 13875              	.LEHB61:
 13876 041b E8000000 		call	_Unwind_Resume@PLT	#
 13876      00
 13877              	.LVL732:
 13878              	.L378:
 13879              	.LBB8400:
 13880              	.LBB8180:
 13881              	.LBB8177:
 13882              	# /usr/include/c++/9/sstream:584:       : __ostream_type(), _M_stringbuf(ios_base::out)
 584:/usr/include/c++/9/sstream ****       { this->init(&_M_stringbuf); }
 13883              		.loc 12 584 53 view .LVU2802
 13884 0420 4C89FF   		movq	%r15, %rdi	# tmp263,
 13885 0423 C5F877   		vzeroupper
 13886 0426 E8000000 		call	_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev	#
 13886      00
 13887              	.LVL733:
 13888              	.LBB8171:
 13889              	.LBI8171:
  93:/usr/include/c++/9/ostream **** 
 13890              		.loc 16 93 7 is_stmt 1 view .LVU2803
 13891              	.LBB8172:
 13892              	# /usr/include/c++/9/ostream:93:       ~basic_ostream() { }
  93:/usr/include/c++/9/ostream **** 
 13893              		.loc 16 93 26 is_stmt 0 view .LVU2804
 13894 042b 488B0500 		movq	8+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rax	# MEM[(const vo
 13894      000000
 13895 0432 488B0D00 		movq	16+_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE(%rip), %rcx	# MEM[(const v
 13895      000000
 13896 0439 48894424 		movq	%rax, 64(%rsp)	# tmp294, MEM[(struct basic_ostream *)&ss]._vptr.basic_ostream
 13896      40
 13897 043e 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_24 + -24B], MEM[(long int *)_24 + -24B]
 13898 0442 48894C04 		movq	%rcx, 64(%rsp,%rax)	# tmp296, *_36.D.34155._vptr.ios_base
 13898      40
 13899              	.LVL734:
 13900              	.L379:
  93:/usr/include/c++/9/ostream **** 
 13901              		.loc 16 93 26 view .LVU2805
 13902              	.LBE8172:
 13903              	.LBE8171:
 13904              	.LBB8173:
 13905              	.LBI8173:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13906              		.loc 15 282 7 is_stmt 1 view .LVU2806
 13907              	.LBB8174:
 13908              	# /usr/include/c++/9/bits/basic_ios.h:282:       ~basic_ios() { }
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13909              		.loc 15 282 22 is_stmt 0 view .LVU2807
 13910 0447 488D0500 		leaq	16+_ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	#, tmp297
 13910      000000
 13911 044e 4C89F7   		movq	%r14, %rdi	# tmp255,
 13912 0451 48898424 		movq	%rax, 176(%rsp)	# tmp297, MEM[(struct basic_ios *)&ss + 112B].D.34155._vptr.ios_base
 13912      B0000000 
 13913 0459 C5F877   		vzeroupper
 13914 045c E8000000 		call	_ZNSt8ios_baseD2Ev@PLT	#
 13914      00
 13915              	.LVL735:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13916              		.loc 15 282 22 view .LVU2808
 13917 0461 4889DF   		movq	%rbx, %rdi	# tmp188,
 13918 0464 E8000000 		call	_Unwind_Resume@PLT	#
 13918      00
 13919              	.LVL736:
 13920              	.LEHE61:
 13921              	.L398:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13922              		.loc 15 282 22 view .LVU2809
 13923 0469 F30F1EFA 		endbr64	
 13924 046d 4889C3   		movq	%rax, %rbx	# tmp271, tmp188
 13925              	.LVL737:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13926              		.loc 15 282 22 view .LVU2810
 13927 0470 EBD5     		jmp	.L379	#
 13928              	.LVL738:
 13929              	.L400:
 282:/usr/include/c++/9/bits/basic_ios.h **** 
 13930              		.loc 15 282 22 view .LVU2811
 13931 0472 F30F1EFA 		endbr64	
 13932 0476 4989C6   		movq	%rax, %r14	# tmp276, tmp242
 13933 0479 EB81     		jmp	.L393	#
 13934              	.LBE8174:
 13935              	.LBE8173:
 13936              	.LBE8177:
 13937              	.LBE8180:
 13938              	.LBE8400:
 13939              		.cfi_endproc
 13940              	.LFE12650:
 13941              		.section	.gcc_except_table._ZN3c106detail12_str_wrapperIJPKcRKlS3_S5_S3_S5_S3_EE4callB5cxx11ERKS3_
 13942              	.LLSDA12650:
 13943 0000 FF       		.byte	0xff
 13944 0001 FF       		.byte	0xff
 13945 0002 01       		.byte	0x1
 13946 0003 2B       		.uleb128 .LLSDACSE12650-.LLSDACSB12650
 13947              	.LLSDACSB12650:
 13948 0004 CF01     		.uleb128 .LEHB55-.LFB12650
 13949 0006 05       		.uleb128 .LEHE55-.LEHB55
 13950 0007 E908     		.uleb128 .L398-.LFB12650
 13951 0009 00       		.uleb128 0
 13952 000a F302     		.uleb128 .LEHB56-.LFB12650
 13953 000c 05       		.uleb128 .LEHE56-.LEHB56
 13954 000d F307     		.uleb128 .L399-.LFB12650
 13955 000f 00       		.uleb128 0
 13956 0010 9503     		.uleb128 .LEHB57-.LFB12650
 13957 0012 AA01     		.uleb128 .LEHE57-.LEHB57
 13958 0014 EA07     		.uleb128 .L397-.LFB12650
 13959 0016 00       		.uleb128 0
 13960 0017 FF04     		.uleb128 .LEHB58-.LFB12650
 13961 0019 CB01     		.uleb128 .LEHE58-.LEHB58
 13962 001b F208     		.uleb128 .L400-.LFB12650
 13963 001d 00       		.uleb128 0
 13964 001e E206     		.uleb128 .LEHB59-.LFB12650
 13965 0020 65       		.uleb128 .LEHE59-.LEHB59
 13966 0021 EA07     		.uleb128 .L397-.LFB12650
 13967 0023 00       		.uleb128 0
 13968 0024 DB07     		.uleb128 .LEHB60-.LFB12650
 13969 0026 05       		.uleb128 .LEHE60-.LEHB60
 13970 0027 F208     		.uleb128 .L400-.LFB12650
 13971 0029 00       		.uleb128 0
 13972 002a 9B08     		.uleb128 .LEHB61-.LFB12650
 13973 002c 4E       		.uleb128 .LEHE61-.LEHB61
 13974 002d 00       		.uleb128 0
 13975 002e 00       		.uleb128 0
 13976              	.LLSDACSE12650:
 13977              		.section	.text._ZN3c106detail12_str_wrapperIJPKcRKlS3_S5_S3_S5_S3_EE4callB5cxx11ERKS3_S5_S8_S5_S8_
 13979              		.section	.text._ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev,"axG",@p
 13980              		.align 2
 13981              		.p2align 4
 13982              		.weak	_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev
 13984              	_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev:
 13985              	.LVL739:
 13986              	.LFB15162:
 13987              		.file 28 "/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h"
   1:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #include <c10/util/C++17.h>
   4:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #include <c10/util/Exception.h>
   5:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #include <atomic>
   6:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #include <stdexcept>
   7:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
   8:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** namespace pybind11 {
   9:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** template <typename, typename...>
  10:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** class class_;
  11:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
  12:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
  13:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** namespace c10 {
  14:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** class intrusive_ptr_target;
  15:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** namespace raw {
  16:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   namespace weak_intrusive_ptr {
  17:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     inline void incref(intrusive_ptr_target* self);
  18:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
  19:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   namespace intrusive_ptr {
  20:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     inline void incref(intrusive_ptr_target * self);
  21:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
  22:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
  23:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // constructor tag used by intrusive_ptr constructors
  24:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   struct DontIncreaseRefcount {};
  25:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
  26:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** /**
  27:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  * intrusive_ptr<T> is an alternative to shared_ptr<T> that has better
  28:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  * performance because it does the refcounting intrusively
  29:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  * (i.e. in a member of the object itself).
  30:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  * Your class T needs to inherit from intrusive_ptr_target to allow it to be
  31:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  * used in an intrusive_ptr<T>. Your class's constructor should not allow
  32:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  *`this` to escape to other threads or create an intrusive_ptr from `this`.
  33:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  */
  34:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
  35:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // Note [Stack allocated intrusive_ptr_target safety]
  36:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  37:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // A well known problem with std::enable_shared_from_this is that it
  38:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // allows you to create a std::shared_ptr from a stack allocated object,
  39:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // which is totally bogus because the object will die once you return
  40:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // from the stack.  In intrusive_ptr, we can detect that this has occurred,
  41:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // because we set the refcount/weakcount of objects which inherit from
  42:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // intrusive_ptr_target to zero, *unless* we can prove that the object
  43:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // was dynamically allocated (e.g., via make_intrusive).
  44:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** //
  45:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // Thus, whenever you transmute a T* into a intrusive_ptr<T>, we check
  46:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // and make sure that the refcount isn't zero (or, a more subtle
  47:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // test for weak_intrusive_ptr<T>, for which the refcount may validly
  48:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // be zero, but the weak refcount better not be zero), because that
  49:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // tells us if the object was allocated by us.  If it wasn't, no
  50:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // intrusive_ptr for you!
  51:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
  52:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** class C10_API intrusive_ptr_target {
  53:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // Note [Weak references for intrusive refcounting]
  54:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  55:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // Here's the scheme:
  56:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //
  57:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //  - refcount == number of strong references to the object
  58:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //    weakcount == number of weak references to the object,
  59:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //      plus one more if refcount > 0
  60:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //    An invariant: refcount > 0  =>  weakcount > 0
  61:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //
  62:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //  - THStorage stays live as long as there are any strong
  63:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //    or weak pointers to it (weakcount > 0, since strong
  64:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //    references count as a +1 to weakcount)
  65:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //
  66:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //  - finalizers are called and data_ptr is deallocated when refcount == 0
  67:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //
  68:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //  - Once refcount == 0, it can never again be > 0 (the transition
  69:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //    from > 0 to == 0 is monotonic)
  70:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //
  71:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //  - When you access THStorage via a weak pointer, you must
  72:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //    atomically increment the use count, if it is greater than 0.
  73:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //    If it is not, you must report that the storage is dead.
  74:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //
  75:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   mutable std::atomic<size_t> refcount_;
  76:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   mutable std::atomic<size_t> weakcount_;
  77:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
  78:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   template <typename T, typename NullType>
  79:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   friend class intrusive_ptr;
  80:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   friend inline void raw::intrusive_ptr::incref(intrusive_ptr_target* self);
  81:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
  82:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   template <typename T, typename NullType>
  83:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   friend class weak_intrusive_ptr;
  84:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   friend inline void raw::weak_intrusive_ptr::incref(intrusive_ptr_target* self);
  85:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
  86:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  protected:
  87:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // protected destructor. We never want to destruct intrusive_ptr_target*
  88:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // directly.
  89:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   virtual ~intrusive_ptr_target() {
  90:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // Disable -Wterminate and -Wexceptions so we're allowed to use assertions
  91:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // (i.e. throw exceptions) in a destructor.
  92:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // We also have to disable -Wunknown-warning-option and -Wpragmas, because
  93:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // some other compilers don't know about -Wterminate or -Wexceptions and
  94:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // will show a warning about unknown warning options otherwise.
  95:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #if defined(_MSC_VER) && !defined(__clang__)
  96:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma warning(push)
  97:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma warning(disable: 4297) // function assumed not to throw an exception but does
  98:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #else
  99:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma GCC diagnostic push
 100:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma GCC diagnostic ignored "-Wpragmas"
 101:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma GCC diagnostic ignored "-Wunknown-warning-option"
 102:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma GCC diagnostic ignored "-Wterminate"
 103:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma GCC diagnostic ignored "-Wexceptions"
 104:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #endif
 105:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     TORCH_INTERNAL_ASSERT_DEBUG_ONLY(
 106:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         refcount_.load() == 0,
 107:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         "Tried to destruct an intrusive_ptr_target that still has intrusive_ptr to it");
 108:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     TORCH_INTERNAL_ASSERT_DEBUG_ONLY(
 109:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         // See ~intrusive_ptr for optimization that will frequently result in 1 at destruction time
 110:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         weakcount_.load() == 1 || weakcount_.load() == 0,
 111:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         "Tried to destruct an intrusive_ptr_target that still has weak_intrusive_ptr to it");
 112:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #if defined(_MSC_VER) && !defined(__clang__)
 113:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma warning(pop)
 114:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #else
 115:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #  pragma GCC diagnostic pop
 116:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #endif
 117:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 118:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 119:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   constexpr intrusive_ptr_target() noexcept : refcount_(0), weakcount_(0) {}
 120:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 121:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // intrusive_ptr_target supports copy and move: but refcount and weakcount don't
 122:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // participate (since they are intrinsic properties of the memory location)
 123:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   intrusive_ptr_target(intrusive_ptr_target&& other) noexcept : intrusive_ptr_target() {}
 124:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   intrusive_ptr_target& operator=(intrusive_ptr_target&& other) noexcept { return *this; }
 125:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   intrusive_ptr_target(const intrusive_ptr_target& other) noexcept : intrusive_ptr_target() {}
 126:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   intrusive_ptr_target& operator=(const intrusive_ptr_target& other) noexcept { return *this; }
 127:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 128:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  private:
 129:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   /**
 130:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * This is called when refcount reaches zero.
 131:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * You can override this to release expensive resources.
 132:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * There might still be weak references, so your object might not get
 133:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * destructed yet, but you can assume the object isn't used anymore,
 134:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * i.e. no more calls to methods or accesses to members (we just can't
 135:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * destruct it yet because we need the weakcount accessible).
 136:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    *
 137:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * Even if there are no weak references (i.e. your class is about to be
 138:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * destructed), this function is guaranteed to be called first.
 139:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * However, if you use your class for an object on the stack that is
 140:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * destructed by the scope (i.e. without intrusive_ptr), this function will
 141:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    * not be called.
 142:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****    */
 143:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   virtual void release_resources() {}
 144:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** };
 145:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 146:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** namespace detail {
 147:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** template <class TTarget>
 148:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** struct intrusive_target_default_null_type final {
 149:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   static constexpr TTarget* singleton() noexcept {
 150:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     return nullptr;
 151:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 152:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** };
 153:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 154:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** template<class TTarget, class ToNullType, class FromNullType>
 155:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** TTarget* assign_ptr_(TTarget* rhs) {
 156:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   if (FromNullType::singleton() == rhs) {
 157:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     return ToNullType::singleton();
 158:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   } else {
 159:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     return rhs;
 160:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 161:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
 162:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 163:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // Increment needs to be acquire-release to make use_count() and
 164:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // unique() reliable.
 165:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** inline size_t atomic_refcount_increment(std::atomic<size_t>& refcount) {
 166:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   return refcount.fetch_add(1, std::memory_order_acq_rel) + 1;
 167:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
 168:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 169:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // weak_use_count() is only used for testing, so we don't need it to
 170:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // be reliable. Relaxed should be fine.
 171:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** inline size_t atomic_weakcount_increment(std::atomic<size_t>& weakcount) {
 172:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   return weakcount.fetch_add(1, std::memory_order_relaxed) + 1;
 173:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
 174:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 175:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // Both decrements need to be acquire-release for correctness. See
 176:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** // e.g. std::shared_ptr implementation.
 177:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** inline size_t atomic_refcount_decrement(std::atomic<size_t>& refcount) {
 178:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   return refcount.fetch_sub(1, std::memory_order_acq_rel) - 1;
 179:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
 180:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 181:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** inline size_t atomic_weakcount_decrement(std::atomic<size_t>& weakcount) {
 182:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   return weakcount.fetch_sub(1, std::memory_order_acq_rel) - 1;
 183:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
 184:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 185:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** } // namespace detail
 186:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 187:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** template <class TTarget, class NullType>
 188:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** class weak_intrusive_ptr;
 189:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 190:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** template <
 191:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     class TTarget,
 192:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     class NullType = detail::intrusive_target_default_null_type<TTarget>>
 193:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** class intrusive_ptr final {
 194:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  private:
 195:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** //  the following static assert would be nice to have but it requires
 196:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** //  the target class T to be fully defined when intrusive_ptr<T> is instantiated
 197:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** //  this is a problem for classes that contain pointers to themselves
 198:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** //  static_assert(
 199:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** //      std::is_base_of<intrusive_ptr_target, TTarget>::value,
 200:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** //      "intrusive_ptr can only be used for classes that inherit from intrusive_ptr_target.");
 201:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #ifndef _WIN32
 202:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // This static_assert triggers on MSVC
 203:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   //  error C2131: expression did not evaluate to a constant
 204:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   static_assert(
 205:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       NullType::singleton() == NullType::singleton(),
 206:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       "NullType must have a constexpr singleton() method");
 207:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** #endif
 208:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   static_assert(
 209:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       std::is_base_of<TTarget, typename std::remove_pointer<decltype(NullType::singleton())>::type>
 210:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       "NullType::singleton() must return a element_type* pointer");
 211:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 212:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   TTarget* target_;
 213:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 214:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   template <class TTarget2, class NullType2>
 215:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   friend class intrusive_ptr;
 216:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   friend class weak_intrusive_ptr<TTarget, NullType>;
 217:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 218:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // Make pybind11::class_ be a friend class of intrusive_ptr, so that custom
 219:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // smart holder in pybind11 could access the private constructor of
 220:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // intrusive_ptr(T*) which took the ownership of the object. This is required
 221:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // by customer holder macro PYBIND11_DECLARE_HOLDER_TYPE, where it uses
 222:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // intrusive_ptr(TTarget*) to initialize and take ownership of the object. For
 223:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // details, see
 224:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#custom-smart-pointers
 225:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   template <typename, typename...>
 226:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   friend class pybind11::class_;
 227:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 228:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   void retain_() {
 229:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     if (target_ != NullType::singleton()) {
 230:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       size_t new_refcount = detail::atomic_refcount_increment(target_->refcount_);
 231:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       TORCH_INTERNAL_ASSERT_DEBUG_ONLY(
 232:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****           new_refcount != 1,
 233:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****           "intrusive_ptr: Cannot increase refcount after it reached zero.");
 234:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     }
 235:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 236:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 237:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   void reset_() noexcept {
 13988              		.loc 28 237 8 is_stmt 1 view -0
 13989              		.cfi_startproc
 13990              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 13991              		.cfi_lsda 0x1b,.LLSDA15162
 13992              		.loc 28 237 8 is_stmt 0 view .LVU2813
 13993 0000 F30F1EFA 		endbr64	
 13994 0004 55       		pushq	%rbp	#
 13995              		.cfi_def_cfa_offset 16
 13996              		.cfi_offset 6, -16
 13997              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:238:     if (target_ != NullT
 238:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     if (target_ != NullType::singleton() && detail::atomic_refcount_decrement(target_->refcount_) =
 13998              		.loc 28 238 42 view .LVU2814
 13999 0005 488D2D00 		leaq	_ZN3c1019UndefinedTensorImpl10_singletonE(%rip), %rbp	#, tmp110
 13999      000000
 14000              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:237:   void reset_() noexcept
 237:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     if (target_ != NullType::singleton() && detail::atomic_refcount_decrement(target_->refcount_) =
 14001              		.loc 28 237 8 view .LVU2815
 14002 000c 53       		pushq	%rbx	#
 14003              		.cfi_def_cfa_offset 24
 14004              		.cfi_offset 3, -24
 14005 000d 4889FB   		movq	%rdi, %rbx	# tmp111, this
 14006 0010 4883EC08 		subq	$8, %rsp	#,
 14007              		.cfi_def_cfa_offset 32
 14008              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:238:     if (target_ != NullT
 14009              		.loc 28 238 9 view .LVU2816
 14010 0014 488B07   		movq	(%rdi), %rax	# this_12(D)->target_, _1
 14011              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:238:     if (target_ != NullT
 14012              		.loc 28 238 42 view .LVU2817
 14013 0017 4839E8   		cmpq	%rbp, %rax	# tmp110, _1
 14014 001a 7408     		je	.L412	#,
 14015              	.LVL740:
 14016              	.LBB8401:
 14017              	.LBI8401:
 177:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   return refcount.fetch_sub(1, std::memory_order_acq_rel) - 1;
 14018              		.loc 28 177 15 is_stmt 1 discriminator 1 view .LVU2818
 14019              	.LBE8401:
 178:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
 14020              		.loc 28 178 3 discriminator 1 view .LVU2819
 14021              	.LBB8403:
 14022              	.LBB8402:
 14023              	.LBI8402:
 14024              		.file 29 "/usr/include/c++/9/bits/atomic_base.h"
   1:/usr/include/c++/9/bits/atomic_base.h **** // -*- C++ -*- header.
   2:/usr/include/c++/9/bits/atomic_base.h **** 
   3:/usr/include/c++/9/bits/atomic_base.h **** // Copyright (C) 2008-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/atomic_base.h **** //
   5:/usr/include/c++/9/bits/atomic_base.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/atomic_base.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/atomic_base.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/atomic_base.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/atomic_base.h **** // any later version.
  10:/usr/include/c++/9/bits/atomic_base.h **** 
  11:/usr/include/c++/9/bits/atomic_base.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/atomic_base.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/atomic_base.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/atomic_base.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/atomic_base.h **** 
  16:/usr/include/c++/9/bits/atomic_base.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/atomic_base.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/atomic_base.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/atomic_base.h **** 
  20:/usr/include/c++/9/bits/atomic_base.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/atomic_base.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/atomic_base.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/atomic_base.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/atomic_base.h **** 
  25:/usr/include/c++/9/bits/atomic_base.h **** /** @file bits/atomic_base.h
  26:/usr/include/c++/9/bits/atomic_base.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/atomic_base.h ****  *  Do not attempt to use it directly. @headername{atomic}
  28:/usr/include/c++/9/bits/atomic_base.h ****  */
  29:/usr/include/c++/9/bits/atomic_base.h **** 
  30:/usr/include/c++/9/bits/atomic_base.h **** #ifndef _GLIBCXX_ATOMIC_BASE_H
  31:/usr/include/c++/9/bits/atomic_base.h **** #define _GLIBCXX_ATOMIC_BASE_H 1
  32:/usr/include/c++/9/bits/atomic_base.h **** 
  33:/usr/include/c++/9/bits/atomic_base.h **** #pragma GCC system_header
  34:/usr/include/c++/9/bits/atomic_base.h **** 
  35:/usr/include/c++/9/bits/atomic_base.h **** #include <bits/c++config.h>
  36:/usr/include/c++/9/bits/atomic_base.h **** #include <stdint.h>
  37:/usr/include/c++/9/bits/atomic_base.h **** #include <bits/atomic_lockfree_defines.h>
  38:/usr/include/c++/9/bits/atomic_base.h **** 
  39:/usr/include/c++/9/bits/atomic_base.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  40:/usr/include/c++/9/bits/atomic_base.h **** #define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  41:/usr/include/c++/9/bits/atomic_base.h **** #endif
  42:/usr/include/c++/9/bits/atomic_base.h **** 
  43:/usr/include/c++/9/bits/atomic_base.h **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/include/c++/9/bits/atomic_base.h **** {
  45:/usr/include/c++/9/bits/atomic_base.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/usr/include/c++/9/bits/atomic_base.h **** 
  47:/usr/include/c++/9/bits/atomic_base.h ****   /**
  48:/usr/include/c++/9/bits/atomic_base.h ****    * @defgroup atomics Atomics
  49:/usr/include/c++/9/bits/atomic_base.h ****    *
  50:/usr/include/c++/9/bits/atomic_base.h ****    * Components for performing atomic operations.
  51:/usr/include/c++/9/bits/atomic_base.h ****    * @{
  52:/usr/include/c++/9/bits/atomic_base.h ****    */
  53:/usr/include/c++/9/bits/atomic_base.h **** 
  54:/usr/include/c++/9/bits/atomic_base.h ****   /// Enumeration for memory_order
  55:/usr/include/c++/9/bits/atomic_base.h **** #if __cplusplus > 201703L
  56:/usr/include/c++/9/bits/atomic_base.h ****   enum class memory_order : int
  57:/usr/include/c++/9/bits/atomic_base.h ****     {
  58:/usr/include/c++/9/bits/atomic_base.h ****       relaxed,
  59:/usr/include/c++/9/bits/atomic_base.h ****       consume,
  60:/usr/include/c++/9/bits/atomic_base.h ****       acquire,
  61:/usr/include/c++/9/bits/atomic_base.h ****       release,
  62:/usr/include/c++/9/bits/atomic_base.h ****       acq_rel,
  63:/usr/include/c++/9/bits/atomic_base.h ****       seq_cst
  64:/usr/include/c++/9/bits/atomic_base.h ****     };
  65:/usr/include/c++/9/bits/atomic_base.h **** 
  66:/usr/include/c++/9/bits/atomic_base.h ****   inline constexpr memory_order memory_order_relaxed = memory_order::relaxed;
  67:/usr/include/c++/9/bits/atomic_base.h ****   inline constexpr memory_order memory_order_consume = memory_order::consume;
  68:/usr/include/c++/9/bits/atomic_base.h ****   inline constexpr memory_order memory_order_acquire = memory_order::acquire;
  69:/usr/include/c++/9/bits/atomic_base.h ****   inline constexpr memory_order memory_order_release = memory_order::release;
  70:/usr/include/c++/9/bits/atomic_base.h ****   inline constexpr memory_order memory_order_acq_rel = memory_order::acq_rel;
  71:/usr/include/c++/9/bits/atomic_base.h ****   inline constexpr memory_order memory_order_seq_cst = memory_order::seq_cst;
  72:/usr/include/c++/9/bits/atomic_base.h **** #else
  73:/usr/include/c++/9/bits/atomic_base.h ****   typedef enum memory_order
  74:/usr/include/c++/9/bits/atomic_base.h ****     {
  75:/usr/include/c++/9/bits/atomic_base.h ****       memory_order_relaxed,
  76:/usr/include/c++/9/bits/atomic_base.h ****       memory_order_consume,
  77:/usr/include/c++/9/bits/atomic_base.h ****       memory_order_acquire,
  78:/usr/include/c++/9/bits/atomic_base.h ****       memory_order_release,
  79:/usr/include/c++/9/bits/atomic_base.h ****       memory_order_acq_rel,
  80:/usr/include/c++/9/bits/atomic_base.h ****       memory_order_seq_cst
  81:/usr/include/c++/9/bits/atomic_base.h ****     } memory_order;
  82:/usr/include/c++/9/bits/atomic_base.h **** #endif
  83:/usr/include/c++/9/bits/atomic_base.h **** 
  84:/usr/include/c++/9/bits/atomic_base.h ****   enum __memory_order_modifier
  85:/usr/include/c++/9/bits/atomic_base.h ****     {
  86:/usr/include/c++/9/bits/atomic_base.h ****       __memory_order_mask          = 0x0ffff,
  87:/usr/include/c++/9/bits/atomic_base.h ****       __memory_order_modifier_mask = 0xffff0000,
  88:/usr/include/c++/9/bits/atomic_base.h ****       __memory_order_hle_acquire   = 0x10000,
  89:/usr/include/c++/9/bits/atomic_base.h ****       __memory_order_hle_release   = 0x20000
  90:/usr/include/c++/9/bits/atomic_base.h ****     };
  91:/usr/include/c++/9/bits/atomic_base.h **** 
  92:/usr/include/c++/9/bits/atomic_base.h ****   constexpr memory_order
  93:/usr/include/c++/9/bits/atomic_base.h ****   operator|(memory_order __m, __memory_order_modifier __mod)
  94:/usr/include/c++/9/bits/atomic_base.h ****   {
  95:/usr/include/c++/9/bits/atomic_base.h ****     return memory_order(int(__m) | int(__mod));
  96:/usr/include/c++/9/bits/atomic_base.h ****   }
  97:/usr/include/c++/9/bits/atomic_base.h **** 
  98:/usr/include/c++/9/bits/atomic_base.h ****   constexpr memory_order
  99:/usr/include/c++/9/bits/atomic_base.h ****   operator&(memory_order __m, __memory_order_modifier __mod)
 100:/usr/include/c++/9/bits/atomic_base.h ****   {
 101:/usr/include/c++/9/bits/atomic_base.h ****     return memory_order(int(__m) & int(__mod));
 102:/usr/include/c++/9/bits/atomic_base.h ****   }
 103:/usr/include/c++/9/bits/atomic_base.h **** 
 104:/usr/include/c++/9/bits/atomic_base.h ****   // Drop release ordering as per [atomics.types.operations.req]/21
 105:/usr/include/c++/9/bits/atomic_base.h ****   constexpr memory_order
 106:/usr/include/c++/9/bits/atomic_base.h ****   __cmpexch_failure_order2(memory_order __m) noexcept
 107:/usr/include/c++/9/bits/atomic_base.h ****   {
 108:/usr/include/c++/9/bits/atomic_base.h ****     return __m == memory_order_acq_rel ? memory_order_acquire
 109:/usr/include/c++/9/bits/atomic_base.h ****       : __m == memory_order_release ? memory_order_relaxed : __m;
 110:/usr/include/c++/9/bits/atomic_base.h ****   }
 111:/usr/include/c++/9/bits/atomic_base.h **** 
 112:/usr/include/c++/9/bits/atomic_base.h ****   constexpr memory_order
 113:/usr/include/c++/9/bits/atomic_base.h ****   __cmpexch_failure_order(memory_order __m) noexcept
 114:/usr/include/c++/9/bits/atomic_base.h ****   {
 115:/usr/include/c++/9/bits/atomic_base.h ****     return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
 116:/usr/include/c++/9/bits/atomic_base.h ****       | __memory_order_modifier(__m & __memory_order_modifier_mask));
 117:/usr/include/c++/9/bits/atomic_base.h ****   }
 118:/usr/include/c++/9/bits/atomic_base.h **** 
 119:/usr/include/c++/9/bits/atomic_base.h ****   _GLIBCXX_ALWAYS_INLINE void
 120:/usr/include/c++/9/bits/atomic_base.h ****   atomic_thread_fence(memory_order __m) noexcept
 121:/usr/include/c++/9/bits/atomic_base.h ****   { __atomic_thread_fence(int(__m)); }
 122:/usr/include/c++/9/bits/atomic_base.h **** 
 123:/usr/include/c++/9/bits/atomic_base.h ****   _GLIBCXX_ALWAYS_INLINE void
 124:/usr/include/c++/9/bits/atomic_base.h ****   atomic_signal_fence(memory_order __m) noexcept
 125:/usr/include/c++/9/bits/atomic_base.h ****   { __atomic_signal_fence(int(__m)); }
 126:/usr/include/c++/9/bits/atomic_base.h **** 
 127:/usr/include/c++/9/bits/atomic_base.h ****   /// kill_dependency
 128:/usr/include/c++/9/bits/atomic_base.h ****   template<typename _Tp>
 129:/usr/include/c++/9/bits/atomic_base.h ****     inline _Tp
 130:/usr/include/c++/9/bits/atomic_base.h ****     kill_dependency(_Tp __y) noexcept
 131:/usr/include/c++/9/bits/atomic_base.h ****     {
 132:/usr/include/c++/9/bits/atomic_base.h ****       _Tp __ret(__y);
 133:/usr/include/c++/9/bits/atomic_base.h ****       return __ret;
 134:/usr/include/c++/9/bits/atomic_base.h ****     }
 135:/usr/include/c++/9/bits/atomic_base.h **** 
 136:/usr/include/c++/9/bits/atomic_base.h **** 
 137:/usr/include/c++/9/bits/atomic_base.h ****   // Base types for atomics.
 138:/usr/include/c++/9/bits/atomic_base.h ****   template<typename _IntTp>
 139:/usr/include/c++/9/bits/atomic_base.h ****     struct __atomic_base;
 140:/usr/include/c++/9/bits/atomic_base.h **** 
 141:/usr/include/c++/9/bits/atomic_base.h **** 
 142:/usr/include/c++/9/bits/atomic_base.h **** #define ATOMIC_VAR_INIT(_VI) { _VI }
 143:/usr/include/c++/9/bits/atomic_base.h **** 
 144:/usr/include/c++/9/bits/atomic_base.h ****   template<typename _Tp>
 145:/usr/include/c++/9/bits/atomic_base.h ****     struct atomic;
 146:/usr/include/c++/9/bits/atomic_base.h **** 
 147:/usr/include/c++/9/bits/atomic_base.h ****   template<typename _Tp>
 148:/usr/include/c++/9/bits/atomic_base.h ****     struct atomic<_Tp*>;
 149:/usr/include/c++/9/bits/atomic_base.h **** 
 150:/usr/include/c++/9/bits/atomic_base.h ****     /* The target's "set" value for test-and-set may not be exactly 1.  */
 151:/usr/include/c++/9/bits/atomic_base.h **** #if __GCC_ATOMIC_TEST_AND_SET_TRUEVAL == 1
 152:/usr/include/c++/9/bits/atomic_base.h ****     typedef bool __atomic_flag_data_type;
 153:/usr/include/c++/9/bits/atomic_base.h **** #else
 154:/usr/include/c++/9/bits/atomic_base.h ****     typedef unsigned char __atomic_flag_data_type;
 155:/usr/include/c++/9/bits/atomic_base.h **** #endif
 156:/usr/include/c++/9/bits/atomic_base.h **** 
 157:/usr/include/c++/9/bits/atomic_base.h ****   /**
 158:/usr/include/c++/9/bits/atomic_base.h ****    *  @brief Base type for atomic_flag.
 159:/usr/include/c++/9/bits/atomic_base.h ****    *
 160:/usr/include/c++/9/bits/atomic_base.h ****    *  Base type is POD with data, allowing atomic_flag to derive from
 161:/usr/include/c++/9/bits/atomic_base.h ****    *  it and meet the standard layout type requirement. In addition to
 162:/usr/include/c++/9/bits/atomic_base.h ****    *  compatibility with a C interface, this allows different
 163:/usr/include/c++/9/bits/atomic_base.h ****    *  implementations of atomic_flag to use the same atomic operation
 164:/usr/include/c++/9/bits/atomic_base.h ****    *  functions, via a standard conversion to the __atomic_flag_base
 165:/usr/include/c++/9/bits/atomic_base.h ****    *  argument.
 166:/usr/include/c++/9/bits/atomic_base.h ****   */
 167:/usr/include/c++/9/bits/atomic_base.h ****   _GLIBCXX_BEGIN_EXTERN_C
 168:/usr/include/c++/9/bits/atomic_base.h **** 
 169:/usr/include/c++/9/bits/atomic_base.h ****   struct __atomic_flag_base
 170:/usr/include/c++/9/bits/atomic_base.h ****   {
 171:/usr/include/c++/9/bits/atomic_base.h ****     __atomic_flag_data_type _M_i;
 172:/usr/include/c++/9/bits/atomic_base.h ****   };
 173:/usr/include/c++/9/bits/atomic_base.h **** 
 174:/usr/include/c++/9/bits/atomic_base.h ****   _GLIBCXX_END_EXTERN_C
 175:/usr/include/c++/9/bits/atomic_base.h **** 
 176:/usr/include/c++/9/bits/atomic_base.h **** #define ATOMIC_FLAG_INIT { 0 }
 177:/usr/include/c++/9/bits/atomic_base.h **** 
 178:/usr/include/c++/9/bits/atomic_base.h ****   /// atomic_flag
 179:/usr/include/c++/9/bits/atomic_base.h ****   struct atomic_flag : public __atomic_flag_base
 180:/usr/include/c++/9/bits/atomic_base.h ****   {
 181:/usr/include/c++/9/bits/atomic_base.h ****     atomic_flag() noexcept = default;
 182:/usr/include/c++/9/bits/atomic_base.h ****     ~atomic_flag() noexcept = default;
 183:/usr/include/c++/9/bits/atomic_base.h ****     atomic_flag(const atomic_flag&) = delete;
 184:/usr/include/c++/9/bits/atomic_base.h ****     atomic_flag& operator=(const atomic_flag&) = delete;
 185:/usr/include/c++/9/bits/atomic_base.h ****     atomic_flag& operator=(const atomic_flag&) volatile = delete;
 186:/usr/include/c++/9/bits/atomic_base.h **** 
 187:/usr/include/c++/9/bits/atomic_base.h ****     // Conversion to ATOMIC_FLAG_INIT.
 188:/usr/include/c++/9/bits/atomic_base.h ****     constexpr atomic_flag(bool __i) noexcept
 189:/usr/include/c++/9/bits/atomic_base.h ****       : __atomic_flag_base{ _S_init(__i) }
 190:/usr/include/c++/9/bits/atomic_base.h ****     { }
 191:/usr/include/c++/9/bits/atomic_base.h **** 
 192:/usr/include/c++/9/bits/atomic_base.h ****     _GLIBCXX_ALWAYS_INLINE bool
 193:/usr/include/c++/9/bits/atomic_base.h ****     test_and_set(memory_order __m = memory_order_seq_cst) noexcept
 194:/usr/include/c++/9/bits/atomic_base.h ****     {
 195:/usr/include/c++/9/bits/atomic_base.h ****       return __atomic_test_and_set (&_M_i, int(__m));
 196:/usr/include/c++/9/bits/atomic_base.h ****     }
 197:/usr/include/c++/9/bits/atomic_base.h **** 
 198:/usr/include/c++/9/bits/atomic_base.h ****     _GLIBCXX_ALWAYS_INLINE bool
 199:/usr/include/c++/9/bits/atomic_base.h ****     test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
 200:/usr/include/c++/9/bits/atomic_base.h ****     {
 201:/usr/include/c++/9/bits/atomic_base.h ****       return __atomic_test_and_set (&_M_i, int(__m));
 202:/usr/include/c++/9/bits/atomic_base.h ****     }
 203:/usr/include/c++/9/bits/atomic_base.h **** 
 204:/usr/include/c++/9/bits/atomic_base.h ****     _GLIBCXX_ALWAYS_INLINE void
 205:/usr/include/c++/9/bits/atomic_base.h ****     clear(memory_order __m = memory_order_seq_cst) noexcept
 206:/usr/include/c++/9/bits/atomic_base.h ****     {
 207:/usr/include/c++/9/bits/atomic_base.h ****       memory_order __b = __m & __memory_order_mask;
 208:/usr/include/c++/9/bits/atomic_base.h ****       __glibcxx_assert(__b != memory_order_consume);
 209:/usr/include/c++/9/bits/atomic_base.h ****       __glibcxx_assert(__b != memory_order_acquire);
 210:/usr/include/c++/9/bits/atomic_base.h ****       __glibcxx_assert(__b != memory_order_acq_rel);
 211:/usr/include/c++/9/bits/atomic_base.h **** 
 212:/usr/include/c++/9/bits/atomic_base.h ****       __atomic_clear (&_M_i, int(__m));
 213:/usr/include/c++/9/bits/atomic_base.h ****     }
 214:/usr/include/c++/9/bits/atomic_base.h **** 
 215:/usr/include/c++/9/bits/atomic_base.h ****     _GLIBCXX_ALWAYS_INLINE void
 216:/usr/include/c++/9/bits/atomic_base.h ****     clear(memory_order __m = memory_order_seq_cst) volatile noexcept
 217:/usr/include/c++/9/bits/atomic_base.h ****     {
 218:/usr/include/c++/9/bits/atomic_base.h ****       memory_order __b = __m & __memory_order_mask;
 219:/usr/include/c++/9/bits/atomic_base.h ****       __glibcxx_assert(__b != memory_order_consume);
 220:/usr/include/c++/9/bits/atomic_base.h ****       __glibcxx_assert(__b != memory_order_acquire);
 221:/usr/include/c++/9/bits/atomic_base.h ****       __glibcxx_assert(__b != memory_order_acq_rel);
 222:/usr/include/c++/9/bits/atomic_base.h **** 
 223:/usr/include/c++/9/bits/atomic_base.h ****       __atomic_clear (&_M_i, int(__m));
 224:/usr/include/c++/9/bits/atomic_base.h ****     }
 225:/usr/include/c++/9/bits/atomic_base.h **** 
 226:/usr/include/c++/9/bits/atomic_base.h ****   private:
 227:/usr/include/c++/9/bits/atomic_base.h ****     static constexpr __atomic_flag_data_type
 228:/usr/include/c++/9/bits/atomic_base.h ****     _S_init(bool __i)
 229:/usr/include/c++/9/bits/atomic_base.h ****     { return __i ? __GCC_ATOMIC_TEST_AND_SET_TRUEVAL : 0; }
 230:/usr/include/c++/9/bits/atomic_base.h ****   };
 231:/usr/include/c++/9/bits/atomic_base.h **** 
 232:/usr/include/c++/9/bits/atomic_base.h **** 
 233:/usr/include/c++/9/bits/atomic_base.h ****   /// Base class for atomic integrals.
 234:/usr/include/c++/9/bits/atomic_base.h ****   //
 235:/usr/include/c++/9/bits/atomic_base.h ****   // For each of the integral types, define atomic_[integral type] struct
 236:/usr/include/c++/9/bits/atomic_base.h ****   //
 237:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_bool     bool
 238:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_char     char
 239:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_schar    signed char
 240:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_uchar    unsigned char
 241:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_short    short
 242:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_ushort   unsigned short
 243:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_int      int
 244:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_uint     unsigned int
 245:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_long     long
 246:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_ulong    unsigned long
 247:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_llong    long long
 248:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_ullong   unsigned long long
 249:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_char8_t  char8_t
 250:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_char16_t char16_t
 251:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_char32_t char32_t
 252:/usr/include/c++/9/bits/atomic_base.h ****   // atomic_wchar_t  wchar_t
 253:/usr/include/c++/9/bits/atomic_base.h ****   //
 254:/usr/include/c++/9/bits/atomic_base.h ****   // NB: Assuming _ITp is an integral scalar type that is 1, 2, 4, or
 255:/usr/include/c++/9/bits/atomic_base.h ****   // 8 bytes, since that is what GCC built-in functions for atomic
 256:/usr/include/c++/9/bits/atomic_base.h ****   // memory access expect.
 257:/usr/include/c++/9/bits/atomic_base.h ****   template<typename _ITp>
 258:/usr/include/c++/9/bits/atomic_base.h ****     struct __atomic_base
 259:/usr/include/c++/9/bits/atomic_base.h ****     {
 260:/usr/include/c++/9/bits/atomic_base.h ****       using value_type = _ITp;
 261:/usr/include/c++/9/bits/atomic_base.h ****       using difference_type = value_type;
 262:/usr/include/c++/9/bits/atomic_base.h **** 
 263:/usr/include/c++/9/bits/atomic_base.h ****     private:
 264:/usr/include/c++/9/bits/atomic_base.h ****       typedef _ITp 	__int_type;
 265:/usr/include/c++/9/bits/atomic_base.h **** 
 266:/usr/include/c++/9/bits/atomic_base.h ****       static constexpr int _S_alignment =
 267:/usr/include/c++/9/bits/atomic_base.h **** 	sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);
 268:/usr/include/c++/9/bits/atomic_base.h **** 
 269:/usr/include/c++/9/bits/atomic_base.h ****       alignas(_S_alignment) __int_type _M_i;
 270:/usr/include/c++/9/bits/atomic_base.h **** 
 271:/usr/include/c++/9/bits/atomic_base.h ****     public:
 272:/usr/include/c++/9/bits/atomic_base.h ****       __atomic_base() noexcept = default;
 273:/usr/include/c++/9/bits/atomic_base.h ****       ~__atomic_base() noexcept = default;
 274:/usr/include/c++/9/bits/atomic_base.h ****       __atomic_base(const __atomic_base&) = delete;
 275:/usr/include/c++/9/bits/atomic_base.h ****       __atomic_base& operator=(const __atomic_base&) = delete;
 276:/usr/include/c++/9/bits/atomic_base.h ****       __atomic_base& operator=(const __atomic_base&) volatile = delete;
 277:/usr/include/c++/9/bits/atomic_base.h **** 
 278:/usr/include/c++/9/bits/atomic_base.h ****       // Requires __int_type convertible to _M_i.
 279:/usr/include/c++/9/bits/atomic_base.h ****       constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 280:/usr/include/c++/9/bits/atomic_base.h **** 
 281:/usr/include/c++/9/bits/atomic_base.h ****       operator __int_type() const noexcept
 282:/usr/include/c++/9/bits/atomic_base.h ****       { return load(); }
 283:/usr/include/c++/9/bits/atomic_base.h **** 
 284:/usr/include/c++/9/bits/atomic_base.h ****       operator __int_type() const volatile noexcept
 285:/usr/include/c++/9/bits/atomic_base.h ****       { return load(); }
 286:/usr/include/c++/9/bits/atomic_base.h **** 
 287:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 288:/usr/include/c++/9/bits/atomic_base.h ****       operator=(__int_type __i) noexcept
 289:/usr/include/c++/9/bits/atomic_base.h ****       {
 290:/usr/include/c++/9/bits/atomic_base.h **** 	store(__i);
 291:/usr/include/c++/9/bits/atomic_base.h **** 	return __i;
 292:/usr/include/c++/9/bits/atomic_base.h ****       }
 293:/usr/include/c++/9/bits/atomic_base.h **** 
 294:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 295:/usr/include/c++/9/bits/atomic_base.h ****       operator=(__int_type __i) volatile noexcept
 296:/usr/include/c++/9/bits/atomic_base.h ****       {
 297:/usr/include/c++/9/bits/atomic_base.h **** 	store(__i);
 298:/usr/include/c++/9/bits/atomic_base.h **** 	return __i;
 299:/usr/include/c++/9/bits/atomic_base.h ****       }
 300:/usr/include/c++/9/bits/atomic_base.h **** 
 301:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 302:/usr/include/c++/9/bits/atomic_base.h ****       operator++(int) noexcept
 303:/usr/include/c++/9/bits/atomic_base.h ****       { return fetch_add(1); }
 304:/usr/include/c++/9/bits/atomic_base.h **** 
 305:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 306:/usr/include/c++/9/bits/atomic_base.h ****       operator++(int) volatile noexcept
 307:/usr/include/c++/9/bits/atomic_base.h ****       { return fetch_add(1); }
 308:/usr/include/c++/9/bits/atomic_base.h **** 
 309:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 310:/usr/include/c++/9/bits/atomic_base.h ****       operator--(int) noexcept
 311:/usr/include/c++/9/bits/atomic_base.h ****       { return fetch_sub(1); }
 312:/usr/include/c++/9/bits/atomic_base.h **** 
 313:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 314:/usr/include/c++/9/bits/atomic_base.h ****       operator--(int) volatile noexcept
 315:/usr/include/c++/9/bits/atomic_base.h ****       { return fetch_sub(1); }
 316:/usr/include/c++/9/bits/atomic_base.h **** 
 317:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 318:/usr/include/c++/9/bits/atomic_base.h ****       operator++() noexcept
 319:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 320:/usr/include/c++/9/bits/atomic_base.h **** 
 321:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 322:/usr/include/c++/9/bits/atomic_base.h ****       operator++() volatile noexcept
 323:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 324:/usr/include/c++/9/bits/atomic_base.h **** 
 325:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 326:/usr/include/c++/9/bits/atomic_base.h ****       operator--() noexcept
 327:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 328:/usr/include/c++/9/bits/atomic_base.h **** 
 329:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 330:/usr/include/c++/9/bits/atomic_base.h ****       operator--() volatile noexcept
 331:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 332:/usr/include/c++/9/bits/atomic_base.h **** 
 333:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 334:/usr/include/c++/9/bits/atomic_base.h ****       operator+=(__int_type __i) noexcept
 335:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 336:/usr/include/c++/9/bits/atomic_base.h **** 
 337:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 338:/usr/include/c++/9/bits/atomic_base.h ****       operator+=(__int_type __i) volatile noexcept
 339:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 340:/usr/include/c++/9/bits/atomic_base.h **** 
 341:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 342:/usr/include/c++/9/bits/atomic_base.h ****       operator-=(__int_type __i) noexcept
 343:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 344:/usr/include/c++/9/bits/atomic_base.h **** 
 345:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 346:/usr/include/c++/9/bits/atomic_base.h ****       operator-=(__int_type __i) volatile noexcept
 347:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 348:/usr/include/c++/9/bits/atomic_base.h **** 
 349:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 350:/usr/include/c++/9/bits/atomic_base.h ****       operator&=(__int_type __i) noexcept
 351:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 352:/usr/include/c++/9/bits/atomic_base.h **** 
 353:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 354:/usr/include/c++/9/bits/atomic_base.h ****       operator&=(__int_type __i) volatile noexcept
 355:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 356:/usr/include/c++/9/bits/atomic_base.h **** 
 357:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 358:/usr/include/c++/9/bits/atomic_base.h ****       operator|=(__int_type __i) noexcept
 359:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 360:/usr/include/c++/9/bits/atomic_base.h **** 
 361:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 362:/usr/include/c++/9/bits/atomic_base.h ****       operator|=(__int_type __i) volatile noexcept
 363:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 364:/usr/include/c++/9/bits/atomic_base.h **** 
 365:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 366:/usr/include/c++/9/bits/atomic_base.h ****       operator^=(__int_type __i) noexcept
 367:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 368:/usr/include/c++/9/bits/atomic_base.h **** 
 369:/usr/include/c++/9/bits/atomic_base.h ****       __int_type
 370:/usr/include/c++/9/bits/atomic_base.h ****       operator^=(__int_type __i) volatile noexcept
 371:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 372:/usr/include/c++/9/bits/atomic_base.h **** 
 373:/usr/include/c++/9/bits/atomic_base.h ****       bool
 374:/usr/include/c++/9/bits/atomic_base.h ****       is_lock_free() const noexcept
 375:/usr/include/c++/9/bits/atomic_base.h ****       {
 376:/usr/include/c++/9/bits/atomic_base.h **** 	// Use a fake, minimally aligned pointer.
 377:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_is_lock_free(sizeof(_M_i),
 378:/usr/include/c++/9/bits/atomic_base.h **** 	    reinterpret_cast<void *>(-_S_alignment));
 379:/usr/include/c++/9/bits/atomic_base.h ****       }
 380:/usr/include/c++/9/bits/atomic_base.h **** 
 381:/usr/include/c++/9/bits/atomic_base.h ****       bool
 382:/usr/include/c++/9/bits/atomic_base.h ****       is_lock_free() const volatile noexcept
 383:/usr/include/c++/9/bits/atomic_base.h ****       {
 384:/usr/include/c++/9/bits/atomic_base.h **** 	// Use a fake, minimally aligned pointer.
 385:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_is_lock_free(sizeof(_M_i),
 386:/usr/include/c++/9/bits/atomic_base.h **** 	    reinterpret_cast<void *>(-_S_alignment));
 387:/usr/include/c++/9/bits/atomic_base.h ****       }
 388:/usr/include/c++/9/bits/atomic_base.h **** 
 389:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE void
 390:/usr/include/c++/9/bits/atomic_base.h ****       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
 391:/usr/include/c++/9/bits/atomic_base.h ****       {
 392:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b = __m & __memory_order_mask;
 393:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_acquire);
 394:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_acq_rel);
 395:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_consume);
 396:/usr/include/c++/9/bits/atomic_base.h **** 
 397:/usr/include/c++/9/bits/atomic_base.h **** 	__atomic_store_n(&_M_i, __i, int(__m));
 398:/usr/include/c++/9/bits/atomic_base.h ****       }
 399:/usr/include/c++/9/bits/atomic_base.h **** 
 400:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE void
 401:/usr/include/c++/9/bits/atomic_base.h ****       store(__int_type __i,
 402:/usr/include/c++/9/bits/atomic_base.h **** 	    memory_order __m = memory_order_seq_cst) volatile noexcept
 403:/usr/include/c++/9/bits/atomic_base.h ****       {
 404:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b = __m & __memory_order_mask;
 405:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_acquire);
 406:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_acq_rel);
 407:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_consume);
 408:/usr/include/c++/9/bits/atomic_base.h **** 
 409:/usr/include/c++/9/bits/atomic_base.h **** 	__atomic_store_n(&_M_i, __i, int(__m));
 410:/usr/include/c++/9/bits/atomic_base.h ****       }
 411:/usr/include/c++/9/bits/atomic_base.h **** 
 412:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE __int_type
 413:/usr/include/c++/9/bits/atomic_base.h ****       load(memory_order __m = memory_order_seq_cst) const noexcept
 414:/usr/include/c++/9/bits/atomic_base.h ****       {
 415:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b = __m & __memory_order_mask;
 416:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_release);
 417:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_acq_rel);
 418:/usr/include/c++/9/bits/atomic_base.h **** 
 419:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_load_n(&_M_i, int(__m));
 420:/usr/include/c++/9/bits/atomic_base.h ****       }
 421:/usr/include/c++/9/bits/atomic_base.h **** 
 422:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE __int_type
 423:/usr/include/c++/9/bits/atomic_base.h ****       load(memory_order __m = memory_order_seq_cst) const volatile noexcept
 424:/usr/include/c++/9/bits/atomic_base.h ****       {
 425:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b = __m & __memory_order_mask;
 426:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_release);
 427:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b != memory_order_acq_rel);
 428:/usr/include/c++/9/bits/atomic_base.h **** 
 429:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_load_n(&_M_i, int(__m));
 430:/usr/include/c++/9/bits/atomic_base.h ****       }
 431:/usr/include/c++/9/bits/atomic_base.h **** 
 432:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE __int_type
 433:/usr/include/c++/9/bits/atomic_base.h ****       exchange(__int_type __i,
 434:/usr/include/c++/9/bits/atomic_base.h **** 	       memory_order __m = memory_order_seq_cst) noexcept
 435:/usr/include/c++/9/bits/atomic_base.h ****       {
 436:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_exchange_n(&_M_i, __i, int(__m));
 437:/usr/include/c++/9/bits/atomic_base.h ****       }
 438:/usr/include/c++/9/bits/atomic_base.h **** 
 439:/usr/include/c++/9/bits/atomic_base.h **** 
 440:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE __int_type
 441:/usr/include/c++/9/bits/atomic_base.h ****       exchange(__int_type __i,
 442:/usr/include/c++/9/bits/atomic_base.h **** 	       memory_order __m = memory_order_seq_cst) volatile noexcept
 443:/usr/include/c++/9/bits/atomic_base.h ****       {
 444:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_exchange_n(&_M_i, __i, int(__m));
 445:/usr/include/c++/9/bits/atomic_base.h ****       }
 446:/usr/include/c++/9/bits/atomic_base.h **** 
 447:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 448:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_weak(__int_type& __i1, __int_type __i2,
 449:/usr/include/c++/9/bits/atomic_base.h **** 			    memory_order __m1, memory_order __m2) noexcept
 450:/usr/include/c++/9/bits/atomic_base.h ****       {
 451:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b2 = __m2 & __memory_order_mask;
 452:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b1 = __m1 & __memory_order_mask;
 453:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_release);
 454:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_acq_rel);
 455:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 <= __b1);
 456:/usr/include/c++/9/bits/atomic_base.h **** 
 457:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
 458:/usr/include/c++/9/bits/atomic_base.h **** 					   int(__m1), int(__m2));
 459:/usr/include/c++/9/bits/atomic_base.h ****       }
 460:/usr/include/c++/9/bits/atomic_base.h **** 
 461:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 462:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_weak(__int_type& __i1, __int_type __i2,
 463:/usr/include/c++/9/bits/atomic_base.h **** 			    memory_order __m1,
 464:/usr/include/c++/9/bits/atomic_base.h **** 			    memory_order __m2) volatile noexcept
 465:/usr/include/c++/9/bits/atomic_base.h ****       {
 466:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b2 = __m2 & __memory_order_mask;
 467:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b1 = __m1 & __memory_order_mask;
 468:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_release);
 469:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_acq_rel);
 470:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 <= __b1);
 471:/usr/include/c++/9/bits/atomic_base.h **** 
 472:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
 473:/usr/include/c++/9/bits/atomic_base.h **** 					   int(__m1), int(__m2));
 474:/usr/include/c++/9/bits/atomic_base.h ****       }
 475:/usr/include/c++/9/bits/atomic_base.h **** 
 476:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 477:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_weak(__int_type& __i1, __int_type __i2,
 478:/usr/include/c++/9/bits/atomic_base.h **** 			    memory_order __m = memory_order_seq_cst) noexcept
 479:/usr/include/c++/9/bits/atomic_base.h ****       {
 480:/usr/include/c++/9/bits/atomic_base.h **** 	return compare_exchange_weak(__i1, __i2, __m,
 481:/usr/include/c++/9/bits/atomic_base.h **** 				     __cmpexch_failure_order(__m));
 482:/usr/include/c++/9/bits/atomic_base.h ****       }
 483:/usr/include/c++/9/bits/atomic_base.h **** 
 484:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 485:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_weak(__int_type& __i1, __int_type __i2,
 486:/usr/include/c++/9/bits/atomic_base.h **** 		   memory_order __m = memory_order_seq_cst) volatile noexcept
 487:/usr/include/c++/9/bits/atomic_base.h ****       {
 488:/usr/include/c++/9/bits/atomic_base.h **** 	return compare_exchange_weak(__i1, __i2, __m,
 489:/usr/include/c++/9/bits/atomic_base.h **** 				     __cmpexch_failure_order(__m));
 490:/usr/include/c++/9/bits/atomic_base.h ****       }
 491:/usr/include/c++/9/bits/atomic_base.h **** 
 492:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 493:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_strong(__int_type& __i1, __int_type __i2,
 494:/usr/include/c++/9/bits/atomic_base.h **** 			      memory_order __m1, memory_order __m2) noexcept
 495:/usr/include/c++/9/bits/atomic_base.h ****       {
 496:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b2 = __m2 & __memory_order_mask;
 497:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b1 = __m1 & __memory_order_mask;
 498:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_release);
 499:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_acq_rel);
 500:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 <= __b1);
 501:/usr/include/c++/9/bits/atomic_base.h **** 
 502:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
 503:/usr/include/c++/9/bits/atomic_base.h **** 					   int(__m1), int(__m2));
 504:/usr/include/c++/9/bits/atomic_base.h ****       }
 505:/usr/include/c++/9/bits/atomic_base.h **** 
 506:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 507:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_strong(__int_type& __i1, __int_type __i2,
 508:/usr/include/c++/9/bits/atomic_base.h **** 			      memory_order __m1,
 509:/usr/include/c++/9/bits/atomic_base.h **** 			      memory_order __m2) volatile noexcept
 510:/usr/include/c++/9/bits/atomic_base.h ****       {
 511:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b2 = __m2 & __memory_order_mask;
 512:/usr/include/c++/9/bits/atomic_base.h **** 	memory_order __b1 = __m1 & __memory_order_mask;
 513:/usr/include/c++/9/bits/atomic_base.h **** 
 514:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_release);
 515:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 != memory_order_acq_rel);
 516:/usr/include/c++/9/bits/atomic_base.h **** 	__glibcxx_assert(__b2 <= __b1);
 517:/usr/include/c++/9/bits/atomic_base.h **** 
 518:/usr/include/c++/9/bits/atomic_base.h **** 	return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
 519:/usr/include/c++/9/bits/atomic_base.h **** 					   int(__m1), int(__m2));
 520:/usr/include/c++/9/bits/atomic_base.h ****       }
 521:/usr/include/c++/9/bits/atomic_base.h **** 
 522:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 523:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_strong(__int_type& __i1, __int_type __i2,
 524:/usr/include/c++/9/bits/atomic_base.h **** 			      memory_order __m = memory_order_seq_cst) noexcept
 525:/usr/include/c++/9/bits/atomic_base.h ****       {
 526:/usr/include/c++/9/bits/atomic_base.h **** 	return compare_exchange_strong(__i1, __i2, __m,
 527:/usr/include/c++/9/bits/atomic_base.h **** 				       __cmpexch_failure_order(__m));
 528:/usr/include/c++/9/bits/atomic_base.h ****       }
 529:/usr/include/c++/9/bits/atomic_base.h **** 
 530:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE bool
 531:/usr/include/c++/9/bits/atomic_base.h ****       compare_exchange_strong(__int_type& __i1, __int_type __i2,
 532:/usr/include/c++/9/bits/atomic_base.h **** 		 memory_order __m = memory_order_seq_cst) volatile noexcept
 533:/usr/include/c++/9/bits/atomic_base.h ****       {
 534:/usr/include/c++/9/bits/atomic_base.h **** 	return compare_exchange_strong(__i1, __i2, __m,
 535:/usr/include/c++/9/bits/atomic_base.h **** 				       __cmpexch_failure_order(__m));
 536:/usr/include/c++/9/bits/atomic_base.h ****       }
 537:/usr/include/c++/9/bits/atomic_base.h **** 
 538:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE __int_type
 539:/usr/include/c++/9/bits/atomic_base.h ****       fetch_add(__int_type __i,
 540:/usr/include/c++/9/bits/atomic_base.h **** 		memory_order __m = memory_order_seq_cst) noexcept
 541:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
 542:/usr/include/c++/9/bits/atomic_base.h **** 
 543:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE __int_type
 544:/usr/include/c++/9/bits/atomic_base.h ****       fetch_add(__int_type __i,
 545:/usr/include/c++/9/bits/atomic_base.h **** 		memory_order __m = memory_order_seq_cst) volatile noexcept
 546:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
 547:/usr/include/c++/9/bits/atomic_base.h **** 
 548:/usr/include/c++/9/bits/atomic_base.h ****       _GLIBCXX_ALWAYS_INLINE __int_type
 549:/usr/include/c++/9/bits/atomic_base.h ****       fetch_sub(__int_type __i,
 14025              		.loc 29 549 7 discriminator 1 view .LVU2820
 14026              	.LBE8402:
 14027              	.LBE8403:
 14028              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:238:     if (target_ != NullT
 14029              		.loc 28 238 42 is_stmt 0 discriminator 1 view .LVU2821
 14030 001c F0488368 		lock subq	$1, 8(%rax)	#,,
 14030      0801
 14031 0022 740C     		je	.L421	#,
 14032              	.LVL741:
 14033              	.L412:
 14034              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:251:     target_ = NullType::
 239:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // justification for const_cast: release_resources is basically a destructor
 240:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // and a destructor always mutates the object, even for const objects.
 241:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       const_cast<std::remove_const_t<TTarget>*>(target_)->release_resources();
 242:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 243:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // See comment above about weakcount. As long as refcount>0,
 244:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // weakcount is one larger than the actual number of weak references.
 245:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // So we need to decrement it here.
 246:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       if (target_->weakcount_.load(std::memory_order_acquire) == 1 ||
 247:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****           detail::atomic_weakcount_decrement(target_->weakcount_) == 0) {
 248:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         delete target_;
 249:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       }
 250:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     }
 251:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     target_ = NullType::singleton();
 14035              		.loc 28 251 5 view .LVU2822
 14036 0024 48892B   		movq	%rbp, (%rbx)	# tmp110, this_12(D)->target_
 14037              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:252:   }
 252:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 14038              		.loc 28 252 3 view .LVU2823
 14039 0027 4883C408 		addq	$8, %rsp	#,
 14040              		.cfi_remember_state
 14041              		.cfi_def_cfa_offset 24
 14042 002b 5B       		popq	%rbx	#
 14043              		.cfi_def_cfa_offset 16
 14044              	.LVL742:
 14045              		.loc 28 252 3 view .LVU2824
 14046 002c 5D       		popq	%rbp	#
 14047              		.cfi_def_cfa_offset 8
 14048 002d C3       		ret	
 14049              	.LVL743:
 14050 002e 6690     		.p2align 4,,10
 14051              		.p2align 3
 14052              	.L421:
 14053              		.cfi_restore_state
 14054              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:241:       const_cast<std::re
 241:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 14055              		.loc 28 241 49 view .LVU2825
 14056 0030 488B3F   		movq	(%rdi), %rdi	# this_12(D)->target_, _2
 14057              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:241:       const_cast<std::re
 241:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 14058              		.loc 28 241 7 view .LVU2826
 14059 0033 488B07   		movq	(%rdi), %rax	# MEM[(struct remove_const_t *)_2].D.147594._vptr.intrusive_ptr_target, MEM[(str
 14060              	.LVL744:
 241:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 14061              		.loc 28 241 7 view .LVU2827
 14062 0036 FF5010   		call	*16(%rax)	# MEM[(int (*) () *)_3 + 16B]
 14063              	.LVL745:
 14064              	.LBB8404:
 14065              	.LBI8404:
 413:/usr/include/c++/9/bits/atomic_base.h ****       {
 14066              		.loc 29 413 7 is_stmt 1 view .LVU2828
 14067              	.LBB8405:
 14068              	# /usr/include/c++/9/bits/atomic_base.h:419: 	return __atomic_load_n(&_M_i, int(__m));
 419:/usr/include/c++/9/bits/atomic_base.h ****       }
 14069              		.loc 29 419 24 is_stmt 0 view .LVU2829
 14070 0039 488B03   		movq	(%rbx), %rax	# this_12(D)->target_, this_12(D)->target_
 14071 003c 488B4010 		movq	16(%rax), %rax	#, _18
 14072              	.LVL746:
 419:/usr/include/c++/9/bits/atomic_base.h ****       }
 14073              		.loc 29 419 24 view .LVU2830
 14074              	.LBE8405:
 14075              	.LBE8404:
 14076              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:246:       if (target_->weakc
 246:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****           detail::atomic_weakcount_decrement(target_->weakcount_) == 0) {
 14077              		.loc 28 246 68 view .LVU2831
 14078 0040 4883F801 		cmpq	$1, %rax	#, _18
 14079 0044 740B     		je	.L416	#,
 14080              	.LVL747:
 14081              	.LBB8406:
 14082              	.LBI8406:
 181:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   return weakcount.fetch_sub(1, std::memory_order_acq_rel) - 1;
 14083              		.loc 28 181 15 is_stmt 1 discriminator 2 view .LVU2832
 14084              	.LBE8406:
 182:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** }
 14085              		.loc 28 182 3 discriminator 2 view .LVU2833
 14086              	.LBB8409:
 14087              	.LBB8407:
 14088              	.LBI8407:
 14089              		.loc 29 549 7 discriminator 2 view .LVU2834
 14090              	.LBB8408:
 14091              	# /usr/include/c++/9/bits/atomic_base.h:551:       { return __atomic_fetch_sub(&_M_i, __i, int(__m)
 550:/usr/include/c++/9/bits/atomic_base.h **** 		memory_order __m = memory_order_seq_cst) noexcept
 551:/usr/include/c++/9/bits/atomic_base.h ****       { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }
 14092              		.loc 29 551 34 is_stmt 0 discriminator 2 view .LVU2835
 14093 0046 488B03   		movq	(%rbx), %rax	# this_12(D)->target_, this_12(D)->target_
 14094              	.LBE8408:
 14095              	.LBE8407:
 14096              	.LBE8409:
 14097              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:246:       if (target_->weakc
 246:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****           detail::atomic_weakcount_decrement(target_->weakcount_) == 0) {
 14098              		.loc 28 246 68 discriminator 2 view .LVU2836
 14099 0049 F0488368 		lock subq	$1, 16(%rax)	#,,
 14099      1001
 14100 004f 75D3     		jne	.L412	#,
 14101              	.LVL748:
 14102              	.L416:
 14103              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:248:         delete target_;
 248:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       }
 14104              		.loc 28 248 16 view .LVU2837
 14105 0051 488B3B   		movq	(%rbx), %rdi	# this_12(D)->target_, _14
 14106              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:248:         delete target_;
 248:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       }
 14107              		.loc 28 248 9 view .LVU2838
 14108 0054 4885FF   		testq	%rdi, %rdi	# _14
 14109 0057 74CB     		je	.L412	#,
 14110              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:248:         delete target_;
 248:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       }
 14111              		.loc 28 248 9 discriminator 1 view .LVU2839
 14112 0059 488B07   		movq	(%rdi), %rax	# _14->D.147594._vptr.intrusive_ptr_target, _14->D.147594._vptr.intrusive_ptr_ta
 14113 005c FF5008   		call	*8(%rax)	# MEM[(int (*) () *)_7 + 8B]
 14114              	.LVL749:
 14115 005f EBC3     		jmp	.L412	#
 14116              		.cfi_endproc
 14117              	.LFE15162:
 14118              		.section	.gcc_except_table._ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset
 14119              	.LLSDA15162:
 14120 0000 FF       		.byte	0xff
 14121 0001 FF       		.byte	0xff
 14122 0002 01       		.byte	0x1
 14123 0003 00       		.uleb128 .LLSDACSE15162-.LLSDACSB15162
 14124              	.LLSDACSB15162:
 14125              	.LLSDACSE15162:
 14126              		.section	.text._ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev,"axG",@p
 14128              		.section	.rodata.str1.1,"aMS",@progbits,1
 14129              	.LC38:
 14130 0000 20627574 		.string	" but tensor has no dimensions"
 14130      2074656E 
 14130      736F7220 
 14130      68617320 
 14130      6E6F2064 
 14131              	.LC39:
 14132 001e 64696D65 		.string	"dimension specified as "
 14132      6E73696F 
 14132      6E207370 
 14132      65636966 
 14132      69656420 
 14133              	.LC40:
 14134 0036 6D617962 		.string	"maybe_wrap_dim"
 14134      655F7772 
 14134      61705F64 
 14134      696D00
 14135              		.section	.rodata.str1.8,"aMS",@progbits,1
 14136              		.align 8
 14137              	.LC41:
 14138 0000 2F776F72 		.string	"/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h"
 14138      6B737061 
 14138      63652F70 
 14138      74682D6C 
 14138      696E6561 
 14139              		.section	.text.unlikely,"ax",@progbits
 14140              	.LCOLDB42:
 14141              		.section	.text.startup,"ax",@progbits
 14142              	.LHOTB42:
 14143              		.p2align 4
 14144              		.section	.text.unlikely
 14145              	.Ltext_cold0:
 14146              		.section	.text.startup
 14147              		.globl	main
 14149              	main:
 14150              	.LVL750:
 14151              	.LFB11735:
 14152              		.file 30 "main_pr.cpp"
   1:main_pr.cpp   **** // STD
   2:main_pr.cpp   **** #include <iostream>
   3:main_pr.cpp   **** 
   4:main_pr.cpp   **** // Torch
   5:main_pr.cpp   **** #include <ATen/ATen.h>
   6:main_pr.cpp   **** #include <ATen/Parallel.h>
   7:main_pr.cpp   **** 
   8:main_pr.cpp   **** #define NUM_THREADS 6
   9:main_pr.cpp   **** 
  10:main_pr.cpp   **** using namespace at;
  11:main_pr.cpp   **** using namespace at::native;
  12:main_pr.cpp   **** using namespace at::indexing;
  13:main_pr.cpp   **** 
  14:main_pr.cpp   **** 
  15:main_pr.cpp   **** int main(int argc, char** argv) {
 14153              		.loc 30 15 33 is_stmt 1 view -0
 14154              		.cfi_startproc
 14155              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 14156              		.cfi_lsda 0x1b,.LLSDA11735
 14157              		.loc 30 15 33 is_stmt 0 view .LVU2841
 14158 0000 F30F1EFA 		endbr64	
 14159 0004 4C8D5424 		leaq	8(%rsp), %r10	#,
 14159      08
 14160              		.cfi_def_cfa 10, 0
 14161 0009 4883E4E0 		andq	$-32, %rsp	#,
 14162              	# main_pr.cpp:17:     set_num_threads(NUM_THREADS);
  16:main_pr.cpp   **** 
  17:main_pr.cpp   ****     set_num_threads(NUM_THREADS);
 14163              		.loc 30 17 20 view .LVU2842
 14164 000d BF060000 		movl	$6, %edi	#,
 14164      00
 14165              	.LVL751:
 14166              	# main_pr.cpp:15: int main(int argc, char** argv) {
  15:main_pr.cpp   **** 
 14167              		.loc 30 15 33 view .LVU2843
 14168 0012 41FF72F8 		pushq	-8(%r10)	#
 14169 0016 55       		pushq	%rbp	#
 14170              		.cfi_escape 0x10,0x6,0x2,0x76,0
 14171 0017 4889E5   		movq	%rsp, %rbp	#,
 14172 001a 4157     		pushq	%r15	#
 14173 001c 4156     		pushq	%r14	#
 14174              		.cfi_escape 0x10,0xf,0x2,0x76,0x78
 14175              		.cfi_escape 0x10,0xe,0x2,0x76,0x70
 14176              	.LBB8659:
 14177              	.LBB8660:
 14178              	.LBB8661:
 14179              	# /workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h:104:         Length(Vec.size()) {}
 14180              		.file 31 "/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h"
   1:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** //===--- ArrayRef.h - Array Reference Wrapper -------------------*- C++ -*-===//
   2:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** //
   3:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** //                     The LLVM Compiler Infrastructure
   4:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** //
   5:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** // This file is distributed under the University of Illinois Open Source
   6:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** // License. See LICENSE.TXT for details.
   7:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** //
   8:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** //===----------------------------------------------------------------------===//
   9:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  10:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** // ATen: modified from llvm::ArrayRef.
  11:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** // removed llvm-specific functionality
  12:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** // removed some implicit const -> non-const conversions that rely on
  13:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** // complicated std::enable_if meta-programming
  14:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** // removed a bunch of slice variants for simplicity...
  15:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  16:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #pragma once
  17:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  18:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #include <c10/util/SmallVector.h>
  19:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #include <c10/util/C++17.h>
  20:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #include <c10/util/Exception.h>
  21:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #include <c10/util/Deprecated.h>
  22:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  23:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #include <array>
  24:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #include <iterator>
  25:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** #include <vector>
  26:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  27:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** namespace c10 {
  28:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  29:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// ArrayRef - Represent a constant reference to an array (0 or more elements
  30:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// consecutively in memory), i.e. a start pointer and a length.  It allows
  31:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// various APIs to take consecutive elements easily and conveniently.
  32:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** ///
  33:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// This class does not own the underlying data, it is expected to be used in
  34:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// situations where the data resides in some other buffer, whose lifetime
  35:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// extends past that of the ArrayRef. For this reason, it is not in general
  36:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// safe to store an ArrayRef.
  37:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** ///
  38:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// This is intended to be trivially copyable, so it should be passed by
  39:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** /// value.
  40:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** template <typename T>
  41:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** class ArrayRef final {
  42:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****  public:
  43:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   using iterator = const T*;
  44:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   using const_iterator = const T*;
  45:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   using size_type = size_t;
  46:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   using value_type = T;
  47:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  48:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   using reverse_iterator = std::reverse_iterator<iterator>;
  49:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  50:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****  private:
  51:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// The start of the array, in an external buffer.
  52:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   const T* Data;
  53:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  54:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// The number of elements.
  55:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   size_type Length;
  56:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  57:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****  public:
  58:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// @name Constructors
  59:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// @{
  60:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  61:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an empty ArrayRef.
  62:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /* implicit */ constexpr ArrayRef() : Data(nullptr), Length(0) {}
  63:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  64:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a single element.
  65:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   // TODO Make this explicit
  66:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   constexpr ArrayRef(const T& OneElt) : Data(&OneElt), Length(1) {}
  67:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  68:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a pointer and length.
  69:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   constexpr ArrayRef(const T* data, size_t length)
  70:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****       : Data(data), Length(length) {}
  71:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  72:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a range.
  73:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   constexpr ArrayRef(const T* begin, const T* end)
  74:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****       : Data(begin), Length(end - begin) {}
  75:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  76:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a SmallVector. This is templated in order to
  77:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// avoid instantiating SmallVectorTemplateCommon<T> whenever we
  78:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// copy-construct an ArrayRef.
  79:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   template <typename U>
  80:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /* implicit */ ArrayRef(const SmallVectorTemplateCommon<T, U>& Vec)
  81:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****       : Data(Vec.data()), Length(Vec.size()) {}
  82:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  83:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a std::vector.
  84:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   // The enable_if stuff here makes sure that this isn't used for std::vector<bool>,
  85:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   // because ArrayRef can't work on a std::vector<bool> bitfield.
  86:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   template <typename A>
  87:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /* implicit */ ArrayRef(const std::vector<T, A>& Vec)
  88:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****       : Data(Vec.data()), Length(Vec.size()) {
  89:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****     static_assert(!std::is_same<T, bool>::value, "ArrayRef<bool> cannot be constructed from a std::
  90:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   }
  91:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  92:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a std::array
  93:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   template <size_t N>
  94:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /* implicit */ constexpr ArrayRef(const std::array<T, N>& Arr)
  95:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****       : Data(Arr.data()), Length(N) {}
  96:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
  97:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a C array.
  98:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   template <size_t N>
  99:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /* implicit */ constexpr ArrayRef(const T (&Arr)[N]) : Data(Arr), Length(N) {}
 100:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
 101:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /// Construct an ArrayRef from a std::initializer_list.
 102:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****   /* implicit */ constexpr ArrayRef(const std::initializer_list<T>& Vec)
 103:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****       : Data(std::begin(Vec) == std::end(Vec) ? static_cast<T*>(nullptr) : std::begin(Vec)),
 104:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****         Length(Vec.size()) {}
 14181              		.loc 31 104 26 view .LVU2844
 14182 001e 4C8D7590 		leaq	-112(%rbp), %r14	#, tmp192
 14183              	.LBE8661:
 14184              	.LBE8660:
 14185              	.LBE8659:
 14186              	# main_pr.cpp:15: int main(int argc, char** argv) {
  15:main_pr.cpp   **** 
 14187              		.loc 30 15 33 view .LVU2845
 14188 0022 4155     		pushq	%r13	#
 14189 0024 4154     		pushq	%r12	#
 14190              		.cfi_escape 0x10,0xd,0x2,0x76,0x68
 14191              		.cfi_escape 0x10,0xc,0x2,0x76,0x60
 14192              	# main_pr.cpp:19:     auto t_input = at::rand({1, 3, 16, 320, 320}, at::CPU(at::kFloat));
  18:main_pr.cpp   **** 
  19:main_pr.cpp   ****     auto t_input = at::rand({1, 3, 16, 320, 320}, at::CPU(at::kFloat));
 14193              		.loc 30 19 70 view .LVU2846
 14194 0026 4C8DA5F0 		leaq	-272(%rbp), %r12	#, tmp191
 14194      FEFFFF
 14195              	# main_pr.cpp:15: int main(int argc, char** argv) {
  15:main_pr.cpp   **** 
 14196              		.loc 30 15 33 view .LVU2847
 14197 002d 4152     		pushq	%r10	#
 14198              		.cfi_escape 0xf,0x3,0x76,0x58,0x6
 14199 002f 53       		pushq	%rbx	#
 14200 0030 4881EC00 		subq	$256, %rsp	#,
 14200      010000
 14201              		.cfi_escape 0x10,0x3,0x2,0x76,0x50
 14202              	# main_pr.cpp:15: int main(int argc, char** argv) {
  15:main_pr.cpp   **** 
 14203              		.loc 30 15 33 view .LVU2848
 14204 0037 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp208
 14204      25280000 
 14204      00
 14205 0040 488945C8 		movq	%rax, -56(%rbp)	# tmp208, D.447165
 14206 0044 31C0     		xorl	%eax, %eax	# tmp208
  17:main_pr.cpp   **** 
 14207              		.loc 30 17 5 is_stmt 1 view .LVU2849
 14208              	.LEHB62:
 14209              	# main_pr.cpp:17:     set_num_threads(NUM_THREADS);
  17:main_pr.cpp   **** 
 14210              		.loc 30 17 20 is_stmt 0 view .LVU2850
 14211 0046 E8000000 		call	_ZN2at15set_num_threadsEi@PLT	#
 14211      00
 14212              	.LVL752:
 14213              		.loc 30 19 5 is_stmt 1 view .LVU2851
 14214              	.LBB8668:
 14215              	.LBI8668:
 14216              		.file 32 "/workspace/pth-linear-interp/torch/include/ATen/Context.h"
   1:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
   3:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/core/ATenGeneral.h>
   4:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/Tensor.h>
   5:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/Utils.h>
   6:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/core/ATenGeneral.h>
   7:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/core/Generator.h>
   8:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/CPUGeneratorImpl.h>
   9:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/core/LegacyTypeDispatch.h>
  10:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/detail/CUDAHooksInterface.h>
  11:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <ATen/detail/HIPHooksInterface.h>
  12:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <c10/util/Exception.h>
  13:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <c10/core/impl/DeviceGuardImplInterface.h>
  14:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <c10/core/QEngine.h>
  15:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
  16:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <memory>
  17:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <mutex>
  18:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** #include <cstdint>
  19:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
  20:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** namespace at {
  21:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
  22:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** class Tensor;
  23:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
  24:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** class TORCH_API Context {
  25:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****  public:
  26:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   Context();
  27:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
  28:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   const Generator& defaultGenerator(Device device) {
  29:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     DeviceType device_type = device.type();
  30:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     initCUDAIfNeeded(device_type);
  31:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     initHIPIfNeeded(device_type);
  32:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     if (device_type == at::kCPU) {
  33:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       return at::detail::getDefaultCPUGenerator();
  34:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     } else if (device_type == at::kCUDA) {
  35:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       return at::detail::getCUDAHooks().getDefaultCUDAGenerator(device.index());
  36:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     } else {
  37:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       AT_ERROR(DeviceTypeName(device_type), " device type not enabled.");
  38:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     }
  39:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  40:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   Device getDeviceFromPtr(void* data, DeviceType device_type) {
  41:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     initCUDAIfNeeded(device_type);
  42:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     initHIPIfNeeded(device_type);
  43:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     if (device_type == at::kCPU) {
  44:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       return DeviceType::CPU;
  45:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     } else if (device_type == at::kCUDA) {
  46:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       return at::detail::getCUDAHooks().getDeviceFromPtr(data);
  47:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     } else {
  48:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       AT_ERROR(DeviceTypeName(device_type), " device type not enabled.");
  49:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     }
  50:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  51:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool isPinnedPtr(void* data) {
  52:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return detail::getCUDAHooks().isPinnedPtr(data);
  53:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  54:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasOpenMP() const;
  55:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasMKL() const;
  56:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasLAPACK() const;
  57:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasMKLDNN() const;
  58:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasMAGMA() const {
  59:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return detail::getCUDAHooks().hasMAGMA();
  60:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  61:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasCUDA() const {
  62:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return detail::getCUDAHooks().hasCUDA();
  63:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  64:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasCUDART() const {
  65:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return detail::getCUDAHooks().hasCUDART();
  66:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  67:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   long versionCUDART() const {
  68:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return detail::getCUDAHooks().versionCUDART();
  69:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  70:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasHIP() const {
  71:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return detail::getHIPHooks().hasHIP();
  72:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  73:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool hasXLA() const {
  74:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return c10::impl::hasDeviceGuardImpl(at::DeviceType::XLA);
  75:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  76:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // defined in header so that getNonVariableType has ability to inline
  77:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // call_once check. getNonVariableType is called fairly frequently
  78:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   THCState* lazyInitCUDA() {
  79:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     std::call_once(thc_init,[&] {
  80:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       thc_state = detail::getCUDAHooks().initCUDA();
  81:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     });
  82:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return thc_state.get();
  83:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  84:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   THHState* lazyInitHIP() {
  85:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     std::call_once(thh_init,[&] {
  86:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       thh_state = detail::getHIPHooks().initHIP();
  87:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     });
  88:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return thh_state.get();
  89:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  90:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   const at::cuda::NVRTC& getNVRTC() {
  91:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return detail::getCUDAHooks().nvrtc();
  92:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  93:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   THCState* getTHCState() {
  94:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     // AT_ASSERT(thc_state);
  95:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return thc_state.get();
  96:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
  97:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   THHState* getTHHState() {
  98:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     return thh_state.get();
  99:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
 100:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 101:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool setFlushDenormal(bool on);
 102:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 103:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // NB: This method is *purely* whether or not a user requested
 104:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // that CuDNN was enabled, it doesn't actually say anything about
 105:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // whether or not CuDNN is actually usable.  Use cudnn_is_acceptable
 106:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // to test this instead
 107:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool userEnabledCuDNN() const;
 108:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setUserEnabledCuDNN(bool e);
 109:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool userEnabledMkldnn() const;
 110:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setUserEnabledMkldnn(bool e);
 111:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool benchmarkCuDNN() const;
 112:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setBenchmarkCuDNN(bool);
 113:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool deterministicCuDNN() const;
 114:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setDeterministicCuDNN(bool);
 115:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 116:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // Note [Enabling Deterministic Operations]
 117:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 118:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // Operations in PyTorch that normally act nondeterministically, but have an alternate
 119:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // deterministic implementation, should satisfy the following requirements:
 120:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 121:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // * Include this comment: "See Note [Enabling Deterministic Operations]"
 122:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 123:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // * Check the value of `at::globalContext().deterministicAlgorithms()` to toggle
 124:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   between nondeterministic and deterministic implementations.
 125:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 126:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // * Have an entry in the list of PyTorch operations that toggle between nondeterministic
 127:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   and deterministic implementations, in the docstring of `use_deterministic_algorithms()`
 128:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   in torch/__init__.py
 129:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 130:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // `example_func()` below shows an example of toggling between nondeterministic and
 131:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // deterministic implementations:
 132:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 133:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //    void example_func() {
 134:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      // See Note [Enabling Deterministic Operations]
 135:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      if (at::globalContext().deterministicAlgorithms()) {
 136:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //        example_func_deterministic();
 137:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      } else {
 138:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //        example_func_nondeterministic();
 139:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      }
 140:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //    }
 141:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 142:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool deterministicAlgorithms() const;
 143:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setDeterministicAlgorithms(bool);
 144:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 145:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // Note [Writing Nondeterministic Operations]
 146:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 147:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // Operations in PyTorch that act nondeterministically and do not have an alternate
 148:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // deterministic implementation should satisfy the following requirements:
 149:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 150:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // * Include this comment: "See Note [Writing Nondeterministic Operations]"
 151:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 152:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // * Include a comment explaining why the operation is nondeterministic.
 153:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 154:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // * Throw an error when `Context::deterministicAlgorithms()` is true. Most
 155:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   of the time, this should be accomplished by calling
 156:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   `at::globalContext().alertNotDeterminstic()`.  However, if the
 157:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   nondeterministic behavior is caused by the CuBLAS workspace
 158:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   configuration in CUDA >= 10.2,
 159:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   `at::globalContext().alertCuBLASConfigNotDeterministic()` should be
 160:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   called instead (in this case, a comment explaining why the operation is
 161:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   nondeterministic is not necessary). See below for details on these
 162:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   methods.
 163:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 164:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // * Have an entry in the list of nondeterministic PyTorch operations in the
 165:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //   docstring of `use_deterministic_algorithms()` in torch/__init__.py
 166:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 167:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // `example_func()` below shows an example of the comments and error-throwing code
 168:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // for a nondeterministic operation:
 169:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //
 170:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //    void example_func() {
 171:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      // See Note [Writing Nondeterministic Operations]
 172:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      // Nondeterministic because <reason>
 173:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      at::globalContext().alertNondeterministic("example_func");
 174:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //      ...
 175:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   //    }
 176:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 177:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // Throws an error if `Context::deterministicAlgorithms()` is true
 178:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void alertNotDeterministic(c10::string_view const& caller);
 179:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 180:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // Throws an error if `Context::deterministicAlgorithms()` is true, CUDA >= 10.2, and
 181:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // CUBLAS_WORKSPACE_CONFIG is not set to either ":16:8" or ":4096:8". For more details:
 182:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // https://docs.nvidia.com/cuda/cublas/index.html#cublasApi_reproducibility
 183:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void alertCuBLASConfigNotDeterministic();
 184:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 185:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool allowTF32CuDNN() const;
 186:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setAllowTF32CuDNN(bool);
 187:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool allowTF32CuBLAS() const;
 188:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setAllowTF32CuBLAS(bool);
 189:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   at::QEngine qEngine() const;
 190:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setQEngine(at::QEngine e);
 191:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   const std::vector<at::QEngine>& supportedQEngines() const;
 192:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool isXNNPACKAvailable() const;
 193:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // This method is used to release the original weight after pre-packing.
 194:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // It should be called once before loading/running the model.
 195:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   // NB: By default it is set to true for mobile builds.
 196:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setReleaseWeightsWhenPrepacking(bool e);
 197:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool releaseWeightsWhenPrepacking() const;
 198:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 199:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void setDisplayVmapFallbackWarnings(bool enabled);
 200:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool areVmapFallbackWarningsEnabled() const;
 201:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 202:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****  private:
 203:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void initCUDAIfNeeded(DeviceType p) {
 204:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     if (p == DeviceType::CUDA) {
 205:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       lazyInitCUDA();
 206:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     }
 207:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
 208:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   void initHIPIfNeeded(DeviceType p) {
 209:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     if (p == DeviceType::HIP) {
 210:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       lazyInitHIP();
 211:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****     }
 212:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   }
 213:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool checkCuBLASConfigDeterministic();
 214:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   std::once_flag thc_init;
 215:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   std::once_flag thh_init;
 216:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool enabled_cudnn = true;
 217:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool deterministic_cudnn = false;
 218:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool _deterministic_algorithms = false;
 219:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool benchmark_cudnn = false;
 220:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool allow_tf32_cudnn = true;
 221:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool allow_tf32_cublas = true;
 222:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool enabled_mkldnn = true;
 223:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   #ifdef C10_MOBILE
 224:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool release_original_weights = true;
 225:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   #else
 226:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool release_original_weights = false;
 227:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   #endif
 228:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   bool display_vmap_fallback_warnings_ = false;
 229:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   c10::optional<at::QEngine> quantized_engine = c10::nullopt;
 230:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   std::unique_ptr<THCState, void(*)(THCState*)> thc_state;
 231:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   std::unique_ptr<THHState, void(*)(THHState*)> thh_state;
 232:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** };
 233:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 234:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** TORCH_API Context& globalContext();
 235:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 236:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** static inline void init() {
 237:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   globalContext();
 238:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** }
 239:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 240:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** TORCH_API Allocator* getCPUAllocator();
 241:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 242:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** static inline DeprecatedTypeProperties& getDeprecatedTypeProperties(Backend p, ScalarType s) {
 243:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   return globalDeprecatedTypePropertiesRegistry().getDeprecatedTypeProperties(
 244:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       p, s);
 245:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** }
 246:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** 
 247:/workspace/pth-linear-interp/torch/include/ATen/Context.h **** static inline DeprecatedTypeProperties& CPU(ScalarType s) {
 14217              		.loc 32 247 41 view .LVU2852
 14218              	.LBB8669:
 248:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   return globalDeprecatedTypePropertiesRegistry().getDeprecatedTypeProperties(
 14219              		.loc 32 248 3 view .LVU2853
 14220              	# /workspace/pth-linear-interp/torch/include/ATen/Context.h:248:   return globalDeprecatedTypePrope
 14221              		.loc 32 248 49 is_stmt 0 view .LVU2854
 14222 004b E8000000 		call	_ZN2at38globalDeprecatedTypePropertiesRegistryEv@PLT	#
 14222      00
 14223              	.LVL753:
 14224              	# /workspace/pth-linear-interp/torch/include/ATen/Context.h:249:       Backend::CPU, s);
 249:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****       Backend::CPU, s);
 14225              		.loc 32 249 22 view .LVU2855
 14226 0050 BA060000 		movl	$6, %edx	#,
 14226      00
 14227 0055 31F6     		xorl	%esi, %esi	#
 14228              	# /workspace/pth-linear-interp/torch/include/ATen/Context.h:248:   return globalDeprecatedTypePrope
 248:/workspace/pth-linear-interp/torch/include/ATen/Context.h ****   return globalDeprecatedTypePropertiesRegistry().getDeprecatedTypeProperties(
 14229              		.loc 32 248 49 view .LVU2856
 14230 0057 4889C7   		movq	%rax, %rdi	# tmp196, _29
 14231              	# /workspace/pth-linear-interp/torch/include/ATen/Context.h:249:       Backend::CPU, s);
 14232              		.loc 32 249 22 view .LVU2857
 14233 005a E8000000 		call	_ZNK2at32DeprecatedTypePropertiesRegistry27getDeprecatedTypePropertiesEN3c107BackendENS1_10Sc
 14233      00
 14234              	.LVL754:
 14235              	.LBE8669:
 14236              	.LBE8668:
 14237              	.LBB8671:
 14238              	.LBB8672:
 14239              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:113:     return o
  99:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
 100:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   /// Constructs the `TensorOptions` from a type and a Device.  Asserts that
 101:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   /// the device type matches the device type of the type.
 102:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   TensorOptions options(c10::optional<Device> device_opt) const {
 103:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     if (!device_opt.has_value()) {
 104:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****       return options(-1);
 105:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     } else {
 106:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****       Device device = device_opt.value();
 107:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****       AT_ASSERT(device.type() == device_type());
 108:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****       return options(device.index());
 109:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     }
 110:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   }
 111:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h **** 
 112:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****   operator TensorOptions() const {
 113:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return options();
 14240              		.loc 21 113 20 view .LVU2858
 14241 005f BEFFFFFF 		movl	$-1, %esi	#,
 14241      FF
 14242              	.LBE8672:
 14243              	.LBE8671:
 14244              	.LBB8675:
 14245              	.LBB8670:
 14246              	# /workspace/pth-linear-interp/torch/include/ATen/Context.h:249:       Backend::CPU, s);
 14247              		.loc 32 249 22 view .LVU2859
 14248 0064 4889C7   		movq	%rax, %rdi	# tmp197, _30
 14249              	.LVL755:
 14250              		.loc 32 249 22 view .LVU2860
 14251              	.LBE8670:
 14252              	.LBE8675:
 14253              	.LBB8676:
 14254              	.LBI8671:
 112:/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h ****     return options();
 14255              		.loc 21 112 3 is_stmt 1 view .LVU2861
 14256              	.LBB8673:
 14257              		.loc 21 113 5 view .LVU2862
 14258              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:113:     return o
 14259              		.loc 21 113 20 is_stmt 0 view .LVU2863
 14260 0067 E8000000 		call	_ZNK2at24DeprecatedTypeProperties7optionsEs	#
 14260      00
 14261              	.LVL756:
 14262              		.loc 21 113 20 view .LVU2864
 14263              	.LBE8673:
 14264              	.LBE8676:
 14265              	# main_pr.cpp:19:     auto t_input = at::rand({1, 3, 16, 320, 320}, at::CPU(at::kFloat));
 14266              		.loc 30 19 70 view .LVU2865
 14267 006c 4C89F6   		movq	%r14, %rsi	# tmp192,
 14268 006f BA050000 		movl	$5, %edx	#,
 14268      00
 14269 0074 4C89E7   		movq	%r12, %rdi	# tmp191,
 14270 0077 C5FD6F05 		vmovdqa	.LC36(%rip), %ymm0	#, tmp117
 14270      00000000 
 14271              	.LBB8677:
 14272              	.LBB8674:
 14273              	# /workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypeProperties.h:113:     return o
 14274              		.loc 21 113 20 view .LVU2866
 14275 007f 4889C1   		movq	%rax, %rcx	# tmp198, D.443148
 14276              		.loc 21 113 20 view .LVU2867
 14277              	.LBE8674:
 14278              	.LBE8677:
 14279              	# main_pr.cpp:19:     auto t_input = at::rand({1, 3, 16, 320, 320}, at::CPU(at::kFloat));
 14280              		.loc 30 19 70 view .LVU2868
 14281 0082 48C745B0 		movq	$320, -80(%rbp)	#, D.366390
 14281      40010000 
 14282              	.LVL757:
 14283              	.LBB8678:
 14284              	.LBI8659:
 102:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h ****       : Data(std::begin(Vec) == std::end(Vec) ? static_cast<T*>(nullptr) : std::begin(Vec)),
 14285              		.loc 31 102 28 is_stmt 1 view .LVU2869
 14286              	.LBB8667:
 14287              	.LBB8666:
 14288              	.LBB8662:
 14289              	.LBI8662:
 14290              		.file 33 "/usr/include/c++/9/initializer_list"
   1:/usr/include/c++/9/initializer_list **** // std::initializer_list support -*- C++ -*-
   2:/usr/include/c++/9/initializer_list **** 
   3:/usr/include/c++/9/initializer_list **** // Copyright (C) 2008-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/initializer_list **** //
   5:/usr/include/c++/9/initializer_list **** // This file is part of GCC.
   6:/usr/include/c++/9/initializer_list **** //
   7:/usr/include/c++/9/initializer_list **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/9/initializer_list **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/9/initializer_list **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/9/initializer_list **** // any later version.
  11:/usr/include/c++/9/initializer_list **** //
  12:/usr/include/c++/9/initializer_list **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/9/initializer_list **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/9/initializer_list **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/9/initializer_list **** // GNU General Public License for more details.
  16:/usr/include/c++/9/initializer_list **** //
  17:/usr/include/c++/9/initializer_list **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/9/initializer_list **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/9/initializer_list **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/9/initializer_list **** 
  21:/usr/include/c++/9/initializer_list **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/9/initializer_list **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/9/initializer_list **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/9/initializer_list **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/9/initializer_list **** 
  26:/usr/include/c++/9/initializer_list **** /** @file initializer_list
  27:/usr/include/c++/9/initializer_list ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/9/initializer_list ****  */
  29:/usr/include/c++/9/initializer_list **** 
  30:/usr/include/c++/9/initializer_list **** #ifndef _INITIALIZER_LIST
  31:/usr/include/c++/9/initializer_list **** #define _INITIALIZER_LIST
  32:/usr/include/c++/9/initializer_list **** 
  33:/usr/include/c++/9/initializer_list **** #pragma GCC system_header
  34:/usr/include/c++/9/initializer_list **** 
  35:/usr/include/c++/9/initializer_list **** #if __cplusplus < 201103L
  36:/usr/include/c++/9/initializer_list **** # include <bits/c++0x_warning.h>
  37:/usr/include/c++/9/initializer_list **** #else // C++0x
  38:/usr/include/c++/9/initializer_list **** 
  39:/usr/include/c++/9/initializer_list **** #pragma GCC visibility push(default)
  40:/usr/include/c++/9/initializer_list **** 
  41:/usr/include/c++/9/initializer_list **** #include <bits/c++config.h>
  42:/usr/include/c++/9/initializer_list **** 
  43:/usr/include/c++/9/initializer_list **** namespace std
  44:/usr/include/c++/9/initializer_list **** {
  45:/usr/include/c++/9/initializer_list ****   /// initializer_list
  46:/usr/include/c++/9/initializer_list ****   template<class _E>
  47:/usr/include/c++/9/initializer_list ****     class initializer_list
  48:/usr/include/c++/9/initializer_list ****     {
  49:/usr/include/c++/9/initializer_list ****     public:
  50:/usr/include/c++/9/initializer_list ****       typedef _E 		value_type;
  51:/usr/include/c++/9/initializer_list ****       typedef const _E& 	reference;
  52:/usr/include/c++/9/initializer_list ****       typedef const _E& 	const_reference;
  53:/usr/include/c++/9/initializer_list ****       typedef size_t 		size_type;
  54:/usr/include/c++/9/initializer_list ****       typedef const _E* 	iterator;
  55:/usr/include/c++/9/initializer_list ****       typedef const _E* 	const_iterator;
  56:/usr/include/c++/9/initializer_list **** 
  57:/usr/include/c++/9/initializer_list ****     private:
  58:/usr/include/c++/9/initializer_list ****       iterator			_M_array;
  59:/usr/include/c++/9/initializer_list ****       size_type			_M_len;
  60:/usr/include/c++/9/initializer_list **** 
  61:/usr/include/c++/9/initializer_list ****       // The compiler can call a private constructor.
  62:/usr/include/c++/9/initializer_list ****       constexpr initializer_list(const_iterator __a, size_type __l)
  63:/usr/include/c++/9/initializer_list ****       : _M_array(__a), _M_len(__l) { }
  64:/usr/include/c++/9/initializer_list **** 
  65:/usr/include/c++/9/initializer_list ****     public:
  66:/usr/include/c++/9/initializer_list ****       constexpr initializer_list() noexcept
  67:/usr/include/c++/9/initializer_list ****       : _M_array(0), _M_len(0) { }
  68:/usr/include/c++/9/initializer_list **** 
  69:/usr/include/c++/9/initializer_list ****       // Number of elements.
  70:/usr/include/c++/9/initializer_list ****       constexpr size_type
  71:/usr/include/c++/9/initializer_list ****       size() const noexcept { return _M_len; }
  72:/usr/include/c++/9/initializer_list **** 
  73:/usr/include/c++/9/initializer_list ****       // First element.
  74:/usr/include/c++/9/initializer_list ****       constexpr const_iterator
  75:/usr/include/c++/9/initializer_list ****       begin() const noexcept { return _M_array; }
  76:/usr/include/c++/9/initializer_list **** 
  77:/usr/include/c++/9/initializer_list ****       // One past the last element.
  78:/usr/include/c++/9/initializer_list ****       constexpr const_iterator
  79:/usr/include/c++/9/initializer_list ****       end() const noexcept { return begin() + size(); }
  80:/usr/include/c++/9/initializer_list ****     };
  81:/usr/include/c++/9/initializer_list **** 
  82:/usr/include/c++/9/initializer_list ****   /**
  83:/usr/include/c++/9/initializer_list ****    *  @brief  Return an iterator pointing to the first element of
  84:/usr/include/c++/9/initializer_list ****    *          the initializer_list.
  85:/usr/include/c++/9/initializer_list ****    *  @param  __ils  Initializer list.
  86:/usr/include/c++/9/initializer_list ****    */
  87:/usr/include/c++/9/initializer_list ****   template<class _Tp>
  88:/usr/include/c++/9/initializer_list ****     constexpr const _Tp*
  89:/usr/include/c++/9/initializer_list ****     begin(initializer_list<_Tp> __ils) noexcept
 14291              		.loc 33 89 5 view .LVU2870
 14292              		.loc 33 89 5 is_stmt 0 view .LVU2871
 14293              	.LBE8662:
 14294              	.LBB8663:
 14295              	.LBI8663:
  90:/usr/include/c++/9/initializer_list ****     { return __ils.begin(); }
  91:/usr/include/c++/9/initializer_list **** 
  92:/usr/include/c++/9/initializer_list ****   /**
  93:/usr/include/c++/9/initializer_list ****    *  @brief  Return an iterator pointing to one past the last element
  94:/usr/include/c++/9/initializer_list ****    *          of the initializer_list.
  95:/usr/include/c++/9/initializer_list ****    *  @param  __ils  Initializer list.
  96:/usr/include/c++/9/initializer_list ****    */
  97:/usr/include/c++/9/initializer_list ****   template<class _Tp>
  98:/usr/include/c++/9/initializer_list ****     constexpr const _Tp*
  99:/usr/include/c++/9/initializer_list ****     end(initializer_list<_Tp> __ils) noexcept
 14296              		.loc 33 99 5 is_stmt 1 view .LVU2872
 14297              		.loc 33 99 5 is_stmt 0 view .LVU2873
 14298              	.LBE8663:
 14299              	.LBB8664:
 14300              	.LBI8664:
  89:/usr/include/c++/9/initializer_list ****     { return __ils.begin(); }
 14301              		.loc 33 89 5 is_stmt 1 view .LVU2874
  89:/usr/include/c++/9/initializer_list ****     { return __ils.begin(); }
 14302              		.loc 33 89 5 is_stmt 0 view .LVU2875
 14303              	.LBE8664:
 14304              	.LBB8665:
 14305              	.LBI8665:
  71:/usr/include/c++/9/initializer_list **** 
 14306              		.loc 33 71 7 is_stmt 1 view .LVU2876
  71:/usr/include/c++/9/initializer_list **** 
 14307              		.loc 33 71 7 is_stmt 0 view .LVU2877
 14308              	.LBE8665:
 14309              	.LBE8666:
 14310              	.LBE8667:
 14311              	.LBE8678:
 14312              	# main_pr.cpp:19:     auto t_input = at::rand({1, 3, 16, 320, 320}, at::CPU(at::kFloat));
 14313              		.loc 30 19 70 view .LVU2878
 14314 008a C5FD7F45 		vmovdqa	%ymm0, -112(%rbp)	# tmp117, MEM[(long int *)&D.366390]
 14314      90
 14315 008f C5F877   		vzeroupper
 14316              	# main_pr.cpp:23:     auto out = upsample_trilinear3d_cpu(t_input, output_size, false);
  20:main_pr.cpp   ****     int64_t osizes[3] = {8, 256, 256};
  21:main_pr.cpp   ****     IntArrayRef output_size(osizes);
  22:main_pr.cpp   **** 
  23:main_pr.cpp   ****     auto out = upsample_trilinear3d_cpu(t_input, output_size, false);
 14317              		.loc 30 23 68 view .LVU2879
 14318 0092 4C8DADF8 		leaq	-264(%rbp), %r13	#, tmp193
 14318      FEFFFF
 14319              	# main_pr.cpp:19:     auto t_input = at::rand({1, 3, 16, 320, 320}, at::CPU(at::kFloat));
  19:main_pr.cpp   ****     int64_t osizes[3] = {8, 256, 256};
 14320              		.loc 30 19 70 view .LVU2880
 14321 0099 E8000000 		call	_ZN2at4randEN3c108ArrayRefIlEENS0_13TensorOptionsE@PLT	#
 14321      00
 14322              	.LVL758:
 14323              	.LEHE62:
  20:main_pr.cpp   ****     int64_t osizes[3] = {8, 256, 256};
 14324              		.loc 30 20 5 is_stmt 1 view .LVU2881
 14325              	# main_pr.cpp:23:     auto out = upsample_trilinear3d_cpu(t_input, output_size, false);
 14326              		.loc 30 23 68 is_stmt 0 view .LVU2882
 14327 009e 6A00     		pushq	$0	#
 14328 00a0 4531C0   		xorl	%r8d, %r8d	#
 14329 00a3 B9030000 		movl	$3, %ecx	#,
 14329      00
 14330 00a8 6A00     		pushq	$0	#
 14331              	# main_pr.cpp:20:     int64_t osizes[3] = {8, 256, 256};
  20:main_pr.cpp   ****     int64_t osizes[3] = {8, 256, 256};
 14332              		.loc 30 20 13 view .LVU2883
 14333 00aa C5F96F05 		vmovdqa	.LC37(%rip), %xmm0	#, tmp124
 14333      00000000 
 14334              	# main_pr.cpp:23:     auto out = upsample_trilinear3d_cpu(t_input, output_size, false);
 14335              		.loc 30 23 68 view .LVU2884
 14336 00b2 4C89E6   		movq	%r12, %rsi	# tmp191,
 14337 00b5 4C89EF   		movq	%r13, %rdi	# tmp193,
 14338 00b8 6A00     		pushq	$0	#
 14339              	.LBB8679:
 14340              	.LBB8680:
 14341              	.LBB8681:
 14342              	# /workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h:99:   /* implicit */ constexpr Arr
  99:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
 14343              		.loc 31 99 77 view .LVU2885
 14344 00ba 488D9530 		leaq	-208(%rbp), %rdx	#, tmp125
 14344      FFFFFF
 14345              	.LBE8681:
 14346              	.LBE8680:
 14347              	.LBE8679:
 14348              	# main_pr.cpp:23:     auto out = upsample_trilinear3d_cpu(t_input, output_size, false);
 14349              		.loc 30 23 68 view .LVU2886
 14350 00c1 6A00     		pushq	$0	#
 14351 00c3 6A00     		pushq	$0	#
 14352 00c5 6A00     		pushq	$0	#
 14353              	# main_pr.cpp:20:     int64_t osizes[3] = {8, 256, 256};
  20:main_pr.cpp   ****     int64_t osizes[3] = {8, 256, 256};
 14354              		.loc 30 20 13 view .LVU2887
 14355 00c7 48C78540 		movq	$256, -192(%rbp)	#, osizes
 14355      FFFFFF00 
 14355      010000
  21:main_pr.cpp   **** 
 14356              		.loc 30 21 5 is_stmt 1 view .LVU2888
 14357              	.LVL759:
 14358              	.LBB8682:
 14359              	.LBI8679:
  99:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
 14360              		.loc 31 99 28 view .LVU2889
  99:/workspace/pth-linear-interp/torch/include/c10/util/ArrayRef.h **** 
 14361              		.loc 31 99 28 is_stmt 0 view .LVU2890
 14362              	.LBE8682:
 14363              		.loc 30 23 5 is_stmt 1 view .LVU2891
 14364              	.LBB8683:
 14365              	.LBI8683:
 497:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14366              		.loc 26 497 13 view .LVU2892
 14367              	.LBB8684:
 14368              	.LBI8684:
 363:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   : init_(false), storage_(trivial_init) {}
 14369              		.loc 26 363 13 view .LVU2893
 14370              	.LBB8685:
 14371              	.LBB8686:
 14372              	.LBB8687:
 14373              	.LBI8687:
 174:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14374              		.loc 26 174 13 view .LVU2894
 174:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14375              		.loc 26 174 13 is_stmt 0 view .LVU2895
 14376              	.LBE8687:
 14377              	.LBE8686:
 14378              	.LBE8685:
 14379              	.LBE8684:
 14380              	.LBE8683:
 14381              	.LBB8688:
 14382              	.LBI8688:
 497:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14383              		.loc 26 497 13 is_stmt 1 view .LVU2896
 14384              	.LBB8689:
 14385              	.LBI8689:
 363:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   : init_(false), storage_(trivial_init) {}
 14386              		.loc 26 363 13 view .LVU2897
 14387              	.LBB8690:
 14388              	.LBB8691:
 14389              	.LBB8692:
 14390              	.LBI8692:
 174:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14391              		.loc 26 174 13 view .LVU2898
 174:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14392              		.loc 26 174 13 is_stmt 0 view .LVU2899
 14393              	.LBE8692:
 14394              	.LBE8691:
 14395              	.LBE8690:
 14396              	.LBE8689:
 14397              	.LBE8688:
 14398              	.LBB8693:
 14399              	.LBI8693:
 497:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14400              		.loc 26 497 13 is_stmt 1 view .LVU2900
 14401              	.LBB8694:
 14402              	.LBI8694:
 363:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h ****   : init_(false), storage_(trivial_init) {}
 14403              		.loc 26 363 13 view .LVU2901
 14404              	.LBB8695:
 14405              	.LBB8696:
 14406              	.LBB8697:
 14407              	.LBI8697:
 174:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14408              		.loc 26 174 13 view .LVU2902
 174:/workspace/pth-linear-interp/torch/include/c10/util/Optional.h **** 
 14409              		.loc 26 174 13 is_stmt 0 view .LVU2903
 14410              	.LBE8697:
 14411              	.LBE8696:
 14412              	.LBE8695:
 14413              	.LBE8694:
 14414              	.LBE8693:
 14415              	# main_pr.cpp:20:     int64_t osizes[3] = {8, 256, 256};
  20:main_pr.cpp   ****     IntArrayRef output_size(osizes);
 14416              		.loc 30 20 13 view .LVU2904
 14417 00d2 C5F82985 		vmovaps	%xmm0, -208(%rbp)	# tmp124, MEM[(long int *)&osizes]
 14417      30FFFFFF 
 14418              	.LEHB63:
 14419              		.cfi_escape 0x2e,0x30
 14420              	# main_pr.cpp:23:     auto out = upsample_trilinear3d_cpu(t_input, output_size, false);
 14421              		.loc 30 23 68 view .LVU2905
 14422 00da E8000000 		call	_ZN2at6native24upsample_trilinear3d_cpuERKNS_6TensorEN3c108ArrayRefIlEEbNS4_8optionalIdEES8_S
 14422      00
 14423              	.LVL760:
 14424              	.LEHE63:
 14425              	.LBB8698:
 14426              	.LBB8699:
 14427              	.LBB8700:
 14428              	.LBB8701:
 14429              	# /workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h:114:     return impl_->dim();
 14430              		.file 34 "/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h"
   1:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
   3:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/Device.h>
   4:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/Layout.h>
   5:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/MemoryFormat.h>
   6:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/QScheme.h>
   7:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/Stream.h>
   8:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/Scalar.h>
   9:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/ScalarType.h>
  10:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/ScalarTypeToTypeMeta.h>
  11:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/Storage.h>
  12:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <ATen/core/TensorAccessor.h>
  13:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/TensorImpl.h>
  14:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/UndefinedTensorImpl.h>
  15:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/core/WrapDimMinimal.h>
  16:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/util/Exception.h>
  17:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/util/Deprecated.h>
  18:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/util/Optional.h>
  19:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <c10/util/intrusive_ptr.h>
  20:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <ATen/core/DeprecatedTypePropertiesRegistry.h>
  21:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <ATen/core/DeprecatedTypeProperties.h>
  22:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <ATen/core/NamedTensor.h>
  23:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <ATen/core/QuantizerBase.h>
  24:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #include <torch/csrc/WindowsTorchApiMacro.h>
  25:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  26:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace caffe2 {
  27:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** class Tensor;
  28:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** }
  29:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace c10{
  30:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** struct TensorOptions;
  31:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** template<class T> class List;
  32:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** }
  33:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace at {
  34:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** struct Generator;
  35:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** struct Type;
  36:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** class DeprecatedTypeProperties;
  37:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** class Tensor;
  38:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** } // namespace at
  39:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace at {
  40:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace indexing {
  41:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** struct TensorIndex;
  42:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** } // namespace indexing
  43:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** } // namespace at
  44:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  45:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace torch { namespace autograd {
  46:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  47:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** struct Node;
  48:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  49:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** }} // namespace torch::autograd
  50:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  51:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace at {
  52:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  53:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** class Tensor;
  54:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** using TensorList = ArrayRef<Tensor>;
  55:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  56:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** using Stream = c10::Stream;
  57:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  58:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** namespace impl {
  59:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** inline bool variable_excluded_from_dispatch() {
  60:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #ifdef C10_MOBILE
  61:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // Please read the comment in `VariableFallbackKernel.cpp` about the background of this change.
  62:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   return true;
  63:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #else
  64:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   TORCH_INTERNAL_ASSERT_DEBUG_ONLY(!c10::impl::tls_local_dispatch_key_set().excluded_.has(DispatchK
  65:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   return c10::impl::tls_local_dispatch_key_set().excluded_.isSupersetOf(c10::autograd_dispatch_keys
  66:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** #endif
  67:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** }
  68:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** }
  69:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
  70:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // Tensor is a "generic" object holding a pointer to the underlying TensorImpl object, which
  71:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // has an embedded reference count. In this way, Tensor is similar to boost::intrusive_ptr.
  72:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** //
  73:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // For example:
  74:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** //
  75:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // void func(Tensor a) {
  76:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** //   Tensor b = a;
  77:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** //   ...
  78:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // }
  79:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** //
  80:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // In this example, when we say Tensor b = a, we are creating a new object that points to the
  81:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // same underlying TensorImpl, and bumps its reference count. When b goes out of scope, the
  82:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // destructor decrements the reference count by calling release() on the TensorImpl it points to.
  83:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // The existing constructors, operator overloads, etc. take care to implement the correct semantics
  84:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** //
  85:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // Note that Tensor can also be NULL, i.e. it is not associated with any underlying TensorImpl, and
  86:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** // special care must be taken to handle this.
  87:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** class TORCH_API Tensor {
  88:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****  public:
  89:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor(){};
  90:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // This constructor should not be used by end users and is an implementation
  91:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // detail invoked by autogenerated code.
  92:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   explicit Tensor(
  93:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****       c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl> tensor_impl)
  94:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****       : impl_(std::move(tensor_impl)) {
  95:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     if (impl_.get() == nullptr) {
  96:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****       throw std::runtime_error("TensorImpl with nullptr is not supported");
  97:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     }
  98:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
  99:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor(const Tensor&) = default;
 100:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor(Tensor&&) = default;
 101:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 102:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 103:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****  public:
 104:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // Creates a new wrapper from TensorImpl. Intentionally a free method because
 105:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // it should be used with care. Checks necessary invariants
 106:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   static Tensor wrap_tensor_impl(
 107:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****       c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl> tensor_impl) {
 108:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     Tensor r(std::move(tensor_impl));
 109:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     r.enforce_invariants();
 110:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return r;
 111:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 112:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 113:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   int64_t dim() const {
 114:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_->dim();
 14431              		.loc 34 114 17 view .LVU2906
 14432 00df 488BBDF8 		movq	-264(%rbp), %rdi	# MEM[(struct TensorImpl * *)&out], _59
 14432      FEFFFF
 14433              	.LBE8701:
 14434              	.LBE8700:
 14435              	.LBE8699:
 14436              	.LBE8698:
 14437              	# main_pr.cpp:23:     auto out = upsample_trilinear3d_cpu(t_input, output_size, false);
 14438              		.loc 30 23 68 view .LVU2907
 14439 00e6 4883C430 		addq	$48, %rsp	#,
  24:main_pr.cpp   ****     int result = out.size(0);
 14440              		.loc 30 24 5 is_stmt 1 view .LVU2908
 14441              	.LVL761:
 14442              	.LBB8821:
 14443              	.LBI8698:
 115:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 116:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   int64_t storage_offset() const {
 117:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_->storage_offset();
 118:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 119:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 120:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor contiguous(MemoryFormat memory_format=MemoryFormat::Contiguous) const {
 121:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     if (is_contiguous(memory_format)) {
 122:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****       return *this;
 123:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     } else {
 124:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****       return __dispatch_contiguous(memory_format);
 125:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     }
 126:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 127:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 128:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   int64_t size(int64_t dim) const {
 14444              		.loc 34 128 11 view .LVU2909
 14445              	.LBB8818:
 129:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     // false is passed to maybe_wrap_dim so behavior is identical to array access (but with wrappin
 130:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     dim = c10::maybe_wrap_dim(dim, this->dim(), false);
 14446              		.loc 34 130 5 view .LVU2910
 14447              	.LBB8703:
 14448              	.LBI8700:
 113:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_->dim();
 14449              		.loc 34 113 11 view .LVU2911
 14450              	.LBB8702:
 114:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 14451              		.loc 34 114 5 view .LVU2912
 14452              	# /workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h:114:     return impl_->dim();
 114:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 14453              		.loc 34 114 23 is_stmt 0 view .LVU2913
 14454 00ea 488B07   		movq	(%rdi), %rax	# _59->D.147594._vptr.intrusive_ptr_target, _59->D.147594._vptr.intrusive_ptr_ta
 14455              	.LEHB64:
 14456              		.cfi_escape 0x2e,0
 14457              	# /workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h:114:     return impl_->dim();
 114:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 14458              		.loc 34 114 22 view .LVU2914
 14459 00ed FF5028   		call	*40(%rax)	# MEM[(int (*) () *)_60 + 40B]
 14460              	.LVL762:
 114:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 14461              		.loc 34 114 22 view .LVU2915
 14462 00f0 48C78500 		movq	$0, -256(%rbp)	#, dim
 14462      FFFFFF00 
 14462      000000
 14463              	.LVL763:
 114:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 14464              		.loc 34 114 22 view .LVU2916
 14465              	.LBE8702:
 14466              	.LBE8703:
 14467              	.LBB8704:
 14468              	.LBI8704:
 14469              		.file 35 "/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h"
   1:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** #pragma once
   2:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** 
   3:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** #include <c10/util/Exception.h>
   4:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** 
   5:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** namespace c10 {
   6:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** 
   7:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** static inline int64_t maybe_wrap_dim(int64_t dim, int64_t dim_post_expr, bool wrap_scalar=true) {
 14470              		.loc 35 7 23 is_stmt 1 discriminator 1 view .LVU2917
 14471              	.LBB8705:
   8:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   if (dim_post_expr <= 0) {
 14472              		.loc 35 8 3 discriminator 1 view .LVU2918
 14473 00fb 4885C0   		testq	%rax, %rax	# tmp199
 14474 00fe 0F8E0000 		jle	.L446	#,
 14474      0000
   9:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     if (!wrap_scalar) {
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****       TORCH_CHECK_INDEX(false, "dimension specified as ", dim, " but tensor has no dimensions");
  11:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
  12:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     dim_post_expr = 1; // this will make range [-1, 0]
  13:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   }
  14:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h **** 
  15:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   int64_t min = -dim_post_expr;
 14475              		.loc 35 15 3 view .LVU2919
 14476              	.LVL764:
  16:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   int64_t max = dim_post_expr - 1;
 14477              		.loc 35 16 3 view .LVU2920
  17:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   if (dim < min || dim > max) {
 14478              		.loc 35 17 3 view .LVU2921
  18:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     TORCH_CHECK_INDEX(false,
  19:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****       "Dimension out of range (expected to be in range of [",
  20:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****       min, ", ", max, "], but got ", dim, ")");
 14479              		.loc 35 20 47 view .LVU2922
  21:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   }
  22:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   if (dim < 0) dim += dim_post_expr;
 14480              		.loc 35 22 3 view .LVU2923
  23:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****   return dim;
 14481              		.loc 35 23 3 view .LVU2924
 14482              		.loc 35 23 3 is_stmt 0 view .LVU2925
 14483              	.LBE8705:
 14484              	.LBE8704:
 131:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return sizes()[dim];
 14485              		.loc 34 131 5 is_stmt 1 view .LVU2926
 14486              	.LBB8814:
 14487              	.LBI8814:
 132:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 133:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 134:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   int64_t stride(int64_t dim) const {
 135:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     // false is passed to maybe_wrap_dim so behavior is identical to array access (but with wrappin
 136:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     dim = c10::maybe_wrap_dim(dim, this->dim(), false);
 137:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return strides()[dim];
 138:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 139:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 140:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   TensorImpl * unsafeGetTensorImpl() const {
 141:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_.get();
 142:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 143:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   TensorImpl * unsafeReleaseTensorImpl() {
 144:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_.release();
 145:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 146:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   const c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl>& getIntrusivePtr() const {
 147:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_;
 148:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 149:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 150:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   c10::intrusive_ptr<TensorImpl, UndefinedTensorImpl> unsafeReleaseIntrusivePtr()  {
 151:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return std::move(impl_);
 152:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 153:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 154:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   bool defined() const {
 155:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_;
 156:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 157:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 158:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   void reset() {
 159:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     impl_.reset();
 160:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 161:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 162:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // The following overloads are very intruiging.  Consider the following
 163:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // program:
 164:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //
 165:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //    x[1] = 3;
 166:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //
 167:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // We would expect that the first entry of x is written to 3.  But how can we
 168:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // actually achieve this?  x[1] evaluates to a tensor...
 169:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //
 170:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // The answer is, using a ref-qualifier.  x[1] is an rvalue, which cannot be
 171:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // (profitably) assigned to in the traditional sense, so we overload
 172:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // assignment to mean, "Actually, copy 3 into the tensor data."  This is done
 173:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // with an rvalue-reference ref-qualified overload (the methods with && at the
 174:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // end of their type.)
 175:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //
 176:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // There's one more fly in the ointment: We also want
 177:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //
 178:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //    Tensor x = y;
 179:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //
 180:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // to work, and we want it NOT to copy.  So we need a traditional operator=
 181:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // overload.  But we MUST specify a mutable lvalue ref-qualifier, to
 182:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // disambiguate the traditional overload from the rvalue-reference
 183:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // ref-qualified overload.  Otherwise, it will be ambiguous, because
 184:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // a non ref-qualified method is eligible for all situations.
 185:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 186:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // Unfortunately, we have to write these constructors out manually
 187:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // to work around an MSVC bug:
 188:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //    error C2580: 'at::Tensor &at::Tensor::operator =(const at::Tensor &) &':
 189:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //    multiple versions of a defaulted special member functions are not allowed
 190:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // Tensor& operator=(const Tensor&) & = default;
 191:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // Tensor& operator=(Tensor&&) & = default;
 192:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 193:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // Also MSVC will wrongly issue the following warning with the aforementioned fix
 194:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   //    warning C4522: 'at::Tensor': multiple assignment operators specified
 195:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   // Let's just skip the warning.
 196:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 197:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   #ifdef _MSC_VER
 198:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   #pragma warning( push )
 199:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   #pragma warning( disable : 4522 )
 200:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   #endif
 201:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 202:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor& operator=(const Tensor& x) & {
 203:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     impl_ = x.impl_;
 204:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return *this;
 205:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 206:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor& operator=(Tensor&& x) & {
 207:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     impl_ = std::move(x.impl_);
 208:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return *this;
 209:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 210:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 211:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor& operator=(Scalar v) &&;
 212:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor& operator=(const Tensor&) &&;
 213:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   Tensor& operator=(Tensor&&) &&;
 214:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 215:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   bool is_same(const Tensor& other) const noexcept {
 216:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_ == other.impl_;
 217:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 218:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   size_t use_count() const noexcept {
 219:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_.use_count();
 220:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 221:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   size_t weak_use_count() const noexcept {
 222:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_.weak_use_count();
 223:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   }
 224:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 225:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   std::string toString() const;
 226:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h **** 
 227:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****   IntArrayRef sizes() const {
 14488              		.loc 34 227 15 view .LVU2927
 14489              	.LBB8815:
 228:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****     return impl_->sizes();
 14490              		.loc 34 228 5 view .LVU2928
 14491              	# /workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h:228:     return impl_->sizes();
 14492              		.loc 34 228 17 is_stmt 0 view .LVU2929
 14493 0104 488BBDF8 		movq	-264(%rbp), %rdi	# MEM[(struct TensorImpl * *)&out], _65
 14493      FEFFFF
 14494              	.LVL765:
 14495              	# /workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h:228:     return impl_->sizes();
 14496              		.loc 34 228 25 view .LVU2930
 14497 010b 488B07   		movq	(%rdi), %rax	# _65->D.147594._vptr.intrusive_ptr_target, _65->D.147594._vptr.intrusive_ptr_ta
 14498 010e FF5018   		call	*24(%rax)	# MEM[(int (*) () *)_66 + 24B]
 14499              	.LVL766:
 14500              	.LEHE64:
 14501              		.loc 34 228 25 view .LVU2931
 14502              	.LBE8815:
 14503              	.LBE8814:
 14504              	.LBE8818:
 14505              	.LBE8821:
 14506              	.LBB8822:
 14507              	.LBB8823:
 14508              	.LBB8824:
 14509              	.LBB8825:
 14510              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:314:     reset_();
 253:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 254:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // raw pointer constructors are not public because we shouldn't make
 255:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // intrusive_ptr out of raw pointers except from inside the make_intrusive(),
 256:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // reclaim() and weak_intrusive_ptr::lock() implementations.
 257:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 258:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // This constructor will not increase the ref counter for you.
 259:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // We use the tagged dispatch mechanism to explicitly mark this constructor
 260:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // to not increase the refcount
 261:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   explicit intrusive_ptr(TTarget* target, raw::DontIncreaseRefcount) noexcept
 262:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       : target_(target) {}
 263:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 264:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // This constructor will increase the ref counter for you.
 265:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // This constructor will be used by the make_intrusive(), and also pybind11,
 266:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // which wrap the intrusive_ptr holder around the raw pointer and incref
 267:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // correspondingly (pybind11 requires raw pointer constructor to incref by
 268:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   // default).
 269:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   explicit intrusive_ptr(TTarget* target)
 270:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       : intrusive_ptr(target, raw::DontIncreaseRefcount{}) {
 271:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     if (target_ != NullType::singleton()) {
 272:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // We can't use retain_(), because we also have to increase weakcount
 273:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // and because we allow raising these values from 0, which retain_()
 274:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       // has an assertion against.
 275:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       detail::atomic_refcount_increment(target_->refcount_);
 276:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       detail::atomic_weakcount_increment(target_->weakcount_);
 277:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     }
 278:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 279:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 280:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****  public:
 281:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   using element_type = TTarget;
 282:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 283:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   intrusive_ptr() noexcept
 284:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       : intrusive_ptr(NullType::singleton(), raw::DontIncreaseRefcount{}) {}
 285:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 286:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   intrusive_ptr(intrusive_ptr&& rhs) noexcept : target_(rhs.target_) {
 287:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     rhs.target_ = NullType::singleton();
 288:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 289:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 290:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   template <class From, class FromNullType>
 291:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   /* implicit */ intrusive_ptr(intrusive_ptr<From, FromNullType>&& rhs) noexcept
 292:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       : target_(detail::assign_ptr_<TTarget, NullType, FromNullType>(rhs.target_)) {
 293:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     static_assert(
 294:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         std::is_convertible<From*, TTarget*>::value,
 295:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         "Type mismatch. intrusive_ptr move constructor got pointer of wrong type.");
 296:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     rhs.target_ = FromNullType::singleton();
 297:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 298:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 299:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   intrusive_ptr(const intrusive_ptr& rhs) : target_(rhs.target_) {
 300:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     retain_();
 301:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 302:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 303:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   template <class From, class FromNullType>
 304:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   /* implicit */ intrusive_ptr(
 305:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       const intrusive_ptr<From, FromNullType>& rhs)
 306:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****       : target_(detail::assign_ptr_<TTarget, NullType, FromNullType>(rhs.target_)) {
 307:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     static_assert(
 308:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         std::is_convertible<From*, TTarget*>::value,
 309:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****         "Type mismatch. intrusive_ptr copy constructor got pointer of wrong type.");
 310:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     retain_();
 311:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   }
 312:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h **** 
 313:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****   ~intrusive_ptr() noexcept {
 314:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     reset_();
 14511              		.loc 28 314 5 view .LVU2932
 14512 0111 4C89EF   		movq	%r13, %rdi	# tmp193,
 14513              	.LBE8825:
 14514              	.LBE8824:
 14515              	.LBE8823:
 14516              	.LBE8822:
 14517              	# main_pr.cpp:24:     int result = out.size(0);
 14518              		.loc 30 24 28 view .LVU2933
 14519 0114 488B18   		movq	(%rax), %rbx	# *SR.591_68, *SR.591_68
 14520              	.LVL767:
  25:main_pr.cpp   ****     return result;
 14521              		.loc 30 25 5 is_stmt 1 view .LVU2934
 14522              	.LBB8829:
 14523              	.LBI8822:
  87:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****  public:
 14524              		.loc 34 87 17 view .LVU2935
 14525              	.LBB8828:
 14526              	.LBB8827:
 14527              	.LBI8824:
 313:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     reset_();
 14528              		.loc 28 313 3 view .LVU2936
 14529              	.LBB8826:
 14530              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:314:     reset_();
 14531              		.loc 28 314 5 is_stmt 0 view .LVU2937
 14532 0117 E8000000 		call	_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev	#
 14532      00
 14533              	.LVL768:
 14534              		.loc 28 314 5 view .LVU2938
 14535              	.LBE8826:
 14536              	.LBE8827:
 14537              	.LBE8828:
 14538              	.LBE8829:
 14539              	.LBB8830:
 14540              	.LBI8830:
  87:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****  public:
 14541              		.loc 34 87 17 is_stmt 1 view .LVU2939
 14542              	.LBB8831:
 14543              	.LBI8831:
 313:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     reset_();
 14544              		.loc 28 313 3 view .LVU2940
 14545              	.LBB8832:
 14546              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:314:     reset_();
 14547              		.loc 28 314 5 is_stmt 0 view .LVU2941
 14548 011c 4C89E7   		movq	%r12, %rdi	# tmp191,
 14549 011f E8000000 		call	_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev	#
 14549      00
 14550              	.LVL769:
 14551              		.loc 28 314 5 view .LVU2942
 14552              	.LBE8832:
 14553              	.LBE8831:
 14554              	.LBE8830:
 14555              	# main_pr.cpp:26: }
  26:main_pr.cpp   **** }...
 14556              		.loc 30 26 1 view .LVU2943
 14557 0124 488B45C8 		movq	-56(%rbp), %rax	# D.447165, tmp209
 14558 0128 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp209
 14558      25280000 
 14558      00
 14559 0131 7517     		jne	.L450	#,
 14560 0133 488D65D0 		leaq	-48(%rbp), %rsp	#,
 14561 0137 89D8     		movl	%ebx, %eax	# *SR.591_68,
 14562 0139 5B       		popq	%rbx	#
 14563              	.LVL770:
 14564              		.loc 30 26 1 view .LVU2944
 14565 013a 415A     		popq	%r10	#
 14566              		.cfi_remember_state
 14567              		.cfi_def_cfa 10, 0
 14568 013c 415C     		popq	%r12	#
 14569 013e 415D     		popq	%r13	#
 14570              	.LVL771:
 14571              		.loc 30 26 1 view .LVU2945
 14572 0140 415E     		popq	%r14	#
 14573 0142 415F     		popq	%r15	#
 14574 0144 5D       		popq	%rbp	#
 14575              	.LVL772:
 14576              		.loc 30 26 1 view .LVU2946
 14577 0145 498D62F8 		leaq	-8(%r10), %rsp	#,
 14578              		.cfi_def_cfa 7, 8
 14579              	.LVL773:
 14580              		.loc 30 26 1 view .LVU2947
 14581 0149 C3       		ret	
 14582              	.LVL774:
 14583              	.L450:
 14584              		.cfi_restore_state
 14585              		.loc 30 26 1 view .LVU2948
 14586 014a E8000000 		call	__stack_chk_fail@PLT	#
 14586      00
 14587              	.LVL775:
 14588              	.L444:
 14589              		.loc 30 26 1 view .LVU2949
 14590 014f F30F1EFA 		endbr64	
 14591 0153 E9000000 		jmp	.L445	#
 14591      00
 14592              	.LVL776:
 14593              	.L438:
 14594              		.loc 30 26 1 view .LVU2950
 14595 0158 F30F1EFA 		endbr64	
 14596 015c 4989C5   		movq	%rax, %r13	# tmp207, tmp176
 14597 015f C5F877   		vzeroupper
 14598 0162 E9000000 		jmp	.L436	#
 14598      00
 14599              	.LVL777:
 14600              		.loc 30 26 1 view .LVU2951
 14601              		.section	.gcc_except_table,"a",@progbits
 14602              	.LLSDA11735:
 14603 0000 FF       		.byte	0xff
 14604 0001 FF       		.byte	0xff
 14605 0002 01       		.byte	0x1
 14606 0003 10       		.uleb128 .LLSDACSE11735-.LLSDACSB11735
 14607              	.LLSDACSB11735:
 14608 0004 46       		.uleb128 .LEHB62-.LFB11735
 14609 0005 58       		.uleb128 .LEHE62-.LEHB62
 14610 0006 00       		.uleb128 0
 14611 0007 00       		.uleb128 0
 14612 0008 DA01     		.uleb128 .LEHB63-.LFB11735
 14613 000a 05       		.uleb128 .LEHE63-.LEHB63
 14614 000b D802     		.uleb128 .L438-.LFB11735
 14615 000d 00       		.uleb128 0
 14616 000e ED01     		.uleb128 .LEHB64-.LFB11735
 14617 0010 24       		.uleb128 .LEHE64-.LEHB64
 14618 0011 CF02     		.uleb128 .L444-.LFB11735
 14619 0013 00       		.uleb128 0
 14620              	.LLSDACSE11735:
 14621              		.section	.text.startup
 14622              		.cfi_endproc
 14623              		.section	.text.unlikely
 14624              		.cfi_startproc
 14625              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 14626              		.cfi_lsda 0x1b,.LLSDAC11735
 14628              	main.cold:
 14629              	.LFSB11735:
 14630              	.L446:
 14631              		.cfi_escape 0xf,0x3,0x76,0x58,0x6
 14632              		.cfi_escape 0x10,0x3,0x2,0x76,0x50
 14633              		.cfi_escape 0x10,0x6,0x2,0x76,0
 14634              		.cfi_escape 0x10,0xc,0x2,0x76,0x60
 14635              		.cfi_escape 0x10,0xd,0x2,0x76,0x68
 14636              		.cfi_escape 0x10,0xe,0x2,0x76,0x70
 14637              		.cfi_escape 0x10,0xf,0x2,0x76,0x78
 14638              	.LBB8833:
 14639              	.LBB8819:
 14640              	.LBB8816:
 14641              	.LBB8812:
   9:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****       TORCH_CHECK_INDEX(false, "dimension specified as ", dim, " but tensor has no dimensions");
 14642              		.loc 35 9 5 is_stmt 1 view -0
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14643              		.loc 35 10 7 view .LVU2953
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14644              		.loc 35 10 7 view .LVU2954
 14645 0000 BFA80000 		movl	$168, %edi	#,
 14645      00
 14646 0005 488D9D70 		leaq	-144(%rbp), %rbx	#, tmp195
 14646      FFFFFF
 14647 000c E8000000 		call	__cxa_allocate_exception@PLT	#
 14647      00
 14648              	.LVL778:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14649              		.loc 35 10 7 is_stmt 0 view .LVU2955
 14650 0011 488D3500 		leaq	.LC20(%rip), %rsi	#,
 14650      000000
 14651 0018 4889DF   		movq	%rbx, %rdi	# tmp195,
 14652 001b 4989C7   		movq	%rax, %r15	# tmp200, _72
 14653              	.LBB8706:
 14654              	.LBI8706:
 138:/usr/include/c++/9/bits/allocator.h **** 
 14655              		.loc 5 138 7 is_stmt 1 view .LVU2956
 14656              	.LVL779:
 14657              	.LBB8707:
 14658              	.LBI8707:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 14659              		.loc 4 80 7 view .LVU2957
 14660              	.LEHB65:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 14661              		.loc 4 80 7 is_stmt 0 view .LVU2958
 14662              	.LBE8707:
 14663              	.LBE8706:
 14664              	# /workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h:10:       TORCH_CHECK_INDEX(
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14665              		.loc 35 10 7 view .LVU2959
 14666 001e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0	#
 14666      00
 14667              	.LVL780:
 14668              	.LEHE65:
 14669              	.LBB8708:
 14670              	.LBI8708:
  88:/workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h ****   return detail::_str_wrapper<typename detail::CanonicalizeStrTypes<Args>::type...>::call(args...);
 14671              		.loc 14 88 23 is_stmt 1 view .LVU2960
 14672              	.LBB8709:
 14673              	# /workspace/pth-linear-interp/torch/include/c10/util/StringUtil.h:89:   return detail::_str_wrappe
 14674              		.loc 14 89 98 is_stmt 0 view .LVU2961
 14675 0023 488D0500 		leaq	.LC38(%rip), %rax	#, tmp210
 14675      000000
 14676 002a 488D8D10 		leaq	-240(%rbp), %rcx	#, tmp135
 14676      FFFFFF
 14677 0031 4C89F7   		movq	%r14, %rdi	# tmp192,
 14678 0034 48898510 		movq	%rax, -240(%rbp)	# tmp210, D.447125
 14678      FFFFFF
 14679 003b 488D9500 		leaq	-256(%rbp), %rdx	#, tmp136
 14679      FFFFFF
 14680              	.LVL781:
 14681              		.loc 14 89 98 view .LVU2962
 14682 0042 488D0500 		leaq	.LC39(%rip), %rax	#, tmp211
 14682      000000
 14683 0049 488DB508 		leaq	-248(%rbp), %rsi	#, tmp137
 14683      FFFFFF
 14684 0050 48898508 		movq	%rax, -248(%rbp)	# tmp211, D.447124
 14684      FFFFFF
 14685              	.LEHB66:
 14686 0057 E8000000 		call	_ZN3c106detail12_str_wrapperIJPKcRKlS3_EE4callB5cxx11ERKS3_S5_S8_	#
 14686      00
 14687              	.LVL782:
 14688              	.LEHE66:
 14689              		.loc 14 89 98 view .LVU2963
 14690              	.LBE8709:
 14691              	.LBE8708:
 14692              	# /workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h:10:       TORCH_CHECK_INDEX(
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14693              		.loc 35 10 7 view .LVU2964
 14694 005c 488D8550 		leaq	-176(%rbp), %rax	#, tmp194
 14694      FFFFFF
 14695 0063 4889DA   		movq	%rbx, %rdx	# tmp195,
 14696 0066 4C89F6   		movq	%r14, %rsi	# tmp192,
 14697 0069 4889C7   		movq	%rax, %rdi	# tmp194,
 14698 006c 488985E8 		movq	%rax, -280(%rbp)	# tmp194, %sfp
 14698      FEFFFF
 14699              	.LEHB67:
 14700 0073 E8000000 		call	_ZN3c106detail13if_empty_thenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_	#
 14700      00
 14701              	.LVL783:
 14702              	.LEHE67:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14703              		.loc 35 10 7 view .LVU2965
 14704 0078 488D1D00 		leaq	.LC40(%rip), %rbx	#, tmp143
 14704      000000
 14705 007f 488D0500 		leaq	.LC41(%rip), %rax	#, tmp142
 14705      000000
 14706              	.LBB8710:
 14707              	.LBB8711:
 14708              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:163:   using Error::Error;
 163:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 14709              		.loc 1 163 16 view .LVU2966
 14710 0086 4C89FF   		movq	%r15, %rdi	# _72,
 14711 0089 C78520FF 		movl	$10, -224(%rbp)	#, MEM[(struct SourceLocation *)&D.447110 + 16B]
 14711      FFFF0A00 
 14711      0000
 14712              	.LVL784:
 163:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 14713              		.loc 1 163 16 view .LVU2967
 14714              	.LBE8711:
 14715              	.LBI8710:
 163:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 14716              		.loc 1 163 16 is_stmt 1 view .LVU2968
 14717 0093 C4E1F96E 		vmovq	%rbx, %xmm0	# tmp143, tmp143
 14717      C3
 14718              	.LBB8712:
 14719 0098 488BB5E8 		movq	-280(%rbp), %rsi	# %sfp,
 14719      FEFFFF
 14720 009f C4E3F922 		vpinsrq	$1, %rax, %xmm0, %xmm0	# tmp142, tmp143, tmp141
 14720      C001
 14721 00a5 50       		pushq	%rax	#
 14722 00a6 C5F82985 		vmovaps	%xmm0, -240(%rbp)	# tmp141, MEM[(struct SourceLocation *)&D.447110]
 14722      10FFFFFF 
 14723 00ae FFB520FF 		pushq	-224(%rbp)	# D.447110
 14723      FFFF
 14724 00b4 FFB518FF 		pushq	-232(%rbp)	# D.447110
 14724      FFFF
 14725 00ba FFB510FF 		pushq	-240(%rbp)	# D.447110
 14725      FFFF
 14726              	.LEHB68:
 14727              		.cfi_escape 0x2e,0x20
 14728 00c0 E8000000 		call	_ZN3c105ErrorC2ENS_14SourceLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@PLT	
 14728      00
 14729              	.LVL785:
 14730              	.LEHE68:
 14731 00c5 488D0500 		leaq	16+_ZTVN3c1010IndexErrorE(%rip), %rax	#, tmp214
 14731      000000
 14732              	.LBE8712:
 14733              	.LBE8710:
 14734              	.LBB8714:
 14735              	.LBB8715:
 14736              	.LBB8716:
 14737              	.LBB8717:
 14738              	.LBB8718:
 14739              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 14740              		.loc 2 222 26 is_stmt 0 view .LVU2969
 14741 00cc 488BBD50 		movq	-176(%rbp), %rdi	# MEM[(char * *)&D.447118], _74
 14741      FFFFFF
 14742              	.LBE8718:
 14743              	.LBE8717:
 14744              	.LBE8716:
 14745              	.LBE8715:
 14746              	.LBE8714:
 14747              	.LBB8732:
 14748              	.LBB8713:
 14749              	# /workspace/pth-linear-interp/torch/include/c10/util/Exception.h:163:   using Error::Error;
 163:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 14750              		.loc 1 163 16 view .LVU2970
 14751 00d3 4883C420 		addq	$32, %rsp	#,
 14752 00d7 498907   		movq	%rax, (%r15)	# tmp214, MEM[(struct IndexError *)_72].D.55619.D.55460._vptr.exception
 14753              	.LVL786:
 163:/workspace/pth-linear-interp/torch/include/c10/util/Exception.h **** };
 14754              		.loc 1 163 16 view .LVU2971
 14755              	.LBE8713:
 14756              	.LBE8732:
 14757              	.LBB8733:
 14758              	.LBI8714:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 14759              		.loc 2 657 7 is_stmt 1 view .LVU2972
 14760              	.LBB8728:
 14761              	.LBI8715:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 14762              		.loc 2 229 7 view .LVU2973
 14763              	.LBB8727:
 14764              	.LBB8721:
 14765              	.LBI8717:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 14766              		.loc 2 221 7 view .LVU2974
 14767              	.LBB8720:
 14768              	.LBB8719:
 14769              	.LBI8719:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 14770              		.loc 2 200 7 view .LVU2975
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 14771              		.loc 2 200 7 is_stmt 0 view .LVU2976
 14772              	.LBE8719:
 14773              	.LBE8720:
 14774              	.LBE8721:
 14775              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 14776              		.loc 2 231 2 view .LVU2977
 14777 00da 488D8560 		leaq	-160(%rbp), %rax	#, tmp147
 14777      FFFFFF
 14778 00e1 4839C7   		cmpq	%rax, %rdi	# tmp147, _74
 14779 00e4 7405     		je	.L424	#,
 14780              	.LVL787:
 14781              	.LBB8722:
 14782              	.LBI8722:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 14783              		.loc 2 236 7 is_stmt 1 view .LVU2978
 14784              	.LBB8723:
 14785              	.LBB8724:
 14786              	.LBI8724:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 14787              		.loc 3 469 7 view .LVU2979
 14788              	.LBB8725:
 14789              	.LBI8725:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 14790              		.loc 4 119 7 view .LVU2980
 14791              	.LBB8726:
 14792              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 14793              		.loc 4 128 19 is_stmt 0 view .LVU2981
 14794 00e6 E8000000 		call	_ZdlPv@PLT	#
 14794      00
 14795              	.LVL788:
 14796              	.L424:
 14797              		.loc 4 128 19 view .LVU2982
 14798              	.LBE8726:
 14799              	.LBE8725:
 14800              	.LBE8724:
 14801              	.LBE8723:
 14802              	.LBE8722:
 14803              	.LBE8727:
 14804              	.LBE8728:
 14805              	.LBB8729:
 14806              	.LBI8729:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 14807              		.loc 2 150 14 is_stmt 1 view .LVU2983
 14808              	.LBB8730:
 14809              	.LBI8730:
 14810              		.loc 5 153 7 view .LVU2984
 14811              	.LBB8731:
 14812              	.LBI8731:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14813              		.loc 4 89 7 view .LVU2985
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14814              		.loc 4 89 7 is_stmt 0 view .LVU2986
 14815              	.LBE8731:
 14816              	.LBE8730:
 14817              	.LBE8729:
 14818              	.LBE8733:
 14819              	.LBB8734:
 14820              	.LBI8734:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 14821              		.loc 2 657 7 is_stmt 1 view .LVU2987
 14822              	.LBB8735:
 14823              	.LBI8735:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 14824              		.loc 2 229 7 view .LVU2988
 14825              	.LBB8736:
 14826              	.LBB8737:
 14827              	.LBI8737:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 14828              		.loc 2 221 7 view .LVU2989
 14829              	.LBB8738:
 14830              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 14831              		.loc 2 222 26 is_stmt 0 view .LVU2990
 14832 00eb 488B7D90 		movq	-112(%rbp), %rdi	# MEM[(char * *)&D.447120], _75
 14833              	.LVL789:
 14834              	.LBB8739:
 14835              	.LBI8739:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 14836              		.loc 2 200 7 is_stmt 1 view .LVU2991
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 14837              		.loc 2 200 7 is_stmt 0 view .LVU2992
 14838              	.LBE8739:
 14839              	.LBE8738:
 14840              	.LBE8737:
 14841              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 14842              		.loc 2 231 2 view .LVU2993
 14843 00ef 488D45A0 		leaq	-96(%rbp), %rax	#, tmp149
 14844 00f3 4839C7   		cmpq	%rax, %rdi	# tmp149, _75
 14845 00f6 7405     		je	.L425	#,
 14846              	.LVL790:
 14847              	.LBB8740:
 14848              	.LBI8740:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 14849              		.loc 2 236 7 is_stmt 1 view .LVU2994
 14850              	.LBB8741:
 14851              	.LBB8742:
 14852              	.LBI8742:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 14853              		.loc 3 469 7 view .LVU2995
 14854              	.LBB8743:
 14855              	.LBI8743:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 14856              		.loc 4 119 7 view .LVU2996
 14857              	.LBB8744:
 14858              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 14859              		.loc 4 128 19 is_stmt 0 view .LVU2997
 14860 00f8 E8000000 		call	_ZdlPv@PLT	#
 14860      00
 14861              	.LVL791:
 14862              	.L425:
 14863              		.loc 4 128 19 view .LVU2998
 14864              	.LBE8744:
 14865              	.LBE8743:
 14866              	.LBE8742:
 14867              	.LBE8741:
 14868              	.LBE8740:
 14869              	.LBE8736:
 14870              	.LBE8735:
 14871              	.LBB8745:
 14872              	.LBI8745:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 14873              		.loc 2 150 14 is_stmt 1 view .LVU2999
 14874              	.LBB8746:
 14875              	.LBI8746:
 14876              		.loc 5 153 7 view .LVU3000
 14877              	.LBB8747:
 14878              	.LBI8747:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14879              		.loc 4 89 7 view .LVU3001
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14880              		.loc 4 89 7 is_stmt 0 view .LVU3002
 14881              	.LBE8747:
 14882              	.LBE8746:
 14883              	.LBE8745:
 14884              	.LBE8734:
 14885              	.LBB8748:
 14886              	.LBI8748:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 14887              		.loc 2 657 7 is_stmt 1 view .LVU3003
 14888              	.LBB8749:
 14889              	.LBI8749:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 14890              		.loc 2 229 7 view .LVU3004
 14891              	.LBB8750:
 14892              	.LBB8751:
 14893              	.LBI8751:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 14894              		.loc 2 221 7 view .LVU3005
 14895              	.LBB8752:
 14896              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 14897              		.loc 2 222 26 is_stmt 0 view .LVU3006
 14898 00fd 488BBD70 		movq	-144(%rbp), %rdi	# MEM[(char * *)&D.447119], _76
 14898      FFFFFF
 14899              	.LVL792:
 14900              	.LBB8753:
 14901              	.LBI8753:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 14902              		.loc 2 200 7 is_stmt 1 view .LVU3007
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 14903              		.loc 2 200 7 is_stmt 0 view .LVU3008
 14904              	.LBE8753:
 14905              	.LBE8752:
 14906              	.LBE8751:
 14907              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 14908              		.loc 2 231 2 view .LVU3009
 14909 0104 488D4580 		leaq	-128(%rbp), %rax	#, tmp151
 14910 0108 4839C7   		cmpq	%rax, %rdi	# tmp151, _76
 14911 010b 7405     		je	.L426	#,
 14912              	.LVL793:
 14913              	.LBB8754:
 14914              	.LBI8754:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 14915              		.loc 2 236 7 is_stmt 1 view .LVU3010
 14916              	.LBB8755:
 14917              	.LBB8756:
 14918              	.LBI8756:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 14919              		.loc 3 469 7 view .LVU3011
 14920              	.LBB8757:
 14921              	.LBI8757:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 14922              		.loc 4 119 7 view .LVU3012
 14923              	.LBB8758:
 14924              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 14925              		.loc 4 128 19 is_stmt 0 view .LVU3013
 14926 010d E8000000 		call	_ZdlPv@PLT	#
 14926      00
 14927              	.LVL794:
 14928              	.L426:
 14929              		.loc 4 128 19 view .LVU3014
 14930              	.LBE8758:
 14931              	.LBE8757:
 14932              	.LBE8756:
 14933              	.LBE8755:
 14934              	.LBE8754:
 14935              	.LBE8750:
 14936              	.LBE8749:
 14937              	.LBB8759:
 14938              	.LBI8759:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 14939              		.loc 2 150 14 is_stmt 1 view .LVU3015
 14940              	.LBB8760:
 14941              	.LBI8760:
 14942              		.loc 5 153 7 view .LVU3016
 14943              	.LBB8761:
 14944              	.LBI8761:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14945              		.loc 4 89 7 view .LVU3017
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14946              		.loc 4 89 7 is_stmt 0 view .LVU3018
 14947              	.LBE8761:
 14948              	.LBE8760:
 14949              	.LBE8759:
 14950              	.LBE8748:
 14951              	.LBB8762:
 14952              	.LBI8762:
 14953              		.loc 5 153 7 is_stmt 1 view .LVU3019
 14954              	.LBB8763:
 14955              	.LBI8763:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14956              		.loc 4 89 7 view .LVU3020
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 14957              		.loc 4 89 7 is_stmt 0 view .LVU3021
 14958              	.LBE8763:
 14959              	.LBE8762:
 14960              	# /workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h:10:       TORCH_CHECK_INDEX(
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14961              		.loc 35 10 7 view .LVU3022
 14962 0112 488D1500 		leaq	_ZN3c1010IndexErrorD1Ev(%rip), %rdx	#,
 14962      000000
 14963 0119 488D3500 		leaq	_ZTIN3c1010IndexErrorE(%rip), %rsi	#,
 14963      000000
 14964 0120 4C89FF   		movq	%r15, %rdi	# _72,
 14965              	.LEHB69:
 14966              		.cfi_escape 0x2e,0
 14967 0123 E8000000 		call	__cxa_throw@PLT	#
 14967      00
 14968              	.LVL795:
 14969              	.LEHE69:
 14970              	.L439:
 14971 0128 F30F1EFA 		endbr64	
 14972              	.LVL796:
 14973              	.L445:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14974              		.loc 35 10 7 view .LVU3023
 14975 012c 4889C3   		movq	%rax, %rbx	# tmp206, tmp168
 14976 012f C5F877   		vzeroupper
 14977              	.L435:
 14978              	.LVL797:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 14979              		.loc 35 10 7 view .LVU3024
 14980              	.LBE8812:
 14981              	.LBE8816:
 14982              	.LBE8819:
 14983              	.LBE8833:
 14984              	.LBB8834:
 14985              	.LBI8834:
  87:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****  public:
 14986              		.loc 34 87 17 is_stmt 1 view .LVU3025
 14987              	.LBB8835:
 14988              	.LBB8836:
 14989              	.LBI8836:
 313:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     reset_();
 14990              		.loc 28 313 3 view .LVU3026
 14991              	.LBB8837:
 14992              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:314:     reset_();
 14993              		.loc 28 314 5 is_stmt 0 view .LVU3027
 14994 0132 4C89EF   		movq	%r13, %rdi	# tmp193,
 14995 0135 4989DD   		movq	%rbx, %r13	# tmp168, tmp176
 14996              	.LVL798:
 14997              		.loc 28 314 5 view .LVU3028
 14998 0138 E8000000 		call	_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev	#
 14998      00
 14999              	.LVL799:
 15000              	.L436:
 15001              		.loc 28 314 5 view .LVU3029
 15002              	.LBE8837:
 15003              	.LBE8836:
 15004              	.LBE8835:
 15005              	.LBE8834:
 15006              	.LBB8838:
 15007              	.LBI8838:
  87:/workspace/pth-linear-interp/torch/include/ATen/core/TensorBody.h ****  public:
 15008              		.loc 34 87 17 is_stmt 1 view .LVU3030
 15009              	.LBB8839:
 15010              	.LBI8839:
 313:/workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h ****     reset_();
 15011              		.loc 28 313 3 view .LVU3031
 15012              	.LBB8840:
 15013              	# /workspace/pth-linear-interp/torch/include/c10/util/intrusive_ptr.h:314:     reset_();
 15014              		.loc 28 314 5 is_stmt 0 view .LVU3032
 15015 013d 4C89E7   		movq	%r12, %rdi	# tmp191,
 15016 0140 E8000000 		call	_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev	#
 15016      00
 15017              	.LVL800:
 15018              		.loc 28 314 5 view .LVU3033
 15019 0145 4C89EF   		movq	%r13, %rdi	# tmp176,
 15020              	.LEHB70:
 15021 0148 E8000000 		call	_Unwind_Resume@PLT	#
 15021      00
 15022              	.LVL801:
 15023              	.LEHE70:
 15024              	.L443:
 15025              		.loc 28 314 5 view .LVU3034
 15026 014d F30F1EFA 		endbr64	
 15027              	.LBE8840:
 15028              	.LBE8839:
 15029              	.LBE8838:
 15030              	.LBB8841:
 15031              	.LBB8820:
 15032              	.LBB8817:
 15033              	.LBB8813:
 15034              	.LBB8764:
 15035              	.LBB8765:
 15036              	.LBB8766:
 15037              	.LBB8767:
 15038              	.LBB8768:
 15039              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 15040              		.loc 2 222 26 view .LVU3035
 15041 0151 488BBD50 		movq	-176(%rbp), %rdi	# MEM[(char * *)&D.447118], _88
 15041      FFFFFF
 15042 0158 4889C3   		movq	%rax, %rbx	# tmp202, tmp157
 15043              	.LVL802:
 222:/usr/include/c++/9/bits/basic_string.h **** 
 15044              		.loc 2 222 26 view .LVU3036
 15045              	.LBE8768:
 15046              	.LBE8767:
 15047              	.LBE8766:
 15048              	.LBE8765:
 15049              	.LBI8764:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 15050              		.loc 2 657 7 is_stmt 1 view .LVU3037
 15051              	.LBB8778:
 15052              	.LBI8765:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 15053              		.loc 2 229 7 view .LVU3038
 15054              	.LBB8777:
 15055              	.LBB8771:
 15056              	.LBI8767:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 15057              		.loc 2 221 7 view .LVU3039
 15058              	.LBB8770:
 15059              	.LBB8769:
 15060              	.LBI8769:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 15061              		.loc 2 200 7 view .LVU3040
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 15062              		.loc 2 200 7 is_stmt 0 view .LVU3041
 15063              	.LBE8769:
 15064              	.LBE8770:
 15065              	.LBE8771:
 15066              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 15067              		.loc 2 231 2 view .LVU3042
 15068 015b 488D8560 		leaq	-160(%rbp), %rax	#, tmp155
 15068      FFFFFF
 15069 0162 4839C7   		cmpq	%rax, %rdi	# tmp155, _88
 15070 0165 7445     		je	.L448	#,
 15071              	.LVL803:
 15072              	.LBB8772:
 15073              	.LBI8772:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 15074              		.loc 2 236 7 is_stmt 1 view .LVU3043
 15075              	.LBB8773:
 15076              	.LBB8774:
 15077              	.LBI8774:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 15078              		.loc 3 469 7 view .LVU3044
 15079              	.LBB8775:
 15080              	.LBI8775:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 15081              		.loc 4 119 7 view .LVU3045
 15082              	.LBB8776:
 15083              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 15084              		.loc 4 128 19 is_stmt 0 view .LVU3046
 15085 0167 C5F877   		vzeroupper
 15086 016a E8000000 		call	_ZdlPv@PLT	#
 15086      00
 15087              	.LVL804:
 15088              		.loc 4 128 19 view .LVU3047
 15089              	.LBE8776:
 15090              	.LBE8775:
 15091              	.LBE8774:
 15092              	.LBE8773:
 15093              	.LBE8772:
 15094              	.LBE8777:
 15095              	.LBE8778:
 15096              	.LBB8779:
 15097              	.LBI8779:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 15098              		.loc 2 150 14 is_stmt 1 view .LVU3048
 15099              	.LBB8780:
 15100              	.LBI8780:
 15101              		.loc 5 153 7 view .LVU3049
 15102              	.LBB8781:
 15103              	.LBI8781:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15104              		.loc 4 89 7 view .LVU3050
 15105              	.L430:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15106              		.loc 4 89 7 is_stmt 0 view .LVU3051
 15107              	.LBE8781:
 15108              	.LBE8780:
 15109              	.LBE8779:
 15110              	.LBE8764:
 15111              	.LBB8782:
 15112              	.LBI8782:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 15113              		.loc 2 657 7 is_stmt 1 view .LVU3052
 15114              	.LBB8783:
 15115              	.LBI8783:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 15116              		.loc 2 229 7 view .LVU3053
 15117              	.LBB8784:
 15118              	.LBB8785:
 15119              	.LBI8785:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 15120              		.loc 2 221 7 view .LVU3054
 15121              	.LBB8786:
 15122              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 15123              		.loc 2 222 26 is_stmt 0 view .LVU3055
 15124 016f 488B7D90 		movq	-112(%rbp), %rdi	# MEM[(char * *)&D.447120], _89
 15125              	.LVL805:
 15126              	.LBB8787:
 15127              	.LBI8787:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 15128              		.loc 2 200 7 is_stmt 1 view .LVU3056
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 15129              		.loc 2 200 7 is_stmt 0 view .LVU3057
 15130              	.LBE8787:
 15131              	.LBE8786:
 15132              	.LBE8785:
 15133              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 15134              		.loc 2 231 2 view .LVU3058
 15135 0173 488D45A0 		leaq	-96(%rbp), %rax	#, tmp161
 15136 0177 4839C7   		cmpq	%rax, %rdi	# tmp161, _89
 15137 017a 7405     		je	.L432	#,
 15138              	.LVL806:
 15139              	.LBB8788:
 15140              	.LBI8788:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 15141              		.loc 2 236 7 is_stmt 1 view .LVU3059
 15142              	.LBB8789:
 15143              	.LBB8790:
 15144              	.LBI8790:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 15145              		.loc 3 469 7 view .LVU3060
 15146              	.LBB8791:
 15147              	.LBI8791:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 15148              		.loc 4 119 7 view .LVU3061
 15149              	.LBB8792:
 15150              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 15151              		.loc 4 128 19 is_stmt 0 view .LVU3062
 15152 017c E8000000 		call	_ZdlPv@PLT	#
 15152      00
 15153              	.LVL807:
 15154              		.loc 4 128 19 view .LVU3063
 15155              	.LBE8792:
 15156              	.LBE8791:
 15157              	.LBE8790:
 15158              	.LBE8789:
 15159              	.LBE8788:
 15160              	.LBE8784:
 15161              	.LBE8783:
 15162              	.LBB8793:
 15163              	.LBI8793:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 15164              		.loc 2 150 14 is_stmt 1 view .LVU3064
 15165              	.LBB8794:
 15166              	.LBI8794:
 15167              		.loc 5 153 7 view .LVU3065
 15168              	.LBB8795:
 15169              	.LBI8795:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15170              		.loc 4 89 7 view .LVU3066
 15171              	.L432:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15172              		.loc 4 89 7 is_stmt 0 view .LVU3067
 15173              	.LBE8795:
 15174              	.LBE8794:
 15175              	.LBE8793:
 15176              	.LBE8782:
 15177              	.LBB8796:
 15178              	.LBI8796:
 657:/usr/include/c++/9/bits/basic_string.h ****       { _M_dispose(); }
 15179              		.loc 2 657 7 is_stmt 1 view .LVU3068
 15180              	.LBB8797:
 15181              	.LBI8797:
 229:/usr/include/c++/9/bits/basic_string.h ****       {
 15182              		.loc 2 229 7 view .LVU3069
 15183              	.LBB8798:
 15184              	.LBB8799:
 15185              	.LBI8799:
 221:/usr/include/c++/9/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 15186              		.loc 2 221 7 view .LVU3070
 15187              	.LBB8800:
 15188              	# /usr/include/c++/9/bits/basic_string.h:222:       { return _M_data() == _M_local_data(); }
 222:/usr/include/c++/9/bits/basic_string.h **** 
 15189              		.loc 2 222 26 is_stmt 0 view .LVU3071
 15190 0181 488BBD70 		movq	-144(%rbp), %rdi	# MEM[(char * *)&D.447119], _90
 15190      FFFFFF
 15191              	.LVL808:
 15192              	.LBB8801:
 15193              	.LBI8801:
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 15194              		.loc 2 200 7 is_stmt 1 view .LVU3072
 200:/usr/include/c++/9/bits/basic_string.h ****       {
 15195              		.loc 2 200 7 is_stmt 0 view .LVU3073
 15196              	.LBE8801:
 15197              	.LBE8800:
 15198              	.LBE8799:
 15199              	# /usr/include/c++/9/bits/basic_string.h:231: 	if (!_M_is_local())
 231:/usr/include/c++/9/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 15200              		.loc 2 231 2 view .LVU3074
 15201 0188 488D4580 		leaq	-128(%rbp), %rax	#, tmp165
 15202 018c 4839C7   		cmpq	%rax, %rdi	# tmp165, _90
 15203 018f 7405     		je	.L434	#,
 15204              	.LVL809:
 15205              	.LBB8802:
 15206              	.LBI8802:
 236:/usr/include/c++/9/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 15207              		.loc 2 236 7 is_stmt 1 view .LVU3075
 15208              	.LBB8803:
 15209              	.LBB8804:
 15210              	.LBI8804:
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 15211              		.loc 3 469 7 view .LVU3076
 15212              	.LBB8805:
 15213              	.LBI8805:
 119:/usr/include/c++/9/ext/new_allocator.h ****       {
 15214              		.loc 4 119 7 view .LVU3077
 15215              	.LBB8806:
 15216              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 15217              		.loc 4 128 19 is_stmt 0 view .LVU3078
 15218 0191 E8000000 		call	_ZdlPv@PLT	#
 15218      00
 15219              	.LVL810:
 15220              		.loc 4 128 19 view .LVU3079
 15221              	.LBE8806:
 15222              	.LBE8805:
 15223              	.LBE8804:
 15224              	.LBE8803:
 15225              	.LBE8802:
 15226              	.LBE8798:
 15227              	.LBE8797:
 15228              	.LBB8807:
 15229              	.LBI8807:
 150:/usr/include/c++/9/bits/basic_string.h ****       {
 15230              		.loc 2 150 14 is_stmt 1 view .LVU3080
 15231              	.LBB8808:
 15232              	.LBI8808:
 15233              		.loc 5 153 7 view .LVU3081
 15234              	.LBB8809:
 15235              	.LBI8809:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15236              		.loc 4 89 7 view .LVU3082
 15237              	.L434:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15238              		.loc 4 89 7 is_stmt 0 view .LVU3083
 15239              	.LBE8809:
 15240              	.LBE8808:
 15241              	.LBE8807:
 15242              	.LBE8796:
 15243              	.LBB8810:
 15244              	.LBI8810:
 15245              		.loc 5 153 7 is_stmt 1 view .LVU3084
 15246              	.LBB8811:
 15247              	.LBI8811:
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15248              		.loc 4 89 7 view .LVU3085
  89:/usr/include/c++/9/ext/new_allocator.h **** 
 15249              		.loc 4 89 7 is_stmt 0 view .LVU3086
 15250              	.LBE8811:
 15251              	.LBE8810:
 15252              	# /workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h:10:       TORCH_CHECK_INDEX(
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 15253              		.loc 35 10 7 view .LVU3087
 15254 0196 4C89FF   		movq	%r15, %rdi	# _72,
 15255 0199 E8000000 		call	__cxa_free_exception@PLT	#
 15255      00
 15256              	.LVL811:
 15257 019e EB92     		jmp	.L435	#
 15258              	.L442:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 15259              		.loc 35 10 7 view .LVU3088
 15260 01a0 F30F1EFA 		endbr64	
 15261 01a4 4889C3   		movq	%rax, %rbx	# tmp203, tmp156
 15262 01a7 C5F877   		vzeroupper
 15263 01aa EBC3     		jmp	.L430	#
 15264              	.LVL812:
 15265              	.L448:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 15266              		.loc 35 10 7 view .LVU3089
 15267 01ac C5F877   		vzeroupper
 15268 01af EBBE     		jmp	.L430	#
 15269              	.LVL813:
 15270              	.L441:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 15271              		.loc 35 10 7 view .LVU3090
 15272 01b1 F30F1EFA 		endbr64	
 15273 01b5 4889C3   		movq	%rax, %rbx	# tmp204, tmp162
 15274 01b8 C5F877   		vzeroupper
 15275 01bb EBC4     		jmp	.L432	#
 15276              	.LVL814:
 15277              	.L440:
  10:/workspace/pth-linear-interp/torch/include/c10/core/WrapDimMinimal.h ****     }
 15278              		.loc 35 10 7 view .LVU3091
 15279 01bd F30F1EFA 		endbr64	
 15280 01c1 4889C3   		movq	%rax, %rbx	# tmp205, tmp166
 15281 01c4 C5F877   		vzeroupper
 15282 01c7 EBCD     		jmp	.L434	#
 15283              	.LBE8813:
 15284              	.LBE8817:
 15285              	.LBE8820:
 15286              	.LBE8841:
 15287              		.cfi_endproc
 15288              	.LFE11735:
 15289              		.section	.gcc_except_table
 15290              	.LLSDAC11735:
 15291 0014 FF       		.byte	0xff
 15292 0015 FF       		.byte	0xff
 15293 0016 01       		.byte	0x1
 15294 0017 20       		.uleb128 .LLSDACSEC11735-.LLSDACSBC11735
 15295              	.LLSDACSBC11735:
 15296 0018 1E       		.uleb128 .LEHB65-.LCOLDB42
 15297 0019 05       		.uleb128 .LEHE65-.LEHB65
 15298 001a BD03     		.uleb128 .L440-.LCOLDB42
 15299 001c 00       		.uleb128 0
 15300 001d 57       		.uleb128 .LEHB66-.LCOLDB42
 15301 001e 05       		.uleb128 .LEHE66-.LEHB66
 15302 001f B103     		.uleb128 .L441-.LCOLDB42
 15303 0021 00       		.uleb128 0
 15304 0022 73       		.uleb128 .LEHB67-.LCOLDB42
 15305 0023 05       		.uleb128 .LEHE67-.LEHB67
 15306 0024 A003     		.uleb128 .L442-.LCOLDB42
 15307 0026 00       		.uleb128 0
 15308 0027 C001     		.uleb128 .LEHB68-.LCOLDB42
 15309 0029 05       		.uleb128 .LEHE68-.LEHB68
 15310 002a CD02     		.uleb128 .L443-.LCOLDB42
 15311 002c 00       		.uleb128 0
 15312 002d A302     		.uleb128 .LEHB69-.LCOLDB42
 15313 002f 05       		.uleb128 .LEHE69-.LEHB69
 15314 0030 A802     		.uleb128 .L439-.LCOLDB42
 15315 0032 00       		.uleb128 0
 15316 0033 C802     		.uleb128 .LEHB70-.LCOLDB42
 15317 0035 05       		.uleb128 .LEHE70-.LEHB70
 15318 0036 00       		.uleb128 0
 15319 0037 00       		.uleb128 0
 15320              	.LLSDACSEC11735:
 15321              		.section	.text.unlikely
 15322              		.section	.text.startup
 15324              		.section	.text.unlikely
 15326              	.LCOLDE42:
 15327              		.section	.text.startup
 15328              	.LHOTE42:
 15329 0167 660F1F84 		.p2align 4
 15329      00000000 
 15329      00
 15331              	_GLOBAL__sub_I_main:
 15332              	.LFB19837:
 15333              		.loc 30 26 1 is_stmt 1 view -0
 15334              		.cfi_startproc
 15335 0170 F30F1EFA 		endbr64	
 15336              	.LVL815:
 15337              	.LBB8842:
 15338              	.LBI8842:
 15339              		.loc 30 26 1 view .LVU3093
 15340              	.LBE8842:
 15341 0174 4883EC08 		subq	$8, %rsp	#,
 15342              		.cfi_def_cfa_offset 16
 15343              	.LBB8845:
 15344              	.LBB8843:
 15345              	# /usr/include/c++/9/iostream:74:   static ios_base::Init __ioinit;
 15346              		.file 36 "/usr/include/c++/9/iostream"
   1:/usr/include/c++/9/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/9/iostream **** 
   3:/usr/include/c++/9/iostream **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/iostream **** //
   5:/usr/include/c++/9/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/iostream **** // any later version.
  10:/usr/include/c++/9/iostream **** 
  11:/usr/include/c++/9/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/9/iostream **** 
  16:/usr/include/c++/9/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/iostream **** 
  20:/usr/include/c++/9/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/iostream **** 
  25:/usr/include/c++/9/iostream **** /** @file include/iostream
  26:/usr/include/c++/9/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/9/iostream ****  */
  28:/usr/include/c++/9/iostream **** 
  29:/usr/include/c++/9/iostream **** //
  30:/usr/include/c++/9/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/9/iostream **** //
  32:/usr/include/c++/9/iostream **** 
  33:/usr/include/c++/9/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/9/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/9/iostream **** 
  36:/usr/include/c++/9/iostream **** #pragma GCC system_header
  37:/usr/include/c++/9/iostream **** 
  38:/usr/include/c++/9/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/9/iostream **** #include <ostream>
  40:/usr/include/c++/9/iostream **** #include <istream>
  41:/usr/include/c++/9/iostream **** 
  42:/usr/include/c++/9/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/9/iostream **** {
  44:/usr/include/c++/9/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/9/iostream **** 
  46:/usr/include/c++/9/iostream ****   /**
  47:/usr/include/c++/9/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/9/iostream ****    *
  49:/usr/include/c++/9/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/9/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/9/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/9/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/9/iostream ****    *
  54:/usr/include/c++/9/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/9/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/9/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/9/iostream ****    *  manual linked to above.
  58:/usr/include/c++/9/iostream ****   */
  59:/usr/include/c++/9/iostream ****   //@{
  60:/usr/include/c++/9/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/9/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/9/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/9/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/9/iostream **** 
  65:/usr/include/c++/9/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/9/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/9/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/9/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/9/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/9/iostream **** #endif
  71:/usr/include/c++/9/iostream ****   //@}
  72:/usr/include/c++/9/iostream **** 
  73:/usr/include/c++/9/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/9/iostream ****   static ios_base::Init __ioinit;
 15347              		.loc 36 74 25 is_stmt 0 view .LVU3094
 15348 0178 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi	#,
 15348      000000
 15349 017f E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT	#
 15349      00
 15350              	.LVL816:
 15351 0184 488B3D00 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rdi	#,
 15351      000000
 15352              	.LBE8843:
 15353              	.LBE8845:
 15354              	# main_pr.cpp:26: }
 15355              		.loc 30 26 1 view .LVU3095
 15356 018b 4883C408 		addq	$8, %rsp	#,
 15357              		.cfi_def_cfa_offset 8
 15358              	.LBB8846:
 15359              	.LBB8844:
 15360              	# /usr/include/c++/9/iostream:74:   static ios_base::Init __ioinit;
 15361              		.loc 36 74 25 view .LVU3096
 15362 018f 488D1500 		leaq	__dso_handle(%rip), %rdx	#,
 15362      000000
 15363 0196 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi	#,
 15363      000000
 15364 019d E9000000 		jmp	__cxa_atexit@PLT	#
 15364      00
 15365              	.LVL817:
 15366              	.LBE8844:
 15367              	.LBE8846:
 15368              		.cfi_endproc
 15369              	.LFE19837:
 15371              		.section	.init_array,"aw"
 15372              		.align 8
 15373 0000 00000000 		.quad	_GLOBAL__sub_I_main
 15373      00000000 
 15374              		.weak	_ZTSN3c105ErrorE
 15375              		.section	.rodata._ZTSN3c105ErrorE,"aG",@progbits,_ZTSN3c105ErrorE,comdat
 15376              		.align 8
 15379              	_ZTSN3c105ErrorE:
 15380 0000 4E336331 		.string	"N3c105ErrorE"
 15380      30354572 
 15380      726F7245 
 15380      00
 15381              		.weak	_ZTIN3c105ErrorE
 15382              		.section	.data.rel.ro._ZTIN3c105ErrorE,"awG",@progbits,_ZTIN3c105ErrorE,comdat
 15383              		.align 8
 15386              	_ZTIN3c105ErrorE:
 15387              	# <anonymous>:
 15388              	# <anonymous>:
 15389 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 15389      00000000 
 15390              	# <anonymous>:
 15391 0008 00000000 		.quad	_ZTSN3c105ErrorE
 15391      00000000 
 15392              	# <anonymous>:
 15393 0010 00000000 		.quad	_ZTISt9exception
 15393      00000000 
 15394              		.weak	_ZTSN3c1010IndexErrorE
 15395              		.section	.rodata._ZTSN3c1010IndexErrorE,"aG",@progbits,_ZTSN3c1010IndexErrorE,comdat
 15396              		.align 16
 15399              	_ZTSN3c1010IndexErrorE:
 15400 0000 4E336331 		.string	"N3c1010IndexErrorE"
 15400      30313049 
 15400      6E646578 
 15400      4572726F 
 15400      724500
 15401              		.weak	_ZTIN3c1010IndexErrorE
 15402              		.section	.data.rel.ro._ZTIN3c1010IndexErrorE,"awG",@progbits,_ZTIN3c1010IndexErrorE,comdat
 15403              		.align 8
 15406              	_ZTIN3c1010IndexErrorE:
 15407              	# <anonymous>:
 15408              	# <anonymous>:
 15409 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 15409      00000000 
 15410              	# <anonymous>:
 15411 0008 00000000 		.quad	_ZTSN3c1010IndexErrorE
 15411      00000000 
 15412              	# <anonymous>:
 15413 0010 00000000 		.quad	_ZTIN3c105ErrorE
 15413      00000000 
 15414              		.weak	_ZTVN3c105ErrorE
 15415              		.section	.data.rel.ro.local._ZTVN3c105ErrorE,"awG",@progbits,_ZTVN3c105ErrorE,comdat
 15416              		.align 8
 15419              	_ZTVN3c105ErrorE:
 15420 0000 00000000 		.quad	0
 15420      00000000 
 15421 0008 00000000 		.quad	_ZTIN3c105ErrorE
 15421      00000000 
 15422 0010 00000000 		.quad	_ZN3c105ErrorD1Ev
 15422      00000000 
 15423 0018 00000000 		.quad	_ZN3c105ErrorD0Ev
 15423      00000000 
 15424 0020 00000000 		.quad	_ZNK3c105Error4whatEv
 15424      00000000 
 15425              		.weak	_ZTVN3c1010IndexErrorE
 15426              		.section	.data.rel.ro.local._ZTVN3c1010IndexErrorE,"awG",@progbits,_ZTVN3c1010IndexErrorE,comdat
 15427              		.align 8
 15430              	_ZTVN3c1010IndexErrorE:
 15431 0000 00000000 		.quad	0
 15431      00000000 
 15432 0008 00000000 		.quad	_ZTIN3c1010IndexErrorE
 15432      00000000 
 15433 0010 00000000 		.quad	_ZN3c1010IndexErrorD1Ev
 15433      00000000 
 15434 0018 00000000 		.quad	_ZN3c1010IndexErrorD0Ev
 15434      00000000 
 15435 0020 00000000 		.quad	_ZNK3c105Error4whatEv
 15435      00000000 
 15436              		.local	_ZStL8__ioinit
 15437              		.comm	_ZStL8__ioinit,1,1
 15438              		.section	.data.rel.ro,"aw"
 15439              		.align 8
 15440              	.LC1:
 15441 0000 00000000 		.quad	_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE+24
 15441      00000000 
 15442              		.section	.rodata.cst32,"aM",@progbits,32
 15443              		.align 32
 15444              	.LC36:
 15445 0000 01000000 		.quad	1
 15445      00000000 
 15446 0008 03000000 		.quad	3
 15446      00000000 
 15447 0010 10000000 		.quad	16
 15447      00000000 
 15448 0018 40010000 		.quad	320
 15448      00000000 
 15449              		.section	.rodata.cst16,"aM",@progbits,16
 15450              		.align 16
 15451              	.LC37:
 15452 0000 08000000 		.quad	8
 15452      00000000 
 15453 0008 00010000 		.quad	256
 15453      00000000 
 15454              		.text
 15455              	.Letext0:
 15456              		.section	.text.unlikely
 15457              	.Letext_cold0:
 15458              		.file 37 "/usr/include/c++/9/cwchar"
 15459              		.file 38 "/usr/include/c++/9/new"
 15460              		.file 39 "/usr/include/c++/9/bits/exception_ptr.h"
 15461              		.file 40 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h"
 15462              		.file 41 "/usr/include/c++/9/type_traits"
 15463              		.file 42 "/usr/include/c++/9/bits/stl_pair.h"
 15464              		.file 43 "/usr/include/c++/9/bits/cpp_type_traits.h"
 15465              		.file 44 "/usr/include/c++/9/bits/stl_iterator_base_types.h"
 15466              		.file 45 "/usr/include/c++/9/debug/debug.h"
 15467              		.file 46 "/usr/include/c++/9/cstdint"
 15468              		.file 47 "/usr/include/c++/9/clocale"
 15469              		.file 48 "/usr/include/c++/9/cstdlib"
 15470              		.file 49 "/usr/include/c++/9/cstdio"
 15471              		.file 50 "/usr/include/c++/9/bits/stringfwd.h"
 15472              		.file 51 "/usr/include/c++/9/complex"
 15473              		.file 52 "/usr/include/c++/9/chrono"
 15474              		.file 53 "/usr/include/c++/9/system_error"
 15475              		.file 54 "/usr/include/c++/9/cwctype"
 15476              		.file 55 "/usr/include/c++/9/bits/ostream.tcc"
 15477              		.file 56 "/usr/include/c++/9/iosfwd"
 15478              		.file 57 "/usr/include/c++/9/bits/uses_allocator.h"
 15479              		.file 58 "/usr/include/c++/9/tuple"
 15480              		.file 59 "/usr/include/c++/9/bits/shared_ptr_base.h"
 15481              		.file 60 "/usr/include/c++/9/bits/std_function.h"
 15482              		.file 61 "/usr/include/c++/9/functional"
 15483              		.file 62 "/usr/include/c++/9/cstddef"
 15484              		.file 63 "/usr/include/c++/9/bits/stl_bvector.h"
 15485              		.file 64 "/usr/include/c++/9/bits/vector.tcc"
 15486              		.file 65 "/usr/include/c++/9/bits/hashtable_policy.h"
 15487              		.file 66 "/usr/include/c++/9/bits/unique_ptr.h"
 15488              		.file 67 "/usr/include/c++/9/cstring"
 15489              		.file 68 "/usr/include/c++/9/cmath"
 15490              		.file 69 "/usr/include/c++/9/atomic"
 15491              		.file 70 "/usr/include/c++/9/ctime"
 15492              		.file 71 "/usr/include/c++/9/ratio"
 15493              		.file 72 "/usr/include/c++/9/bits/std_mutex.h"
 15494              		.file 73 "/usr/include/c++/9/mutex"
 15495              		.file 74 "/usr/include/c++/9/cinttypes"
 15496              		.file 75 "/usr/include/c++/9/bits/postypes.h"
 15497              		.file 76 "/usr/include/c++/9/bits/shared_ptr.h"
 15498              		.file 77 "/usr/include/c++/9/condition_variable"
 15499              		.file 78 "/usr/include/c++/9/bits/unique_lock.h"
 15500              		.file 79 "/usr/include/c++/9/bits/stl_function.h"
 15501              		.file 80 "/usr/include/c++/9/bits/refwrap.h"
 15502              		.file 81 "/usr/include/c++/9/bits/ptr_traits.h"
 15503              		.file 82 "/usr/include/c++/9/bits/stl_uninitialized.h"
 15504              		.file 83 "/usr/include/c++/9/bits/stl_algo.h"
 15505              		.file 84 "/usr/include/c++/9/utility"
 15506              		.file 85 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h"
 15507              		.file 86 "/usr/include/c++/9/bits/basic_ios.tcc"
 15508              		.file 87 "/usr/include/c++/9/bits/stl_algobase.h"
 15509              		.file 88 "/usr/include/c++/9/bits/ostream_insert.h"
 15510              		.file 89 "/usr/include/c++/9/bits/functexcept.h"
 15511              		.file 90 "/usr/include/c++/9/bits/predefined_ops.h"
 15512              		.file 91 "/usr/include/c++/9/ext/numeric_traits.h"
 15513              		.file 92 "/usr/include/c++/9/ext/concurrence.h"
 15514              		.file 93 "/usr/include/c++/9/ext/type_traits.h"
 15515              		.file 94 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 15516              		.file 95 "<built-in>"
 15517              		.file 96 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 15518              		.file 97 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 15519              		.file 98 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 15520              		.file 99 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 15521              		.file 100 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 15522              		.file 101 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 15523              		.file 102 "/usr/include/wchar.h"
 15524              		.file 103 "/usr/include/x86_64-linux-gnu/bits/wchar2.h"
 15525              		.file 104 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 15526              		.file 105 "/usr/include/x86_64-linux-gnu/bits/types.h"
 15527              		.file 106 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 15528              		.file 107 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 15529              		.file 108 "/usr/include/stdint.h"
 15530              		.file 109 "/usr/include/locale.h"
 15531              		.file 110 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h"
 15532              		.file 111 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
 15533              		.file 112 "/usr/include/time.h"
 15534              		.file 113 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
 15535              		.file 114 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h"
 15536              		.file 115 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
 15537              		.file 116 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h"
 15538              		.file 117 "/usr/include/x86_64-linux-gnu/c++/9/bits/atomic_word.h"
 15539              		.file 118 "/usr/include/stdlib.h"
 15540              		.file 119 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h"
 15541              		.file 120 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h"
 15542              		.file 121 "/usr/include/x86_64-linux-gnu/bits/stdlib.h"
 15543              		.file 122 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h"
 15544              		.file 123 "/usr/include/stdio.h"
 15545              		.file 124 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 15546              		.file 125 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
 15547              		.file 126 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
 15548              		.file 127 "/usr/include/errno.h"
 15549              		.file 128 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 15550              		.file 129 "/usr/include/wctype.h"
 15551              		.file 130 "/workspace/pth-linear-interp/torch/include/c10/macros/Macros.h"
 15552              		.file 131 "/workspace/pth-linear-interp/torch/include/ATen/core/blob.h"
 15553              		.file 132 "/workspace/pth-linear-interp/torch/include/ATen/core/interned_strings.h"
 15554              		.file 133 "/workspace/pth-linear-interp/torch/include/c10/core/DeviceType.h"
 15555              		.file 134 "/workspace/pth-linear-interp/torch/include/c10/util/string_utils.h"
 15556              		.file 135 "/workspace/pth-linear-interp/torch/include/c10/util/UniqueVoidPtr.h"
 15557              		.file 136 "/workspace/pth-linear-interp/torch/include/ATen/core/Dict.h"
 15558              		.file 137 "/workspace/pth-linear-interp/torch/include/ATen/core/Dict_inl.h"
 15559              		.file 138 "/workspace/pth-linear-interp/torch/include/ATen/core/List.h"
 15560              		.file 139 "/workspace/pth-linear-interp/torch/include/c10/core/Allocator.h"
 15561              		.file 140 "/workspace/pth-linear-interp/torch/include/c10/util/C++17.h"
 15562              		.file 141 "/workspace/pth-linear-interp/torch/include/c10/util/TypeList.h"
 15563              		.file 142 "/workspace/pth-linear-interp/torch/include/c10/core/DispatchKey.h"
 15564              		.file 143 "/workspace/pth-linear-interp/torch/include/c10/core/DispatchKeySet.h"
 15565              		.file 144 "/workspace/pth-linear-interp/torch/include/c10/core/MemoryFormat.h"
 15566              		.file 145 "/workspace/pth-linear-interp/torch/include/c10/core/QScheme.h"
 15567              		.file 146 "/workspace/pth-linear-interp/torch/include/c10/core/Stream.h"
 15568              		.file 147 "/workspace/pth-linear-interp/torch/include/c10/util/complex.h"
 15569              		.file 148 "/workspace/pth-linear-interp/torch/include/c10/util/Half.h"
 15570              		.file 149 "/workspace/pth-linear-interp/torch/include/c10/util/BFloat16.h"
 15571              		.file 150 "/workspace/pth-linear-interp/torch/include/c10/util/in_place.h"
 15572              		.file 151 "/workspace/pth-linear-interp/torch/include/c10/core/impl/LocalDispatchKeySet.h"
 15573              		.file 152 "/workspace/pth-linear-interp/torch/include/c10/core/impl/SizesAndStrides.h"
 15574              		.file 153 "/workspace/pth-linear-interp/torch/include/c10/core/impl/DeviceGuardImplInterface.h"
 15575              		.file 154 "/workspace/pth-linear-interp/torch/include/ATen/core/op_registration/hacky_wrapper_for_
 15576              		.file 155 "/workspace/pth-linear-interp/torch/include/c10/core/Scalar.h"
 15577              		.file 156 "/workspace/pth-linear-interp/torch/include/c10/util/ConstexprCrc.h"
 15578              		.file 157 "/workspace/pth-linear-interp/torch/include/c10/util/TypeIndex.h"
 15579              		.file 158 "/workspace/pth-linear-interp/torch/include/c10/util/string_view.h"
 15580              		.file 159 "/workspace/pth-linear-interp/torch/include/c10/util/IdWrapper.h"
 15581              		.file 160 "/workspace/pth-linear-interp/torch/include/c10/core/StorageImpl.h"
 15582              		.file 161 "/workspace/pth-linear-interp/torch/include/c10/core/Storage.h"
 15583              		.file 162 "/workspace/pth-linear-interp/torch/include/c10/util/logging_is_not_google_glog.h"
 15584              		.file 163 "/workspace/pth-linear-interp/torch/include/c10/util/Logging.h"
 15585              		.file 164 "/workspace/pth-linear-interp/torch/include/c10/core/TensorImpl.h"
 15586              		.file 165 "/workspace/pth-linear-interp/torch/include/c10/core/GeneratorImpl.h"
 15587              		.file 166 "/workspace/pth-linear-interp/torch/include/ATen/core/List_inl.h"
 15588              		.file 167 "/workspace/pth-linear-interp/torch/include/c10/core/QEngine.h"
 15589              		.file 168 "/workspace/pth-linear-interp/torch/include/ATen/core/ivalue.h"
 15590              		.file 169 "/workspace/pth-linear-interp/torch/include/ATen/core/ivalue_inl.h"
 15591              		.file 170 "/workspace/pth-linear-interp/torch/include/ATen/core/rref_interface.h"
 15592              		.file 171 "/workspace/pth-linear-interp/torch/include/ATen/core/jit_type_base.h"
 15593              		.file 172 "/workspace/pth-linear-interp/torch/include/ATen/core/qualified_name.h"
 15594              		.file 173 "/workspace/pth-linear-interp/torch/include/ATen/core/jit_type.h"
 15595              		.file 174 "/workspace/pth-linear-interp/torch/include/ATen/core/DeprecatedTypePropertiesRegistry.h
 15596              		.file 175 "/workspace/pth-linear-interp/torch/include/ATen/core/Generator.h"
 15597              		.file 176 "/workspace/pth-linear-interp/torch/include/ATen/core/Dimname.h"
 15598              		.file 177 "/workspace/pth-linear-interp/torch/include/ATen/core/NamedTensor.h"
 15599              		.file 178 "/workspace/pth-linear-interp/torch/include/ATen/core/QuantizerBase.h"
 15600              		.file 179 "/workspace/pth-linear-interp/torch/include/ATen/core/MT19937RNGEngine.h"
 15601              		.file 180 "/workspace/pth-linear-interp/torch/include/ATen/detail/CUDAHooksInterface.h"
 15602              		.file 181 "/workspace/pth-linear-interp/torch/include/ATen/core/DimVector.h"
 15603              		.file 182 "/workspace/pth-linear-interp/torch/include/ATen/record_function.h"
 15604              		.file 183 "/workspace/pth-linear-interp/torch/include/ATen/core/Reduction.h"
 15605              		.file 184 "/workspace/pth-linear-interp/torch/include/ATen/TracerMode.h"
 15606              		.file 185 "/workspace/pth-linear-interp/torch/include/ATen/Functions.h"
 15607              		.file 186 "/workspace/pth-linear-interp/torch/include/ATen/TensorNames.h"
 15608              		.file 187 "/workspace/pth-linear-interp/torch/include/ATen/TensorIterator.h"
 15609              		.file 188 "/workspace/pth-linear-interp/torch/include/ATen/TensorIndexing.h"
 15610              		.file 189 "/workspace/pth-linear-interp/torch/include/ATen/NativeFunctions.h"
 15611              		.file 190 "/workspace/pth-linear-interp/torch/include/ATen/Parallel.h"
 15612              		.file 191 "/usr/include/string.h"
 15613              		.file 192 "/usr/include/math.h"
 15614              		.file 193 "/workspace/pth-linear-interp/torch/include/c10/util/llvmMathExtras.h"
 15615              		.file 194 "/usr/include/inttypes.h"
 15616              		.file 195 "/workspace/pth-linear-interp/torch/include/c10/util/flat_hash_map.h"
 15617              		.file 196 "/workspace/pth-linear-interp/torch/include/c10/util/python_stub.h"
 15618              		.file 197 "/workspace/pth-linear-interp/torch/include/c10/util/order_preserving_flat_hash_map.h"
 274921              		.align 8
 274924              	DW.ref.__gxx_personality_v0:
 274925 0000 00000000 		.quad	__gxx_personality_v0
 274925      00000000 
 274926              		.hidden	__dso_handle
 274927              		.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
 274928              		.section	.note.GNU-stack,"",@progbits
 274929              		.section	.note.gnu.property,"a"
 274930              		.align 8
 274931 0000 04000000 		.long	 1f - 0f
 274932 0004 10000000 		.long	 4f - 1f
 274933 0008 05000000 		.long	 5
 274934              	0:
 274935 000c 474E5500 		.string	 "GNU"
 274936              	1:
 274937              		.align 8
 274938 0010 020000C0 		.long	 0xc0000002
 274939 0014 04000000 		.long	 3f - 2f
 274940              	2:
 274941 0018 03000000 		.long	 0x3
 274942              	3:
 274943 001c 00000000 		.align 8
 274944              	4:
